To calculate the length of the shortest path between node '31' and '38', we can use the Breadth-First Search (BFS) algorithm, which is suitable for finding the shortest path in an unweighted graph.

Here is the step-by-step process:

1. **Graph Representation**: The graph is represented as an adjacency list.
2. **BFS Initialization**: Start from node '31' and explore all its neighbors level by level.
3. **Termination**: The algorithm terminates when node '38' is found.

Let's perform the BFS:

- Start at node '31'.
- Explore its neighbors: '7', '32', '55'.
- From '7', explore neighbors: '6', '8', '31'.
- From '32', explore neighbors: '8', '33', '56'.
- From '55', explore neighbors: '54', '56'.
- Continue this process until node '38' is found.

The shortest path from '31' to '38' is as follows:
- 31 → 7 → 8 → 32 → 33 → 34 → 35 → 36 → 37 → 38

The length of this path is 9 edges.

Here is the JSON response:

```json
{
  "answer": 9
}
```