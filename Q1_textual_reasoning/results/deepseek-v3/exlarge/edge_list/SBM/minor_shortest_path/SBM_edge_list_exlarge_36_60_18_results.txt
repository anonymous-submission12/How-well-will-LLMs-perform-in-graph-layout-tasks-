To calculate the shortest path between node '60' and '18', we can use a Breadth-First Search (BFS) algorithm, which is suitable for unweighted graphs. Here's how the BFS algorithm works in this context:

1. Start from node '60'.
2. Explore all its neighboring nodes.
3. From each of those nodes, explore their neighbors, and so on, until node '18' is reached.
4. The first time node '18' is reached, the path taken is the shortest path.

Let's simulate this process:

- Start at node '60'.
- From '60', we can go to nodes '64', '68', '71', and '73'.
- From '64', we can go to nodes '66', '68', '70', '73', and '75'.
- From '68', we can go to nodes '66', '69', and '76'.
- From '71', we can go to nodes '59', '74'.
- From '73', we can go to nodes '59', '74'.
- From '66', we can go to nodes '65', '68', '70', '76'.
- From '70', we can go to nodes '61', '62', '64', '66', '75'.
- From '75', we can go to nodes '6', '58', '63', '64', '70', '72', '74'.
- From '6', we can go to nodes '2', '3', '4', '5', '13', '15', '16', '19', '58', '75'.
- From '2', we can go to nodes '1', '4', '5', '6', '7', '8', '11', '13', '14', '17', '18', '19'.
- From '18', we can stop as we have reached the destination.

The path taken is: 60 → 64 → 66 → 70 → 75 → 6 → 2 → 18.

The length of this path is 7 edges.

Here is the JSON response:

```json
{
  "answer": 7
}
```