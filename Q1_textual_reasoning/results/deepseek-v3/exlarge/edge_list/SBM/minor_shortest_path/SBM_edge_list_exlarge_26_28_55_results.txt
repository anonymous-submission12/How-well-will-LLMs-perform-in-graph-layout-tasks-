To calculate the length of the shortest path between node '28' and '55', we can use a Breadth-First Search (BFS) algorithm, which is suitable for finding the shortest path in an unweighted graph.

Here is the step-by-step process:

1. **Start at node '28'**.
2. **Explore all neighboring nodes** level by level until node '55' is reached.
3. **Count the number of edges** traversed to reach node '55'.

Let's perform the BFS:

- **Level 0**: Start at node '28'.
- **Level 1**: Neighbors of '28' are '27' and '31'.
- **Level 2**: 
  - Neighbors of '27' are '13', '26', '30', '32', '33', '35'.
  - Neighbors of '31' are '28', '32', '37', '38'.
- **Level 3**: 
  - Neighbors of '13' are '16', '18', '19', '20', '25', '27', '30'.
  - Neighbors of '26' are '1', '27', '30', '32', '35', '37'.
  - Neighbors of '30' are '13', '26', '27', '32', '33', '34', '35', '36', '58'.
  - Neighbors of '32' are '26', '27', '28', '30', '31', '33', '34', '37'.
  - Neighbors of '33' are '27', '30', '32', '34', '36'.
  - Neighbors of '35' are '26', '27', '30', '32', '37'.
  - Neighbors of '37' are '26', '28', '31', '32', '35', '36'.
  - Neighbors of '38' are '31'.
- **Level 4**: 
  - Neighbors of '16' are '3', '13', '17', '20', '21', '23'.
  - Neighbors of '18' are '13', '14', '17', '21', '22', '23', '25'.
  - Neighbors of '19' are '13', '15', '17', '23', '24', '25'.
  - Neighbors of '20' are '13', '15', '16', '24'.
  - Neighbors of '25' are '13', '15', '17', '18', '19', '21', '22'.
  - Neighbors of '58' are '30', '52', '54', '55', '57', '61', '70'.
  
At this point, we find that node '58' is connected to node '55'. Therefore, the shortest path from '28' to '55' is:

- **28 → 27 → 30 → 58 → 55**

This path involves **4 edges**.

Here is the JSON response:

```json
{
  "answer": 4
}
```