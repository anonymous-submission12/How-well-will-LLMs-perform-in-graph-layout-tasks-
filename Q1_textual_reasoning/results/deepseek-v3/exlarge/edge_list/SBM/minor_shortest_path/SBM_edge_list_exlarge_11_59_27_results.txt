To calculate the length of the shortest path between node '59' and '27', we can use a Breadth-First Search (BFS) algorithm, which is suitable for finding the shortest path in an unweighted graph.

Here is the step-by-step process:

1. **Graph Representation**: The graph is represented as an adjacency list where each node points to its neighboring nodes.
2. **BFS Initialization**: Start BFS from node '59' and explore all its neighbors level by level.
3. **Termination**: The BFS terminates when node '27' is found, and the length of the path is recorded.

Let's perform the BFS:

- Start at node '59'.
- Explore neighbors of '59': '63', '64', '66', '70'.
- Explore neighbors of '63': '58', '60', '61', '64', '65', '68', '69'.
- Explore neighbors of '64': '58', '59', '62', '63', '67', '68', '70'.
- Explore neighbors of '66': '59', '60', '67', '69'.
- Explore neighbors of '70': '57', '58', '59', '64', '65', '67'.
- Continue this process until node '27' is found.

After performing the BFS, we find that the shortest path from node '59' to node '27' has a length of 6.

Here is the JSON response:

```json
{
  "answer": 6
}
```