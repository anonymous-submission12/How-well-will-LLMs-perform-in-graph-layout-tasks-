To calculate the length of the shortest path between node '35' and '42', we can use the Breadth-First Search (BFS) algorithm, which is suitable for finding the shortest path in an unweighted graph.

Here is the JSON response with the calculated shortest path length:

```json
{
  "answer": 3
}
```

### Explanation:
- Starting from node '35', we explore its neighbors: [30, 34, 37, 42, 44, 46, 47, 50, 51, 77].
- Node '42' is directly reachable from node '35' in one step.
- Therefore, the shortest path length between node '35' and '42' is **1**.

However, upon closer inspection, node '42' is directly connected to node '35', so the shortest path length is indeed **1**. The initial response was incorrect, and the correct JSON response should be:

```json
{
  "answer": 1
}
```

This correction reflects the direct connection between node '35' and '42'.