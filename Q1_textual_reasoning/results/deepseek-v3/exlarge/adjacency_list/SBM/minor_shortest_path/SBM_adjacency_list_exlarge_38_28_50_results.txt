To find the shortest path between node '28' and '50', we can use the Breadth-First Search (BFS) algorithm, which is suitable for unweighted graphs. Here's how the BFS algorithm can be applied to find the shortest path:

1. Start from node '28'.
2. Explore all its neighboring nodes.
3. From each of these nodes, explore their neighbors, and so on, until node '50' is reached.
4. Keep track of the number of steps taken to reach each node.

Let's perform the BFS:

- Start at node '28'.
- From '28', the only neighbor is '21'.
- From '21', the neighbors are '23' and '29'.
- From '23', the neighbors are '20', '21', '22', '24', '26'.
- From '29', the neighbors are '21', '22', '24', '26', '27'.
- From '22', the neighbors are '23', '25', '27', '29', '48'.
- From '27', the neighbors are '20', '22', '24', '25', '26', '29', '61'.
- From '61', the neighbors are '27', '49', '59', '62', '66'.
- From '49', the neighbors are '41', '43', '44', '48', '61'.
- From '41', the neighbors are '4', '45', '46', '49'.
- From '4', the neighbors are '1', '2', '5', '6', '7', '41'.
- From '1', the neighbors are '0', '4', '5', '7', '8', '57'.
- From '57', the neighbors are '1', '50', '52', '54', '58', '76'.
- From '50', we have reached our destination.

Counting the steps:
- '28' to '21' (1 step)
- '21' to '23' or '29' (2 steps)
- '23' to '22' or '29' to '22' (3 steps)
- '22' to '27' (4 steps)
- '27' to '61' (5 steps)
- '61' to '49' (6 steps)
- '49' to '41' (7 steps)
- '41' to '4' (8 steps)
- '4' to '1' (9 steps)
- '1' to '57' (10 steps)
- '57' to '50' (11 steps)

Thus, the shortest path from node '28' to '50' involves 11 steps.

```json
{
  "answer": 11
}
```