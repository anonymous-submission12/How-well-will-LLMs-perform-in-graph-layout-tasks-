To find the shortest path between node '27' and '77', we can use the Breadth-First Search (BFS) algorithm, which is suitable for unweighted graphs. Here's how the BFS algorithm works in this context:

1. Start from node '27'.
2. Explore all its neighboring nodes.
3. From each of these neighbors, explore their neighbors, and so on, until we reach node '77'.
4. Keep track of the number of steps taken to reach each node.

Let's perform the BFS step-by-step:

- Start at node '27'.
- From '27', we can go to nodes '24', '25', '26', and '28'.
- From '24', we can go to nodes '20', '23', '25', and '27'.
- From '25', we can go to nodes '24', '27', '28', and '43'.
- From '26', we can go to nodes '20', '21', '27', and '29'.
- From '28', we can go to nodes '21', '22', '25', '27', and '53'.
- From '43', we can go to nodes '25', '40', '41', '42', '44', and '48'.
- From '40', we can go to nodes '30', '43', and '46'.
- From '46', we can go to nodes '40', '41', '42', '44', '45', and '47'.
- From '47', we can go to nodes '44', '46', and '48'.
- From '48', we can go to nodes '41', '43', '47', and '49'.
- From '49', we can go to nodes '42', '44', '45', and '48'.
- From '44', we can go to nodes '43', '45', '46', '47', and '49'.
- From '45', we can go to nodes '32', '44', '46', and '49'.
- From '32', we can go to nodes '31', '33', '34', '35', '36', '45', and '60'.
- From '60', we can go to nodes '32', '62', '65', '67', '68', and '73'.
- From '73', we can go to nodes '60', '70', '71', '74', and '76'.
- From '74', we can go to nodes '7', '70', '72', '73', '76', and '77'.
- Finally, we reach node '77'.

Counting the steps, the shortest path from '27' to '77' involves 9 steps.

Here is the JSON response:

```json
{
  "answer": 9
}
```