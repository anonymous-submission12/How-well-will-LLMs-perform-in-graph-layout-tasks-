To find the shortest path between node '12' and '16', we can use the Breadth-First Search (BFS) algorithm, which is suitable for finding the shortest path in an unweighted graph. Here's how the BFS algorithm can be applied to the given adjacency list:

1. Start from node '12'.
2. Explore all its neighboring nodes.
3. From each of these nodes, explore their neighbors, and so on, until node '16' is reached.
4. Keep track of the number of steps taken to reach each node.

Let's perform the BFS:

- Start at node '12'.
- From '12', we can go to nodes: [1, 3, 5, 8, 11, 13, 22].
- From these nodes, we explore further:
  - From '1': [3, 4, 7, 8, 9, 12] (but '12' is already visited).
  - From '3': [0, 1, 4, 8, 9, 11, 12] (already visited).
  - From '5': [7, 8, 10, 12, 13] (already visited).
  - From '8': [1, 2, 3, 5, 6, 11, 12] (already visited).
  - From '11': [0, 3, 6, 8, 9, 12, 13, 72] (already visited).
  - From '13': [0, 5, 6, 9, 11, 12] (already visited).
  - From '22': [12, 16, 17, 20].

At this point, we reach node '16' from node '22'. The path taken is '12' -> '22' -> '16', which involves 2 steps.

Therefore, the length of the shortest path between node '12' and '16' is 2.

```json
{
  "answer": 2
}
```