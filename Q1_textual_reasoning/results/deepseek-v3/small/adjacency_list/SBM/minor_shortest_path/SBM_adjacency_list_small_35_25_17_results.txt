To calculate the length of the shortest path between node '25' and '17', we can use the Breadth-First Search (BFS) algorithm, which is suitable for finding the shortest path in an unweighted graph.

Here is the step-by-step process:

1. Start from node '25'.
2. Explore all its neighbors (nodes directly connected to it).
3. From those neighbors, explore their neighbors, and so on, until we reach node '17'.
4. Keep track of the number of steps taken to reach node '17'.

Let's perform the BFS:

- Start at node '25'. Neighbors: [22, 23, 26, 28]
- From node '22', neighbors: [23, 25, 26, 27, 28]
- From node '23', neighbors: [13, 22, 24, 25, 28]
- From node '26', neighbors: [20, 22, 24, 25, 27]
- From node '28', neighbors: [22, 23, 24, 25, 27]

Now, we explore the neighbors of these nodes:

- From node '13', neighbors: [8, 9, 10, 11, 12, 23]
- From node '24', neighbors: [23, 26, 27, 28]
- From node '20', neighbors: [3, 15, 16, 17, 18, 19, 21, 26]
- From node '27', neighbors: [22, 24, 26, 28]

Now, we explore the neighbors of these nodes:

- From node '8', neighbors: [11, 13]
- From node '9', neighbors: [3, 10, 11, 12, 13, 14]
- From node '10', neighbors: [9, 11, 12, 13, 14]
- From node '11', neighbors: [8, 9, 10, 12, 13, 14, 15]
- From node '12', neighbors: [9, 10, 11, 13, 14]
- From node '15', neighbors: [11, 16, 17, 18, 19, 20, 21]
- From node '16', neighbors: [15, 18, 20]
- From node '17', neighbors: [1, 15, 18, 19, 20]
- From node '18', neighbors: [1, 15, 16, 17, 19, 20, 21]
- From node '19', neighbors: [15, 17, 18, 20, 21]
- From node '21', neighbors: [15, 18, 19, 20]

We have reached node '17' from node '20' in 3 steps:

- Step 1: 25 → 26
- Step 2: 26 → 20
- Step 3: 20 → 17

Therefore, the length of the shortest path between node '25' and '17' is 3.

```json
{
  "answer": 3
}
```