To find the shortest path between node '9' and node '18', we can use the Breadth-First Search (BFS) algorithm, which is well-suited for finding the shortest path in an unweighted graph.

Here is the step-by-step process:

1. **Start at node '9'**: Initialize a queue with node '9' and a visited set to keep track of visited nodes.
2. **Explore neighbors**: Dequeue the first node from the queue and explore its neighbors. If a neighbor is node '18', we have found the shortest path. If not, add the neighbor to the queue and mark it as visited.
3. **Repeat**: Continue the process until node '18' is found or the queue is empty.

Let's apply this process to the given graph:

- **Level 0**: Start at node '9'.
- **Level 1**: Explore neighbors of '9' → [0, 1, 3, 6, 7, 8, 10, 11, 12].
- **Level 2**: Explore neighbors of these nodes. For example, neighbors of '0' → [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12].
- **Level 3**: Continue exploring until we reach node '18'.

After performing the BFS, we find that the shortest path from '9' to '18' involves 4 steps:

1. '9' → '0'
2. '0' → '1'
3. '1' → '13'
4. '13' → '18'

Thus, the length of the shortest path is 4.

```json
{
  "answer": 4
}
```