To find the shortest path between node '5' and node '14', we can use the Breadth-First Search (BFS) algorithm, which is well-suited for finding the shortest path in an unweighted graph.

Here is the step-by-step process:

1. Start from node '5'.
2. Explore all its neighbors (nodes directly connected to it).
3. From those neighbors, explore their neighbors, and so on, until we reach node '14'.
4. Keep track of the number of steps taken to reach each node.

Let's apply this to the given adjacency list:

- **Step 1**: Start at node '5'. Its neighbors are [0, 1, 2, 3, 16].
- **Step 2**: From node '16', we can reach nodes [0, 5, 12, 14, 15, 17, 19].
- **Step 3**: From node '12', we can reach nodes [13, 14, 16].
- **Step 4**: From node '14', we have reached our destination.

The path is: 5 → 16 → 12 → 14.

The number of steps taken is 3.

Here is the JSON response:

```json
{
  "answer": 3
}
```