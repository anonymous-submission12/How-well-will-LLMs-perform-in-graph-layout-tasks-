To calculate the length of the shortest path between node '12' and '2', we can use the Breadth-First Search (BFS) algorithm. BFS is suitable for finding the shortest path in an unweighted graph.

Here is the step-by-step process:

1. Start from node '12'.
2. Explore all its neighbors (nodes directly connected to '12').
3. From each neighbor, explore their neighbors, and so on, until we reach node '2'.
4. Keep track of the number of steps taken to reach node '2'.

Let's perform the BFS:

- Start at node '12'.
- Neighbors of '12': [11, 13, 14, 15, 16, 18, 19].
- Neighbors of '11': [12, 13, 14, 17, 18, 19, 20].
- Neighbors of '13': [11, 12, 14, 15, 17, 19, 20].
- Neighbors of '14': [11, 12, 13, 15, 16, 17, 18, 19, 20].
- Neighbors of '15': [12, 13, 14, 16, 18, 19].
- Neighbors of '16': [12, 14, 15, 17, 18, 19, 20].
- Neighbors of '18': [3, 11, 12, 14, 15, 16, 17, 19, 20].
- Neighbors of '19': [11, 12, 13, 14, 15, 16, 17, 18, 20].
- Neighbors of '20': [6, 9, 11, 13, 14, 16, 17, 18, 19].
- Neighbors of '3': [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 18].
- Neighbors of '0': [1, 2, 3, 4, 6, 7, 9, 10].
- Neighbors of '1': [0, 2, 3, 5, 8, 9, 10].
- Neighbors of '2': [0, 1, 3, 4, 5, 6, 7, 10].

We can see that node '2' is reachable from node '12' through the path: 12 → 18 → 3 → 2. This path has a length of 3.

Therefore, the length of the shortest path between node '12' and '2' is 3.

```json
{
  "answer": 3
}
```