To find the shortest path between node '14' and node '5', we can use the Breadth-First Search (BFS) algorithm, which is well-suited for finding the shortest path in an unweighted graph.

Here is the step-by-step process:

1. Start from node '14'.
2. Explore all its neighbors: [15, 16, 17, 18, 19, 20].
3. From these neighbors, explore their neighbors, and so on, until we reach node '5'.

Let's perform the BFS:

- **Level 0**: Node '14'.
- **Level 1**: Nodes '15', '16', '17', '18', '19', '20'.
- **Level 2**: From '16', we can reach node '1'.
- **Level 3**: From '1', we can reach node '5'.

So, the shortest path from '14' to '5' is: 14 → 16 → 1 → 5.

The length of this path is 3.

```json
{
  "answer": 3
}
```