To find the shortest path between node '8' and node '23', we can use the Breadth-First Search (BFS) algorithm, which is well-suited for finding the shortest path in an unweighted graph.

Here is the step-by-step process:

1. Start from node '8'.
2. Explore all its neighbors (nodes '6', '7', '9', '10').
3. From these neighbors, explore their neighbors, and so on, until we reach node '23'.

Let's perform the BFS:

- Level 0: [8]
- Level 1: [6, 7, 9, 10]
- Level 2: [11, 0, 1, 3, 2, 4, 5]
- Level 3: [15, 19]
- Level 4: [12, 13, 14, 16, 17, 18, 20, 21, 22]
- Level 5: [26]
- Level 6: [23]

The shortest path from node '8' to node '23' is 6 steps long.

Here is the JSON response:

```json
{
  "answer": 6
}
```