To find the shortest path between node '8' and node '4', we can use the Breadth-First Search (BFS) algorithm, which is suitable for finding the shortest path in an unweighted graph.

Here is the step-by-step process:

1. Start from node '8'.
2. Explore all its neighbors: [7, 9, 10, 11, 13].
3. From these neighbors, explore their neighbors, and so on, until we reach node '4'.

Let's perform the BFS:

- **Level 0**: Node '8'.
- **Level 1**: Nodes [7, 9, 10, 11, 13].
- **Level 2**: From node '7': [8, 9, 10, 11, 12, 13].
  From node '9': [7, 8, 10, 11, 12, 13].
  From node '10': [7, 8, 9, 11, 13].
  From node '11': [5, 7, 8, 9, 10, 12, 13, 18].
  From node '13': [7, 8, 9, 10, 11, 12].
- **Level 3**: From node '5': [0, 2, 3, 4, 6, 11].
  From node '18': [11, 14, 15, 16, 17, 19, 20].
- **Level 4**: From node '0': [2, 3, 4, 5, 6].
  From node '4': [0, 1, 5].

We find node '4' at **Level 4**.

Therefore, the shortest path from node '8' to node '4' has a length of 4.

```json
{
  "answer": 4
}
```