To calculate the length of the shortest path between node '11' and '20', we can use the Breadth-First Search (BFS) algorithm, which is suitable for finding the shortest path in an unweighted graph.

Here is the step-by-step process:

1. **Graph Representation**: Represent the graph using an adjacency list.
2. **BFS Initialization**: Start BFS from node '11'.
3. **BFS Execution**: Traverse the graph level by level until node '20' is found.
4. **Path Length**: The level at which node '20' is found is the length of the shortest path.

Let's execute this process:

### Adjacency List Representation
```python
adj_list = {
    0: [3, 4, 5, 6, 17],
    1: [2, 4, 7],
    2: [3, 4, 5, 6, 7],
    3: [4, 5, 6, 7],
    4: [5, 6, 7, 17],
    5: [6, 7],
    6: [7, 19],
    7: [],
    8: [9, 13, 15],
    9: [10, 12, 13, 14, 16],
    10: [11, 12, 13, 15],
    11: [12, 13, 14, 15],
    12: [13, 14],
    13: [14, 15],
    14: [15],
    15: [],
    16: [17, 18, 19, 20, 21, 22],
    17: [19, 20, 21, 22],
    18: [19, 22],
    19: [20],
    20: [21],
    21: [],
    22: []
}
```

### BFS Execution
- Start at node '11'.
- Level 1: Nodes [12, 13, 14, 15].
- Level 2: Nodes [10, 14, 15] (from node 12), [10, 14, 15] (from node 13), [15] (from node 14), [] (from node 15).
- Level 3: Nodes [9, 12, 13, 15] (from node 10), [15] (from node 14), [] (from node 15).
- Level 4: Nodes [8, 13, 14, 16] (from node 9), [12, 13, 14, 15] (from node 10), [15] (from node 14), [] (from node 15).
- Level 5: Nodes [13, 15] (from node 8), [17, 18, 19, 20, 21, 22] (from node 16).
- Level 6: Nodes [19, 20, 21, 22] (from node 17), [19, 22] (from node 18).
- Node '20' is found at level 6.

### Conclusion
The length of the shortest path between node '11' and '20' is **6**.

```json
{
    "answer": 6
}
```