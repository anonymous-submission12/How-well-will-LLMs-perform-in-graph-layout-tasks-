To find the shortest path between node '3' and node '11', we can use a Breadth-First Search (BFS) algorithm, which is well-suited for finding the shortest path in an unweighted graph.

Here is the step-by-step process:

1. **Graph Representation**: Represent the graph as an adjacency list.
2. **BFS Initialization**: Start BFS from node '3'.
3. **Exploration**: Explore all neighboring nodes level by level until node '11' is found.
4. **Path Length**: The level at which node '11' is found is the length of the shortest path.

Let's execute this process:

- **Adjacency List**:
  ```
  {
    0: [1, 3, 5, 6, 7, 19],
    1: [0, 2, 5, 6, 7, 21],
    2: [1, 3, 4, 6, 7, 15],
    3: [0, 2, 4, 5, 6, 7, 9],
    4: [2, 3, 5, 6, 7],
    5: [0, 1, 3, 4, 7],
    6: [0, 1, 2, 3, 4, 7],
    7: [0, 1, 2, 3, 4, 5, 6],
    8: [11, 12, 13, 14, 15],
    9: [3, 10, 11, 12, 13, 14],
    10: [9, 11, 12, 13, 14, 15],
    11: [8, 9, 10, 12, 13, 15],
    12: [8, 9, 10, 11, 13, 15],
    13: [8, 9, 10, 11, 12, 14],
    14: [8, 9, 10, 13, 21],
    15: [2, 8, 10, 11, 12],
    16: [17, 19, 20, 21, 22],
    17: [16, 21, 22],
    18: [20, 22],
    19: [0, 16, 21, 22],
    20: [16, 18, 21, 22],
    21: [1, 14, 16, 17, 19, 20, 22],
    22: [16, 17, 18, 19, 20, 21]
  }
  ```

- **BFS Execution**:
  - Start at node '3'.
  - Level 1: Explore nodes [0, 2, 4, 5, 6, 7, 9].
  - Level 2: From node '9', explore nodes [10, 11, 12, 13, 14].
  - Node '11' is found at level 2.

Therefore, the shortest path from node '3' to node '11' has a length of 2.

```json
{
  "answer": 2
}
```