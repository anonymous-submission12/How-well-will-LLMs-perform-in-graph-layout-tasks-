To calculate the length of the shortest path between node '15' and '19', we can use the Breadth-First Search (BFS) algorithm, which is suitable for finding the shortest path in an unweighted graph.

Here is the step-by-step process:

1. **Initialize**: Start from node '15'.
2. **Explore Neighbors**: From '15', explore all directly connected nodes: '4', '16', '17', '18', '19', '20'.
3. **Check for Target**: If '19' is found among the neighbors, the path length is 1.
4. **Continue**: If '19' is not found, continue to explore the neighbors of the neighbors, and so on, until '19' is found.

From the edge list, we can see that '15' is directly connected to '19'. Therefore, the shortest path length is 1.

Here is the JSON response:

```json
{
  "answer": 1
}
```