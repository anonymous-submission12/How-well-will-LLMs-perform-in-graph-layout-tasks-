To calculate the length of the shortest path between node '0' and node '18', we can use the Breadth-First Search (BFS) algorithm, which is well-suited for finding the shortest path in an unweighted graph.

Here is the step-by-step process:

1. **Initialize the BFS queue**: Start with node '0' and set its distance to 0.
2. **Explore neighbors**: For each node, explore its neighbors and update their distances if they haven't been visited yet.
3. **Continue until the target node is reached**: The process continues until node '18' is reached or all nodes have been explored.

Let's apply this to the given graph:

- Start at node '0' (distance = 0).
- Explore neighbors of '0': nodes '2', '3', '4', '12' (distance = 1).
- Explore neighbors of '2': nodes '3', '4', '5', '6' (distance = 2).
- Explore neighbors of '3': nodes '4', '5', '13', '18' (distance = 2).
- Explore neighbors of '4': nodes '5', '6' (distance = 2).
- Explore neighbors of '12': nodes '1', '8', '10', '11' (distance = 2).
- Explore neighbors of '5': nodes '9' (distance = 3).
- Explore neighbors of '6': nodes '7' (distance = 3).
- Explore neighbors of '13': nodes '7', '8', '9', '11', '18' (distance = 3).
- Explore neighbors of '18': node '18' is reached (distance = 3).

The shortest path from node '0' to node '18' has a length of 3.

```json
{
  "answer": 3
}
```