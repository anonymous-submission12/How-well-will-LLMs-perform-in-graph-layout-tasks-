To calculate the length of the shortest path between node '18' and '2', we can use the Breadth-First Search (BFS) algorithm, which is suitable for finding the shortest path in an unweighted graph.

Here is the step-by-step process:

1. **Graph Representation**: Represent the graph using an adjacency list.
2. **BFS Initialization**: Start BFS from node '18'.
3. **Exploration**: Explore all neighboring nodes level by level until node '2' is found.
4. **Path Length**: The level at which node '2' is found is the length of the shortest path.

Let's perform the BFS:

- Start at node '18'.
- Explore neighbors of '18': '11', '14', '15', '16', '17', '19', '20'.
- Explore neighbors of '11': '5', '7', '8', '9', '10', '12', '13', '18'.
- Explore neighbors of '5': '0', '2', '3', '4', '6', '11'.
- Node '2' is found at level 3.

Thus, the length of the shortest path between node '18' and '2' is 3.

```json
{
  "answer": 3
}
```