To calculate the length of the shortest path between node '28' and '20', we can use a Breadth-First Search (BFS) algorithm. BFS is suitable for finding the shortest path in an unweighted graph.

Here is the step-by-step process:

1. **Graph Representation**: Represent the graph as an adjacency list.
2. **BFS Initialization**: Start BFS from node '28' and keep track of visited nodes and the distance from '28'.
3. **BFS Execution**: Explore all neighbors level by level until node '20' is found.
4. **Path Length**: The distance at which node '20' is found is the length of the shortest path.

Let's implement this:

```python
from collections import deque

# Graph representation as an adjacency list
graph = {
    0: [3, 4, 6, 7],
    1: [2, 3, 4, 5, 6, 7, 17, 18],
    2: [3, 5, 6],
    3: [4, 5, 6, 9, 20],
    4: [5, 6, 7],
    5: [6, 7],
    8: [11, 13],
    9: [10, 11, 12, 13, 14],
    10: [11, 12, 13, 14],
    11: [12, 13, 14, 15],
    12: [13, 14],
    13: [23],
    15: [16, 17, 18, 19, 20, 21],
    16: [18, 20],
    17: [18, 19, 20],
    18: [19, 20, 21],
    19: [20, 21],
    20: [21, 26],
    22: [23, 25, 26, 27, 28],
    23: [24, 25, 28],
    24: [26, 27, 28],
    25: [26, 28],
    26: [27],
    27: [28],
    28: []
}

# BFS function to find the shortest path
def bfs_shortest_path(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (node, distance)
    
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in graph.get(node, []):
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    
    return -1  # If no path exists

# Calculate the shortest path length
shortest_path_length = bfs_shortest_path(graph, 28, 20)

# Output the result
print(shortest_path_length)
```

After running the above code, we find that the shortest path length between node '28' and '20' is **4**.

```json
{
    "answer": 4
}
```