To calculate the length of the shortest path between node '2' and '6', we can use the Breadth-First Search (BFS) algorithm, which is suitable for finding the shortest path in an unweighted graph.

Here is the step-by-step process:

1. **Graph Representation**: The graph is represented as an adjacency list.
2. **BFS Initialization**: Start from node '2' and explore all its neighbors level by level.
3. **Termination**: Stop when node '6' is reached.

Let's perform the BFS:

- **Level 0**: Start at node '2'.
- **Level 1**: Explore neighbors of '2' → nodes '1', '3', '8'.
- **Level 2**: Explore neighbors of '1' → nodes '0', '7'.
  Explore neighbors of '3' → nodes '4', '9'.
  Explore neighbors of '8' → nodes '7', '9', '14'.
- **Level 3**: Explore neighbors of '0' → nodes '6'.
  Explore neighbors of '7' → nodes '6', '13'.
  Explore neighbors of '4' → nodes '5', '10'.
  Explore neighbors of '9' → nodes '10', '15'.
  Explore neighbors of '14' → nodes '15', '20'.

At this point, we find node '6' in the neighbors of '0' and '7'. Therefore, the shortest path from '2' to '6' is of length 3.

Here is the JSON response:

```json
{
  "answer": 3
}
```