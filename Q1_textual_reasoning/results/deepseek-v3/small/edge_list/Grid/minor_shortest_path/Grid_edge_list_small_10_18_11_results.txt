To find the shortest path between node '18' and '11', we can use a Breadth-First Search (BFS) algorithm, which is suitable for unweighted graphs. Here's the step-by-step process:

1. **Graph Representation**: Represent the graph as an adjacency list.
2. **BFS Traversal**: Start from node '18' and explore all its neighbors level by level until node '11' is found.
3. **Path Length**: The number of levels traversed to reach node '11' is the length of the shortest path.

### Adjacency List Representation:
```python
{
    0: [1, 10],
    1: [0, 2, 11],
    2: [1, 3, 12],
    3: [2, 4, 13],
    4: [2, 5, 14],
    5: [4, 6, 15],
    6: [5, 7, 16],
    7: [6, 8, 17],
    8: [7, 9, 18],
    9: [8, 19],
    10: [0, 11, 20],
    11: [1, 10, 12, 21],
    12: [2, 11, 13, 22],
    13: [3, 12, 14, 23],
    14: [4, 13, 15, 24],
    15: [5, 14, 16, 25],
    16: [6, 15, 17, 26],
    17: [7, 16, 18, 27],
    18: [8, 17, 19, 28],
    19: [9, 18, 29],
    20: [10, 21],
    21: [11, 20, 22],
    22: [12, 21, 23],
    23: [13, 22, 24],
    24: [14, 23, 25],
    25: [15, 24, 26],
    26: [16, 25, 27],
    27: [17, 26, 28],
    28: [18, 27, 29],
    29: [19, 28]
}
```

### BFS Traversal:
- Start at node '18'.
- Explore neighbors: '8', '17', '19', '28'.
- Next level: '7', '16', '27', '9', '29'.
- Next level: '6', '15', '26', '19' (already visited), '28' (already visited).
- Next level: '5', '14', '25', '16' (already visited), '27' (already visited).
- Next level: '4', '13', '24', '15' (already visited), '26' (already visited).
- Next level: '3', '12', '23', '14' (already visited), '25' (already visited).
- Next level: '2', '11', '22', '13' (already visited), '24' (already visited).
- Node '11' is found at this level.

### Shortest Path Length:
The shortest path from node '18' to '11' is 7 edges long.

```json
{
    "answer": 7
}
```