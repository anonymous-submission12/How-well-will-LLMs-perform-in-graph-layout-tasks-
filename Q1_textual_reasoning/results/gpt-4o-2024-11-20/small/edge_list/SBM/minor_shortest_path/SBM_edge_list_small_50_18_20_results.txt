To calculate the shortest path between nodes '18' and '20', we can use a breadth-first search (BFS) algorithm since the graph is unweighted. Here's the solution:

1. Parse the edge list to construct the graph as an adjacency list.
2. Perform BFS starting from node '18' to find the shortest path to node '20'.

The graph data provided is:

```python
edge_list = [
    (0, 2), (0, 3), (0, 4), (0, 5), (1, 2), (1, 3), (1, 4), (1, 5), (1, 16),
    (2, 3), (2, 5), (2, 8), (3, 5), (3, 10), (4, 5), (6, 9), (6, 10), (7, 8),
    (7, 10), (8, 10), (9, 10), (11, 12), (11, 14), (12, 14), (12, 15), (12, 20),
    (13, 14), (13, 15), (14, 20), (16, 17), (16, 18), (16, 19), (16, 20),
    (17, 18), (18, 19), (18, 20), (19, 20)
]
```

### Solution:

The shortest path between node '18' and '20' is of length 1 because there is a direct edge between them: `(18, 20)`.

### JSON Response:

```json
{
  "answer": 1
}
```