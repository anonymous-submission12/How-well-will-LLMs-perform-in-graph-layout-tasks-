To calculate the shortest path between nodes `'36'` and `'1'` in this graph, we can use a breadth-first search (BFS) algorithm since the graph appears to be unweighted. Here's the calculation:

- Start from node `'36'`.
- Traverse through its neighbors, keeping track of distances.
- Stop once we reach node `'1'`.

The graph forms a tree-like structure. Node `'36'` is at depth `11` from node `'1'` (traversing from node `1` down to node `36` along one branch). Therefore, the shortest path length is `11`.

Here is the result in JSON format:

```json
{
  "answer": 11
}
```