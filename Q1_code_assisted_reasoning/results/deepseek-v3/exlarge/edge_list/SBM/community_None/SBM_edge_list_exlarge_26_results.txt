```python
import networkx as nx

# Create a graph from the edge list
edge_list = [(0, 1), (0, 3), (0, 12), (1, 2), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 26), (2, 5), (2, 8), (2, 9), (3, 5), (3, 6), (3, 9), (3, 12), (3, 16), (3, 17), (3, 46), (4, 6), (4, 8), (4, 10), (4, 11), (5, 8), (5, 10), (5, 11), (6, 9), (8, 55), (9, 12), (10, 11), (10, 12), (11, 12), (13, 16), (13, 18), (13, 19), (13, 20), (13, 25), (13, 27), (13, 30), (14, 18), (14, 22), (14, 23), (15, 19), (15, 20), (15, 21), (15, 23), (15, 25), (15, 73), (16, 17), (16, 20), (16, 21), (16, 23), (17, 18), (17, 19), (17, 23), (17, 25), (18, 21), (18, 22), (18, 23), (18, 25), (19, 23), (19, 24), (19, 25), (20, 24), (21, 22), (21, 23), (21, 25), (22, 24), (22, 25), (22, 59), (26, 27), (26, 30), (27, 28), (27, 30), (28, 31), (30, 58), (32, 26), (32, 27), (32, 28), (32, 30), (32, 31), (32, 33), (32, 34), (32, 37), (33, 27), (33, 30), (33, 34), (33, 36), (34, 29), (34, 30), (34, 35), (35, 26), (35, 27), (35, 30), (35, 37), (36, 30), (36, 37), (36, 38), (37, 26), (37, 28), (37, 31), (38, 31), (39, 42), (39, 46), (39, 49), (39, 50), (40, 41), (40, 43), (40, 46), (40, 47), (40, 49), (41, 43), (41, 44), (41, 46), (41, 49), (41, 50), (42, 43), (42, 44), (42, 45), (42, 50), (43, 44), (43, 48), (43, 62), (44, 45), (44, 48), (44, 49), (44, 52), (45, 46), (45, 47), (45, 48), (45, 49), (46, 47), (46, 49), (46, 50), (47, 49), (47, 53), (48, 49), (48, 50), (49, 50), (51, 59), (51, 61), (51, 62), (52, 57), (52, 58), (52, 59), (52, 61), (52, 62), (53, 59), (53, 60), (53, 61), (54, 56), (54, 58), (54, 59), (54, 60), (55, 58), (55, 59), (55, 60), (56, 57), (56, 59), (56, 60), (57, 58), (57, 59), (57, 60), (57, 61), (57, 73), (58, 61), (58, 70), (59, 60), (59, 61), (59, 62), (60, 62), (64, 67), (64, 73), (65, 66), (65, 67), (65, 71), (65, 72), (66, 67), (66, 70), (67, 70), (67, 72), (67, 73), (68, 71), (68, 72), (68, 73), (69, 70), (70, 63), (70, 73), (70, 74), (71, 63), (71, 74), (72, 73), (72, 74)]
G = nx.Graph()
G.add_edges_from(edge_list)

# Detect communities using the Girvan-Newman method
communities = list(nx.community.girvan_newman(G))

# The number of communities is the number of connected components in the final partition
num_communities = len(communities[-1])

print(num_communities)
```