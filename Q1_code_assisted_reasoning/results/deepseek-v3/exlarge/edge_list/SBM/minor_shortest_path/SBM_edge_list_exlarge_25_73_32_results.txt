```python
from collections import deque

def shortest_path_length(edges, start, end):
    graph = {}
    for u, v in edges:
        if u not in graph:
            graph[u] = []
        if v not in graph:
            graph[v] = []
        graph[u].append(v)
        graph[v].append(u)
    
    visited = set()
    queue = deque([(start, 0)])
    
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in graph[node]:
                queue.append((neighbor, distance + 1))
    
    return -1

edges = [(0, 1), (0, 2), (0, 7), (0, 9), (0, 12), (1, 5), (1, 9), (1, 10), (1, 12), (2, 3), (2, 4), (2, 12), (3, 5), (3, 6), (3, 7), (3, 8), (3, 10), (3, 11), (3, 12), (5, 7), (5, 11), (6, 7), (6, 8), (6, 10), (6, 11), (7, 10), (8, 9), (8, 11), (8, 62), (10, 11), (13, 14), (13, 17), (13, 19), (13, 21), (13, 22), (13, 23), (13, 24), (14, 19), (14, 21), (14, 23), (14, 24), (14, 25), (15, 18), (15, 22), (15, 24), (15, 25), (16, 75), (17, 24), (17, 32), (18, 23), (18, 65), (19, 21), (19, 23), (19, 24), (19, 25), (20, 21), (20, 22), (20, 24), (20, 25), (21, 23), (22, 51), (24, 25), (26, 27), (26, 28), (26, 31), (27, 28), (27, 29), (27, 30), (27, 31), (28, 29), (29, 30), (29, 31), (32, 26), (32, 27), (32, 28), (32, 29), (32, 34), (32, 36), (33, 26), (33, 28), (33, 29), (33, 30), (33, 34), (33, 36), (34, 26), (34, 27), (34, 31), (35, 28), (35, 30), (35, 31), (35, 37), (36, 26), (37, 27), (37, 29), (37, 30), (37, 38), (38, 26), (38, 28), (38, 30), (39, 42), (39, 43), (39, 44), (39, 45), (39, 46), (39, 48), (39, 50), (40, 43), (40, 44), (40, 48), (40, 50), (40, 51), (41, 43), (41, 45), (41, 49), (41, 50), (41, 51), (42, 44), (42, 46), (42, 51), (43, 44), (43, 46), (43, 47), (43, 48), (43, 51), (44, 45), (44, 46), (44, 49), (44, 50), (44, 51), (45, 46), (45, 48), (45, 51), (46, 47), (46, 49), (47, 50), (47, 51), (48, 74), (49, 51), (52, 53), (52, 56), (52, 58), (53, 54), (53, 56), (53, 57), (53, 58), (53, 59), (54, 56), (54, 58), (54, 60), (54, 63), (54, 66), (55, 58), (55, 59), (56, 57), (56, 61), (56, 63), (57, 58), (57, 59), (57, 62), (57, 63), (58, 59), (58, 60), (58, 62), (60, 61), (60, 62), (62, 64), (64, 68), (64, 69), (64, 71), (64, 72), (64, 73), (64, 74), (65, 68), (65, 69), (65, 70), (65, 72), (65, 75), (66, 67), (66, 68), (66, 69), (66, 71), (67, 71), (67, 74), (67, 75), (68, 75), (69, 74), (70, 71), (70, 73), (70, 74), (70, 75), (71, 72), (71, 75), (72, 74), (73, 75)]
start = 73
end = 32

print(shortest_path_length(edges, start, end))
```