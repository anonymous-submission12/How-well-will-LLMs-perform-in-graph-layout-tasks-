```python
from collections import deque

def shortest_path_length(edges, start, end):
    graph = {}
    for u, v in edges:
        if u not in graph:
            graph[u] = []
        if v not in graph:
            graph[v] = []
        graph[u].append(v)
        graph[v].append(u)
    
    visited = set()
    queue = deque([(start, 0)])
    
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in graph.get(node, []):
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    
    return -1

edges = [(0, 2), (0, 9), (0, 10), (0, 18), (1, 2), (1, 3), (1, 4), (1, 5), (1, 8), (1, 22), (1, 65), (2, 3), (2, 4), (2, 7), (2, 8), (2, 9), (2, 45), (3, 5), (3, 7), (3, 8), (4, 5), (4, 6), (4, 8), (4, 22), (4, 57), (5, 6), (5, 8), (5, 9), (6, 7), (6, 8), (6, 9), (7, 8), (7, 9), (11, 16), (11, 17), (12, 13), (12, 15), (12, 16), (12, 19), (12, 20), (13, 14), (13, 18), (13, 20), (14, 18), (14, 20), (15, 17), (15, 18), (15, 20), (16, 43), (16, 66), (18, 48), (18, 51), (19, 20), (21, 23), (21, 26), (21, 27), (21, 29), (21, 40), (22, 23), (22, 25), (22, 26), (22, 28), (22, 29), (22, 30), (23, 25), (23, 27), (23, 28), (24, 26), (24, 27), (25, 26), (25, 27), (25, 40), (26, 27), (26, 29), (27, 28), (27, 29), (29, 30), (32, 31), (32, 34), (32, 36), (32, 37), (32, 40), (33, 35), (33, 38), (33, 40), (34, 31), (34, 35), (34, 38), (35, 31), (35, 53), (35, 54), (36, 38), (36, 40), (38, 39), (38, 40), (39, 31), (41, 45), (41, 46), (41, 50), (42, 47), (42, 50), (43, 44), (43, 46), (43, 49), (44, 45), (45, 47), (45, 49), (46, 47), (47, 48), (47, 49), (47, 59), (48, 50), (51, 52), (51, 53), (51, 56), (51, 57), (51, 60), (52, 56), (52, 57), (52, 58), (52, 60), (53, 54), (53, 55), (54, 57), (54, 58), (55, 58), (55, 69), (56, 60), (57, 58), (57, 60), (59, 60), (62, 63), (64, 62), (64, 65), (64, 66), (64, 69), (65, 68), (66, 61), (66, 62), (66, 63), (66, 67), (66, 68), (67, 62), (67, 69), (68, 62), (68, 63), (70, 62)]
start_node = 26
end_node = 65

print(shortest_path_length(edges, start_node, end_node))
```