```python
from collections import deque

def shortest_path_length(edges, start, end):
    graph = {}
    for u, v in edges:
        if u not in graph:
            graph[u] = []
        if v not in graph:
            graph[v] = []
        graph[u].append(v)
        graph[v].append(u)
    
    visited = set()
    queue = deque([(start, 0)])
    
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in graph[node]:
                queue.append((neighbor, distance + 1))
    
    return -1

edges = [(0, 1), (0, 2), (0, 3), (0, 5), (0, 6), (0, 7), (0, 10), (0, 15), (0, 24), (0, 35), (0, 67), (1, 3), (1, 5), (1, 6), (1, 7), (1, 8), (1, 13), (1, 17), (1, 18), (2, 3), (2, 7), (2, 9), (2, 13), (2, 15), (2, 17), (2, 18), (3, 7), (3, 8), (3, 9), (3, 13), (3, 22), (3, 27), (3, 46), (4, 5), (4, 8), (4, 13), (4, 14), (4, 16), (5, 9), (5, 10), (5, 12), (5, 14), (6, 8), (6, 12), (6, 14), (6, 15), (6, 20), (6, 27), (7, 8), (7, 11), (7, 15), (7, 17), (7, 18), (8, 13), (8, 14), (9, 10), (9, 15), (9, 16), (9, 17), (9, 18), (10, 13), (10, 16), (10, 17), (11, 12), (11, 14), (12, 13), (12, 14), (12, 18), (13, 15), (13, 17), (14, 17), (14, 18), (15, 16), (15, 17), (16, 17), (16, 44), (17, 45), (18, 25), (19, 20), (19, 21), (19, 25), (19, 26), (19, 28), (19, 30), (19, 41), (20, 22), (20, 24), (20, 25), (20, 31), (20, 33), (20, 37), (21, 22), (21, 23), (21, 26), (21, 27), (21, 31), (21, 33), (21, 35), (21, 36), (21, 37), (22, 23), (22, 25), (22, 27), (22, 31), (22, 33), (22, 34), (22, 35), (22, 36), (23, 27), (23, 32), (24, 25), (24, 30), (24, 36), (25, 26), (25, 30), (25, 31), (25, 32), (25, 34), (25, 36), (26, 28), (26, 30), (26, 36), (27, 29), (27, 56), (28, 31), (28, 34), (28, 35), (29, 30), (29, 31), (29, 32), (29, 34), (30, 33), (30, 34), (30, 36), (30, 37), (30, 48), (31, 35), (31, 36), (31, 37), (32, 35), (32, 37), (33, 36), (34, 37), (36, 44), (38, 39), (38, 40), (38, 42), (38, 43), (38, 44), (38, 47), (38, 49), (38, 52), (38, 55), (39, 40), (39, 43), (39, 46), (39, 47), (39, 54), (40, 42), (40, 44), (40, 49), (40, 51), (41, 43), (41, 44), (41, 45), (41, 46), (41, 48), (41, 49), (41, 51), (42, 43), (42, 46), (42, 47), (42, 50), (42, 59), (43, 47), (43, 55), (44, 48), (44, 49), (44, 50), (44, 53), (44, 54), (45, 46), (45, 47), (45, 48), (45, 50), (45, 51), (45, 52), (45, 55), (46, 48), (46, 49), (46, 53), (47, 48), (47, 51), (48, 51), (48, 52), (48, 54), (49, 55), (50, 51), (50, 55), (51, 54), (52, 53), (52, 55), (53, 55), (54, 55), (56, 57), (56, 59), (56, 63), (57, 58), (57, 60), (57, 61), (58, 62), (59, 60), (59, 62), (60, 63), (62, 63), (64, 56), (64, 57), (64, 58), (64, 60), (64, 61), (64, 62), (64, 67), (64, 71), (64, 72), (65, 56), (65, 58), (65, 59), (65, 61), (65, 62), (65, 72), (65, 73), (66, 59), (66, 61), (66, 63), (66, 67), (66, 69), (66, 70), (66, 71), (66, 72), (67, 56), (67, 57), (67, 58), (67, 69), (67, 70), (67, 73), (68, 59), (68, 60), (68, 62), (68, 69), (68, 70), (68, 71), (69, 61), (69, 62), (69, 63), (69, 71), (69, 72), (69, 73), (70, 56), (70, 59), (70, 60), (70, 61), (70, 62), (71, 57), (71, 61), (71, 72), (72, 58), (72, 60), (72, 61), (72, 73), (73, 58), (73, 62), (73, 63)]

start_node = 11
end_node = 6

print(shortest_path_length(edges, start_node, end_node))
```