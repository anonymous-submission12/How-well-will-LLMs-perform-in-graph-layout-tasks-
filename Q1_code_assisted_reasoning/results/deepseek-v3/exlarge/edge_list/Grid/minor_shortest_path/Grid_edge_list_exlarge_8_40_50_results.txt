```python
from collections import deque

def shortest_path_length(edges, start, end):
    graph = {}
    for u, v in edges:
        if u not in graph:
            graph[u] = []
        if v not in graph:
            graph[v] = []
        graph[u].append(v)
        graph[v].append(u)
    
    visited = set()
    queue = deque([(start, 0)])
    
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in graph[node]:
                queue.append((neighbor, distance + 1))
    
    return -1

edges = [(0, 1), (0, 24), (1, 2), (1, 25), (2, 3), (2, 26), (3, 4), (3, 27), (4, 5), (4, 28), (5, 6), (5, 29), (6, 7), (6, 30), (7, 8), (7, 31), (8, 9), (8, 32), (9, 10), (9, 33), (10, 11), (10, 34), (11, 12), (11, 35), (12, 13), (12, 36), (13, 14), (13, 37), (14, 15), (14, 38), (15, 16), (15, 39), (16, 17), (16, 40), (17, 18), (17, 41), (18, 19), (18, 42), (19, 20), (19, 43), (20, 21), (20, 44), (21, 22), (21, 45), (22, 23), (22, 46), (23, 47), (24, 25), (24, 48), (25, 26), (25, 49), (26, 27), (26, 50), (27, 28), (27, 51), (28, 29), (28, 52), (29, 30), (29, 53), (30, 31), (30, 54), (31, 32), (31, 55), (32, 33), (32, 56), (33, 34), (33, 57), (34, 35), (34, 58), (35, 36), (35, 59), (36, 37), (36, 60), (37, 38), (37, 61), (38, 39), (38, 62), (39, 40), (39, 63), (40, 41), (40, 64), (41, 42), (41, 65), (42, 43), (42, 66), (43, 44), (43, 67), (44, 45), (44, 68), (45, 46), (45, 69), (46, 47), (46, 70), (47, 71), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71)]
start = 40
end = 50

print(shortest_path_length(edges, start, end))
```