```python
from collections import deque

def shortest_path_length(adj_list, start, end):
    if start == end:
        return 0
    visited = set()
    queue = deque([(start, 0)])
    while queue:
        node, dist = queue.popleft()
        if node == end:
            return dist
        if node not in visited:
            visited.add(node)
            for neighbor in adj_list.get(node, []):
                if neighbor not in visited:
                    queue.append((neighbor, dist + 1))
    return -1

adj_list = {0: [3, 5, 8, 11, 13, 15, 17, 24, 27, 29, 30, 36], 1: [4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 23, 24, 27, 28, 30], 2: [7, 11, 14, 15, 16, 17, 18, 19, 29, 30, 31, 34, 35], 3: [0, 5, 7, 8, 9, 13, 15, 16, 19, 21, 23, 33, 34], 4: [1, 5, 6, 11, 13, 15, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 34, 35, 36], 5: [0, 1, 3, 4, 7, 8, 9, 10, 11, 13, 16, 17, 18, 21, 23, 25, 26, 27, 29, 32, 34, 35, 54], 6: [4, 8, 10, 15, 18, 20, 23, 32, 35], 7: [1, 2, 3, 5, 10, 11, 14, 20, 21, 23, 24, 31, 33, 36], 8: [0, 1, 3, 5, 6, 9, 11, 14, 15, 17, 22, 26, 27, 33], 9: [1, 3, 5, 8, 11, 15, 16, 21, 25, 26, 28, 30, 34, 35, 59], 10: [1, 5, 6, 7, 11, 16, 17, 21, 24, 28, 29, 32, 35], 11: [0, 1, 2, 4, 5, 7, 8, 9, 10, 14, 15, 16, 18, 24, 31, 32, 33, 34], 12: [14, 17, 21, 22, 27, 33], 13: [0, 3, 4, 5, 14, 16, 21, 24, 26, 28, 29, 31, 34, 35], 14: [1, 2, 7, 8, 11, 12, 13, 15, 16, 23, 25, 31, 32, 33, 34, 35], 15: [0, 1, 2, 3, 4, 6, 8, 9, 11, 14, 19, 25, 26, 28, 29, 30, 31, 32, 33], 16: [2, 3, 4, 5, 9, 10, 11, 13, 14, 19, 20, 21, 23, 25, 27, 28, 29, 32, 33, 35], 17: [0, 1, 2, 5, 8, 10, 12, 20, 24, 25, 26, 27], 18: [1, 2, 5, 6, 11, 20, 21, 25, 27, 31, 32, 34], 19: [1, 2, 3, 15, 16, 22, 24, 25, 26], 20: [6, 7, 16, 17, 18, 22, 24, 26, 30, 31, 51], 21: [3, 4, 5, 7, 9, 10, 12, 13, 16, 18, 22, 25, 26, 30, 31, 32, 33, 36], 22: [4, 8, 12, 19, 20, 21, 24, 28, 31, 32, 33], 23: [1, 3, 4, 5, 6, 7, 14, 16, 24, 26, 27, 29, 31], 24: [0, 1, 4, 7, 10, 11, 13, 17, 19, 20, 22, 23, 27, 29, 36], 25: [4, 5, 9, 14, 15, 16, 17, 18, 19, 21, 26, 28, 29], 26: [4, 5, 8, 9, 13, 15, 17, 19, 20, 21, 23, 25, 29, 34, 36], 27: [0, 1, 4, 5, 8, 12, 16, 17, 18, 23, 24, 28, 30, 32, 33, 36], 28: [1, 4, 9, 10, 13, 15, 16, 22, 25, 27, 29, 32, 34, 36], 29: [0, 2, 4, 5, 10, 13, 15, 16, 23, 24, 25, 26, 28, 31, 32], 30: [0, 1, 2, 9, 15, 20, 21, 27, 32, 33, 35], 31: [2, 4, 7, 11, 13, 14, 15, 18, 20, 21, 22, 23, 29, 32, 35], 32: [5, 6, 10, 11, 14, 15, 16, 18, 21, 22, 27, 28, 29, 30, 31, 33, 36], 33: [3, 7, 8, 11, 12, 14, 15, 16, 21, 22, 27, 30, 32, 34, 35, 36], 34: [2, 3, 4, 5, 9, 11, 13, 14, 18, 26, 28, 33, 36], 35: [2, 4, 5, 6, 9, 10, 13, 14, 16, 30, 31, 33], 36: [0, 4, 7, 21, 24, 26, 27, 28, 32, 33, 34], 37: [40, 42, 44, 48, 49, 50, 53, 56, 59, 63], 38: [41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 61, 62, 63, 67, 72, 73], 39: [40, 42, 43, 45, 49, 50, 51, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68], 40: [37, 39, 42, 44, 54, 56, 58, 63, 64, 68, 71], 41: [38, 42, 43, 48, 55, 56, 57, 58, 60, 63, 65, 66, 69, 70], 42: [37, 38, 39, 40, 41, 43, 44, 45, 47, 52, 54, 57, 59, 61, 69, 70], 43: [38, 39, 41, 42, 48, 50, 51, 52, 55, 56, 62, 65, 67, 70, 72, 73], 44: [37, 38, 40, 42, 45, 46, 49, 51, 52, 53, 56, 57, 58, 61, 63, 67, 68], 45: [38, 39, 42, 44, 46, 48, 49, 50, 55, 56, 58, 61, 64, 66, 69, 70, 71], 46: [38, 44, 45, 47, 50, 51, 53, 56, 59, 60, 61, 62, 63, 65, 66, 68, 72], 47: [38, 42, 46, 48, 49, 50, 53, 54, 60, 61, 62, 63, 65, 67, 68, 70, 71], 48: [37, 38, 41, 43, 45, 47, 49, 50, 53, 57, 64, 69, 70, 71, 73], 49: [37, 39, 44, 45, 47, 48, 51, 53, 55, 58, 59, 63, 65, 66, 71, 72], 50: [37, 38, 39, 43, 45, 46, 47, 48, 51, 55, 62, 64, 69, 71], 51: [20, 38, 39, 43, 44, 46, 49, 50, 53, 56, 60, 61, 66, 67, 71, 73], 52: [38, 42, 43, 44, 55, 57, 59, 61, 66, 68, 72, 73], 53: [37, 44, 46, 47, 48, 49, 51, 54, 60, 61, 72], 54: [5, 40, 42, 47, 53, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69], 55: [41, 43, 45, 49, 50, 52, 59, 60, 62, 64, 65, 66, 67, 70, 72], 56: [37, 40, 41, 43, 44, 45, 46, 51, 57, 58, 59, 63, 69, 70], 57: [41, 42, 44, 48, 52, 54, 56, 59, 60, 63, 65, 67, 69, 70, 72], 58: [39, 40, 41, 44, 45, 49, 54, 56, 62, 64, 68, 69, 71, 72], 59: [9, 37, 39, 42, 46, 49, 52, 55, 56, 57], 60: [39, 41, 46, 47, 51, 53, 54, 55, 57, 65, 67, 68, 71, 72, 73], 61: [38, 39, 42, 44, 45, 46, 47, 51, 52, 53, 62, 66, 67], 62: [38, 39, 43, 46, 47, 50, 54, 55, 58, 61, 65, 67, 71, 72], 63: [37, 38, 39, 40, 41, 44, 46, 47, 49, 54, 56, 57, 66, 68, 69, 70, 73], 64: [39, 40, 45, 48, 50, 54, 55, 58, 73], 65: [39, 41, 43, 46, 47, 49, 54, 55, 57, 60, 62, 67, 73], 66: [39, 41, 45, 46, 49, 51, 52, 54, 55, 61, 63, 69], 67: [38, 43, 44, 47, 51, 55, 57, 60, 61, 62, 65, 68, 69, 71, 72], 68: [39, 40, 44, 46, 47, 52, 54, 58, 60, 63, 67, 69, 70, 72], 69: [41, 42, 45, 48, 50, 54, 56, 57, 58, 63, 66, 67, 68, 72, 73], 70: [41, 42, 43, 45, 47, 48, 55, 56, 57, 63, 68], 71: [40, 45, 47, 48, 49, 50, 51, 58, 60, 62, 67], 72: [38, 43, 46, 49, 52, 53, 55, 57, 58, 60, 62, 67, 68, 69, 73], 73: [38, 43, 48, 51, 52, 60, 63, 64, 65, 69, 72]}

start_node = 19
end_node = 53

print(shortest_path_length(adj_list, start_node, end_node))
```