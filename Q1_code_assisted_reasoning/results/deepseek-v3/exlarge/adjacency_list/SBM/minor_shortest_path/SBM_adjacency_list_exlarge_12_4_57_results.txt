```python
from collections import deque

def shortest_path_length(adj_list, start, end):
    if start == end:
        return 0
    visited = set()
    queue = deque([(start, 0)])
    while queue:
        node, dist = queue.popleft()
        if node == end:
            return dist
        if node not in visited:
            visited.add(node)
            for neighbor in adj_list.get(node, []):
                if neighbor not in visited:
                    queue.append((neighbor, dist + 1))
    return -1

adj_list = {0: [1, 5, 6, 9, 11], 1: [0, 3, 5, 7, 9, 18, 77], 2: [4, 5], 3: [1, 5, 6, 8, 11, 12, 46], 4: [2, 6, 10, 12], 5: [0, 1, 2, 3, 9, 11], 6: [0, 3, 4, 7, 9, 11], 7: [1, 6, 8, 12], 8: [3, 7, 9, 11, 12], 9: [0, 1, 5, 6, 8, 10, 12], 10: [4, 9], 11: [0, 3, 5, 6, 8], 12: [3, 4, 7, 8, 9], 13: [18, 21, 23, 24], 14: [16, 20, 21, 22, 25], 15: [16, 17, 18, 19, 20, 23, 24, 25], 16: [14, 15, 18, 20, 23, 25], 17: [15, 22, 23, 24, 25], 18: [1, 13, 15, 16, 20, 22, 25], 19: [15, 20, 22, 25], 20: [14, 15, 16, 18, 19, 22, 23, 25], 21: [13, 14, 23, 31], 22: [14, 17, 18, 19, 20, 25], 23: [13, 15, 16, 17, 20, 21, 24, 51], 24: [13, 15, 17, 23], 25: [14, 15, 16, 17, 18, 19, 20, 22, 33], 32: [28, 31, 33, 34, 35, 36, 38], 33: [25, 27, 30, 31, 32, 34, 36, 38], 34: [32, 33, 35, 37], 35: [26, 31, 32, 34, 36, 38, 40], 36: [26, 29, 32, 33, 35, 38], 37: [26, 28, 31, 34, 38], 38: [26, 29, 32, 33, 35, 36, 37], 26: [28, 29, 30, 35, 36, 37, 38], 27: [28, 30, 33], 28: [26, 27, 30, 31, 32, 37, 56], 29: [26, 30, 36, 38], 30: [26, 27, 28, 29, 31, 33], 31: [21, 28, 30, 32, 33, 35, 37], 39: [40, 43, 44, 48, 49, 51], 40: [35, 39, 41, 45, 48, 49], 41: [40, 43, 46, 47, 50], 42: [43, 45, 48, 49], 43: [39, 41, 42, 44, 46, 48, 50, 51, 52], 44: [39, 43, 48, 49, 50], 45: [40, 42], 46: [3, 41, 43, 47, 48, 50], 47: [41, 46, 48], 48: [39, 40, 42, 43, 44, 46, 47, 51], 49: [39, 40, 42, 44, 50, 51], 50: [41, 43, 44, 46, 49], 51: [23, 39, 43, 48, 49], 64: [53, 59, 60, 62], 52: [43, 54, 57, 58], 53: [55, 64], 54: [52, 55, 57], 55: [53, 54, 57, 58, 61, 63], 56: [28, 59], 57: [52, 54, 55, 61], 58: [52, 55], 59: [56, 60, 64], 60: [59, 61, 64], 61: [55, 57, 60], 62: [64], 63: [55], 65: [67, 71, 73, 74, 76], 66: [67, 69, 70, 71, 74], 67: [65, 66, 68, 73, 75, 76], 68: [67, 70, 74, 75], 69: [66, 71, 72, 73], 70: [66, 68, 76], 71: [65, 66, 69, 72, 74, 75, 76, 77], 72: [69, 71, 73, 75, 77], 73: [65, 67, 69, 72, 74, 77], 74: [65, 66, 68, 71, 73, 77], 75: [67, 68, 71, 72, 77], 76: [65, 67, 70, 71], 77: [1, 71, 72, 73, 74, 75]}

print(shortest_path_length(adj_list, 4, 57))
```