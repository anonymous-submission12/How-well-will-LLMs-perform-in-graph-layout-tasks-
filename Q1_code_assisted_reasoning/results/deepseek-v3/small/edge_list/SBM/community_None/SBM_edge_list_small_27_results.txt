```python
from collections import defaultdict

def find_communities(edge_list):
    graph = defaultdict(list)
    for u, v in edge_list:
        graph[u].append(v)
        graph[v].append(u)
    
    visited = set()
    communities = 0
    
    def dfs(node):
        stack = [node]
        while stack:
            current = stack.pop()
            for neighbor in graph[current]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    stack.append(neighbor)
    
    for node in graph:
        if node not in visited:
            visited.add(node)
            dfs(node)
            communities += 1
    
    return communities

edge_list = [(0, 1), (0, 2), (0, 4), (0, 5), (0, 16), (1, 3), (1, 4), (1, 5), (1, 9), (2, 4), (2, 5), (2, 11), (3, 4), (3, 5), (4, 27), (5, 16), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (7, 8), (7, 9), (7, 10), (8, 9), (8, 10), (8, 11), (9, 10), (9, 11), (12, 13), (12, 14), (12, 16), (13, 14), (13, 15), (13, 17), (14, 15), (14, 16), (14, 17), (15, 16), (15, 17), (16, 17), (16, 19), (18, 19), (18, 21), (18, 22), (19, 20), (19, 22), (20, 21), (20, 22), (23, 27), (24, 26), (24, 27), (25, 26), (25, 27), (26, 27)]

print(find_communities(edge_list))
```