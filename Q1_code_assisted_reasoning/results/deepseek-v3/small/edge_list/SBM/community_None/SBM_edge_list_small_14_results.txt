```python
from collections import defaultdict

def find_communities(edges):
    graph = defaultdict(list)
    for u, v in edges:
        graph[u].append(v)
        graph[v].append(u)
    
    visited = set()
    communities = 0
    
    def dfs(node):
        stack = [node]
        while stack:
            current = stack.pop()
            for neighbor in graph[current]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    stack.append(neighbor)
    
    for node in graph:
        if node not in visited:
            visited.add(node)
            dfs(node)
            communities += 1
    
    return communities

edges = [(0, 2), (0, 5), (0, 6), (0, 7), (1, 2), (1, 3), (1, 5), (1, 6), (1, 7), (1, 8), (1, 19), (1, 20), (2, 3), (2, 4), (2, 6), (2, 7), (3, 4), (3, 5), (3, 6), (4, 6), (4, 7), (4, 22), (5, 6), (5, 7), (6, 7), (8, 9), (8, 10), (8, 11), (8, 12), (8, 13), (8, 14), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (10, 12), (10, 13), (10, 15), (11, 13), (11, 14), (11, 15), (12, 13), (12, 14), (12, 15), (14, 15), (16, 17), (16, 18), (16, 19), (16, 20), (16, 21), (16, 23), (17, 18), (17, 19), (17, 20), (17, 21), (17, 22), (17, 23), (18, 19), (19, 20), (19, 21), (19, 22), (19, 23), (20, 21), (21, 23), (22, 23)]

print(find_communities(edges))
```