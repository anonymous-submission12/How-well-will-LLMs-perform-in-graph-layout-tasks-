```python
from collections import defaultdict

def find_communities(edges):
    graph = defaultdict(list)
    for u, v in edges:
        graph[u].append(v)
        graph[v].append(u)
    
    visited = set()
    communities = 0
    
    def dfs(node):
        stack = [node]
        while stack:
            current = stack.pop()
            for neighbor in graph[current]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    stack.append(neighbor)
    
    for node in graph:
        if node not in visited:
            visited.add(node)
            dfs(node)
            communities += 1
    
    return communities

edges = [(0, 1), (0, 3), (0, 4), (0, 5), (1, 2), (1, 4), (1, 5), (2, 3), (2, 4), (2, 17), (3, 5), (4, 26), (5, 9), (6, 7), (6, 8), (6, 9), (6, 10), (6, 24), (7, 8), (7, 9), (7, 10), (7, 11), (8, 9), (8, 10), (8, 11), (8, 12), (9, 10), (9, 11), (10, 11), (11, 12), (12, 13), (12, 14), (12, 15), (12, 16), (13, 16), (14, 15), (14, 16), (17, 18), (17, 19), (17, 20), (17, 21), (18, 19), (18, 21), (19, 21), (20, 21), (22, 24), (22, 25), (22, 26), (23, 25), (23, 26), (24, 25), (25, 26)]

print(find_communities(edges))
```