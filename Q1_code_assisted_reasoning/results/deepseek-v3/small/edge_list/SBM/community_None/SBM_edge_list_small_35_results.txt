```python
from collections import defaultdict

def find_communities(edge_list):
    graph = defaultdict(list)
    for u, v in edge_list:
        graph[u].append(v)
        graph[v].append(u)
    
    visited = set()
    communities = 0
    
    def dfs(node):
        stack = [node]
        while stack:
            current = stack.pop()
            for neighbor in graph[current]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    stack.append(neighbor)
    
    for node in graph:
        if node not in visited:
            visited.add(node)
            dfs(node)
            communities += 1
    
    return communities

edge_list = [(0, 3), (0, 4), (0, 6), (0, 7), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 17), (1, 18), (2, 3), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6), (3, 9), (3, 20), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (8, 11), (8, 13), (9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (10, 11), (10, 12), (10, 13), (10, 14), (11, 12), (11, 13), (11, 14), (11, 15), (12, 13), (12, 14), (13, 23), (15, 16), (15, 17), (15, 18), (15, 19), (15, 20), (15, 21), (16, 18), (16, 20), (17, 18), (17, 19), (17, 20), (18, 19), (18, 20), (18, 21), (19, 20), (19, 21), (20, 21), (20, 26), (22, 23), (22, 25), (22, 26), (22, 27), (22, 28), (23, 24), (23, 25), (23, 28), (24, 26), (24, 27), (24, 28), (25, 26), (25, 28), (26, 27), (27, 28)]

print(find_communities(edge_list))
```