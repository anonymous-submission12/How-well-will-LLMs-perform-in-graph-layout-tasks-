```python
from collections import deque

def shortest_path(edges, start, end):
    graph = {}
    for u, v in edges:
        if u not in graph:
            graph[u] = []
        if v not in graph:
            graph[v] = []
        graph[u].append(v)
        graph[v].append(u)
    
    visited = set()
    queue = deque([(start, 0)])
    
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in graph[node]:
                queue.append((neighbor, distance + 1))
    
    return -1

edges = [(0, 3), (0, 4), (0, 5), (0, 6), (0, 17), (1, 2), (1, 4), (1, 7), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (3, 4), (3, 5), (3, 6), (3, 7), (4, 5), (4, 6), (4, 7), (4, 17), (5, 6), (5, 7), (6, 7), (6, 19), (8, 9), (8, 13), (8, 15), (9, 10), (9, 12), (9, 13), (9, 14), (9, 16), (10, 11), (10, 12), (10, 13), (10, 15), (11, 12), (11, 13), (11, 14), (11, 15), (12, 13), (12, 14), (13, 14), (13, 15), (14, 15), (16, 17), (16, 18), (16, 19), (16, 20), (16, 21), (16, 22), (17, 19), (17, 20), (17, 21), (17, 22), (18, 19), (18, 22), (19, 20), (20, 21)]

print(shortest_path(edges, 8, 10))
```