```python
from collections import deque

def shortest_path(edges, start, end):
    graph = {}
    for u, v in edges:
        if u not in graph:
            graph[u] = []
        if v not in graph:
            graph[v] = []
        graph[u].append(v)
        graph[v].append(u)
    
    visited = set()
    queue = deque([(start, 0)])
    
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in graph[node]:
                queue.append((neighbor, distance + 1))
    
    return -1

edges = [(0, 1), (0, 3), (0, 5), (0, 6), (0, 7), (0, 9), (0, 22), (1, 2), (1, 3), (1, 4), (1, 5), (1, 7), (1, 8), (1, 9), (1, 19), (2, 3), (2, 4), (2, 6), (2, 7), (2, 8), (2, 9), (2, 24), (3, 5), (3, 7), (3, 9), (4, 5), (4, 6), (4, 8), (4, 9), (4, 15), (5, 6), (5, 7), (5, 9), (6, 7), (6, 8), (6, 9), (7, 9), (8, 9), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (10, 16), (10, 17), (11, 12), (11, 13), (11, 14), (11, 15), (11, 16), (11, 17), (11, 18), (12, 13), (12, 14), (12, 16), (12, 17), (12, 18), (13, 14), (13, 15), (13, 16), (13, 18), (14, 16), (14, 18), (15, 18), (16, 17), (16, 18), (19, 20), (19, 21), (19, 22), (19, 23), (19, 24), (19, 25), (19, 26), (20, 21), (20, 22), (20, 23), (20, 24), (20, 25), (20, 27), (21, 22), (21, 23), (21, 24), (21, 25), (21, 27), (22, 24), (22, 25), (22, 26), (23, 24), (23, 25), (23, 26), (24, 25), (24, 26), (24, 27), (25, 26), (25, 27), (26, 27)]
start = 15
end = 4

print(shortest_path(edges, start, end))
```