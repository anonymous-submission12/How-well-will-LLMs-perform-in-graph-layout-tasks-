```python
from collections import deque

def shortest_path_length(edges, start, end):
    graph = {}
    for u, v in edges:
        if u not in graph:
            graph[u] = []
        if v not in graph:
            graph[v] = []
        graph[u].append(v)
        graph[v].append(u)
    
    visited = set()
    queue = deque([(start, 0)])
    
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in graph[node]:
                queue.append((neighbor, distance + 1))
    
    return -1

edges = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 3), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6), (4, 6), (4, 24), (5, 6), (7, 8), (7, 9), (7, 10), (7, 11), (7, 12), (8, 12), (9, 10), (9, 11), (10, 11), (10, 12), (11, 12), (12, 24), (13, 16), (13, 17), (14, 15), (14, 16), (14, 17), (14, 18), (15, 16), (16, 17), (17, 18), (18, 23), (19, 21), (19, 22), (19, 23), (20, 21), (20, 22), (20, 24), (21, 22), (21, 23), (21, 24), (22, 23), (22, 24), (23, 24)]
start = 11
end = 8

print(shortest_path_length(edges, start, end))
```