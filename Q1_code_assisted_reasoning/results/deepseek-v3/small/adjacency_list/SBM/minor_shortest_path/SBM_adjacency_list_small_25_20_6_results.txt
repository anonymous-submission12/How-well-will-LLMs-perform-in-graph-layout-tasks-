```python
from collections import deque

def shortest_path_length(adj_list, start, end):
    visited = set()
    queue = deque([(start, 0)])
    
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in adj_list.get(node, []):
                queue.append((neighbor, distance + 1))
    
    return -1  # If no path exists

adj_list = {
    0: [2, 3, 4, 5, 6], 1: [3, 4, 6], 2: [0, 3, 5, 6], 3: [0, 1, 2, 5, 6], 
    4: [0, 1, 5], 5: [0, 2, 3, 4, 6, 11], 6: [0, 1, 2, 3, 5, 17], 
    7: [8, 9, 10, 11, 12, 13], 8: [7, 9, 10, 11, 13], 9: [7, 8, 10, 11, 12, 13], 
    10: [7, 8, 9, 11, 13], 11: [5, 7, 8, 9, 10, 12, 13, 18], 12: [7, 9, 11, 13], 
    13: [7, 8, 9, 10, 11, 12], 14: [16, 17, 18, 19, 20], 15: [16, 17, 18, 19, 20], 
    16: [14, 15, 17, 18, 19], 17: [6, 14, 15, 16, 18, 19, 20], 
    18: [11, 14, 15, 16, 17, 19, 20], 19: [14, 15, 16, 17, 18, 20], 
    20: [14, 15, 17, 18, 19]
}

start_node = 20
end_node = 6
print(shortest_path_length(adj_list, start_node, end_node))
```