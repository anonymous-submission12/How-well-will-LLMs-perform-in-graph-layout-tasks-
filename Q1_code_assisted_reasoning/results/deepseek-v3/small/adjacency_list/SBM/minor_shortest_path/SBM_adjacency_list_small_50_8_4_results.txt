```python
from collections import deque

def shortest_path_length(adj_list, start, end):
    visited = {start: 0}
    queue = deque([start])
    
    while queue:
        current = queue.popleft()
        if current == end:
            return visited[current]
        for neighbor in adj_list[current]:
            if neighbor not in visited:
                visited[neighbor] = visited[current] + 1
                queue.append(neighbor)
    return -1

adj_list = {
    0: [2, 3, 4, 5], 1: [2, 3, 4, 5, 16], 2: [0, 1, 3, 5, 8], 
    3: [0, 1, 2, 5, 10], 4: [0, 1, 5], 5: [0, 1, 2, 3, 4], 
    6: [9, 10], 7: [8, 10], 8: [2, 7, 10], 9: [6, 10], 
    10: [3, 6, 7, 8, 9], 11: [12, 14], 12: [11, 14, 15, 20], 
    13: [14, 15], 14: [11, 12, 13, 20], 15: [12, 13], 
    16: [1, 17, 18, 19, 20], 17: [16, 18], 18: [16, 17, 19, 20], 
    19: [16, 18, 20], 20: [12, 14, 16, 18, 19]
}

start_node = 8
end_node = 4

print(shortest_path_length(adj_list, start_node, end_node))
```