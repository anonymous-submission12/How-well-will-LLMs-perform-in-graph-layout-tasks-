```python
from collections import deque

def shortest_path_length(adj_list, start, end):
    visited = set()
    queue = deque([(start, 0)])
    
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in adj_list.get(node, []):
                queue.append((neighbor, distance + 1))
    return -1

adj_list = {
    0: [3, 4, 5, 8, 9, 10, 15], 1: [2, 3, 4, 5, 6, 7, 8, 9, 10], 2: [1, 3, 4, 5, 6, 8, 9, 10], 
    3: [0, 1, 2, 4, 5, 8, 9, 10, 11], 4: [0, 1, 2, 3, 5, 9, 11], 5: [0, 1, 2, 3, 4, 7, 9, 10], 
    6: [1, 2, 7, 8, 9, 11], 7: [1, 5, 6, 8, 9, 10, 23], 8: [0, 1, 2, 3, 6, 7, 9, 10], 
    9: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11], 10: [0, 1, 2, 3, 5, 7, 8, 9, 11], 
    11: [3, 4, 6, 9, 10], 12: [14, 16, 18, 19, 21, 22, 23], 
    13: [14, 15, 16, 17, 18, 19, 20, 23], 14: [12, 13, 15, 16, 17, 18, 19, 20, 22, 23], 
    15: [0, 13, 14, 18, 19, 20, 21, 23], 16: [12, 13, 14, 18, 19, 20, 22], 
    17: [13, 14, 18, 19, 20, 21, 22, 23], 18: [12, 13, 14, 15, 16, 17, 19, 20, 22], 
    19: [12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23], 20: [13, 14, 15, 16, 17, 18, 19, 21, 22, 23], 
    21: [12, 15, 17, 19, 20, 23], 22: [12, 14, 16, 17, 18, 19, 20, 23], 
    23: [7, 12, 13, 14, 15, 17, 19, 20, 21, 22]
}

start_node = 22
end_node = 19
print(shortest_path_length(adj_list, start_node, end_node))
```