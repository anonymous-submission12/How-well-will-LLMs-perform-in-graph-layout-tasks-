```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])
    
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in graph[node]:
                queue.append((neighbor, distance + 1))
    
    return -1  # If no path exists

graph = {
    0: [1, 3, 5, 6, 7, 19], 1: [0, 2, 5, 6, 7, 21], 2: [1, 3, 4, 6, 7, 15], 
    3: [0, 2, 4, 5, 6, 7, 9], 4: [2, 3, 5, 6, 7], 5: [0, 1, 3, 4, 7], 
    6: [0, 1, 2, 3, 4, 7], 7: [0, 1, 2, 3, 4, 5, 6], 8: [11, 12, 13, 14, 15], 
    9: [3, 10, 11, 12, 13, 14], 10: [9, 11, 12, 13, 14, 15], 
    11: [8, 9, 10, 12, 13, 15], 12: [8, 9, 10, 11, 13, 15], 
    13: [8, 9, 10, 11, 12, 14], 14: [8, 9, 10, 13, 21], 
    15: [2, 8, 10, 11, 12], 16: [17, 19, 20, 21, 22], 17: [16, 21, 22], 
    18: [20, 22], 19: [0, 16, 21, 22], 20: [16, 18, 21, 22], 
    21: [1, 14, 16, 17, 19, 20, 22], 22: [16, 17, 18, 19, 20, 21]
}

start_node = 13
end_node = 16

print(shortest_path_length(graph, start_node, end_node))
```