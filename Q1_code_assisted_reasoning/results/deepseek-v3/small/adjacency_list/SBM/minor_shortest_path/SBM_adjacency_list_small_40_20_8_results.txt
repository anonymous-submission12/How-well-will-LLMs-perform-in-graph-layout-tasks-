```python
from collections import deque

def shortest_path_length(adj_list, start, end):
    visited = {start: 0}
    queue = deque([start])
    
    while queue:
        current = queue.popleft()
        if current == end:
            return visited[current]
        for neighbor in adj_list[current]:
            if neighbor not in visited:
                visited[neighbor] = visited[current] + 1
                queue.append(neighbor)
    return -1

adj_list = {
    0: [1, 2, 4, 5], 1: [0, 2, 3, 4, 5, 11], 2: [0, 1, 3, 4, 5], 3: [1, 2, 4, 10, 17], 
    4: [0, 1, 2, 3, 5], 5: [0, 1, 2, 4], 6: [7, 8, 10, 11], 7: [6, 11], 8: [6, 9, 10], 
    9: [8, 10, 11], 10: [3, 6, 8, 9, 14], 11: [1, 6, 7, 9, 15], 12: [13, 15, 16], 
    13: [12, 14, 15, 16], 14: [10, 13, 15, 16], 15: [11, 12, 13, 14, 16], 
    16: [12, 13, 14, 15], 17: [3, 18, 19, 20, 21], 18: [17, 19, 20], 19: [17, 18], 
    20: [17, 18, 21], 21: [17, 20]
}

start_node = 20
end_node = 8

print(shortest_path_length(adj_list, start_node, end_node))
```