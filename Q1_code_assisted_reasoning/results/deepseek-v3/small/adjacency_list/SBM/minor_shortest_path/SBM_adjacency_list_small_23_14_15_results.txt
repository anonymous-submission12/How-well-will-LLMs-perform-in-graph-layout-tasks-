```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = {start: 0}
    queue = deque([start])
    
    while queue:
        node = queue.popleft()
        if node == end:
            return visited[node]
        for neighbor in graph[node]:
            if neighbor not in visited:
                visited[neighbor] = visited[node] + 1
                queue.append(neighbor)
    return -1

graph = {
    0: [1, 2, 3, 4, 6, 7, 9, 10], 
    1: [0, 2, 3, 5, 8, 9, 10], 
    2: [0, 1, 3, 4, 5, 6, 7, 10], 
    3: [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 18], 
    4: [0, 2, 3, 5, 6, 7, 8, 9], 
    5: [1, 2, 3, 4, 6, 9, 10], 
    6: [0, 2, 3, 4, 5, 7, 9, 20], 
    7: [0, 2, 3, 4, 6, 8, 9, 10], 
    8: [1, 3, 4, 7, 9, 10], 
    9: [0, 1, 3, 4, 5, 6, 7, 8, 20], 
    10: [0, 1, 2, 3, 5, 7, 8], 
    11: [12, 13, 14, 17, 18, 19, 20], 
    12: [11, 13, 14, 15, 16, 18, 19], 
    13: [11, 12, 14, 15, 17, 19, 20], 
    14: [11, 12, 13, 15, 16, 17, 18, 19, 20], 
    15: [12, 13, 14, 16, 18, 19], 
    16: [12, 14, 15, 17, 18, 19, 20], 
    17: [11, 13, 14, 16, 18, 19, 20], 
    18: [3, 11, 12, 14, 15, 16, 17, 19, 20], 
    19: [11, 12, 13, 14, 15, 16, 17, 18, 20], 
    20: [6, 9, 11, 13, 14, 16, 17, 18, 19]
}

start = 14
end = 15
print(shortest_path_length(graph, start, end))
```