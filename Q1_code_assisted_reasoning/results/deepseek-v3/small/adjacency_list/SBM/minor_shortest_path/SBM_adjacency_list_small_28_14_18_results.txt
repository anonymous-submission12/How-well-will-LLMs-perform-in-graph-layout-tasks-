```python
from collections import deque

def shortest_path_length(adj_list, start, end):
    visited = set()
    queue = deque([(start, 0)])
    
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in adj_list.get(node, []):
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1

adj_list = {
    0: [4, 5, 6, 8, 9, 10, 11], 1: [3, 4, 6, 7, 8, 9, 10], 2: [3, 4, 6, 7, 8, 9, 10], 
    3: [1, 2, 4, 5, 6, 7, 8, 9, 10, 11], 4: [0, 1, 2, 3, 6, 7, 8, 9, 10], 
    5: [0, 3, 6, 7, 8, 9, 10], 6: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11], 
    7: [1, 2, 3, 4, 5, 6, 8, 9, 10, 11], 8: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11], 
    9: [0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 22], 10: [0, 1, 2, 3, 4, 5, 6, 7, 8], 
    11: [0, 3, 6, 7, 8, 9], 12: [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], 
    13: [12, 14, 15, 16, 18, 19, 20, 22, 23], 14: [12, 13, 15, 17, 18, 19, 20, 22, 23], 
    15: [12, 13, 14, 16, 17, 18, 19, 22, 23], 16: [12, 13, 15, 17, 18, 19, 22, 23], 
    17: [12, 14, 15, 16, 19, 20, 21, 22, 23], 18: [12, 13, 14, 15, 16, 20, 21, 23], 
    19: [12, 13, 14, 15, 16, 17, 21, 23], 20: [12, 13, 14, 17, 18, 21, 22], 
    21: [12, 17, 18, 19, 20, 22, 23], 22: [9, 12, 13, 14, 15, 16, 17, 20, 21], 
    23: [12, 13, 14, 15, 16, 17, 18, 19, 21]
}

start_node = 14
end_node = 18

print(shortest_path_length(adj_list, start_node, end_node))
```