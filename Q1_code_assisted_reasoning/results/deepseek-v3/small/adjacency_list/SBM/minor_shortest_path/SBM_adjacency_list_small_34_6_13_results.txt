```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])
    
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in graph[node]:
                queue.append((neighbor, distance + 1))
    return -1

graph = {
    0: [1, 2, 3], 1: [0, 2, 3, 4, 5], 2: [0, 1, 3], 3: [0, 1, 2, 4, 5], 
    4: [1, 3], 5: [1, 3, 17], 6: [8, 10, 15], 7: [8, 9, 10], 
    8: [6, 7, 9, 10], 9: [7, 8, 10], 10: [6, 7, 8, 9], 
    11: [12, 13, 15], 12: [11, 13, 14], 13: [11, 12, 14], 
    14: [12, 13, 15, 20], 15: [6, 11, 14], 16: [17, 18, 19, 20], 
    17: [5, 16, 18, 19, 20], 18: [16, 17, 19, 20], 
    19: [16, 17, 18, 20], 20: [14, 16, 17, 18, 19]
}

start_node = 6
end_node = 13

print(shortest_path_length(graph, start_node, end_node))
```