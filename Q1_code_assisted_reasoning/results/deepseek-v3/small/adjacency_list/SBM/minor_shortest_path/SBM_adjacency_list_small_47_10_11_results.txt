```python
from collections import deque

def shortest_path_length(adj_list, start, end):
    visited = {start: 0}
    queue = deque([start])
    
    while queue:
        current = queue.popleft()
        if current == end:
            return visited[current]
        for neighbor in adj_list[current]:
            if neighbor not in visited:
                visited[neighbor] = visited[current] + 1
                queue.append(neighbor)
    return -1

adj_list = {
    0: [4, 5, 7], 1: [2, 3, 5, 7], 2: [1, 3, 4, 5, 6], 3: [1, 2, 5, 6, 7, 22], 
    4: [0, 2, 5, 6, 7], 5: [0, 1, 2, 3, 4, 6, 7], 6: [2, 3, 4, 5, 7], 
    7: [0, 1, 3, 4, 5, 6], 8: [10, 11, 12, 13, 14, 15], 9: [11, 12, 13, 14, 15], 
    10: [8, 11, 12, 13, 14, 15], 11: [8, 9, 10, 12, 13], 
    12: [8, 9, 10, 11, 13, 14, 15], 13: [8, 9, 10, 11, 12, 14, 15], 
    14: [8, 9, 10, 12, 13, 18], 15: [8, 9, 10, 12, 13], 
    16: [17, 18, 20, 21, 22], 17: [16, 19, 20, 21, 22], 
    18: [14, 16, 19, 20, 21, 22], 19: [17, 18, 20, 21, 22], 
    20: [16, 17, 18, 19, 21], 21: [16, 17, 18, 19, 20], 
    22: [3, 16, 17, 18, 19]
}

start_node = 10
end_node = 11
print(shortest_path_length(adj_list, start_node, end_node))
```