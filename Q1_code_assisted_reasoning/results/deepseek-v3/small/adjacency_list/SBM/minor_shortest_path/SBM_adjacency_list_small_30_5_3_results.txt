```python
from collections import deque

def shortest_path_length(adj_list, start, end):
    visited = set()
    queue = deque([(start, 0)])
    
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in adj_list[node]:
                queue.append((neighbor, distance + 1))
    return -1

adj_list = {
    0: [2, 3, 4, 12], 1: [3, 4, 5, 6, 12, 16], 2: [0, 3, 4, 5, 6], 
    3: [0, 1, 2, 4, 5, 13, 18], 4: [0, 1, 2, 3, 5, 6], 5: [1, 2, 3, 4, 9], 
    6: [1, 2, 4, 7], 7: [6, 8, 9, 10, 11, 13], 8: [7, 9, 10, 12, 13], 
    9: [5, 7, 8, 10, 11, 13], 10: [7, 8, 9, 11, 12], 11: [7, 9, 10, 12, 13, 18], 
    12: [0, 1, 8, 10, 11], 13: [3, 7, 8, 9, 11], 14: [15, 16, 17, 18, 19, 20], 
    15: [14, 16, 17, 18, 19, 20], 16: [1, 14, 15, 17, 18, 19], 
    17: [14, 15, 16, 18, 19, 20], 18: [3, 11, 14, 15, 16, 17, 19, 20], 
    19: [14, 15, 16, 17, 18, 20], 20: [14, 15, 17, 18, 19]
}

start_node = 5
end_node = 3
print(shortest_path_length(adj_list, start_node, end_node))
```