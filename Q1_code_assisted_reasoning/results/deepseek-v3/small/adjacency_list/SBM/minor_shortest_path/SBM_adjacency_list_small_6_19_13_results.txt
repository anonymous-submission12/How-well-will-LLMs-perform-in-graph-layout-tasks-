```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])
    
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in graph[node]:
                queue.append((neighbor, distance + 1))
    return -1

graph = {
    0: [1, 2, 3, 4, 5, 6], 1: [0, 2, 3, 4, 5, 6], 2: [0, 1, 3, 4, 5, 6], 
    3: [0, 1, 2, 4, 5, 6], 4: [0, 1, 2, 3, 6, 24], 5: [0, 1, 2, 3, 6], 
    6: [0, 1, 2, 3, 4, 5], 7: [8, 9, 10, 11, 12], 8: [7, 12], 
    9: [7, 10, 11], 10: [7, 9, 11, 12], 11: [7, 9, 10, 12], 
    12: [7, 8, 10, 11, 24], 13: [16, 17], 14: [15, 16, 17, 18], 
    15: [14, 16], 16: [13, 14, 15, 17], 17: [13, 14, 16, 18], 
    18: [14, 17, 23], 19: [21, 22, 23], 20: [21, 22, 24], 
    21: [19, 20, 22, 23, 24], 22: [19, 20, 21, 23, 24], 
    23: [18, 19, 21, 22, 24], 24: [4, 12, 20, 21, 22, 23]
}

start_node = 19
end_node = 13

print(shortest_path_length(graph, start_node, end_node))
```