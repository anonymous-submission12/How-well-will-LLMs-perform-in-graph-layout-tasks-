```python
from collections import deque

def shortest_path_length(adj_list, start, end):
    if start == end:
        return 0
    visited = set()
    queue = deque([(start, 0)])
    
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in adj_list[node]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1

adj_list = {
    0: [1, 3, 4, 5], 1: [0, 3, 4, 5], 2: [4, 5], 3: [0, 1, 4, 5], 
    4: [0, 1, 2, 3, 5, 14], 5: [0, 1, 2, 3, 4], 6: [7, 8, 9, 10], 
    7: [6, 8, 9, 10], 8: [6, 7, 9, 10, 11], 9: [6, 7, 8, 10], 
    10: [6, 7, 8, 9], 11: [8, 12, 13, 14, 15], 12: [11, 13, 14, 15], 
    13: [11, 12, 15], 14: [4, 11, 12, 15], 15: [11, 12, 13, 14, 17], 
    16: [18, 19, 20], 17: [15, 18, 19, 20], 18: [16, 17, 19, 20], 
    19: [16, 17, 18, 20], 20: [16, 17, 18, 19]
}

start_node = 2
end_node = 9
print(shortest_path_length(adj_list, start_node, end_node))
```