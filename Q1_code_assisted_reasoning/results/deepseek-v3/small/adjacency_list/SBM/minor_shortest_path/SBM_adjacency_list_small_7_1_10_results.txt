```python
from collections import deque

def shortest_path_length(adj_list, start, end):
    visited = set()
    queue = deque([(start, 0)])
    
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in adj_list[node]:
                queue.append((neighbor, distance + 1))
    
    return -1  # If no path exists

adj_list = {
    0: [1, 2, 3, 4, 5, 6, 8, 15],
    1: [0, 2, 5, 6],
    2: [0, 1, 3, 4, 5, 6],
    3: [0, 2, 5, 6],
    4: [0, 2, 5, 6],
    5: [0, 1, 2, 3, 4, 6],
    6: [0, 1, 2, 3, 4, 5],
    7: [8, 9, 10, 11, 12, 13],
    8: [0, 7, 9, 11, 12],
    9: [7, 8, 10, 11, 12, 13],
    10: [7, 9, 13],
    11: [7, 8, 9, 12],
    12: [7, 8, 9, 11, 13, 15],
    13: [7, 9, 10, 12],
    14: [15, 16, 17, 18],
    15: [0, 12, 14, 16, 18, 19, 20],
    16: [14, 15, 17, 20],
    17: [14, 16, 18, 19, 20],
    18: [14, 15, 17, 19],
    19: [15, 17, 18, 20],
    20: [15, 16, 17, 19]
}

start_node = 1
end_node = 10
print(shortest_path_length(adj_list, start_node, end_node))
```