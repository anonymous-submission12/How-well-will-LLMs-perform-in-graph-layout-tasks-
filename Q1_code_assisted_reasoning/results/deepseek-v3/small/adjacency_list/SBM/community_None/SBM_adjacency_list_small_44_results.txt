```python
from collections import defaultdict, deque

def count_communities(adj_list):
    visited = set()
    communities = 0
    
    def bfs(start):
        queue = deque([start])
        while queue:
            node = queue.popleft()
            for neighbor in adj_list[node]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append(neighbor)
    
    for node in adj_list:
        if node not in visited:
            visited.add(node)
            bfs(node)
            communities += 1
    
    print(communities)

# Adjacency list representation of the graph
adj_list = {
    0: [1, 2, 4, 5], 1: [0, 3, 5, 6, 7], 2: [0, 5, 6, 13, 19, 23], 3: [1, 4, 5, 6, 7, 13], 
    4: [0, 3, 5, 6, 7], 5: [0, 1, 2, 3, 4, 6, 13, 21], 6: [1, 2, 3, 4, 5, 7], 7: [1, 3, 4, 6], 
    8: [9, 10, 11, 12], 9: [8, 11, 12, 13, 14], 10: [8, 11, 12, 13, 14, 20], 11: [8, 9, 10, 12, 13, 14], 
    12: [8, 9, 10, 11, 13, 14], 13: [2, 3, 5, 9, 10, 11, 12, 14, 20], 14: [9, 10, 11, 12, 13], 
    15: [16, 18, 19, 20, 21], 16: [15, 18, 20, 21], 17: [18, 20, 21], 18: [15, 16, 17, 19, 21], 
    19: [2, 15, 18, 20, 21], 20: [10, 13, 15, 16, 17, 19, 21], 21: [5, 15, 16, 17, 18, 19, 20], 
    22: [23, 24, 26, 27, 28], 23: [2, 22, 24, 25, 27, 28], 24: [22, 23, 25, 27, 28], 25: [23, 24, 27], 
    26: [22], 27: [22, 23, 24, 25, 28], 28: [22, 23, 24, 27]
}

count_communities(adj_list)
```