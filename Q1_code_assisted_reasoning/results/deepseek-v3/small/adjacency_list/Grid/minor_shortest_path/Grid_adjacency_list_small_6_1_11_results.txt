```python
from collections import deque

def shortest_path_length(adj_list, start, end):
    visited = set()
    queue = deque([(start, 0)])
    
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in adj_list[node]:
                queue.append((neighbor, distance + 1))
    return -1

adj_list = {0: [1, 8], 1: [0, 2, 9], 2: [1, 3, 10], 3: [2, 4, 11], 4: [3, 5, 12], 5: [4, 6, 13], 6: [5, 7, 14], 7: [6, 15], 8: [0, 9, 16], 9: [1, 8, 10, 17], 10: [2, 9, 11, 18], 11: [3, 10, 12, 19], 12: [4, 11, 13, 20], 13: [5, 12, 14, 21], 14: [6, 13, 15, 22], 15: [7, 14, 23], 16: [8, 17], 17: [9, 16, 18], 18: [10, 17, 19], 19: [11, 18, 20], 20: [12, 19, 21], 21: [13, 20, 22], 22: [14, 21, 23], 23: [15, 22]}

start_node = 1
end_node = 11

print(shortest_path_length(adj_list, start_node, end_node))
```