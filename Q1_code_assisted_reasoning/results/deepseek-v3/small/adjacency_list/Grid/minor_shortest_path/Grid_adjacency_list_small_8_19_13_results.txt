```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = {start: 0}
    queue = deque([start])
    
    while queue:
        node = queue.popleft()
        if node == end:
            return visited[node]
        for neighbor in graph[node]:
            if neighbor not in visited:
                visited[neighbor] = visited[node] + 1
                queue.append(neighbor)
    return -1

graph = {
    0: [1, 14], 1: [0, 2, 15], 2: [1, 3, 16], 3: [2, 4, 17], 4: [3, 5, 18], 
    5: [4, 6, 19], 6: [5, 7, 20], 7: [6, 8, 21], 8: [7, 9, 22], 9: [8, 10, 23], 
    10: [9, 11, 24], 11: [10, 12, 25], 12: [11, 13, 26], 13: [12, 27], 
    14: [0, 15], 15: [1, 14, 16], 16: [2, 15, 17], 17: [3, 16, 18], 
    18: [4, 17, 19], 19: [5, 18, 20], 20: [6, 19, 21], 21: [7, 20, 22], 
    22: [8, 21, 23], 23: [9, 22, 24], 24: [10, 23, 25], 25: [11, 24, 26], 
    26: [12, 25, 27], 27: [13, 26]
}

start_node = 19
end_node = 13

print(shortest_path_length(graph, start_node, end_node))
```