```python
from collections import deque

# Define the graph as adjacency list
graph = {0: [5], 1: [2, 43], 2: [1, 3, 9], 3: [2, 5, 6, 7, 9, 10], 4: [6, 7], 5: [0, 3, 9, 17], 6: [3, 4, 7, 9, 10], 7: [3, 4, 6, 8, 9, 10], 8: [7, 10], 9: [2, 3, 5, 6, 7, 10], 10: [3, 6, 7, 8, 9], 11: [12, 13, 14, 20], 12: [11, 13, 14, 15, 17, 18, 19], 13: [11, 12, 16, 19], 14: [11, 12, 18], 15: [12, 18, 21, 67], 16: [13, 17, 18, 20, 67], 17: [5, 12, 16, 18, 21], 18: [12, 14, 15, 16, 17, 20, 64], 19: [12, 13, 20, 21, 54], 20: [11, 16, 18, 19, 52], 21: [15, 17, 19], 32: [22, 25, 26, 28, 30], 22: [26, 28, 30, 31, 32], 23: [25, 26, 27, 29, 31], 24: [27, 29, 30, 31], 25: [23, 30, 32], 26: [22, 23, 27, 32], 27: [23, 24, 26], 28: [22, 29, 31, 32], 29: [23, 24, 28, 30, 39], 30: [22, 24, 25, 29, 32], 31: [22, 23, 24, 28, 56], 33: [34, 35, 37, 38, 39, 40, 42, 43], 34: [33, 38, 39, 40, 43], 35: [33, 40, 41, 42], 36: [37, 38, 39, 40, 41, 42], 37: [33, 36, 40, 41, 43], 38: [33, 34, 36, 40, 41], 39: [29, 33, 34, 36, 42], 40: [33, 34, 35, 36, 37, 38, 42, 43], 41: [35, 36, 37, 38], 42: [33, 35, 36, 39, 40], 43: [1, 33, 34, 37, 40], 44: [45, 48, 49, 53, 54], 45: [44, 48, 51, 54], 46: [49, 51, 52], 47: [49, 51, 54], 48: [44, 45, 50], 49: [44, 46, 47, 51, 52, 54], 50: [48, 51, 54], 51: [45, 46, 47, 49, 50], 52: [20, 46, 49, 53, 54], 53: [44, 52, 54], 54: [19, 44, 45, 47, 49, 50, 52, 53], 64: [18, 59, 61], 65: [59], 55: [60, 62], 56: [31, 60, 61, 62, 63], 57: [58, 62, 63], 58: [57, 60, 61, 62, 72], 59: [60, 63, 64, 65, 69], 60: [55, 56, 58, 59, 62], 61: [56, 58, 63, 64], 62: [55, 56, 57, 58, 60], 63: [56, 57, 59, 61], 66: [67, 70, 71, 73, 75], 67: [15, 16, 66, 68, 69, 72, 75], 68: [67, 74, 75], 69: [59, 67, 71, 73, 74, 75], 70: [66, 71, 72], 71: [66, 69, 70, 72, 74], 72: [58, 67, 70, 71, 74], 73: [66, 69, 75], 74: [68, 69, 71, 72, 75], 75: [66, 67, 68, 69, 73, 74]}

# Function to find the shortest path using Breadth-First Search
def shortest_path_bfs(graph, start, target):
    queue = deque([(start, 0)])  # (node, distance)
    visited = set()

    while queue:
        node, distance = queue.popleft()
        if node == target:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in graph[node]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # No path found

# Calculate the shortest path between node '59' and '58'
result = shortest_path_bfs(graph, 59, 58)
print(result)
```