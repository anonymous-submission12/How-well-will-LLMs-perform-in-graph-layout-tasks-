```python
from collections import deque

def shortest_path_length(graph, start, end):
    queue = deque([(start, 0)])
    visited = set()
    
    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # If no path exists

graph = {0: [1, 3, 12], 1: [0, 2, 6, 7, 8, 9, 10, 11, 12, 26], 2: [1, 5, 8, 9], 3: [0, 5, 6, 9, 12, 16, 17, 46], 4: [6, 8, 10, 11], 5: [2, 3, 8, 10, 11], 6: [1, 3, 4, 9], 7: [1], 8: [1, 2, 4, 5, 55], 9: [1, 2, 3, 6, 12], 10: [1, 4, 5, 11, 12], 11: [1, 4, 5, 10, 12], 12: [0, 1, 3, 9, 10, 11], 13: [16, 18, 19, 20, 25, 27, 30], 14: [18, 22, 23], 15: [19, 20, 21, 23, 25, 73], 16: [3, 13, 17, 20, 21, 23], 17: [3, 16, 18, 19, 23, 25], 18: [13, 14, 17, 21, 22, 23, 25], 19: [13, 15, 17, 23, 24, 25], 20: [13, 15, 16, 24], 21: [15, 16, 18, 22, 23, 25], 22: [14, 18, 21, 24, 25, 59], 23: [14, 15, 16, 17, 18, 19, 21], 24: [19, 20, 22], 25: [13, 15, 17, 18, 19, 21, 22], 32: [26, 27, 28, 30, 31, 33, 34, 37], 33: [27, 30, 32, 34, 36], 34: [29, 30, 32, 33, 35], 35: [26, 27, 30, 34, 37], 36: [30, 33, 37, 38], 37: [26, 28, 31, 32, 35, 36], 38: [31, 36], 26: [1, 27, 30, 32, 35, 37], 27: [13, 26, 28, 30, 32, 33, 35], 28: [27, 31, 32, 37], 29: [34], 30: [13, 26, 27, 32, 33, 34, 35, 36, 58], 31: [28, 32, 37, 38], 39: [42, 46, 49, 50], 40: [41, 43, 46, 47, 49], 41: [40, 43, 44, 46, 49, 50], 42: [39, 43, 44, 45, 50], 43: [40, 41, 42, 44, 48, 62], 44: [41, 42, 43, 45, 48, 49, 52], 45: [42, 44, 46, 47, 48, 49], 46: [3, 39, 40, 41, 45, 47, 49, 50], 47: [40, 45, 46, 49, 53], 48: [43, 44, 45, 49, 50], 49: [39, 40, 41, 44, 45, 46, 47, 48, 50], 50: [39, 41, 42, 46, 48, 49], 51: [59, 61, 62], 52: [44, 57, 58, 59, 61, 62], 53: [47, 59, 60, 61], 54: [56, 58, 59, 60], 55: [8, 58, 59, 60], 56: [54, 57, 59, 60], 57: [52, 56, 58, 59, 60, 61, 73], 58: [30, 52, 54, 55, 57, 61, 70], 59: [22, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62], 60: [53, 54, 55, 56, 57, 59, 62], 61: [51, 52, 53, 57, 58, 59], 62: [43, 51, 52, 59, 60], 64: [67, 73], 65: [66, 67, 71, 72], 66: [65, 67, 70], 67: [64, 65, 66, 70, 72, 73], 68: [71, 72, 73], 69: [70], 70: [58, 63, 66, 67, 69, 73, 74], 71: [63, 65, 68, 74], 72: [65, 67, 68, 73, 74], 73: [15, 57, 64, 67, 68, 70, 72], 74: [70, 71, 72], 63: [70, 71]}
print(shortest_path_length(graph, 57, 22))
```