```python
from collections import deque

def shortest_path_length(graph, start, end):
    queue = deque([(start, 0)])
    visited = set()
    
    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                queue.append((neighbor, distance + 1))
    return -1  # If no path exists

graph = {0: [1, 37], 1: [0, 2, 38], 2: [1, 3, 39], 3: [2, 4, 40], 4: [3, 5, 41], 5: [4, 6, 42], 6: [5, 7, 43], 7: [6, 8, 44], 8: [7, 9, 45], 9: [8, 10, 46], 10: [9, 11, 47], 11: [10, 12, 48], 12: [11, 13, 49], 13: [12, 14, 50], 14: [13, 15, 51], 15: [14, 16, 52], 16: [15, 17, 53], 17: [16, 18, 54], 18: [17, 19, 55], 19: [18, 20, 56], 20: [19, 21, 57], 21: [20, 22, 58], 22: [21, 23, 59], 23: [22, 24, 60], 24: [23, 25, 61], 25: [24, 26, 62], 26: [25, 27, 63], 27: [26, 28, 64], 28: [27, 29, 65], 29: [28, 30, 66], 30: [29, 31, 67], 31: [30, 32, 68], 32: [31, 33, 69], 33: [32, 34, 70], 34: [33, 35, 71], 35: [34, 36, 72], 36: [35, 73], 37: [0, 38], 38: [1, 37, 39], 39: [2, 38, 40], 40: [3, 39, 41], 41: [4, 40, 42], 42: [5, 41, 43], 43: [6, 42, 44], 44: [7, 43, 45], 45: [8, 44, 46], 46: [9, 45, 47], 47: [10, 46, 48], 48: [11, 47, 49], 49: [12, 48, 50], 50: [13, 49, 51], 51: [14, 50, 52], 52: [15, 51, 53], 53: [16, 52, 54], 54: [17, 53, 55], 55: [18, 54, 56], 56: [19, 55, 57], 57: [20, 56, 58], 58: [21, 57, 59], 59: [22, 58, 60], 60: [23, 59, 61], 61: [24, 60, 62], 62: [25, 61, 63], 63: [26, 62, 64], 64: [27, 63, 65], 65: [28, 64, 66], 66: [29, 65, 67], 67: [30, 66, 68], 68: [31, 67, 69], 69: [32, 68, 70], 70: [33, 69, 71], 71: [34, 70, 72], 72: [35, 71, 73], 73: [36, 72]}

print(shortest_path_length(graph, 60, 16))
```