```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # If no path exists

graph = {0: [1, 11], 1: [0, 2, 12], 2: [1, 3, 13], 3: [2, 4, 14], 4: [3, 5, 15], 5: [4, 6, 16], 6: [5, 7, 17], 7: [6, 8, 18], 8: [7, 9, 19], 9: [8, 10, 20], 10: [9, 21], 11: [0, 12, 22], 12: [1, 11, 13, 23], 13: [2, 12, 14, 24], 14: [3, 13, 15, 25], 15: [4, 14, 16, 26], 16: [5, 15, 17, 27], 17: [6, 16, 18, 28], 18: [7, 17, 19, 29], 19: [8, 18, 20, 30], 20: [9, 19, 21, 31], 21: [10, 20, 32], 22: [11, 23, 33], 23: [12, 22, 24, 34], 24: [13, 23, 25, 35], 25: [14, 24, 26, 36], 26: [15, 25, 27, 37], 27: [16, 26, 28, 38], 28: [17, 27, 29, 39], 29: [18, 28, 30, 40], 30: [19, 29, 31, 41], 31: [20, 30, 32, 42], 32: [21, 31, 43], 33: [22, 34, 44], 34: [23, 33, 35, 45], 35: [24, 34, 36, 46], 36: [25, 35, 37, 47], 37: [26, 36, 38, 48], 38: [27, 37, 39, 49], 39: [28, 38, 40, 50], 40: [29, 39, 41, 51], 41: [30, 40, 42, 52], 42: [31, 41, 43, 53], 43: [32, 42, 54], 44: [33, 45, 55], 45: [34, 44, 46, 56], 46: [35, 45, 47, 57], 47: [36, 46, 48, 58], 48: [37, 47, 49, 59], 49: [38, 48, 50, 60], 50: [39, 49, 51, 61], 51: [40, 50, 52, 62], 52: [41, 51, 53, 63], 53: [42, 52, 54, 64], 54: [43, 53, 65], 55: [44, 56, 66], 56: [45, 55, 57, 67], 57: [46, 56, 58, 68], 58: [47, 57, 59, 69], 59: [48, 58, 60, 70], 60: [49, 59, 61, 71], 61: [50, 60, 62, 72], 62: [51, 61, 63, 73], 63: [52, 62, 64, 74], 64: [53, 63, 65, 75], 65: [54, 64, 76], 66: [55, 67], 67: [56, 66, 68], 68: [57, 67, 69], 69: [58, 68, 70], 70: [59, 69, 71], 71: [60, 70, 72], 72: [61, 71, 73], 73: [62, 72, 74], 74: [63, 73, 75], 75: [64, 74, 76], 76: [65, 75]}
print(shortest_path_length(graph, 11, 66))
```