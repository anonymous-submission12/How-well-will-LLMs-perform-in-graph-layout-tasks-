```python
import networkx as nx

# Define the graph edges
edges = [(0, 2), (0, 6), (0, 7), (1, 2), (1, 4), (1, 16), (2, 3), (2, 5), (2, 46), (3, 4), 
         (3, 5), (4, 5), (4, 11), (5, 6), (5, 7), (6, 8), (9, 17), (10, 12), (10, 16), (11, 12), 
         (11, 14), (11, 16), (12, 13), (12, 14), (12, 15), (12, 16), (13, 17), (14, 16), (14, 64), 
         (15, 16), (15, 17), (18, 21), (18, 23), (18, 26), (19, 20), (19, 21), (19, 23), (19, 24), 
         (19, 25), (20, 21), (20, 25), (20, 68), (22, 23), (22, 25), (23, 25), (27, 31), (27, 40), 
         (28, 29), (28, 31), (29, 30), (30, 31), (31, 38), (32, 27), (32, 30), (33, 27), (33, 30), 
         (33, 35), (34, 29), (34, 36), (35, 28), (35, 29), (35, 30), (35, 65), (36, 37), (36, 42), 
         (36, 43), (37, 39), (37, 41), (38, 41), (39, 44), (40, 43), (40, 44), (40, 46), (41, 42), 
         (41, 43), (41, 44), (42, 43), (42, 60), (43, 44), (44, 56), (45, 49), (45, 51), (45, 53), 
         (47, 48), (47, 52), (47, 63), (48, 49), (48, 50), (48, 52), (49, 52), (49, 53), (50, 53), 
         (51, 53), (54, 55), (54, 57), (54, 60), (54, 62), (55, 60), (55, 61), (55, 62), (56, 59), 
         (56, 60), (56, 62), (57, 58), (57, 59), (57, 60), (57, 62), (58, 61), (59, 61), (60, 61), 
         (64, 70), (65, 68), (65, 69), (65, 70), (66, 69), (67, 63), (68, 63), (68, 70)]

# Create a graph using the edges
G = nx.Graph()
G.add_edges_from(edges)

# Calculate the shortest path length between nodes '4' and '67'
shortest_path_length = nx.shortest_path_length(G, source=4, target=67)
print(shortest_path_length)
```