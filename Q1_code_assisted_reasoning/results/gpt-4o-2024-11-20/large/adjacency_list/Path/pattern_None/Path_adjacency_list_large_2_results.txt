```python
def determine_graph_pattern(adj_list):
    nodes = list(adj_list.keys())
    edges = sum(len(neighbors) for neighbors in adj_list.values()) // 2

    # Check for Path: A path graph has n nodes and n-1 edges, and all nodes except two have degree 2.
    if edges == len(nodes) - 1 and all(len(adj_list[node]) == 2 for node in nodes[1:-1]) and len(adj_list[nodes[0]]) == 1 and len(adj_list[nodes[-1]]) == 1:
        return "Path"

    # Check for Cycle: A cycle graph has n nodes and n edges, and all nodes have degree 2.
    if edges == len(nodes) and all(len(adj_list[node]) == 2 for node in nodes):
        return "Cycle"

    # Check for Star: A star graph has n nodes and n-1 edges, and one node has degree n-1 while all others have degree 1.
    if edges == len(nodes) - 1 and any(len(adj_list[node]) == len(nodes) - 1 for node in nodes) and all(len(adj_list[node]) == 1 for node in nodes if len(adj_list[node]) != len(nodes) - 1):
        return "Star"

    # Check for Complete: A complete graph has n nodes and n*(n-1)/2 edges, and all nodes have degree n-1.
    if edges == len(nodes) * (len(nodes) - 1) // 2 and all(len(adj_list[node]) == len(nodes) - 1 for node in nodes):
        return "Complete"

    # Check for Grid: A grid graph has a specific structure that is hard to determine from adjacency list alone.
    # Skipping detailed grid check for simplicity.

    # Check for Clustered graph: A clustered graph has groups of nodes with dense connections within groups.
    # Skipping detailed clustered graph check for simplicity.

    # If none of the above patterns match, assume it's a random graph.
    return "Random"

adj_list = {0: [1], 1: [0, 2], 2: [1, 3], 3: [2, 4], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [6, 8], 8: [7, 9], 9: [8, 10], 10: [9, 11], 11: [10, 12], 12: [11, 13], 13: [12, 14], 14: [13, 15], 15: [14, 16], 16: [15, 17], 17: [16, 18], 18: [17, 19], 19: [18, 20], 20: [19, 21], 21: [20, 22], 22: [21, 23], 23: [22, 24], 24: [23, 25], 25: [24, 26], 26: [25, 27], 27: [26, 28], 28: [27, 29], 29: [28, 30], 30: [29, 31], 31: [30, 32], 32: [31, 33], 33: [32, 34], 34: [33, 35], 35: [34, 36], 36: [35, 37], 37: [36, 38], 38: [37, 39], 39: [38, 40], 40: [39, 41], 41: [40]}
print(determine_graph_pattern(adj_list))
```