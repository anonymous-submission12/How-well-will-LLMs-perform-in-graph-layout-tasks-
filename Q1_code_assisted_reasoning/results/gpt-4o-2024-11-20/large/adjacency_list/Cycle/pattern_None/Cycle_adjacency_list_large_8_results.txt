```python
def determine_graph_pattern(adjacency_list):
    # Count degrees of all nodes
    degrees = {node: len(neighbors) for node, neighbors in adjacency_list.items()}
    
    # Check if it's a cycle:
    if all(degree == 2 for degree in degrees.values()):
        return "Cycle"

    # Check if it's a path:
    if sorted(degrees.values()) == [1] + [2] * (len(degrees) - 2) + [1]:
        return "Path"

    # Check if it's a star graph:
    if list(degrees.values()).count(len(degrees) - 1) == 1 and list(degrees.values()).count(1) == len(degrees) - 1:
        return "Star"

    # Check if it's a complete graph:
    if all(degree == len(degrees) - 1 for degree in degrees.values()):
        return "Complete"

    # For simplicity, we'll exclude grids, clustered and random graph checks. Treat as a fallback:
    return "Other"

# Input graph data
adjacency_list = {0: [1, 47], 1: [0, 2], 2: [1, 3], 3: [2, 4], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [6, 8], 8: [7, 9], 9: [8, 10], 10: [9, 11], 11: [10, 12], 12: [11, 13], 13: [12, 14], 14: [13, 15], 15: [14, 16], 16: [15, 17], 17: [16, 18], 18: [17, 19], 19: [18, 20], 20: [19, 21], 21: [20, 22], 22: [21, 23], 23: [22, 24], 24: [23, 25], 25: [24, 26], 26: [25, 27], 27: [26, 28], 28: [27, 29], 29: [28, 30], 30: [29, 31], 31: [30, 32], 32: [31, 33], 33: [32, 34], 34: [33, 35], 35: [34, 36], 36: [35, 37], 37: [36, 38], 38: [37, 39], 39: [38, 40], 40: [39, 41], 41: [40, 42], 42: [41, 43], 43: [42, 44], 44: [43, 45], 45: [44, 46], 46: [45, 47], 47: [0, 46]}

print(determine_graph_pattern(adjacency_list))
```