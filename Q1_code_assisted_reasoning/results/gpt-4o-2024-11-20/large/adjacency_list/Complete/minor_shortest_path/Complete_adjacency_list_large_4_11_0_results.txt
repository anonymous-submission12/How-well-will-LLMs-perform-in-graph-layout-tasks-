```python
from collections import deque

# Given adjacency list
adjacency_list = {
    0: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43],
    1: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43],
    2: [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43],
    # The rest of the adjacency list omitted for brevity
}

# BFS function to calculate shortest path
def bfs_shortest_path(adjacency_list, start, goal):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    while queue:
        current_node, current_distance = queue.popleft()
        if current_node == goal:
            return current_distance
        if current_node not in visited:
            visited.add(current_node)
            for neighbor in adjacency_list[current_node]:
                if neighbor not in visited:
                    queue.append((neighbor, current_distance + 1))
    return float('inf')

# Calculate shortest path length between node '11' and '0'
result = bfs_shortest_path(adjacency_list, 11, 0)
print(result)
```