```python
def determine_graph_pattern(adj_list):
    n = len(adj_list)
    degrees = [len(adj_list[node]) for node in adj_list]

    # Check for Star pattern
    if degrees.count(1) == n - 1 and degrees.count(n - 1) == 1:
        return "Star"

    # Check for Cycle pattern
    if all(degree == 2 for degree in degrees):
        return "Cycle"

    # Check for Path pattern
    if degrees.count(1) == 2 and degrees.count(2) == n - 2:
        return "Path"

    # Check for Grid pattern
    sqrt_n = int(n**0.5)
    if sqrt_n * sqrt_n == n:
        grid_edges = 0
        for node in adj_list:
            grid_edges += len(adj_list[node])
        if grid_edges == 2 * (sqrt_n * (sqrt_n - 1)):
            return "Grid"

    # Check for Complete pattern
    if all(degree == n - 1 for degree in degrees):
        return "Complete"

    # Check for Clustered graph
    # A clustered graph typically has groups of nodes with high internal connectivity
    # and sparse connections between groups. This is harder to define programmatically
    # without additional information, so we skip this check.

    # Default to Random graph
    return "Random"

adj_list = {0: [1, 25], 1: [0, 2, 26], 2: [1, 3, 27], 3: [2, 4, 28], 4: [3, 5, 29], 5: [4, 6, 30], 6: [5, 7, 31], 7: [6, 8, 32], 8: [7, 9, 33], 9: [8, 10, 34], 10: [9, 11, 35], 11: [10, 12, 36], 12: [11, 13, 37], 13: [12, 14, 38], 14: [13, 15, 39], 15: [14, 16, 40], 16: [15, 17, 41], 17: [16, 18, 42], 18: [17, 19, 43], 19: [18, 20, 44], 20: [19, 21, 45], 21: [20, 22, 46], 22: [21, 23, 47], 23: [22, 24, 48], 24: [23, 49], 25: [0, 26], 26: [1, 25, 27], 27: [2, 26, 28], 28: [3, 27, 29], 29: [4, 28, 30], 30: [5, 29, 31], 31: [6, 30, 32], 32: [7, 31, 33], 33: [8, 32, 34], 34: [9, 33, 35], 35: [10, 34, 36], 36: [11, 35, 37], 37: [12, 36, 38], 38: [13, 37, 39], 39: [14, 38, 40], 40: [15, 39, 41], 41: [16, 40, 42], 42: [17, 41, 43], 43: [18, 42, 44], 44: [19, 43, 45], 45: [20, 44, 46], 46: [21, 45, 47], 47: [22, 46, 48], 48: [23, 47, 49], 49: [24, 48]}
print(determine_graph_pattern(adj_list))
```