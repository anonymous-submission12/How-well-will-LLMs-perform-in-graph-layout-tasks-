```python
def determine_graph_pattern(adj_list):
    # Check for grid pattern
    def is_grid(adj_list):
        nodes = list(adj_list.keys())
        rows = int(len(nodes)**0.5)
        if rows * rows != len(nodes):
            return False
        for node in nodes:
            neighbors = adj_list[node]
            if len(neighbors) not in [2, 3, 4]:
                return False
        return True

    # Check for star pattern
    def is_star(adj_list):
        center_count = 0
        for node, neighbors in adj_list.items():
            if len(neighbors) == len(adj_list) - 1:
                center_count += 1
            elif len(neighbors) != 1:
                return False
        return center_count == 1

    # Check for cycle pattern
    def is_cycle(adj_list):
        for node, neighbors in adj_list.items():
            if len(neighbors) != 2:
                return False
        return True

    # Check for path pattern
    def is_path(adj_list):
        end_count = 0
        for node, neighbors in adj_list.items():
            if len(neighbors) == 1:
                end_count += 1
            elif len(neighbors) != 2:
                return False
        return end_count == 2

    # Check for complete graph
    def is_complete(adj_list):
        n = len(adj_list)
        for node, neighbors in adj_list.items():
            if len(neighbors) != n - 1:
                return False
        return True

    # Check for clustered graph
    def is_clustered(adj_list):
        # A clustered graph typically has groups of nodes with high connectivity within groups
        # and sparse connectivity between groups. This is hard to define programmatically
        # without additional information, so we return False for simplicity.
        return False

    # Check for random graph
    def is_random(adj_list):
        # A random graph doesn't follow any specific pattern, so if none of the above patterns
        # match, we classify it as random.
        return True

    if is_grid(adj_list):
        return "Grid"
    elif is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_complete(adj_list):
        return "Complete"
    elif is_clustered(adj_list):
        return "Clustered"
    else:
        return "Random"

adj_list = {0: [1, 7], 1: [0, 2, 8], 2: [1, 3, 9], 3: [2, 4, 10], 4: [3, 5, 11], 5: [4, 6, 12], 6: [5, 13], 7: [0, 8, 14], 8: [1, 7, 9, 15], 9: [2, 8, 10, 16], 10: [3, 9, 11, 17], 11: [4, 10, 12, 18], 12: [5, 11, 13, 19], 13: [6, 12, 20], 14: [7, 15, 21], 15: [8, 14, 16, 22], 16: [9, 15, 17, 23], 17: [10, 16, 18, 24], 18: [11, 17, 19, 25], 19: [12, 18, 20, 26], 20: [13, 19, 27], 21: [14, 22, 28], 22: [15, 21, 23, 29], 23: [16, 22, 24, 30], 24: [17, 23, 25, 31], 25: [18, 24, 26, 32], 26: [19, 25, 27, 33], 27: [20, 26, 34], 28: [21, 29, 35], 29: [22, 28, 30, 36], 30: [23, 29, 31, 37], 31: [24, 30, 32, 38], 32: [25, 31, 33, 39], 33: [26, 32, 34, 40], 34: [27, 33, 41], 35: [28, 36, 42], 36: [29, 35, 37, 43], 37: [30, 36, 38, 44], 38: [31, 37, 39, 45], 39: [32, 38, 40, 46], 40: [33, 39, 41, 47], 41: [34, 40, 48], 42: [35, 43], 43: [36, 42, 44], 44: [37, 43, 45], 45: [38, 44, 46], 46: [39, 45, 47], 47: [40, 46, 48], 48: [41, 47]}
print(determine_graph_pattern(adj_list))
```