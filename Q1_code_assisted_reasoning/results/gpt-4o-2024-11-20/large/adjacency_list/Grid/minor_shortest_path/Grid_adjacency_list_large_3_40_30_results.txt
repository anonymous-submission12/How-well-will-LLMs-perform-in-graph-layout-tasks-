```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                queue.append((neighbor, distance + 1))
    return -1  # If no path exists

graph = {0: [1, 9], 1: [0, 2, 10], 2: [1, 3, 11], 3: [2, 4, 12], 4: [3, 5, 13], 5: [4, 6, 14], 6: [5, 7, 15], 7: [6, 8, 16], 8: [7, 17], 9: [0, 10, 18], 10: [1, 9, 11, 19], 11: [2, 10, 12, 20], 12: [3, 11, 13, 21], 13: [4, 12, 14, 22], 14: [5, 13, 15, 23], 15: [6, 14, 16, 24], 16: [7, 15, 17, 25], 17: [8, 16, 26], 18: [9, 19, 27], 19: [10, 18, 20, 28], 20: [11, 19, 21, 29], 21: [12, 20, 22, 30], 22: [13, 21, 23, 31], 23: [14, 22, 24, 32], 24: [15, 23, 25, 33], 25: [16, 24, 26, 34], 26: [17, 25, 35], 27: [18, 28, 36], 28: [19, 27, 29, 37], 29: [20, 28, 30, 38], 30: [21, 29, 31, 39], 31: [22, 30, 32, 40], 32: [23, 31, 33, 41], 33: [24, 32, 34, 42], 34: [25, 33, 35, 43], 35: [26, 34, 44], 36: [27, 37], 37: [28, 36, 38], 38: [29, 37, 39], 39: [30, 38, 40], 40: [31, 39, 41], 41: [32, 40, 42], 42: [33, 41, 43], 43: [34, 42, 44], 44: [35, 43]}

print(shortest_path_length(graph, 40, 30))
```