```python
#!/usr/bin/env python3

from collections import deque

graph = {
    0: [29, 35, 37, 41], 1: [2, 16, 25, 29, 37, 39, 40], 2: [1, 12, 22, 30], 
    3: [5, 8, 17, 21, 33, 38, 41, 42], 4: [7, 13, 16, 21, 26, 31], 5: [3, 9, 10, 17, 32], 
    6: [15, 18, 27, 28, 41], 7: [4, 19, 32, 34, 39], 8: [3, 9, 11, 14, 18, 38], 
    9: [5, 8, 15, 18, 23, 29], 10: [5, 15, 22, 36], 11: [8, 13, 16, 28, 31, 39], 
    12: [2, 30], 13: [4, 11, 15, 43], 14: [8, 18, 31, 38], 15: [6, 9, 10, 13, 18, 25, 35, 42], 
    16: [1, 4, 11, 37, 38], 17: [3, 5, 18], 18: [6, 8, 9, 14, 15, 17, 31], 
    19: [7, 31, 43], 20: [22, 32, 37, 38], 21: [3, 4, 38], 22: [2, 10, 20, 30, 34, 37, 43], 
    23: [9, 27], 24: [36], 25: [1, 15], 26: [4], 27: [6, 23, 30, 32, 38, 39, 41], 
    28: [6, 11, 30], 29: [0, 1, 9, 32, 41], 30: [2, 12, 22, 27, 28, 31, 34, 40, 43], 
    31: [4, 11, 14, 18, 19, 30, 32, 36], 32: [5, 7, 20, 27, 29, 31], 33: [3, 34], 
    34: [7, 22, 30, 33], 35: [0, 15], 36: [10, 24, 31, 43], 37: [0, 1, 16, 20, 22], 
    38: [3, 8, 14, 16, 20, 21, 27, 42], 39: [1, 7, 11, 27, 43], 40: [1, 30, 42], 
    41: [0, 3, 6, 27, 29, 43], 42: [3, 15, 38, 40], 43: [13, 19, 22, 30, 36, 39, 41]
}

def bfs_shortest_path(graph, start, end):
    queue = deque([(start, 0)])
    visited = set()

    while queue:
        node, depth = queue.popleft()
        if node == end:
            return depth
        if node not in visited:
            visited.add(node)
            for neighbor in graph.get(node, []):
                if neighbor not in visited:
                    queue.append((neighbor, depth + 1))
    return -1  # path not found

print(bfs_shortest_path(graph, 8, 6))
```