```python:/home/app/shortest_path.py
from collections import deque

def shortest_path_length(graph, start, end):
    queue = deque([(start, 0)])
    visited = set([start])
    
    while queue:
        node, dist = queue.popleft()
        
        if node == end:
            print(dist)
            return
        
        for neighbor in graph.get(node, []):
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, dist + 1))

graph = {
    0: [17, 23, 24, 31, 35, 36], 1: [5, 12, 22, 44, 46], 2: [7, 13, 24, 39, 43, 45], 
    3: [7, 8, 13, 16, 18, 31, 36, 40], 4: [5, 30, 37, 49], 5: [1, 4, 8, 13, 16, 35, 49], 
    6: [16, 21, 26, 38, 40, 49], 7: [2, 3, 11, 16, 40, 43], 8: [3, 5, 11, 29, 32, 47, 49], 
    9: [10, 29, 33, 42], 10: [9, 12, 16, 18, 27, 34, 43, 46], 11: [7, 8, 16, 19, 21, 49], 
    12: [1, 10, 38, 42], 13: [2, 3, 5, 16, 38, 48], 14: [18, 38, 48, 49], 15: [42], 
    16: [3, 5, 6, 7, 10, 11, 13, 17, 20, 42], 17: [0, 16, 49], 18: [3, 10, 14, 20, 24, 38, 44], 
    19: [11, 20, 26, 37, 46], 20: [16, 18, 19, 25, 44, 46], 21: [6, 11, 32, 35, 41], 
    22: [1, 24, 30, 44, 45, 46], 23: [0, 30, 31, 39, 41, 48], 24: [0, 2, 18, 22, 35, 39], 
    25: [20, 30, 40], 26: [6, 19, 43], 27: [10, 48], 28: [46], 29: [8, 9, 32, 35, 42], 
    30: [4, 22, 23, 25, 45, 47], 31: [0, 3, 23, 38, 48, 49], 32: [8, 21, 29, 39, 46], 
    33: [9, 42, 48], 34: [10], 35: [0, 5, 21, 24, 29, 38, 49], 36: [0, 3, 40, 46, 47], 
    37: [4, 19], 38: [6, 12, 13, 14, 18, 31, 35, 41], 39: [2, 23, 24, 32, 48], 
    40: [3, 6, 7, 25, 36, 42, 46, 47], 41: [21, 23, 38], 42: [9, 12, 15, 16, 29, 33, 40, 46, 48], 
    43: [2, 7, 10, 26, 48], 44: [1, 18, 20, 22], 45: [2, 22, 30, 49], 46: [1, 10, 19, 20, 22, 28, 32, 36, 40, 42], 
    47: [8, 30, 36, 40, 48, 49], 48: [13, 14, 23, 27, 31, 33, 39, 42, 43, 47], 
    49: [4, 5, 6, 8, 11, 14, 17, 31, 35, 45, 47]
}

shortest_path_length(graph, 8, 3)
```