```python:/home/app/shortest_path.py
from collections import deque

graph = {
    0: [22, 29, 32, 43], 1: [20, 24, 40], 2: [11, 29, 34, 35], 3: [27, 29, 39], 
    4: [5, 6, 14, 18, 22, 29, 33, 43], 5: [4, 12, 18, 35, 38], 6: [4, 11, 15, 20], 
    7: [16, 28, 32], 8: [34, 41], 9: [18, 23, 31], 10: [22, 27, 36, 38], 
    11: [2, 6, 16, 26, 27], 12: [5, 20, 23, 29, 35, 43], 13: [27, 29, 35, 40], 
    14: [4, 17], 15: [6, 24, 42, 43], 16: [7, 11], 17: [14, 31], 18: [4, 5, 9], 
    19: [23, 34, 37], 20: [1, 6, 12, 22, 30], 21: [30, 31, 33, 34], 
    22: [0, 4, 10, 20, 26], 23: [9, 12, 19, 41], 24: [1, 15, 37, 39], 
    25: [30], 26: [11, 22, 40, 42], 27: [3, 10, 11, 13, 34, 39], 
    28: [7, 31, 32, 39], 29: [0, 2, 3, 4, 12, 13, 36], 30: [20, 21, 25, 34], 
    31: [9, 17, 21, 28, 39], 32: [0, 7, 28, 37, 40, 42], 33: [4, 21, 36, 37], 
    34: [2, 8, 19, 21, 27, 30], 35: [2, 5, 12, 13, 38, 42, 43], 
    36: [10, 29, 33], 37: [19, 24, 32, 33], 38: [5, 10, 35], 
    39: [3, 24, 27, 28, 31], 40: [1, 13, 26, 32, 43], 41: [8, 23], 
    42: [15, 26, 32, 35], 43: [0, 4, 12, 15, 35, 40]
}

def bfs_shortest_path(graph, start, end):
    queue = deque([(start, 0)])
    visited = set()

    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in graph.get(node, []):
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # Return -1 if no path exists

# Find shortest path from node 15 to node 23
print(bfs_shortest_path(graph, 15, 23))
```