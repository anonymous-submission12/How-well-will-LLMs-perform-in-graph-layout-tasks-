```python
from collections import deque

def shortest_path_length(graph, start, target):
    visited = set()
    queue = deque([(start, 0)])  # Node and distance from start
    
    while queue:
        node, dist = queue.popleft()
        if node == target:
            return dist
        if node not in visited:
            visited.add(node)
            for neighbor in graph[node]:
                if neighbor not in visited:
                    queue.append((neighbor, dist + 1))
    return -1  # If no path exists

graph = {0: [2, 17, 21, 38], 1: [12, 29, 35], 2: [0, 13, 20, 23, 24, 26], 3: [12, 27, 28], 4: [9], 5: [41], 6: [8, 12, 16, 17, 24], 7: [8, 16, 30, 41], 8: [6, 7, 24, 36], 9: [4, 10, 26, 29, 31, 36], 10: [9, 11, 13, 18, 22, 34], 11: [10], 12: [1, 3, 6, 16, 23, 25], 13: [2, 10, 21, 31, 37], 14: [23], 15: [20], 16: [6, 7, 12, 19], 17: [0, 6, 20, 34, 39], 18: [10, 26, 31, 38], 19: [16, 29], 20: [2, 15, 17, 21, 26, 33], 21: [0, 13, 20, 32], 22: [10], 23: [2, 12, 14, 25, 28, 39], 24: [2, 6, 8, 32, 41], 25: [12, 23, 33, 41], 26: [2, 9, 18, 20], 27: [3], 28: [3, 23, 31], 29: [1, 9, 19, 31, 36], 30: [7], 31: [9, 13, 18, 28, 29], 32: [21, 24], 33: [20, 25, 41], 34: [10, 17], 35: [1], 36: [8, 9, 29, 40], 37: [13], 38: [0, 18], 39: [17, 23], 40: [36, 41], 41: [5, 7, 24, 25, 33, 40]}
start_node = 17
target_node = 38

print(shortest_path_length(graph, start_node, target_node))
```