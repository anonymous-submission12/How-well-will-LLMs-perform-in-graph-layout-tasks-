```python:/home/app/shortest_path.py
from collections import deque

graph = {
    0: [9, 16, 30, 49], 1: [6, 11, 12, 22, 32, 36, 37], 2: [3, 4, 26, 29, 44],
    3: [2, 13, 21, 37], 4: [2, 8, 9, 10, 16, 17, 20, 31, 44, 45, 46, 47],
    5: [9, 14, 44], 6: [1, 21, 26, 29, 33, 39], 7: [18, 19, 23, 34, 36, 48],
    8: [4, 35, 43], 9: [0, 4, 5, 13, 19, 20, 22, 23, 24, 29, 40, 47],
    10: [4, 14, 16, 20, 48], 11: [1, 34], 12: [1, 29, 36, 49], 13: [3, 9, 14, 15, 39],
    14: [5, 10, 13, 25, 48], 15: [13, 19, 36, 39], 16: [0, 4, 10, 34],
    17: [4, 26, 31, 34, 35, 40], 18: [7, 35, 36, 39], 19: [7, 9, 15, 38, 39, 40, 46],
    20: [4, 9, 10, 40, 41], 21: [3, 6, 28, 30, 31, 38, 42, 47],
    22: [1, 9, 30, 33], 23: [7, 9, 28, 34, 37], 24: [9, 43, 47], 25: [14, 27, 29, 33],
    26: [2, 6, 17, 44], 27: [25, 46], 28: [21, 23, 34, 35, 39, 48, 49],
    29: [2, 6, 9, 12, 25, 40, 44], 30: [0, 21, 22, 47], 31: [4, 17, 21, 33, 36, 38],
    32: [1, 33, 38], 33: [6, 22, 25, 31, 32, 35, 44], 34: [7, 11, 16, 17, 23, 28, 40, 48],
    35: [8, 17, 18, 28, 33, 45], 36: [1, 7, 12, 15, 18, 31, 37, 43, 45],
    37: [1, 3, 23, 36, 49], 38: [19, 21, 31, 32, 43],
    39: [6, 13, 15, 18, 19, 28], 40: [9, 17, 19, 20, 29, 34, 44],
    41: [20, 48], 42: [21], 43: [8, 24, 36, 38, 44, 48, 49],
    44: [2, 4, 5, 26, 29, 33, 40, 43, 47, 49], 45: [4, 35, 36],
    46: [4, 19, 27], 47: [4, 9, 21, 24, 30, 44, 49], 48: [7, 10, 14, 28, 34, 41, 43],
    49: [0, 12, 28, 37, 43, 44, 47]
}

def bfs_shortest_path(graph, start, end):
    queue = deque([(start, 0)])
    visited = set()

    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in graph.get(node, []):
                queue.append((neighbor, distance + 1))
    return -1  # If no path exists

print(bfs_shortest_path(graph, 34, 44))
```