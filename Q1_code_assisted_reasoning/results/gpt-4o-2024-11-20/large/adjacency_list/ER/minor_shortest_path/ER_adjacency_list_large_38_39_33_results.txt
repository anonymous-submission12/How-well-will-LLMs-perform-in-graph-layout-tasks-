```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current node, distance)

    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # Path not found

graph = {0: [3, 7, 10], 1: [8, 15, 21, 32], 2: [15, 16, 18, 21], 3: [0, 9, 16], 4: [8, 16, 19, 38, 39], 5: [23], 6: [23], 7: [0, 18, 24, 30, 33], 8: [1, 4, 10, 15, 25], 9: [3, 22, 31, 35], 10: [0, 8, 13, 31, 36], 11: [20, 31, 33], 12: [16, 24, 39], 13: [10, 30, 32], 14: [25, 28, 36, 37], 15: [1, 2, 8, 22, 23, 30], 16: [2, 3, 4, 12, 18, 33], 17: [23, 27, 34, 38], 18: [2, 7, 16, 40], 19: [4, 22, 23, 30, 31], 20: [11, 34, 35], 21: [1, 2, 23, 36, 37], 22: [9, 15, 19, 27], 23: [5, 6, 15, 17, 19, 21], 24: [7, 12, 27, 30, 35], 25: [8, 14], 26: [28], 27: [17, 22, 24, 31], 28: [14, 26, 31], 29: [36], 30: [7, 13, 15, 19, 24, 31], 31: [9, 10, 11, 19, 27, 28, 30, 38, 39], 32: [1, 13, 35], 33: [7, 11, 16], 34: [17, 20, 35, 39], 35: [9, 20, 24, 32, 34], 36: [10, 14, 21, 29, 39], 37: [14, 21, 39, 40], 38: [4, 17, 31], 39: [4, 12, 31, 34, 36, 37], 40: [18, 37]}

start_node = 39
end_node = 33

print(shortest_path_length(graph, start_node, end_node))
```