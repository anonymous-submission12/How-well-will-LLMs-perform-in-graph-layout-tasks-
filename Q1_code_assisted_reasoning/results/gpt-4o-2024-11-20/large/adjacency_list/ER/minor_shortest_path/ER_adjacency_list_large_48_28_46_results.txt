```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_depth)
    
    while queue:
        current, depth = queue.popleft()
        
        if current == end:
            return depth
        
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    queue.append((neighbor, depth + 1))
    
    return -1  # Return -1 if no path exists

graph = {0: [20, 32], 1: [19, 28, 36], 2: [7, 9, 20, 30, 36, 44, 45], 3: [16, 17, 43, 44, 45], 4: [13, 21, 34, 35, 39], 5: [37, 46], 6: [8, 12, 17], 7: [2, 10, 17, 19, 24, 27], 8: [6, 20, 21, 24, 35, 38, 39], 9: [2, 22, 28], 10: [7, 39, 44, 46], 11: [18, 19, 21, 23, 24, 29, 34, 43], 12: [6, 15, 19, 29, 30], 13: [4, 15, 19, 37], 14: [21, 30, 40, 44], 15: [12, 13, 19], 16: [3, 36], 17: [3, 6, 7, 34, 44], 18: [11, 40, 45], 19: [1, 7, 11, 12, 13, 15, 26, 33, 35, 38, 46], 20: [0, 2, 8, 32, 37, 46], 21: [4, 8, 11, 14, 44], 22: [9, 31, 42], 23: [11, 28, 33, 46], 24: [7, 8, 11, 28, 29, 36, 44], 25: [46], 26: [19, 27, 33, 42], 27: [7, 26, 32, 46], 28: [1, 9, 23, 24, 35, 43], 29: [11, 12, 24, 42], 30: [2, 12, 14, 46], 31: [22, 45], 32: [0, 20, 27, 36], 33: [19, 23, 26, 39], 34: [4, 11, 17, 44], 35: [4, 8, 19, 28, 42, 43, 44], 36: [1, 2, 16, 24, 32, 37], 37: [5, 13, 20, 36, 45], 38: [8, 19, 46], 39: [4, 8, 10, 33, 44], 40: [14, 18], 41: [44], 42: [22, 26, 29, 35, 46], 43: [3, 11, 28, 35], 44: [2, 3, 10, 14, 17, 21, 24, 34, 35, 39, 41], 45: [2, 3, 18, 31, 37], 46: [5, 10, 19, 20, 23, 25, 27, 30, 38, 42]}
start_node = 28
end_node = 46

print(shortest_path_length(graph, start_node, end_node))
```