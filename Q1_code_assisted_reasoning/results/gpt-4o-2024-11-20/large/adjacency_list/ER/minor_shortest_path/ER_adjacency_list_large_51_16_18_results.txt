```python
from collections import deque

def shortest_path_length(graph, start, end):
    queue = deque([(start, 0)])
    visited = set()
    
    while queue:
        current, depth = queue.popleft()
        if current == end:
            return depth
        
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                queue.append((neighbor, depth + 1))
    return -1  # Return -1 if no path is found

graph = {
    0: [12, 14, 28, 32, 33, 35, 37, 40], 1: [2, 5, 11, 31], 2: [1, 6, 18, 38], 
    3: [5, 11, 14, 20, 30, 32, 35, 36, 39], 4: [8, 13, 17, 24, 29, 33, 39], 
    5: [1, 3, 6, 27, 38, 41], 6: [2, 5, 36, 39], 7: [13, 21, 22], 8: [4, 12, 26], 
    9: [11, 25, 39], 10: [12, 21, 26], 11: [1, 3, 9, 22], 12: [0, 8, 10, 19, 26, 28, 37], 
    13: [4, 7, 15, 19, 22, 27, 39], 14: [0, 3, 23, 31, 33, 37], 15: [13, 21, 27, 31, 36], 
    16: [21, 29, 38], 17: [4, 19, 31, 33, 40], 18: [2, 28, 31, 33, 41], 
    19: [12, 13, 17, 20, 30], 20: [3, 19, 22, 26], 21: [7, 10, 15, 16, 29, 31, 39], 
    22: [7, 11, 13, 20, 30], 23: [14, 25, 26, 41], 24: [4, 30], 25: [9, 23, 35], 
    26: [8, 10, 12, 20, 23, 31, 39], 27: [5, 13, 15, 30, 34, 37], 28: [0, 12, 18], 
    29: [4, 16, 21, 31], 30: [3, 19, 22, 24, 27, 31, 34, 36], 31: [1, 14, 15, 17, 18, 21, 26, 29, 30, 41], 
    32: [0, 3], 33: [0, 4, 14, 17, 18], 34: [27, 30, 39, 41], 35: [0, 3, 25, 38, 40], 
    36: [3, 6, 15, 30], 37: [0, 12, 14, 27], 38: [2, 5, 16, 35], 
    39: [3, 4, 6, 9, 13, 21, 26, 34, 40], 40: [0, 17, 35, 39], 41: [5, 18, 23, 31, 34]
}

start_node = 16
end_node = 18

print(shortest_path_length(graph, start_node, end_node))
```