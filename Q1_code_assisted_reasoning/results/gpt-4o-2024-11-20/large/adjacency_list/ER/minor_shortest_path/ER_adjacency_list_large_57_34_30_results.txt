```python
from collections import deque

def bfs_shortest_path_length(graph, start, goal):
    queue = deque([(start, 0)])
    visited = set()
    
    while queue:
        current, distance = queue.popleft()
        if current == goal:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                queue.append((neighbor, distance + 1))
    return -1  # No path found

graph = {0: [7, 22, 31, 43], 1: [20, 25, 27, 38], 2: [6, 24, 27, 39], 
         3: [6, 14, 28], 4: [8, 24, 29, 43], 5: [11, 28, 36, 39], 
         6: [2, 3, 7, 13, 16, 34, 39], 7: [0, 6, 11, 27, 36, 37], 
         8: [4, 16], 9: [12, 30, 37], 10: [31], 11: [5, 7, 16, 17, 30, 36, 41, 43], 
         12: [9, 31, 34, 43], 13: [6, 14, 16, 37], 14: [3, 13, 31], 
         15: [20, 28, 37, 40], 16: [6, 8, 11, 13, 17], 17: [11, 16, 29], 
         18: [25, 31, 33, 34, 38], 19: [36, 41], 20: [1, 15, 23, 29], 
         21: [27, 28, 29, 32, 37], 22: [0, 41, 42], 23: [20, 28, 36, 41], 
         24: [2, 4, 33, 41], 25: [1, 18, 29, 33], 26: [27], 27: [1, 2, 7, 21, 26, 37, 43], 
         28: [3, 5, 15, 21, 23, 32], 29: [4, 17, 20, 21, 25, 37, 38, 43], 
         30: [9, 11], 31: [0, 10, 12, 14, 18, 32, 33, 40], 32: [21, 28, 31, 41], 
         33: [18, 24, 25, 31, 43], 34: [6, 12, 18, 35, 39, 41], 35: [34], 
         36: [5, 7, 11, 19, 23, 42], 37: [7, 9, 13, 15, 21, 27, 29], 
         38: [1, 18, 29], 39: [2, 5, 6, 34], 40: [15, 31], 
         41: [11, 19, 22, 23, 24, 32, 34, 43], 42: [22, 36], 
         43: [0, 4, 11, 12, 27, 29, 33, 41]}

print(bfs_shortest_path_length(graph, 34, 30))
```