```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # If no path exists

graph = {0: [2, 10, 15, 18, 22, 32, 38], 1: [19, 28], 2: [0, 11, 32, 40], 3: [9, 23, 32, 35, 39], 4: [9, 24], 5: [8, 26], 6: [7, 17, 23, 27, 33, 36], 7: [6, 13, 16, 20, 25], 8: [5, 29, 43], 9: [3, 4, 19, 35, 43], 10: [0, 18, 23], 11: [2, 18, 29, 36, 38, 41], 12: [15, 28, 34], 13: [7, 29, 39, 40, 44], 14: [16, 24, 39], 15: [0, 12, 33], 16: [7, 14, 31], 17: [6, 20, 21, 29], 18: [0, 10, 11, 33], 19: [1, 9, 21, 26, 27, 40], 20: [7, 17, 22, 24, 27, 34, 42], 21: [17, 19, 27, 31, 38, 40], 22: [0, 20, 23, 40], 23: [3, 6, 10, 22, 30, 40, 43], 24: [4, 14, 20, 26, 33, 37, 40], 25: [7, 35, 40], 26: [5, 19, 24, 30], 27: [6, 19, 20, 21, 33, 35], 28: [1, 12, 40], 29: [8, 11, 13, 17, 36, 44], 30: [23, 26], 31: [16, 21, 36], 32: [0, 2, 3], 33: [6, 15, 18, 24, 27], 34: [12, 20, 43], 35: [3, 9, 25, 27, 39], 36: [6, 11, 29, 31, 39], 37: [24], 38: [0, 11, 21], 39: [3, 13, 14, 35, 36, 41, 42], 40: [2, 13, 19, 21, 22, 23, 24, 25, 28], 41: [11, 39], 42: [20, 39, 44], 43: [8, 9, 23, 34], 44: [13, 29, 42]}
print(shortest_path_length(graph, 9, 6))
```