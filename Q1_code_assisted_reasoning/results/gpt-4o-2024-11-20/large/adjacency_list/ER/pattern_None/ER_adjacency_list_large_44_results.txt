```python:/home/app/graph_classification.py
from collections import deque

def is_star(adj_list):
    num_nodes = len(adj_list)
    center_candidates = [node for node, neighbors in adj_list.items() if len(neighbors) == num_nodes - 1]
    return len(center_candidates) == 1

def is_cycle(adj_list):
    num_edges = sum(len(neighbors) for neighbors in adj_list.values()) // 2
    num_nodes = len(adj_list)
    return all(len(neighbors) == 2 for neighbors in adj_list.values()) and num_edges == num_nodes

def is_path(adj_list):
    ends = [node for node, neighbors in adj_list.items() if len(neighbors) == 1]
    return len(ends) == 2 and all(1 <= len(neighbors) <= 2 for neighbors in adj_list.values())

def is_complete(adj_list):
    num_nodes = len(adj_list)
    return all(len(neighbors) == num_nodes - 1 for neighbors in adj_list.values())

def is_grid(adj_list):
    degrees = [len(neighbors) for neighbors in adj_list.values()]
    return all(degree in {2, 3, 4} for degree in degrees)

def is_clustered(adj_list):
    cluster_coeffs = []
    for node, neighbors in adj_list.items():
        if len(neighbors) < 2:
            continue
        possible_links = len(neighbors) * (len(neighbors) - 1) / 2
        actual_links = sum(1 for u in neighbors for v in neighbors if v in adj_list[u]) / 2
        cluster_coeffs.append(actual_links / possible_links)
    return sum(cluster_coeffs) / len(cluster_coeffs) > 0.4 if cluster_coeffs else False

def is_random(adj_list):
    return not (is_star(adj_list) or is_cycle(adj_list) or is_path(adj_list) or is_grid(adj_list) or is_complete(adj_list) or is_clustered(adj_list))

adj_list = {0: [7, 8, 35, 43, 46], 1: [3, 31, 32, 37], 2: [3, 16, 18, 31], 3: [1, 2, 6, 19], 4: [6, 16, 20, 25, 33, 34, 39, 44, 46], 5: [23, 40], 6: [3, 4, 17, 22, 33, 42, 45, 48], 7: [0, 28, 29], 8: [0, 9, 34], 9: [8, 14, 25, 26, 27], 10: [18, 22, 40], 11: [12, 14], 12: [11, 16, 17, 37, 41], 13: [17, 19,...

if is_star(adj_list):
    print("Star")
elif is_cycle(adj_list):
    print("Cycle")
elif is_path(adj_list):
    print("Path")
elif is_grid(adj_list):
    print("Grid")
elif is_complete(adj_list):
    print("Complete")
elif is_clustered(adj_list):
    print("Clustered Graph")
elif is_random(adj_list):
    print("Random Graph")
```