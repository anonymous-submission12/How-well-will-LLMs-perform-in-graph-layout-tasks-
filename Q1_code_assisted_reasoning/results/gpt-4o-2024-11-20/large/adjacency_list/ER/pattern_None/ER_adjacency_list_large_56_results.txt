```python
def graph_pattern(adj_list):
    nodes = list(adj_list.keys())
    edges = sum(len(v) for v in adj_list.values()) // 2
    n = len(nodes)
    
    # Check for a star graph
    center_nodes = [node for node in nodes if len(adj_list[node]) == n-1]
    if len(center_nodes) == 1:
        return "Star"
    
    # Check for a cycle graph
    if all(len(adj_list[node]) == 2 for node in nodes) and edges == n:
        return "Cycle"
    
    # Check for a path graph
    degree_count = [len(adj_list[node]) for node in nodes]
    if sorted(degree_count) == [1, 1] + [2] * (n-2):
        return "Path"
    
    # Check for a grid graph (not exhaustively, simple heuristic for square-like grid)
    if n != 0 and n**0.5 % 1 == 0:  # n is a perfect square
        side = int(n**0.5)
        grid_like = all(len(adj_list[node]) in [2, 3, 4] for node in nodes)
        if grid_like and edges == (2 * n - 2 * side):  # heuristic for basic grids
            return "Grid"
    
    # Check for a complete graph
    if edges == n * (n - 1) // 2:
        return "Complete"
    
    # Check for a clustered graph (nodes have high local density)
    local_density = [
        len([1 for neighbor in adj_list[node] if len(adj_list[neighbor]) > n / 4])
        for node in nodes
    ]
    if sum(local_density) / len(local_density) > n / 4:  # heuristic
        return "Clustered graph"
    
    # Otherwise, assume random graph
    return "Random graph"

adj_list = {0: [3, 7, 10, 14, 16, 20, 23], 1: [2], 2: [1, 37], 3: [0, 4, 6, 9, 24], 4: [3, 16, 21, 26, 30, 34, 40], 5: [11, 24], 6: [3, 17, 20, 33, 38, 40], 7: [0, 10], 8: [27, 31, 33, 40], 9: [3, 16], 10: [0, 7, 29], 11: [5, 16, 22, 23, 28, 37], 12: [30, 35, 37], 13: [27, 34], 14: [0, 34, 36, 39], 15: [17, 21, 24, 35], 16: [0, 4, 9, 11, 18, 21, 28, 30, 39, 40], 17: [6, 15, 18, 22, 30], 18: [16, 17, 21, 35], 19: [34], 20: [0, 6, 24, 40], 21: [4, 15, 16, 18, 31, 34], 22: [11, 17, 27, 38], 23: [0, 11, 33, 34, 37], 24: [3, 5, 15, 20, 28], 25: [36], 26: [4, 36], 27: [8, 13, 22, 28, 29, 36], 28: [11, 16, 24, 27], 29: [10, 27, 37], 30: [4, 12, 16, 17, 31, 35], 31: [8, 21, 30, 39, 40], 32: [34], 33: [6, 8, 23], 34: [4, 13, 14, 19, 21, 23, 32, 37], 35: [12, 15, 18, 30, 36, 37], 36: [14, 25, 26, 27, 35, 40], 37: [2, 11, 12, 23, 29, 34, 35], 38: [6, 22, 39], 39: [14, 16, 31, 38], 40: [4, 6, 8, 16, 20, 31, 36]}
print(graph_pattern(adj_list))
```