```python:/home/user/graph_analysis.py
import networkx as nx

# Given adjacency list
adjacency_list = {
    0: [22, 29, 31], 1: [19, 20, 21, 38, 46], 2: [10, 26], 3: [22, 35, 41, 45],
    4: [19, 25, 39], 5: [13, 21, 30, 43], 6: [9, 36], 7: [10, 20, 29, 31, 32, 35, 38, 41, 43],
    8: [18, 31], 9: [6, 10, 16, 19, 34, 42], 10: [2, 7, 9, 16, 21, 24, 27, 34], 11: [15],
    12: [19, 21, 28, 40], 13: [5, 20, 26, 30, 31, 34, 36, 41, 45], 14: [17, 25, 37, 41, 43],
    15: [11, 22, 31, 32], 16: [9, 10, 32, 34, 45], 17: [14, 29, 41], 18: [8, 35],
    19: [1, 4, 9, 12, 23, 37, 40], 20: [1, 7, 13, 36, 44, 45], 21: [1, 5, 10, 12, 34, 35, 40],
    22: [0, 3, 15, 42], 23: [19, 31, 45], 24: [10, 30, 31, 32, 35, 45], 25: [4, 14, 27, 30, 34, 44],
    26: [2, 13, 33, 37, 41], 27: [10, 25, 28, 37, 38, 40, 42], 28: [12, 27, 38],
    29: [0, 7, 17, 35, 37, 46], 30: [5, 13, 24, 25, 31, 46], 31: [0, 7, 8, 13, 15, 23, 24, 30, 37],
    32: [7, 15, 16, 24, 36, 38, 45], 33: [26, 41, 44], 34: [9, 10, 13, 16, 21, 25, 41, 43, 44],
    35: [3, 7, 18, 21, 24, 29, 43, 44], 36: [6, 13, 20, 32, 42], 37: [14, 19, 26, 27, 29, 31],
    38: [1, 7, 27, 28, 32], 39: [4, 46], 40: [12, 19, 21, 27, 42, 43], 41: [3, 7, 13, 14, 17, 26, 33, 34],
    42: [9, 22, 27, 36, 40], 43: [5, 7, 14, 34, 35, 40, 45], 44: [20, 25, 33, 34, 35],
    45: [3, 13, 16, 20, 23, 24, 32, 43], 46: [1, 29, 30, 39]
}

# Constructing the graph
G = nx.Graph(adjacency_list)

# Helper functions to check graph type
def is_star(G):
    degrees = [deg for _, deg in G.degree()]
    return degrees.count(max(degrees)) == 1 and max(degrees) == len(G.nodes) - 1

def is_cycle(G):
    return nx.is_connected(G) and all(deg == 2 for _, deg in G.degree()) and len(G.edges) == len(G.nodes)

def is_path(G):
    return nx.is_connected(G) and sum(1 for _, deg in G.degree() if deg == 1) == 2 and all(deg in [1, 2] for _, deg in G.degree())

def is_complete(G):
    n = len(G.nodes)
    return len(G.edges) == (n * (n - 1)) // 2

def is_grid(G):
    degrees = sorted([deg for _, deg in G.degree()])
    return set(degrees) <= {2, 3, 4}

def is_clustered(G):
    return nx.transitivity(G) > 0.4  # High clustering coefficient

# Determining the graph type
if is_star(G):
    print("Star")
elif is_cycle(G):
    print("Cycle")
elif is_path(G):
    print("Path")
elif is_complete(G):
    print("Complete")
elif is_grid(G):
    print("Grid")
elif is_clustered(G):
    print("Clustered Graph")
else:
    print("Random Graph")
```