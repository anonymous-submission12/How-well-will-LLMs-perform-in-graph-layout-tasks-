```python
def determine_graph_pattern(adj_list):
    # Calculate degrees of all nodes
    degrees = {node: len(edges) for node, edges in adj_list.items()}
    max_degree = max(degrees.values())
    num_nodes = len(adj_list)
    num_edges = sum(len(edges) for edges in adj_list.values()) // 2

    # Conditions for specific patterns
    if max_degree == num_nodes - 1 and min(degrees.values()) == 1:
        return "Star"
    elif all(degree == 2 for degree in degrees.values()) and num_edges == num_nodes:
        return "Cycle"
    elif max_degree == 2 and num_edges == num_nodes - 1:
        return "Path"
    elif num_nodes ** 0.5 == int(num_nodes ** 0.5) and num_edges == 2 * (num_nodes - int(num_nodes ** 0.5)):
        return "Grid"
    elif num_edges == num_nodes * (num_nodes - 1) // 2:
        return "Complete"
    elif max_degree < num_nodes - 1 and len(set(degrees.values())) > 2:
        return "Clustered Graph"
    else:
        return "Random Graph"

# Input adjacency list
adjacency_list = {0: [3, 10, 22], 1: [10, 37, 40], 2: [16, 28, 38, 40], 3: [0, 10, 18, 19], 4: [13, 14, 40],
                  5: [17, 21, 24], 6: [21, 32, 35, 36, 37], 7: [22, 24, 39], 8: [24, 34, 38], 9: [18, 28, 38], 
                  10: [0, 1, 3, 18, 31, 34], 11: [13, 20, 24], 12: [15, 19, 20], 13: [4, 11, 19, 23, 25], 
                  14: [4, 21, 23], 15: [12, 20, 36], 16: [2, 23, 25, 26, 32, 36], 17: [5, 25, 28, 35], 
                  18: [3, 9, 10], 19: [3, 12, 13, 28, 29, 37], 20: [11, 12, 15, 33], 21: [5, 6, 14, 27, 30, 32], 
                  22: [0, 7, 28, 32, 38], 23: [13, 14, 16], 24: [5, 7, 8, 11], 25: [13, 16, 17], 26: [16, 40], 
                  27: [21, 39], 28: [2, 9, 17, 19, 22, 30, 36], 29: [19, 38], 30: [21, 28, 34, 39], 31: [10], 
                  32: [6, 16, 21, 22], 33: [20, 40], 34: [8, 10, 30], 35: [6, 17], 36: [6, 15, 16, 28, 38], 
                  37: [1, 6, 19], 38: [2, 8, 9, 22, 29, 36], 39: [7, 27, 30], 40: [1, 2, 4, 26, 33]}

# Determine the pattern
print(determine_graph_pattern(adjacency_list))
```