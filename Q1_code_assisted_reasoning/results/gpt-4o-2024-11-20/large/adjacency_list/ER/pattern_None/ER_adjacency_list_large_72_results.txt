```python
def determine_graph_type(adjacency_list):
    num_nodes = len(adjacency_list)
    num_edges = sum(len(neighbors) for neighbors in adjacency_list.values()) // 2

    # Check for Complete Graph
    if num_edges == num_nodes * (num_nodes - 1) // 2:
        return "Complete"

    # Check for Star Graph
    center_nodes = [node for node, neighbors in adjacency_list.items() if len(neighbors) == num_nodes - 1]
    if len(center_nodes) == 1:
        return "Star"

    # Check for Cycle Graph
    if all(len(neighbors) == 2 for neighbors in adjacency_list.values()):
        return "Cycle"

    # Check for Path Graph
    if sum(len(neighbors) == 1 for neighbors in adjacency_list.values()) == 2 and \
       sum(len(neighbors) == 2 for neighbors in adjacency_list.values()) == num_nodes - 2:
        return "Path"

    # Check for Grid Graph
    # A simple check for a grid graph is not straightforward without additional information
    # about the dimensions, so we skip this check.

    # Check for Clustered Graph
    # A simple heuristic: if there are many nodes with a high degree and many with a low degree
    high_degree_nodes = sum(1 for neighbors in adjacency_list.values() if len(neighbors) > num_nodes / 2)
    low_degree_nodes = sum(1 for neighbors in adjacency_list.values() if len(neighbors) < num_nodes / 4)
    if high_degree_nodes > 0 and low_degree_nodes > 0:
        return "Clustered"

    # Default to Random Graph
    return "Random"

adjacency_list = {
    0: [5, 9, 13, 25, 26, 41], 1: [4, 8, 10, 17], 2: [12, 13, 25, 41], 3: [10, 28, 31, 37],
    4: [1, 12, 26, 38], 5: [0], 6: [9, 17, 24, 38], 7: [13, 15, 25, 36, 39, 41], 8: [1, 13, 21, 29],
    9: [0, 6, 28], 10: [1, 3, 14, 36, 37, 38], 11: [13, 19, 38], 12: [2, 4, 14, 16, 19, 31, 41],
    13: [0, 2, 7, 8, 11, 20, 27, 28, 41], 14: [10, 12, 16, 34], 15: [7, 27, 32, 34, 40],
    16: [12, 14, 17, 22, 29, 34], 17: [1, 6, 16, 25, 26], 18: [25], 19: [11, 12, 22, 24, 25, 26, 41],
    20: [13, 24, 31], 21: [8, 27, 31], 22: [16, 19, 37, 39], 23: [28], 24: [6, 19, 20, 37],
    25: [0, 2, 7, 17, 18, 19, 26, 38], 26: [0, 4, 17, 19, 25], 27: [13, 15, 21, 37],
    28: [3, 9, 13, 23, 35], 29: [8, 16, 41], 30: [36], 31: [3, 12, 20, 21, 33],
    32: [15, 33, 37], 33: [31, 32, 35, 39], 34: [14, 15, 16, 38], 35: [28, 33],
    36: [7, 10, 30, 40], 37: [3, 10, 22, 24, 27, 32], 38: [4, 6, 10, 11, 25, 34],
    39: [7, 22, 33], 40: [15, 36], 41: [0, 2, 7, 12, 13, 19, 29]
}

print(determine_graph_type(adjacency_list))
```