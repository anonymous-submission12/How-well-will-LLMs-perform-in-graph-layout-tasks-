```python
def determine_graph_pattern(adj_list):
    n = len(adj_list)
    degrees = [len(adj_list[node]) for node in adj_list]

    # Check for Star pattern
    if degrees.count(n - 1) == 1 and degrees.count(1) == n - 1:
        return "Star"

    # Check for Cycle pattern
    if all(degree == 2 for degree in degrees):
        return "Cycle"

    # Check for Path pattern
    if degrees.count(1) == 2 and degrees.count(2) == n - 2:
        return "Path"

    # Check for Grid pattern
    sqrt_n = int(n**0.5)
    if sqrt_n * sqrt_n == n:
        rows = sqrt_n
        cols = sqrt_n
        expected_edges = 2 * rows * cols - rows - cols
        actual_edges = sum(degrees) // 2
        if actual_edges == expected_edges:
            return "Grid"

    # Check for Complete pattern
    if all(degree == n - 1 for degree in degrees):
        return "Complete"

    # Check for Clustered graph
    # A clustered graph typically has groups of nodes with high internal connectivity
    # and sparse connectivity between groups. This is harder to define precisely,
    # but we can approximate by checking for groups of nodes with high connectivity.
    clusters = []
    visited = set()

    def dfs(node, cluster):
        visited.add(node)
        cluster.append(node)
        for neighbor in adj_list[node]:
            if neighbor not in visited:
                dfs(neighbor, cluster)

    for node in adj_list:
        if node not in visited:
            cluster = []
            dfs(node, cluster)
            clusters.append(cluster)

    if len(clusters) > 1 and all(len(cluster) > 1 for cluster in clusters):
        return "Clustered graph"

    # Default to Random graph
    return "Random graph"


adj_list = {
    0: [1, 29, 35, 41, 48], 1: [0, 13, 23, 44, 45], 2: [5, 8, 27, 33, 39, 43, 45],
    3: [10, 12, 16, 20, 24, 32], 4: [14, 21, 37, 39, 40], 5: [2, 7, 28], 6: [18, 28, 39],
    7: [5, 30, 48], 8: [2, 32, 35, 42], 9: [22, 43, 44], 10: [3, 19, 30, 34, 47],
    11: [22, 28, 46], 12: [3, 44], 13: [1, 17, 27, 28, 40], 14: [4, 25, 30, 35],
    15: [42], 16: [3, 17, 23, 28, 29], 17: [13, 16, 26, 28, 33, 38, 41, 43, 44],
    18: [6, 46], 19: [10, 22, 33, 37, 41], 20: [3, 30], 21: [4, 30, 40], 22: [9, 11, 19, 27],
    23: [1, 16, 31], 24: [3, 46], 25: [14, 34, 45], 26: [17, 27, 29, 30, 34, 48],
    27: [2, 13, 22, 26, 35, 43], 28: [5, 6, 11, 13, 16, 17, 42, 48], 29: [0, 16, 26, 48],
    30: [7, 10, 14, 20, 21, 26, 31, 36, 38, 47], 31: [23, 30, 49], 32: [3, 8, 34, 39, 45, 48],
    33: [2, 17, 19, 43, 44], 34: [10, 25, 26, 32, 36], 35: [0, 8, 14, 27, 41],
    36: [30, 34], 37: [4, 19, 41, 45], 38: [17, 30], 39: [2, 4, 6, 32, 42, 43],
    40: [4, 13, 21], 41: [0, 17, 19, 35, 37, 49], 42: [8, 15, 28, 39, 48],
    43: [2, 9, 17, 27, 33, 39, 47], 44: [1, 9, 12, 17, 33, 49], 45: [1, 2, 25, 32, 37],
    46: [11, 18, 24], 47: [10, 30, 43], 48: [0, 7, 26, 28, 29, 32, 42], 49: [31, 41, 44]
}

print(determine_graph_pattern(adj_list))
```