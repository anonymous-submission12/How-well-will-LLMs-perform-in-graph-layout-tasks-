```python
from collections import defaultdict

def graph_pattern(adj_list):
    n = len(adj_list)
    edges = sum(len(neighbors) for neighbors in adj_list.values()) // 2

    # Check for Star pattern
    max_degree = max(len(neighbors) for neighbors in adj_list.values())
    if max_degree == n - 1 and all(len(neighbors) == 1 for node, neighbors in adj_list.items() if len(neighbors) != max_degree):
        return "Star"

    # Check for Cycle pattern
    if edges == n and all(len(neighbors) == 2 for neighbors in adj_list.values()):
        return "Cycle"

    # Check for Path pattern
    if edges == n - 1 and sum(len(neighbors) == 1 for neighbors in adj_list.values()) == 2 and all(len(neighbors) <= 2 for neighbors in adj_list.values()):
        return "Path"

    # Check for Grid pattern (approximation based on degree)
    degrees = [len(neighbors) for neighbors in adj_list.values()]
    if all(degree in {2, 3, 4} for degree in degrees):
        return "Grid"

    # Check for Complete graph
    if edges == n * (n - 1) // 2:
        return "Complete"

    # Check for Clustered graph (approximation based on modularity)
    clusters = defaultdict(set)
    for node, neighbors in adj_list.items():
        for neighbor in neighbors:
            clusters[node].add(neighbor)
            clusters[neighbor].add(node)
    if len(clusters) < n // 2:
        return "Clustered"

    # Default to Random graph
    return "Random"

adj_list = {0: [38, 40, 41], 1: [2, 4, 9, 24, 26, 38, 41, 44], 2: [1, 5, 6, 7, 9, 44], 3: [8, 20, 32], 4: [1, 18, 20], 5: [2, 8, 16, 32, 43], 6: [2, 7, 15, 31], 7: [2, 6, 18, 41], 8: [3, 5, 10, 13, 14, 16], 9: [1, 2, 20, 22, 23, 31, 39], 10: [8, 13, 34, 38], 11: [33, 36], 12: [16], 13: [8, 10, 16, 39, 42], 14: [8, 15], 15: [6, 14, 17, 18, 28, 41], 16: [5, 8, 12, 13, 25, 35, 42], 17: [15, 21, 32, 33, 40, 44], 18: [4, 7, 15, 19, 23, 36, 43], 19: [18, 22, 31, 41], 20: [3, 4, 9, 26, 38], 21: [17, 27], 22: [9, 19], 23: [9, 18, 30, 31, 43], 24: [1, 25, 35], 25: [16, 24, 34, 41], 26: [1, 20, 33, 36], 27: [21, 28, 43], 28: [15, 27, 29], 29: [28, 32, 37], 30: [23], 31: [6, 9, 19, 23, 36, 41], 32: [3, 5, 17, 29, 34, 43, 44], 33: [11, 17, 26], 34: [10, 25, 32, 40], 35: [16, 24, 42], 36: [11, 18, 26, 31], 37: [29, 41], 38: [0, 1, 10, 20], 39: [9, 13, 43, 44], 40: [0, 17, 34, 42], 41: [0, 1, 7, 15, 19, 25, 31, 37, 43], 42: [13, 16, 35, 40], 43: [5, 18, 23, 27, 32, 39, 41], 44: [1, 2, 17, 32, 39]}
print(graph_pattern(adj_list))
```