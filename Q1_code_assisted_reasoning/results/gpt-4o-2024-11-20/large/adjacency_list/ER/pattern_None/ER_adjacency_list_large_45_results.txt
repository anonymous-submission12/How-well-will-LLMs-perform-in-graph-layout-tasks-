```python
def determine_graph_pattern(adj_list):
    n = len(adj_list)
    edges = sum(len(neighbors) for neighbors in adj_list.values()) // 2

    # Check for Star pattern
    if any(len(neighbors) == n - 1 for neighbors in adj_list.values()):
        return "Star"

    # Check for Cycle pattern
    if edges == n and all(len(neighbors) == 2 for neighbors in adj_list.values()):
        return "Cycle"

    # Check for Path pattern
    if edges == n - 1 and sum(len(neighbors) == 1 for neighbors in adj_list.values()) == 2:
        return "Path"

    # Check for Complete pattern
    if edges == n * (n - 1) // 2:
        return "Complete"

    # Check for Grid pattern (approximation based on degree distribution)
    degrees = sorted(len(neighbors) for neighbors in adj_list.values())
    if degrees.count(4) + degrees.count(3) + degrees.count(2) == n:
        return "Grid"

    # Check for Clustered graph (approximation based on modularity)
    # If there are groups of nodes with higher internal connectivity, it might be clustered
    clusters = 0
    for node, neighbors in adj_list.items():
        internal_edges = sum(1 for neighbor in neighbors if set(adj_list[neighbor]) & set(neighbors))
        if internal_edges > len(neighbors) // 2:
            clusters += 1
    if clusters > n // 4:
        return "Clustered"

    # Default to Random graph
    return "Random"

# Input adjacency list
adj_list = {0: [1, 13, 16, 17, 29, 31, 40], 1: [0, 5, 8, 22, 30, 39, 42], 2: [8, 19, 32], 3: [7, 8, 10, 12, 28, 31, 34, 38, 41], 4: [6, 10, 18, 35, 39], 5: [1, 6, 25], 6: [4, 5, 12, 17, 27], 7: [3], 8: [1, 2, 3, 12, 28, 35, 36], 9: [19, 20], 10: [3, 4, 24, 28], 11: [17, 27], 12: [3, 6, 8, 25, 26, 38], 13: [0, 15, 18, 24, 27, 28, 33, 34], 14: [18, 28, 41], 15: [13, 24, 33, 37, 38, 41], 16: [0, 17, 18, 21, 34, 36, 40], 17: [0, 6, 11, 16, 32, 34], 18: [4, 13, 14, 16, 36], 19: [2, 9, 28, 36], 20: [9, 27, 36], 21: [16, 23], 22: [1, 24, 25, 28, 33], 23: [21, 24, 32, 35, 36], 24: [10, 13, 15, 22, 23], 25: [5, 12, 22], 26: [12, 33, 34, 35, 41], 27: [6, 11, 13, 20, 28], 28: [3, 8, 10, 13, 14, 19, 22, 27, 40], 29: [0], 30: [1, 32], 31: [0, 3], 32: [2, 17, 23, 30, 38], 33: [13, 15, 22, 26, 38], 34: [3, 13, 16, 17, 26, 38, 39, 42], 35: [4, 8, 23, 26, 37], 36: [8, 16, 18, 19, 20, 23], 37: [15, 35, 40], 38: [3, 12, 15, 32, 33, 34, 40], 39: [1, 4, 34], 40: [0, 16, 28, 37, 38], 41: [3, 14, 15, 26], 42: [1, 34]}

# Determine the graph pattern
print(determine_graph_pattern(adj_list))
```