```python
from collections import defaultdict

# Graph data
graph = {0: [8, 22, 27, 43, 46], 1: [8, 24, 25], 2: [7, 9, 12, 25, 37, 39, 44], 3: [7, 24, 36, 38, 41, 43], 
         4: [37], 5: [7, 13, 45], 6: [7, 27, 38], 7: [2, 3, 5, 6, 11, 31, 43], 8: [0, 1, 16, 17, 28, 43], 
         9: [2, 16, 24, 27, 28, 36, 41, 42], 10: [12, 22, 30, 45], 11: [7, 18, 23, 25, 26, 28, 29, 33, 36], 
         12: [2, 10, 17, 36, 44], 13: [5, 21, 35, 40, 41, 43], 14: [22], 15: [33], 16: [8, 9, 35, 40], 
         17: [8, 12, 25, 29], 18: [11, 27, 36, 40], 19: [20, 21, 23, 37, 45], 20: [19, 37, 44, 45], 
         21: [13, 19, 23, 24, 43, 44], 22: [0, 10, 14, 25, 39], 23: [11, 19, 21, 44], 24: [1, 3, 9, 21, 25, 30, 36], 
         25: [1, 2, 11, 17, 22, 24, 31], 26: [11, 27, 33, 44], 27: [0, 6, 9, 18, 26, 33, 41, 45], 
         28: [8, 9, 11], 29: [11, 17, 31, 32, 39], 30: [10, 24, 35], 31: [7, 25, 29], 32: [29, 46], 
         33: [11, 15, 26, 27], 34: [39, 42, 44], 35: [13, 16, 30, 46], 36: [3, 9, 11, 12, 18, 24, 45], 
         37: [2, 4, 19, 20], 38: [3, 6, 42, 45], 39: [2, 22, 29, 34, 44], 40: [13, 16, 18], 
         41: [3, 9, 13, 27, 46], 42: [9, 34, 38], 43: [0, 3, 7, 8, 13, 21], 44: [2, 12, 20, 21, 23, 26, 34, 39], 
         45: [5, 10, 19, 20, 27, 36, 38], 46: [0, 32, 35, 41]}

# Count nodes and edges
num_nodes = len(graph)
num_edges = sum(len(neighbors) for neighbors in graph.values()) // 2

# Check if the graph is a Path graph
def is_path():
    degree_count = defaultdict(int)
    for node, neighbors in graph.items():
        degree_count[len(neighbors)] += 1
    return degree_count[1] == 2 and degree_count[2] == num_nodes - 2

# Check if the graph is a Cycle graph
def is_cycle():
    degree_count = defaultdict(int)
    for node, neighbors in graph.items():
        degree_count[len(neighbors)] += 1
    return degree_count[2] == num_nodes

# Check if the graph is a Star graph
def is_star():
    degree_count = defaultdict(int)
    for node, neighbors in graph.items():
        degree_count[len(neighbors)] += 1
    return degree_count[1] == num_nodes - 1 and degree_count[num_nodes - 1] == 1

# Check if the graph is a Complete graph
def is_complete():
    expected_edges = num_nodes * (num_nodes - 1) // 2
    return num_edges == expected_edges

# Check if the graph is a Grid graph
def is_grid():
    sqrt_n = int(num_nodes ** 0.5)
    if sqrt_n * sqrt_n != num_nodes:
        return False
    expected_edges = 2 * num_nodes - 2 * sqrt_n
    return num_edges == expected_edges

# Determine type of graph
if is_star():
    print("Star")
elif is_cycle():
    print("Cycle")
elif is_path():
    print("Path")
elif is_grid():
    print("Grid")
elif is_complete():
    print("Complete")
else:
    print("Random")
```