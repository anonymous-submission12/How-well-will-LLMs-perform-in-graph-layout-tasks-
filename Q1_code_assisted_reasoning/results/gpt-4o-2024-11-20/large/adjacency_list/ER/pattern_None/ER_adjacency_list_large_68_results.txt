```python
from collections import defaultdict

def determine_graph_pattern(adj_list):
    # Count the number of nodes and edges
    num_nodes = len(adj_list)
    num_edges = sum(len(neighbors) for neighbors in adj_list.values()) // 2

    # Check for Star pattern
    degrees = {node: len(neighbors) for node, neighbors in adj_list.items()}
    max_degree = max(degrees.values())
    if max_degree == num_nodes - 1 and list(degrees.values()).count(1) == num_nodes - 1:
        return "Star"

    # Check for Cycle pattern
    if num_edges == num_nodes and all(degree == 2 for degree in degrees.values()):
        return "Cycle"

    # Check for Path pattern
    if num_edges == num_nodes - 1 and list(degrees.values()).count(1) == 2 and all(degree <= 2 for degree in degrees.values()):
        return "Path"

    # Check for Grid pattern
    # A grid graph has nodes arranged in a rectangular grid, each node connected to its neighbors.
    # This is a complex check, so we simplify by checking if the graph is planar and has a rectangular structure.
    # For simplicity, we skip this check here.

    # Check for Complete pattern
    if num_edges == num_nodes * (num_nodes - 1) // 2:
        return "Complete"

    # Check for Clustered graph
    # A clustered graph has dense subgraphs (clusters) with sparse connections between them.
    # We approximate this by checking if the graph has communities with high internal connectivity.
    # For simplicity, we skip this check here.

    # Default to Random graph
    return "Random"

# Input adjacency list
adj_list = {0: [4, 10, 19, 32, 37], 1: [16], 2: [5, 21, 30, 33, 34, 36, 37], 3: [31, 33, 37, 39], 4: [0, 9], 5: [2, 21, 23, 33, 34, 39], 6: [17, 34], 7: [10], 8: [21, 27], 9: [4, 12, 17, 26, 36], 10: [0, 7, 22, 25, 38, 39], 11: [14, 34], 12: [9, 22], 13: [33], 14: [11, 27], 15: [18, 23, 38], 16: [1, 35], 17: [6, 9, 30, 37], 18: [15, 27, 35], 19: [0, 26, 30, 38], 20: [21, 22, 27, 38], 21: [2, 5, 8, 20], 22: [10, 12, 20, 25, 27, 30, 31], 23: [5, 15, 26, 28, 40], 24: [27, 33, 37], 25: [10, 22, 26, 29], 26: [9, 19, 23, 25, 29, 36], 27: [8, 14, 18, 20, 22, 24, 39], 28: [23, 39], 29: [25, 26], 30: [2, 17, 19, 22, 32, 36, 41], 31: [3, 22], 32: [0, 30], 33: [2, 3, 5, 13, 24], 34: [2, 5, 6, 11], 35: [16, 18, 41], 36: [2, 9, 26, 30, 37, 39], 37: [0, 2, 3, 17, 24, 36], 38: [10, 15, 19, 20], 39: [3, 5, 10, 27, 28, 36], 40: [23], 41: [30, 35]}

# Determine the graph pattern
print(determine_graph_pattern(adj_list))
```