```python
from collections import defaultdict

def graph_pattern(adj_list):
    # Count the number of nodes and edges
    num_nodes = len(adj_list)
    num_edges = sum(len(neighbors) for neighbors in adj_list.values()) // 2

    # Check for specific patterns
    # 1. Star: One central node connected to all others
    degrees = {node: len(neighbors) for node, neighbors in adj_list.items()}
    max_degree = max(degrees.values())
    if max_degree == num_nodes - 1 and list(degrees.values()).count(1) == num_nodes - 1:
        return "Star"

    # 2. Cycle: All nodes form a single cycle
    if all(degree == 2 for degree in degrees.values()) and num_edges == num_nodes:
        return "Cycle"

    # 3. Path: All nodes form a single path
    if list(degrees.values()).count(1) == 2 and all(degree <= 2 for degree in degrees.values()):
        return "Path"

    # 4. Grid: Nodes form a 2D grid structure
    # Check if the number of edges is close to the number of nodes in a grid
    if num_edges == num_nodes - 1 or num_edges == num_nodes - 2:
        return "Grid"

    # 5. Complete: Every node is connected to every other node
    if num_edges == num_nodes * (num_nodes - 1) // 2:
        return "Complete"

    # 6. Clustered graph: Nodes are grouped into clusters
    # Check for clusters by finding connected components
    visited = set()
    def dfs(node):
        stack = [node]
        component = set()
        while stack:
            curr = stack.pop()
            if curr not in visited:
                visited.add(curr)
                component.add(curr)
                stack.extend(adj_list[curr])
        return component

    components = []
    for node in adj_list:
        if node not in visited:
            components.append(dfs(node))
    if len(components) > 1:
        return "Clustered graph"

    # 7. Random graph: No specific pattern
    return "Random graph"

# Input adjacency list
adj_list = {0: [13, 16, 22, 34, 41, 43], 1: [5, 9, 11, 12, 19, 42], 2: [19, 24, 35], 3: [12, 24, 25], 4: [11, 12], 5: [1, 6, 15, 19, 20, 21, 23, 32, 33, 38, 39, 40, 44, 45], 6: [5, 9, 32, 43, 44], 7: [15, 16, 17, 30, 44], 8: [15, 30, 40], 9: [1, 6, 11, 27, 30, 39, 41, 43], 10: [28, 33, 39], 11: [1, 4, 9, 14, 18, 35], 12: [1, 3, 4, 33, 34, 38], 13: [0, 21, 25, 38], 14: [11, 30, 31, 43], 15: [5, 7, 8, 17, 22, 29, 30, 33], 16: [0, 7, 32, 40, 42], 17: [7, 15, 29, 44], 18: [11, 30, 35], 19: [1, 2, 5], 20: [5, 31, 35], 21: [5, 13, 24, 30, 33], 22: [0, 15, 28], 23: [5, 39], 24: [2, 3, 21, 28, 29], 25: [3, 13, 37], 26: [29, 32, 33], 27: [9, 29, 42], 28: [10, 22, 24, 30], 29: [15, 17, 24, 26, 27, 30, 33, 39, 42], 30: [7, 8, 9, 14, 15, 18, 21, 28, 29, 36], 31: [14, 20, 33], 32: [5, 6, 16, 26], 33: [5, 10, 12, 15, 21, 26, 29, 31, 34, 43], 34: [0, 12, 33, 38], 35: [2, 11, 18, 20], 36: [30, 38, 41], 37: [25, 45], 38: [5, 12, 13, 34, 36, 43], 39: [5, 9, 10, 23, 29, 44], 40: [5, 8, 16, 42], 41: [0, 9, 36, 42], 42: [1, 16, 27, 29, 40, 41, 43], 43: [0, 6, 9, 14, 33, 38, 42], 44: [5, 6, 7, 17, 39], 45: [5, 37]}

# Determine the pattern
print(graph_pattern(adj_list))
```