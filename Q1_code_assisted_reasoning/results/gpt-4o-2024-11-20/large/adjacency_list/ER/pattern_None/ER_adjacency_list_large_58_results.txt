```python:/home/app/graph_analysis.py
import networkx as nx

# Define the adjacency list of the graph
adjacency_list = {
    0: [2, 3, 23, 38], 1: [29], 2: [0, 5, 7, 8, 29, 41], 3: [0, 10, 12, 36, 41], 
    4: [6, 12, 14, 27, 34, 35], 5: [2, 12, 15, 16, 19], 6: [4, 9, 10, 29, 30], 
    7: [2, 32, 39], 8: [2, 23], 9: [6, 18, 26, 28], 10: [3, 6, 11, 16, 20, 26, 42], 
    11: [10, 14, 23, 25, 38, 39], 12: [3, 4, 5, 17, 19, 22, 24, 31, 37, 42], 
    13: [40], 14: [4, 11, 30], 15: [5, 16, 19, 27, 37], 16: [5, 10, 15, 33], 
    17: [12, 18, 38, 39], 18: [9, 17, 30, 37], 19: [5, 12, 15, 20, 42], 
    20: [10, 19], 21: [22, 26], 22: [12, 21, 32, 42], 23: [0, 8, 11, 24, 33], 
    24: [12, 23, 25, 33, 39], 25: [11, 24, 26, 29], 26: [9, 10, 21, 25, 36], 
    27: [4, 15], 28: [9, 30, 41], 29: [1, 2, 6, 25], 30: [6, 14, 18, 28], 
    31: [12, 35, 40], 32: [7, 22, 35], 33: [16, 23, 24, 34, 36], 
    34: [4, 33], 35: [4, 31, 32], 36: [3, 26, 33], 
    37: [12, 15, 18, 39, 42], 38: [0, 11, 17, 42], 
    39: [7, 11, 17, 24, 37], 40: [13, 31, 41], 41: [2, 3, 28, 40], 
    42: [10, 12, 19, 22, 37, 38]
}

# Create graph from adjacency list
G = nx.Graph(adjacency_list)

# Function to determine graph type
def determine_graph_type(G):
    n = G.number_of_nodes()
    m = G.number_of_edges()

    # Check for a star graph
    degrees = dict(G.degree())
    if max(degrees.values()) == n - 1:
        return "Star"

    # Check for a cycle graph
    if nx.is_connected(G) and all(deg == 2 for deg in degrees.values()):
        return "Cycle"

    # Check for a path graph
    if nx.is_connected(G) and sum(deg == 1 for deg in degrees.values()) == 2 and all(deg <= 2 for deg in degrees.values()):
        return "Path"

    # Check for a complete graph
    if m == (n * (n - 1)) // 2:
        return "Complete"

    # Check for a grid-like structure
    if n > 1:
        sqrt_n = int(n ** 0.5)
        if sqrt_n * sqrt_n == n and all(deg in {2, 3, 4} for deg in degrees.values()):
            return "Grid"

    # Check for a clustered graph (using modularity heuristic)
    communities = list(nx.community.greedy_modularity_communities(G))
    if len(communities) > 1:
        return "Clustered"

    # Default case is a random graph
    return "Random"

# Print the detected graph type
print(determine_graph_type(G))
```