```python
from collections import defaultdict

def graph_type(adjacency_list):
    nodes = list(adjacency_list.keys())
    edges = sum(len(neighbors) for neighbors in adjacency_list.values()) // 2

    # Check if the graph is a star
    center_nodes = [node for node in nodes if len(adjacency_list[node]) == len(nodes) - 1]
    if len(center_nodes) == 1 and all(len(adjacency_list[node]) == 1 for node in nodes if node != center_nodes[0]):
        return 'Star'

    # Check if the graph is a cycle
    if all(len(adjacency_list[node]) == 2 for node in nodes) and edges == len(nodes):
        return 'Cycle'

    # Check if the graph is a path
    degree_one_nodes = [node for node in nodes if len(adjacency_list[node]) == 1]
    if len(degree_one_nodes) == 2 and edges == len(nodes) - 1:
        return 'Path'

    # Check if the graph is complete
    if edges == len(nodes) * (len(nodes) - 1) // 2:
        return 'Complete'

    # Check if the graph is a grid
    def is_grid():
        degrees = sorted(len(adjacency_list[node]) for node in nodes)
        if degrees[0] != 2:
            return False
        sqrt_n = int(len(nodes) ** 0.5)
        if sqrt_n * sqrt_n != len(nodes):
            return False
        return set(degrees) == {2, 3, 4}
    if is_grid():
        return 'Grid'

    # Check if the graph is clustered
    def is_clustered():
        clusters = []
        visited = set()

        def dfs(node, cluster):
            visited.add(node)
            cluster.append(node)
            for neighbor in adjacency_list[node]:
                if neighbor not in visited:
                    dfs(neighbor, cluster)

        for node in nodes:
            if node not in visited:
                cluster = []
                dfs(node, cluster)
                clusters.append(cluster)
        return len(clusters) > 1 and sum(len(cluster) for cluster in clusters) == len(nodes)

    if is_clustered():
        return 'Clustered'

    # If none of the above, classify it as random
    return 'Random'

adjacency_list = {
    0: [9, 31, 34, 45], 1: [10, 13, 14, 22, 24, 30, 32, 42], 2: [15, 44, 48], 3: [4, 19, 38, 40], 
    4: [3, 17, 24, 27, 35, 38], 5: [6, 10, 16, 22, 36, 44, 45, 47, 48], 6: [5, 7, 8, 12, 26, 32, 39, 42], 
    7: [6, 10, 12, 15, 29], 8: [6, 16, 24, 26, 41, 46, 47], 9: [0, 11, 17, 34], 
    10: [1, 5, 7, 11, 25, 32, 34, 41, 47], 11: [9, 10, 12, 13, 36, 37], 
    12: [6, 7, 11, 35, 46], 13: [1, 11, 25, 30, 35], 14: [1, 20, 26, 27, 32, 35, 38, 44], 
    15: [2, 7, 18, 26, 31, 47], 16: [5, 8, 17, 29, 37, 38, 39, 42, 48], 
    17: [4, 9, 16, 20], 18: [15, 21, 29, 36, 38], 
    19: [3, 27, 30, 33, 38, 39, 44], 20: [14, 17, 21, 25, 28, 31, 35, 41], 
    21: [18, 20, 28, 44], 22: [1, 5, 23, 24, 31], 23: [22, 45], 
    24: [1, 4, 8, 22], 25: [10, 13, 20, 35], 26: [6, 8, 14, 15, 27, 31, 34, 42], 
    27: [4, 14, 19, 26, 32], 28: [20, 21, 36, 48], 
    29: [7, 16, 18, 34, 40, 44], 30: [1, 13, 19, 44], 
    31: [0, 15, 20, 22, 26, 37, 44, 45, 47], 
    32: [1, 6, 10, 14, 27, 33], 33: [19, 32, 35], 
    34: [0, 9, 10, 26, 29, 44], 
    35: [4, 12, 13, 14, 20, 25, 33, 37, 43, 46], 
    36: [5, 11, 18, 28], 
    37: [11, 16, 31, 35, 45], 
    38: [3, 4, 14, 16, 18, 19, 48], 
    39: [6, 16, 19, 47], 
    40: [3, 29, 46], 
    41: [8, 10, 20, 48], 
    42: [1, 6, 16, 26, 44], 
    43: [35, 44], 
    44: [2, 5, 14, 19, 21, 29, 30, 31, 34, 42, 43], 
    45: [0, 5, 23, 31, 37], 
    46: [8, 12, 35, 40], 
    47: [5, 8, 10, 15, 31, 39], 
    48: [2, 5, 16, 28, 38, 41]
}
print(graph_type(adjacency_list))
```