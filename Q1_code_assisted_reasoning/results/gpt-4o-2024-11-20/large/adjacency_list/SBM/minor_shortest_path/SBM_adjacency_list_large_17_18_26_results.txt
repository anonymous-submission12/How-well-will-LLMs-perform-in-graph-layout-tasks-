```python:/home/app/shortest_path.py
from collections import deque

def bfs_shortest_path(graph, start, end):
    queue = deque([(start, 0)])
    visited = set([start])

    while queue:
        node, dist = queue.popleft()
        if node == end:
            print(dist)
            return
        for neighbor in graph.get(node, []):
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, dist + 1))

graph = {
    0: [3, 4, 5, 6, 8, 9, 10, 11, 12, 20], 1: [2, 4, 5, 10, 12], 
    2: [1, 3, 4, 5, 6, 10, 11, 12], 3: [0, 2, 6, 7, 8, 9, 10, 12], 
    4: [0, 1, 2, 7, 8, 9, 11, 12, 44], 5: [0, 1, 2, 8, 9, 10, 11, 12, 23, 46], 
    6: [0, 2, 3, 8, 9, 10, 11, 12], 7: [3, 4, 8, 9, 10, 11, 12], 
    8: [0, 3, 4, 5, 6, 7, 10, 11], 9: [0, 3, 4, 5, 6, 7, 10, 12], 
    10: [0, 1, 2, 3, 5, 6, 7, 8, 9, 11, 12], 11: [0, 2, 4, 5, 6, 7, 8, 10], 
    12: [0, 1, 2, 3, 4, 5, 6, 7, 9, 10], 13: [14, 16, 23, 24, 25], 
    14: [13, 15, 18, 19, 20, 21, 22, 23], 15: [14, 18, 24, 25, 45], 
    16: [13, 17, 18, 19, 20, 21, 25], 17: [16, 18, 19, 20, 21, 24, 25], 
    18: [14, 15, 16, 17, 22, 24], 19: [14, 16, 17, 20, 23, 24, 38], 
    20: [0, 14, 16, 17, 19, 22, 24, 25], 21: [14, 16, 17, 22, 23, 25], 
    22: [14, 18, 20, 21, 25], 23: [5, 13, 14, 19, 21], 
    24: [13, 15, 17, 18, 19, 20, 25], 25: [13, 15, 16, 17, 20, 21, 22, 24], 
    32: [27, 28, 30, 31, 34, 36, 37], 33: [28, 29, 30, 34, 36], 
    34: [27, 28, 29, 30, 32, 33, 35], 35: [27, 29, 30, 31, 34, 36], 
    36: [26, 28, 29, 30, 31, 32, 33, 35], 37: [26, 28, 29, 32, 43], 
    26: [27, 28, 29, 30, 31, 36, 37], 27: [26, 28, 29, 30, 32, 34, 35], 
    28: [26, 27, 32, 33, 34, 36, 37], 29: [26, 27, 30, 31, 33, 34, 35, 36, 37], 
    30: [26, 27, 29, 31, 32, 33, 34, 35, 36], 31: [26, 29, 30, 32, 35, 36, 40], 
    38: [19, 41, 43, 44, 45, 46, 47, 49], 39: [42, 44, 45, 47, 48, 49], 
    40: [31, 41, 42, 43, 45, 46, 47, 49], 41: [38, 40, 42, 43, 46, 47, 48, 49], 
    42: [39, 40, 41, 43, 46, 47, 48], 43: [37, 38, 40, 41, 42, 44, 45, 46, 47, 49], 
    44: [4, 38, 39, 43, 45, 46, 47], 45: [15, 38, 39, 40, 43, 44, 47], 
    46: [5, 38, 40, 41, 42, 43, 44, 47, 48, 49], 
    47: [38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49], 
    48: [39, 41, 42, 46, 47, 49], 49: [38, 39, 40, 41, 43, 46, 47, 48]
}

bfs_shortest_path(graph, 18, 26)
```