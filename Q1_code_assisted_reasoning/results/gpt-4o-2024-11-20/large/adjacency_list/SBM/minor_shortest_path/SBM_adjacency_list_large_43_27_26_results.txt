```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current node, current distance)
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in graph[node]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))

graph = {0: [2, 3, 6, 7], 1: [3, 5, 7, 20], 2: [0, 3, 4, 5, 7, 43, 45], 3: [0, 1, 2, 5, 6, 7], 4: [2, 29], 5: [1, 2, 3], 6: [0, 3, 13, 37], 7: [0, 1, 2, 3, 11], 8: [9, 10, 11, 13, 14], 9: [8, 10, 11, 12, 13, 14, 15, 17], 10: [8, 9, 11, 12, 13, 15, 35], 11: [7, 8, 9, 10, 14, 15], 12: [9, 10, 13, 14, 27, 28], 13: [6, 8, 9, 10, 12], 14: [8, 9, 11, 12], 15: [9, 10, 11], 16: [18, 19, 21, 22], 17: [9, 18, 19, 20, 21, 22, 23], 18: [16, 17, 19, 20, 21, 23, 47], 19: [16, 17, 18, 20, 21, 23, 31], 20: [1, 17, 18, 19, 23, 46], 21: [16, 17, 18, 19, 24, 45], 22: [16, 17, 28], 23: [17, 18, 19, 20], 24: [21, 26, 27, 30, 31], 25: [26, 27, 28, 29, 31], 26: [24, 25, 27, 29, 30, 31], 27: [12, 24, 25, 26, 28, 30], 28: [12, 22, 25, 27, 30, 31], 29: [4, 25, 26, 31, 34], 30: [24, 26, 27, 28, 31], 31: [19, 24, 25, 26, 28, 29, 30], 32: [34, 35, 36], 33: [34, 35, 36, 37, 38], 34: [29, 32, 33, 35, 36, 37], 35: [10, 32, 33, 34, 36, 37, 38], 36: [32, 33, 34, 35, 37, 39], 37: [6, 33, 34, 35, 36, 39], 38: [33, 35], 39: [36, 37], 40: [41, 42, 43, 46, 47], 41: [40, 42, 44, 47], 42: [40, 41, 45, 47], 43: [2, 40, 45, 46, 47], 44: [41, 45, 46, 47], 45: [2, 21, 42, 43, 44, 47], 46: [20, 40, 43, 44], 47: [18, 40, 41, 42, 43, 44, 45]}
print(shortest_path_length(graph, 27, 26))
```