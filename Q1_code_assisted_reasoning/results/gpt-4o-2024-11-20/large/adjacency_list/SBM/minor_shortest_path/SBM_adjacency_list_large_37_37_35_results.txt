```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])

    while queue:
        current_node, depth = queue.popleft()
        if current_node == end:
            return depth

        visited.add(current_node)
        for neighbor in graph[current_node]:
            if neighbor not in visited:
                queue.append((neighbor, depth + 1))
                visited.add(neighbor)

    return -1

graph = {0: [1, 2, 3, 7, 8, 11, 12, 13], 1: [0, 2, 3, 5, 6, 10, 11, 12, 25], 2: [0, 1, 3, 5, 6, 8, 9, 10, 11, 12, 13], 3: [0, 1, 2, 4, 5, 6, 7, 10, 11, 12, 14, 22], 4: [3, 6, 7, 12, 13, 14], 5: [1, 2, 3, 7, 8, 10, 11, 13], 6: [1, 2, 3, 4, 8, 10, 11, 12], 7: [0, 3, 4, 5, 9, 10, 11, 12, 14], 8: [0, 2, 5, 6, 11, 12, 13, 14], 9: [2, 7, 11, 12, 14], 10: [1, 2, 3, 5, 6, 7, 11, 12, 13, 14], 11: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 19], 12: [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 13], 13: [0, 2, 4, 5, 8, 10, 12], 14: [3, 4, 7, 8, 9, 10], 15: [17, 18, 20, 21, 22, 23, 25, 26, 28], 16: [17, 19, 20, 21, 23, 27], 17: [15, 16, 18, 19, 20, 22, 24, 27, 42], 18: [15, 17, 20, 24, 25, 26], 19: [11, 16, 17, 20, 23, 24, 25, 26], 20: [15, 16, 17, 18, 19, 21, 23, 26, 28], 21: [15, 16, 20, 23, 26, 27], 22: [3, 15, 17, 24, 27, 28], 23: [15, 16, 19, 20, 21, 26, 28], 24: [17, 18, 19, 22, 25, 26, 27, 28], 25: [1, 15, 18, 19, 24, 27, 28], 26: [15, 18, 19, 20, 21, 23, 24, 28], 27: [16, 17, 21, 22, 24, 25], 28: [15, 20, 22, 23, 24, 25, 26, 31], 32: [29, 31, 33, 34, 36, 40, 41], 33: [30, 31, 32, 38, 39, 40, 42], 34: [30, 31, 32, 35, 37, 39, 42], 35: [31, 34, 38, 40, 42], 36: [29, 32, 37, 39, 40, 41, 42], 37: [29, 31, 34, 36, 38, 41], 38: [30, 33, 35, 37, 39, 40, 41], 39: [29, 30, 31, 33, 34, 36, 38, 40], 40: [31, 32, 33, 35, 36, 38, 39, 41], 41: [29, 30, 32, 36, 37, 38, 40, 42], 42: [17, 29, 30, 33, 34, 35, 36, 41], 29: [30, 32, 36, 37, 39, 41, 42], 30: [29, 33, 34, 38, 39, 41, 42], 31: [28, 32, 33, 34, 35, 37, 39, 40]}
print(shortest_path_length(graph, 37, 35))
```