```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])
    
    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # If no path exists

graph = {0: [1, 2, 3, 4, 5, 7, 9, 12, 13, 16], 1: [0, 2, 5, 7, 8, 9, 12, 14], 2: [0, 1, 4, 5, 7, 9, 10, 11, 12], 3: [0, 5, 7, 9, 10, 11, 14, 16, 46], 4: [0, 2, 5, 6, 7, 9, 10, 11, 13, 14, 15, 16], 5: [0, 1, 2, 3, 4, 8, 10, 12, 13, 14], 6: [4, 7, 8, 10, 12, 13, 15, 16], 7: [0, 1, 2, 3, 4, 6, 10, 11, 14, 15, 16], 8: [1, 5, 6, 10, 11, 12, 13, 16, 32, 37, 43], 9: [0, 1, 2, 3, 4, 10, 11, 13, 14, 32], 10: [2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15], 11: [2, 3, 4, 7, 8, 9, 10, 12, 13, 14, 16], 12: [0, 1, 2, 5, 6, 8, 11, 14, 15, 16], 13: [0, 4, 5, 6, 8, 9, 10, 11, 14, 15], 14: [1, 3, 4, 5, 7, 9, 10, 11, 12, 13, 23], 15: [4, 6, 7, 10, 12, 13], 16: [0, 3, 4, 6, 7, 8, 11, 12, 35], 32: [8, 9, 20, 21, 26, 27, 28], 33: [18, 20, 22, 23, 24, 25, 26, 27, 28, 30], 17: [18, 20, 22, 24, 25, 26, 30, 41], 18: [17, 20, 22, 24, 25, 28, 30, 31, 33], 19: [20, 21, 22, 23, 24, 25, 27, 30, 31], 20: [17, 18, 19, 22, 23, 24, 25, 27, 28, 30, 32, 33], 21: [19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], 22: [17, 18, 19, 20, 24, 25, 27, 29, 30, 31, 33], 23: [14, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 33], 24: [17, 18, 19, 20, 21, 22, 23, 25, 30, 31, 33], 25: [17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 33], 26: [17, 21, 23, 25, 27, 29, 31, 32, 33], 27: [19, 20, 21, 22, 23, 25, 26, 29, 30, 31, 32, 33], 28: [18, 20, 21, 23, 30, 32, 33, 47], 29: [21, 22, 23, 25, 26, 27, 31], 30: [17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 33], 31: [18, 19, 21, 22, 24, 25, 26, 27, 29, 30], 34: [35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48], 35: [16, 34, 38, 39, 41, 42, 44, 48, 49], 36: [37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49], 37: [8, 34, 36, 40, 41, 42, 43, 44, 45, 46, 49], 38: [34, 35, 36, 39, 40, 41, 42, 43, 45, 48, 49], 39: [34, 35, 38, 41, 42, 47, 48, 49], 40: [34, 36, 37, 38, 41, 42, 43, 46, 47], 41: [17, 34, 35, 36, 37, 38, 39, 40, 42, 44, 47], 42: [35, 36, 37, 38, 39, 40, 41, 44, 47, 48], 43: [8, 34, 36, 37, 38, 40, 45, 46, 48, 49], 44: [34, 35, 36, 37, 41, 42, 46, 48], 45: [34, 36, 37, 38, 43, 46, 47, 48], 46: [3, 34, 37, 40, 43, 44, 45, 47, 49], 47: [28, 36, 39, 40, 41, 42, 45, 46], 48: [34, 35, 36, 38, 39, 42, 43, 44, 45, 49], 49: [35, 36, 37, 38, 39, 43, 46, 48]}
print(shortest_path_length(graph, 4, 35))
```