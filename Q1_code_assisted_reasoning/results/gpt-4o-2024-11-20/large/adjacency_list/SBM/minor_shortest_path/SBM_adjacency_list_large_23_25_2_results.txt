```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])

    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                queue.append((neighbor, distance + 1))
    return -1

graph = {
    0: [1, 2, 3, 5, 6, 8, 9, 10, 11, 16], 1: [0, 2, 5, 8, 10, 14, 15], 
    2: [0, 1, 5, 6, 7, 8, 9, 14, 15, 46], 3: [0, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 31], 
    4: [3, 6, 7, 9, 10, 11, 12, 15, 16, 29], 5: [0, 1, 2, 3, 6, 7, 9, 10, 11, 15, 16], 
    6: [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 16], 7: [2, 3, 4, 5, 6, 8, 9, 10, 12, 14, 16], 
    8: [0, 1, 2, 3, 6, 7, 12, 14, 15, 16], 9: [0, 2, 4, 5, 6, 7, 11, 13, 14, 16], 
    10: [0, 1, 3, 4, 5, 6, 7, 11, 13, 14, 15], 11: [0, 4, 5, 6, 9, 10, 12, 13, 14], 
    12: [3, 4, 6, 7, 8, 11, 13, 14, 15, 16, 37], 13: [3, 9, 10, 11, 12, 15, 16], 
    14: [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 15, 16], 15: [1, 2, 3, 4, 5, 8, 10, 12, 13, 14, 16], 
    16: [0, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15], 32: [17, 18, 19, 20, 23, 25, 26, 27, 30, 31], 
    17: [18, 19, 20, 22, 23, 24, 25, 27, 29, 30, 32], 18: [17, 19, 21, 22, 24, 25, 26, 27, 29, 31, 32], 
    19: [17, 18, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32], 20: [17, 19, 21, 24, 25, 26, 28, 30, 31, 32], 
    21: [18, 20, 22, 23, 25, 26, 27, 30, 31], 22: [17, 18, 19, 21, 23, 24, 27, 28, 29, 30, 31], 
    23: [17, 19, 21, 22, 25, 26, 28, 29, 32], 24: [17, 18, 20, 22, 25, 26, 27, 30, 31], 
    25: [17, 18, 19, 20, 21, 23, 24, 27, 28, 29, 30, 31, 32], 26: [18, 19, 20, 21, 23, 24, 27, 28, 29, 30, 32], 
    27: [17, 18, 19, 21, 22, 24, 25, 26, 29, 30, 31, 32, 33, 48], 28: [19, 20, 22, 23, 25, 26, 29, 31, 36], 
    29: [4, 17, 18, 19, 22, 23, 25, 26, 27, 28, 30, 31], 30: [17, 19, 20, 21, 22, 24, 25, 26, 27, 29, 31, 32], 
    31: [3, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 32], 33: [27, 34, 35, 36, 38, 40, 42, 44, 46], 
    34: [33, 36, 37, 38, 40, 42, 44, 45, 46, 47, 48], 35: [33, 36, 37, 38, 39, 40, 44], 
    36: [28, 33, 34, 35, 37, 39, 40, 42, 44, 47, 48], 37: [12, 34, 35, 36, 39, 43, 44, 45, 48], 
    38: [33, 34, 35, 40, 42, 44, 46, 48], 39: [35, 36, 37, 40, 42, 43, 44, 46], 
    40: [33, 34, 35, 36, 38, 39, 41], 41: [40, 42, 44, 45, 46, 48], 
    42: [33, 34, 36, 38, 39, 41, 43, 47, 48], 43: [37, 39, 42, 44, 45, 46, 48], 
    44: [33, 34, 35, 36, 37, 38, 39, 41, 43, 46, 47, 48], 45: [34, 37, 41, 43, 46, 47], 
    46: [2, 33, 34, 38, 39, 41, 43, 44, 45, 48], 47: [34, 36, 42, 44, 45], 
    48: [27, 34, 36, 37, 38, 41, 42, 43, 44, 46]
}

result = shortest_path_length(graph, 25, 2)
print(result)
```