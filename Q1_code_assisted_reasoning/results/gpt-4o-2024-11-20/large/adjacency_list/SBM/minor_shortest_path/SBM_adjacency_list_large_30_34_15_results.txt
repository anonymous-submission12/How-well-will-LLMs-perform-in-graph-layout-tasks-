```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current_node, current_distance = queue.popleft()
        
        if current_node == end:
            return current_distance
        
        if current_node not in visited:
            visited.add(current_node)
            for neighbor in graph[current_node]:
                queue.append((neighbor, current_distance + 1))

graph = {0: [3, 4, 5, 8, 11], 1: [2, 3, 4, 5, 6, 7, 9, 11, 12], 2: [1, 3, 4, 6, 7, 9, 12], 3: [0, 1, 2, 4, 5, 7, 9, 10, 11, 12], 4: [0, 1, 2, 3, 5, 7, 8, 10, 11], 5: [0, 1, 3, 4, 6, 7, 9, 10, 12], 6: [1, 2, 5, 8, 9, 12], 7: [1, 2, 3, 4, 5, 8, 9, 11, 12], 8: [0, 4, 6, 7, 11, 12], 9: [1, 2, 3, 5, 6, 7], 10: [3, 4, 5, 11, 12], 11: [0, 1, 3, 4, 7, 8, 10, 19], 12: [1, 2, 3, 5, 6, 7, 8, 10], 13: [14, 15, 19, 20, 22, 23, 24, 43, 44], 14: [13, 17, 18, 19, 21, 22, 23], 15: [13, 18, 21, 23, 24], 16: [18, 23, 24], 17: [14, 18, 19, 20, 21, 22], 18: [14, 15, 16, 17, 19, 20, 24], 19: [11, 13, 14, 17, 18, 21, 24], 20: [13, 17, 18, 21, 23], 21: [14, 15, 17, 19, 20, 23], 22: [13, 14, 17, 23, 24], 23: [13, 14, 15, 16, 20, 21, 22], 24: [13, 15, 16, 18, 19, 22], 32: [27, 28, 29, 30, 33, 34, 36], 33: [25, 26, 30, 31, 32, 35, 36], 34: [25, 26, 27, 28, 31, 32, 35, 36], 35: [25, 26, 28, 31, 33, 34, 36, 47], 36: [26, 28, 29, 30, 31, 32, 33, 34, 35], 25: [27, 31, 33, 34, 35], 26: [27, 28, 31, 33, 34, 35, 36, 39], 27: [25, 26, 28, 30, 32, 34], 28: [26, 27, 30, 32, 34, 35, 36], 29: [30, 32, 36], 30: [27, 28, 29, 32, 33, 36], 31: [25, 26, 33, 34, 35, 36], 37: [39, 40, 43, 45, 46, 48], 38: [39, 40, 41, 43, 45, 48], 39: [26, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48], 40: [37, 38, 39, 41, 42, 45, 48], 41: [38, 39, 40, 42], 42: [40, 41, 43, 44, 45, 46, 47], 43: [13, 37, 38, 39, 42, 46], 44: [13, 39, 42, 45, 47], 45: [37, 38, 39, 40, 42, 44, 46, 47], 46: [37, 39, 42, 43, 45, 48], 47: [35, 39, 42, 44, 45, 48], 48: [37, 38, 39, 40, 46, 47]}

print(shortest_path_length(graph, 34, 15))
```