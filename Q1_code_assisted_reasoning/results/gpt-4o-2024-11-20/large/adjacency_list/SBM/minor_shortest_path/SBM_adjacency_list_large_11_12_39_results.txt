```python:/home/app/shortest_path.py
from collections import deque

def bfs_shortest_path(graph, start, end):
    queue = deque([(start, 0)])
    visited = set()

    while queue:
        node, distance = queue.popleft()
        if node == end:
            print(distance)
            return

        if node not in visited:
            visited.add(node)
            for neighbor in graph.get(node, []):
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))

graph = {
    0: [1, 3, 5, 7, 16], 1: [0, 2, 4, 5, 6, 7], 2: [1, 4, 5, 6, 26], 3: [0], 4: [1, 2, 5, 7, 8],
    5: [0, 1, 2, 4, 7], 6: [1, 2, 8], 7: [0, 1, 4, 5, 8], 8: [4, 6, 7], 9: [10, 11, 13, 15, 23],
    10: [9, 11, 12, 13, 16], 11: [9, 10, 12, 13, 14, 15, 16], 12: [10, 11, 13, 15, 16], 13: [9, 10, 11, 12, 14],
    14: [11, 13, 15, 16, 40], 15: [9, 11, 12, 14, 16, 17, 25], 16: [0, 10, 11, 12, 14, 15], 17: [15, 22, 24, 38],
    18: [19, 20, 22, 23, 24], 19: [18, 20, 21, 22, 23, 24], 20: [18, 19, 21, 22, 23, 24], 21: [19, 20, 23],
    22: [17, 18, 19, 20, 23, 24], 23: [9, 18, 19, 20, 21, 22, 24], 24: [17, 18, 19, 20, 22, 23],
    32: [25, 26, 27, 28, 29, 31], 25: [15, 26, 27, 29, 31, 32], 26: [2, 25, 28, 30, 31, 32],
    27: [25, 28, 30, 31, 32], 28: [26, 27, 29, 30, 32], 29: [25, 28, 31, 32], 30: [26, 27, 28, 31],
    31: [25, 26, 27, 29, 30, 32], 33: [36, 39], 34: [35, 36, 38, 40], 35: [34, 36, 37, 38, 39, 40],
    36: [33, 34, 35, 37, 38, 39, 40], 37: [35, 36], 38: [17, 34, 35, 36, 39, 40], 39: [33, 35, 36, 38, 40],
    40: [14, 34, 35, 36, 38, 39]
}

bfs_shortest_path(graph, 12, 39)
```