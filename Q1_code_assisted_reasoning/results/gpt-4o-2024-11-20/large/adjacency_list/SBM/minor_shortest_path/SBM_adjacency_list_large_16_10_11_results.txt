```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # If no path exists

graph = {0: [2, 5, 6, 7, 8, 9, 36], 1: [4, 5, 6, 7, 8, 9], 2: [0, 3, 5, 7, 8, 9], 3: [2, 5, 6, 7, 8], 4: [1, 6, 9, 34], 5: [0, 1, 2, 3, 6, 7], 6: [0, 1, 3, 4, 5, 7, 8, 9], 7: [0, 1, 2, 3, 5, 6, 8, 9], 8: [0, 1, 2, 3, 6, 7], 9: [0, 1, 2, 4, 6, 7], 10: [12, 13, 15, 17, 18], 11: [12, 14, 15, 19, 40], 12: [10, 11, 13, 14, 15, 16, 17, 18], 13: [10, 12, 15, 16, 17, 18, 19], 14: [11, 12, 15, 18], 15: [10, 11, 12, 13, 14], 16: [12, 13, 18, 19, 35], 17: [10, 12, 13, 18, 19], 18: [10, 12, 13, 14, 16, 17, 19], 19: [11, 13, 16, 17, 18], 20: [21, 24, 25, 27, 28], 21: [20, 23, 24, 26, 27, 28, 41], 22: [23, 24, 25, 28], 23: [21, 22, 24, 26, 27], 24: [20, 21, 22, 23, 25, 26, 27], 25: [20, 22, 24, 40], 26: [21, 23, 24, 28], 27: [20, 21, 23, 24, 28, 39], 28: [20, 21, 22, 26, 27], 32: [29, 30, 31, 33, 35, 36], 33: [29, 30, 32, 35, 37], 34: [4, 29, 30, 35, 36, 37], 35: [16, 29, 32, 33, 34, 36], 36: [0, 29, 30, 31, 32, 34, 35], 37: [29, 30, 31, 33, 34], 29: [30, 31, 32, 33, 34, 35, 36, 37], 30: [29, 31, 32, 33, 34, 36, 37], 31: [29, 30, 32, 36, 37], 38: [39, 41, 42, 43, 45], 39: [27, 38, 41, 42, 43], 40: [11, 25, 41, 42, 43, 44], 41: [21, 38, 39, 40, 42, 43, 46], 42: [38, 39, 40, 41, 43, 44, 45], 43: [38, 39, 40, 41, 42, 45, 46], 44: [40, 42, 45, 46], 45: [38, 42, 43, 44, 46], 46: [41, 43, 44, 45]}
print(shortest_path_length(graph, 10, 11))
```