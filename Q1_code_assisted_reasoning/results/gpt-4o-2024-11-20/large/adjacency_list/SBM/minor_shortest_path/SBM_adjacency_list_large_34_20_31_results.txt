```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)

    while queue:
        current, distance = queue.popleft()

        if current == end:
            return distance

        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))

    return -1  # If there is no path

graph = {
    0: [3, 6, 8, 9, 32], 1: [2, 3, 5, 6, 9, 10, 11], 2: [1, 3, 5, 6, 9, 10, 11, 14], 
    3: [0, 1, 2, 4, 7, 8, 9], 4: [3, 7, 9, 10, 11], 5: [1, 2, 7, 8, 10, 11, 14, 22, 23], 
    6: [0, 1, 2, 9, 10, 11], 7: [3, 4, 5, 8, 9, 10, 11], 8: [0, 3, 5, 7, 10], 
    9: [0, 1, 2, 3, 4, 6, 7, 11], 10: [1, 2, 4, 5, 6, 7, 8], 11: [1, 2, 4, 5, 6, 7, 9], 
    12: [13, 15, 17, 19, 43], 13: [12, 15, 16, 17, 19, 20, 21, 22], 14: [2, 5, 16, 17, 20, 21, 22, 23], 
    15: [12, 13, 17, 19], 16: [13, 14, 17, 19, 21, 22, 35], 17: [12, 13, 14, 15, 16, 18, 20, 21, 22, 42], 
    18: [17, 21, 22, 23], 19: [12, 13, 15, 16, 22, 23], 20: [13, 14, 17, 23], 
    21: [13, 14, 16, 17, 18, 23], 22: [5, 13, 14, 16, 17, 18, 19, 35], 23: [5, 14, 18, 19, 20, 21], 
    32: [0, 25, 30, 34], 33: [24, 26, 27, 28, 30], 34: [24, 25, 26, 29, 30, 31, 32], 
    24: [30, 33, 34], 25: [26, 27, 28, 30, 31, 32, 34, 35, 36], 26: [25, 27, 28, 30, 31, 33, 34], 
    27: [25, 26, 28, 29, 30, 33], 28: [25, 26, 27, 31, 33, 41], 29: [27, 30, 31, 34], 
    30: [24, 25, 26, 27, 29, 31, 32, 33, 34, 39], 31: [25, 26, 28, 29, 30, 34], 
    35: [16, 22, 25, 36, 44, 45], 36: [25, 35, 38, 39, 41, 44], 37: [38, 40, 41, 42, 44], 
    38: [36, 37, 39, 41, 42, 44], 39: [30, 36, 38, 42, 43, 44, 45], 40: [37, 41, 45], 
    41: [28, 36, 37, 38, 40, 44, 45], 42: [17, 37, 38, 39], 43: [12, 39, 45], 
    44: [35, 36, 37, 38, 39, 41], 45: [35, 39, 40, 41, 43]
}

result = shortest_path_length(graph, 20, 31)
print(result)
```