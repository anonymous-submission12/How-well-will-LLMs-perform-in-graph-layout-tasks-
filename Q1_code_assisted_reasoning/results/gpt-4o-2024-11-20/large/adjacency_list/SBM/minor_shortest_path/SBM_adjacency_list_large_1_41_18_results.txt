```python:/home/app/shortest_path.py
from collections import deque

# Given adjacency list
adjacency_list = {
    0: [2, 4, 7, 9, 10, 11, 14, 15], 1: [2, 3, 4, 6, 7, 8, 9, 10, 12, 14, 15], 
    2: [0, 1, 3, 4, 5, 7, 8, 9, 12, 14, 15], 3: [1, 2, 4, 6, 8, 11, 14, 15], 
    4: [0, 1, 2, 3, 6, 8, 9, 10, 13, 14, 15], 5: [2, 6, 11, 14], 
    6: [1, 3, 4, 5, 7, 8, 11, 12, 15, 46], 7: [0, 1, 2, 6, 8, 9, 13, 14, 33], 
    8: [1, 2, 3, 4, 6, 7, 9, 10, 14], 9: [0, 1, 2, 4, 7, 8, 10, 11, 12, 13, 14, 15], 
    10: [0, 1, 4, 8, 9, 14, 15, 34], 11: [0, 3, 5, 6, 9, 12, 14, 15], 
    12: [1, 2, 6, 9, 11, 13, 14], 13: [4, 7, 9, 12, 15, 44], 
    14: [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 15], 15: [0, 1, 2, 3, 4, 6, 9, 10, 11, 13, 14, 37], 
    16: [17, 18, 19, 20, 22, 23, 27, 28, 29, 30, 31], 17: [16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31], 
    18: [16, 17, 20, 21, 23, 25, 27, 28, 29, 31], 19: [16, 17, 21, 23, 26, 28, 29, 30, 40], 
    20: [16, 17, 18, 21, 22, 23, 24, 25, 27, 29, 30], 21: [17, 18, 19, 20, 23, 24, 25, 29, 30, 31], 
    22: [16, 17, 20, 24, 26, 27, 29, 30, 31], 23: [16, 17, 18, 19, 20, 21, 24, 26, 27, 29, 31], 
    24: [17, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31], 25: [17, 18, 20, 21, 26, 27, 28], 
    26: [19, 22, 23, 24, 25, 28, 29, 31], 27: [16, 17, 18, 20, 22, 23, 24, 25, 28, 29, 30], 
    28: [16, 18, 19, 24, 25, 26, 27, 30], 29: [16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 31], 
    30: [16, 17, 19, 20, 21, 22, 24, 27, 28], 31: [16, 17, 18, 21, 22, 23, 24, 26, 29], 
    32: [34, 36, 37, 38, 42, 43, 44, 45, 46], 33: [7, 35, 36, 37, 39, 41, 43, 44, 45], 
    34: [10, 32, 35, 36, 39, 40, 41, 42, 43, 44, 46], 35: [33, 34, 36, 37, 38, 39, 40, 41, 42, 46], 
    36: [32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 46], 37: [15, 32, 33, 35, 38, 39, 40, 43, 45], 
    38: [32, 35, 36, 37, 39, 40, 44, 46], 39: [33, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45], 
    40: [19, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45], 41: [33, 34, 35, 36, 39, 42, 43], 
    42: [32, 34, 35, 36, 40, 41, 43, 46], 43: [32, 33, 34, 36, 37, 39, 40, 41, 42, 45, 46], 
    44: [13, 32, 33, 34, 36, 38, 39, 40, 45, 46], 45: [32, 33, 37, 39, 40, 43, 44], 
    46: [6, 32, 34, 35, 36, 38, 42, 43, 44]
}

start, end = 41, 18

# BFS for shortest path
queue = deque([(start, 0)])
visited = set([start])

while queue:
    node, distance = queue.popleft()
    if node == end:
        print(distance)
        break
    for neighbor in adjacency_list.get(node, []):
        if neighbor not in visited:
            visited.add(neighbor)
            queue.append((neighbor, distance + 1))
```