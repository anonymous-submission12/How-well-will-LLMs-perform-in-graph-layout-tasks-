```python
def determine_graph_pattern(adj_list):
    n = len(adj_list)
    degrees = {node: len(neighbors) for node, neighbors in adj_list.items()}
    
    # Check for Star pattern
    if sum(deg == n-1 for deg in degrees.values()) == 1 and sum(deg == 1 for deg in degrees.values()) == n-1:
        return "Star"
    
    # Check for Cycle pattern
    if all(deg == 2 for deg in degrees.values()):
        return "Cycle"
    
    # Check for Path pattern
    if sum(deg == 1 for deg in degrees.values()) == 2 and sum(deg == 2 for deg in degrees.values()) == n-2:
        return "Path"
    
    # Check for Complete graph pattern
    if all(deg == n-1 for deg in degrees.values()):
        return "Complete"
    
    # Check for Grid pattern (assuming rectangular grid with degree 2, 3, or 4)
    max_degree = max(degrees.values())
    if max_degree <= 4 and sum(deg in {2, 3, 4} for deg in degrees.values()) == n:
        return "Grid"
    
    # Check for Clustered graph (multiple disconnected subgraphs or clusters)
    visited = set()
    def dfs(node):
        stack = [node]
        component = set()
        while stack:
            current = stack.pop()
            if current not in visited:
                visited.add(current)
                component.add(current)
                stack.extend(neighbor for neighbor in adj_list[current] if neighbor not in visited)
        return component
    
    components = []
    for node in adj_list:
        if node not in visited:
            components.append(dfs(node))
    if len(components) > 1:
        return "Clustered"
    
    # If none of the above patterns match, return Random graph
    return "Random"

# Input graph data
adjacency_list = {0: [2, 3, 5, 6, 7, 8], 1: [2, 3, 5, 6, 8], 2: [0, 1, 3, 4, 5, 6, 8], 
                  3: [0, 1, 2, 4, 7], 4: [2, 3, 7], 5: [0, 1, 2, 7, 8], 6: [0, 1, 2, 7, 8, 22], 
                  7: [0, 3, 4, 5, 6, 8], 8: [0, 1, 2, 5, 6, 7], 9: [12, 15, 17], 10: [12, 13, 16], 
                  11: [12, 13, 14, 16, 17], 12: [9, 10, 11, 13, 16, 17, 22], 13: [10, 11, 12, 15, 16],
                  14: [11, 16, 17], 15: [9, 13, 16, 17], 16: [10, 11, 12, 13, 14, 15, 17], 
                  17: [9, 11, 12, 14, 15, 16], 18: [19, 20, 21, 24, 25, 26], 19: [18, 20, 22, 24], 
                  20: [18, 19, 21, 23, 24], 21: [18, 20, 22, 24, 25, 26], 22: [6, 12, 19, 21, 23, 24, 43], 
                  23: [20, 22, 25, 26], 24: [18, 19, 20, 21, 22, 25, 26], 25: [18, 21, 23, 24], 
                  26: [18, 21, 23, 24, 38, 41], 32: [27, 29, 30, 31], 33: [27, 28, 30, 31, 44], 
                  34: [30, 31, 35], 35: [27, 29, 31, 34], 27: [28, 31, 32, 33, 35], 28: [27, 29, 33], 
                  29: [28, 30, 32, 35, 42], 30: [29, 31, 32, 33, 34], 31: [27, 30, 32, 33, 34, 35], 
                  36: [37, 38, 39, 40, 42], 37: [36, 38, 39, 41, 42, 43], 38: [26, 36, 37, 40, 42, 43], 
                  39: [36, 37, 40, 41, 44], 40: [36, 38, 39, 41, 42, 44], 41: [26, 37, 39, 40, 42, 44], 
                  42: [29, 36, 37, 38, 40, 41, 43], 43: [22, 37, 38, 42], 44: [33, 39, 40, 41]}

# Determine pattern
print(determine_graph_pattern(adjacency_list))
```