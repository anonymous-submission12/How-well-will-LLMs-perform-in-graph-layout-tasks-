```python:/home/app/graph_analysis.py
import networkx as nx

# Given adjacency list
adj_list = {
    0: [3, 4, 8], 1: [2, 3, 4, 6, 32], 2: [1, 3, 4, 5, 6, 8, 9], 3: [0, 1, 2, 4, 6, 7, 8, 9],
    4: [0, 1, 2, 3, 7, 8, 9], 5: [2, 6], 6: [1, 2, 3, 5, 7], 7: [3, 4, 6, 10], 8: [0, 2, 3, 4],
    9: [2, 3, 4], 10: [7, 11, 12, 13, 16, 18], 11: [10, 12, 15, 16, 17, 18, 19], 12: [10, 11, 13, 14, 17, 19],
    13: [10, 12, 18, 37], 14: [12, 15, 18, 19, 25], 15: [11, 14, 16, 17], 16: [10, 11, 15, 17, 18],
    17: [11, 12, 15, 16, 18, 19], 18: [10, 11, 13, 14, 16, 17], 19: [11, 12, 14, 17, 21, 37],
    20: [21, 25, 26, 27, 28], 21: [19, 20, 27, 28, 45], 22: [23, 24, 25, 26], 23: [22, 25, 27, 28],
    24: [22, 26, 27, 28, 30], 25: [14, 20, 22, 23, 27], 26: [20, 22, 24, 27, 28], 27: [20, 21, 23, 24, 25, 26, 28],
    28: [20, 21, 23, 24, 26, 27], 32: [1, 29, 31, 34, 35, 37], 33: [30, 34, 35, 36], 34: [31, 32, 33, 35, 37],
    35: [29, 31, 32, 33, 34, 36, 37], 36: [29, 30, 31, 33, 35], 37: [13, 19, 29, 30, 32, 34, 35],
    29: [32, 35, 36, 37], 30: [24, 31, 33, 36, 37], 31: [30, 32, 34, 35, 36], 38: [40, 42, 45],
    39: [41, 43, 45, 46], 40: [38, 42, 44, 45, 46], 41: [39, 42, 43, 45], 42: [38, 40, 41, 43, 45, 46],
    43: [39, 41, 42, 44, 45], 44: [40, 43, 45, 46], 45: [21, 38, 39, 40, 41, 42, 43, 44, 46], 46: [39, 40, 42, 44, 45]
}

# Constructing graph
G = nx.Graph(adj_list)

# Function to determine graph pattern
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)

    # Check if it's a Star Graph (one central node connected to all others)
    degrees = dict(G.degree())
    max_deg = max(degrees.values())
    if max_deg == n - 1 and sum(v == 1 for v in degrees.values()) == n - 1:
        return "Star"

    # Check if it's a Cycle (all nodes have degree 2, forming a closed loop)
    if all(deg == 2 for deg in degrees.values()) and nx.is_connected(G):
        return "Cycle"

    # Check if it's a Path Graph (all nodes have degree at most 2 and exactly two nodes have degree 1)
    num_deg_1 = sum(1 for v in degrees.values() if v == 1)
    if num_deg_1 == 2 and all(deg <= 2 for deg in degrees.values()):
        return "Path"

    # Check if it's a Complete Graph (each node is connected to every other node)
    if m == n * (n - 1) // 2:
        return "Complete"

    # Check if it's a Grid Graph (approximate by checking average degree and connectivity)
    if nx.is_connected(G) and sum(2 <= deg <= 4 for deg in degrees.values()) / n > 0.9:
        return "Grid"

    # Check if it consists of dense, separate clusters (Clustered Graph)
    clusters = list(nx.connected_components(G))
    if len(clusters) > 1:
        avg_cluster_size = sum(len(c) for c in clusters) / len(clusters)
        if all(len(c) > avg_cluster_size * 0.8 for c in clusters):
            return "Clustered Graph"

    # Default to Random Graph
    return "Random Graph"

# Print result
print(determine_graph_pattern(G))
```