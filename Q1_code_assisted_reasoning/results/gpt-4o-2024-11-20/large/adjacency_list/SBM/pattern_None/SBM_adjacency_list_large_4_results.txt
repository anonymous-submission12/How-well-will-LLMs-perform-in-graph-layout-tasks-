```python
from collections import defaultdict

def determine_graph_pattern(adj_list):
    # Count the number of nodes and edges
    num_nodes = len(adj_list)
    num_edges = sum(len(neighbors) for neighbors in adj_list.values()) // 2

    # Check for Star pattern
    if any(len(neighbors) == num_nodes - 1 for neighbors in adj_list.values()):
        return "Star"

    # Check for Cycle pattern
    if all(len(neighbors) == 2 for neighbors in adj_list.values()) and num_edges == num_nodes:
        return "Cycle"

    # Check for Path pattern
    if all(len(neighbors) <= 2 for neighbors in adj_list.values()) and num_edges == num_nodes - 1:
        return "Path"

    # Check for Grid pattern
    # A grid graph has nodes with degree 2, 3, or 4, and the number of edges is less than the complete graph
    max_degree = max(len(neighbors) for neighbors in adj_list.values())
    if max_degree <= 4 and num_edges < num_nodes * (num_nodes - 1) // 2:
        return "Grid"

    # Check for Complete pattern
    if num_edges == num_nodes * (num_nodes - 1) // 2:
        return "Complete"

    # Check for Clustered graph
    # A clustered graph has groups of nodes with high connectivity within groups and sparse connectivity between groups
    visited = set()
    clusters = []

    def dfs(node, cluster):
        visited.add(node)
        cluster.append(node)
        for neighbor in adj_list[node]:
            if neighbor not in visited:
                dfs(neighbor, cluster)

    for node in adj_list:
        if node not in visited:
            cluster = []
            dfs(node, cluster)
            clusters.append(cluster)

    if len(clusters) > 1:
        return "Clustered graph"

    # Default to Random graph
    return "Random graph"

# Input adjacency list
adj_list = {
    0: [1, 2, 3, 4, 5, 7, 9, 10, 13], 1: [0, 2, 3, 6, 9, 10], 2: [0, 1, 3, 4, 6, 8, 9, 10],
    3: [0, 1, 2, 5, 6, 7, 10], 4: [0, 2, 5, 7, 8, 9], 5: [0, 3, 4, 8, 9, 10], 6: [1, 2, 3, 7, 8, 9, 10],
    7: [0, 3, 4, 6, 8, 9, 10, 37], 8: [2, 4, 5, 6, 7, 10], 9: [0, 1, 2, 4, 5, 6, 7, 10],
    10: [0, 1, 2, 3, 5, 6, 7, 8, 9], 11: [15, 16], 12: [17, 18, 19, 21], 13: [0, 15, 16, 20, 21],
    14: [16, 17, 18, 20, 21, 29], 15: [11, 13, 16, 20, 21], 16: [11, 13, 14, 15, 17, 18],
    17: [12, 14, 16, 21], 18: [12, 14, 16, 20, 21], 19: [12], 20: [13, 14, 15, 18, 21],
    21: [12, 13, 14, 15, 17, 18, 20], 22: [24, 26, 27, 28, 31], 23: [26, 28, 29, 30],
    24: [22, 25, 26, 28, 29, 31], 25: [24, 26, 28, 30, 31], 26: [22, 23, 24, 25, 27, 28, 29, 31, 40],
    27: [22, 26, 30, 31], 28: [22, 23, 24, 25, 26, 31, 33], 29: [14, 23, 24, 26, 31],
    30: [23, 25, 27], 31: [22, 24, 25, 26, 27, 28, 29], 32: [33, 34, 37, 39],
    33: [28, 32, 34, 35, 36, 38, 39, 40], 34: [32, 33, 36, 38, 39, 40], 35: [33, 36, 37, 39, 40],
    36: [33, 34, 35, 41], 37: [7, 32, 35, 40, 41], 38: [33, 34, 39, 40, 41], 39: [32, 33, 34, 35, 38, 40],
    40: [26, 33, 34, 35, 37, 38, 39, 41], 41: [36, 37, 38, 40]
}

print(determine_graph_pattern(adj_list))
```