```python
from collections import defaultdict

def graph_pattern(adj_list):
    # Helper function to count edges
    def count_edges(adj_list):
        edge_count = 0
        for node, neighbors in adj_list.items():
            edge_count += len(neighbors)
        return edge_count // 2  # Each edge is counted twice

    # Helper function to check if graph is complete
    def is_complete(adj_list):
        n = len(adj_list)
        expected_edges = n * (n - 1) // 2
        return count_edges(adj_list) == expected_edges

    # Helper function to check if graph is a star
    def is_star(adj_list):
        center_count = 0
        leaf_count = 0
        for node, neighbors in adj_list.items():
            if len(neighbors) == len(adj_list) - 1:
                center_count += 1
            elif len(neighbors) == 1:
                leaf_count += 1
        return center_count == 1 and leaf_count == len(adj_list) - 1

    # Helper function to check if graph is a cycle
    def is_cycle(adj_list):
        for node, neighbors in adj_list.items():
            if len(neighbors) != 2:
                return False
        return True

    # Helper function to check if graph is a path
    def is_path(adj_list):
        end_count = 0
        for node, neighbors in adj_list.items():
            if len(neighbors) == 1:
                end_count += 1
            elif len(neighbors) > 2:
                return False
        return end_count == 2

    # Helper function to check if graph is a grid
    def is_grid(adj_list):
        # Grid graphs are hard to detect without coordinates, so we approximate
        edge_count = count_edges(adj_list)
        node_count = len(adj_list)
        return edge_count >= node_count and edge_count <= 2 * node_count

    # Helper function to check if graph is clustered
    def is_clustered(adj_list):
        # Clustered graphs typically have dense subgraphs
        # We approximate by checking if there are nodes with high degree
        for node, neighbors in adj_list.items():
            if len(neighbors) > len(adj_list) // 2:
                return True
        return False

    # Helper function to check if graph is random
    def is_random(adj_list):
        # Random graphs typically have no discernible pattern
        return True

    # Determine the pattern
    if is_complete(adj_list):
        return "Complete"
    elif is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_grid(adj_list):
        return "Grid"
    elif is_clustered(adj_list):
        return "Clustered"
    else:
        return "Random"

# Input graph data
adj_list = {
    0: [1, 3, 5, 7, 16], 1: [0, 2, 4, 5, 6, 7], 2: [1, 4, 5, 6, 26], 3: [0],
    4: [1, 2, 5, 7, 8], 5: [0, 1, 2, 4, 7], 6: [1, 2, 8], 7: [0, 1, 4, 5, 8],
    8: [4, 6, 7], 9: [10, 11, 13, 15, 23], 10: [9, 11, 12, 13, 16],
    11: [9, 10, 12, 13, 14, 15, 16], 12: [10, 11, 13, 15, 16],
    13: [9, 10, 11, 12, 14], 14: [11, 13, 15, 16, 40], 15: [9, 11, 12, 14, 16, 17, 25],
    16: [0, 10, 11, 12, 14, 15], 17: [15, 22, 24, 38], 18: [19, 20, 22, 23, 24],
    19: [18, 20, 21, 22, 23, 24], 20: [18, 19, 21, 22, 23, 24], 21: [19, 20, 23],
    22: [17, 18, 19, 20, 23, 24], 23: [9, 18, 19, 20, 21, 22, 24],
    24: [17, 18, 19, 20, 22, 23], 32: [25, 26, 27, 28, 29, 31],
    25: [15, 26, 27, 29, 31, 32], 26: [2, 25, 28, 30, 31, 32],
    27: [25, 28, 30, 31, 32], 28: [26, 27, 29, 30, 32], 29: [25, 28, 31, 32],
    30: [26, 27, 28, 31], 31: [25, 26, 27, 29, 30, 32], 33: [36, 39],
    34: [35, 36, 38, 40], 35: [34, 36, 37, 38, 39, 40],
    36: [33, 34, 35, 37, 38, 39, 40], 37: [35, 36], 38: [17, 34, 35, 36, 39, 40],
    39: [33, 35, 36, 38, 40], 40: [14, 34, 35, 36, 38, 39]
}

# Output the result
print(graph_pattern(adj_list))
```