```python
def determine_graph_pattern(adj_list):
    # Helper function to check if the graph is a star
    def is_star(adj_list):
        center_count = 0
        leaf_count = 0
        for node, neighbors in adj_list.items():
            if len(neighbors) == len(adj_list) - 1:
                center_count += 1
            elif len(neighbors) == 1:
                leaf_count += 1
        return center_count == 1 and leaf_count == len(adj_list) - 1

    # Helper function to check if the graph is a cycle
    def is_cycle(adj_list):
        for neighbors in adj_list.values():
            if len(neighbors) != 2:
                return False
        return True

    # Helper function to check if the graph is a path
    def is_path(adj_list):
        end_count = 0
        for neighbors in adj_list.values():
            if len(neighbors) == 1:
                end_count += 1
            elif len(neighbors) > 2:
                return False
        return end_count == 2

    # Helper function to check if the graph is complete
    def is_complete(adj_list):
        n = len(adj_list)
        for neighbors in adj_list.values():
            if len(neighbors) != n - 1:
                return False
        return True

    # Helper function to check if the graph is a grid
    def is_grid(adj_list):
        # A grid graph has nodes with degree 2, 3, or 4 (except for boundary nodes)
        degrees = [len(neighbors) for neighbors in adj_list.values()]
        return all(degree in {2, 3, 4} for degree in degrees)

    # Helper function to check if the graph is clustered
    def is_clustered(adj_list):
        # A clustered graph has dense subgraphs with sparse connections between them
        # This is a heuristic check based on average degree
        degrees = [len(neighbors) for neighbors in adj_list.values()]
        avg_degree = sum(degrees) / len(degrees)
        return avg_degree > len(adj_list) / 4

    # Helper function to check if the graph is random
    def is_random(adj_list):
        # A random graph has no specific structure
        return True

    # Check the graph against each pattern
    if is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_complete(adj_list):
        return "Complete"
    elif is_grid(adj_list):
        return "Grid"
    elif is_clustered(adj_list):
        return "Clustered Graph"
    else:
        return "Random Graph"

# Input adjacency list
adj_list = {0: [2, 4, 5, 6, 11, 12, 13, 18, 19, 20], 1: [3, 5, 6, 7, 8, 9, 12, 13, 14, 16], 2: [0, 4, 7, 9, 13, 14, 15, 18, 19], 3: [1, 4, 5, 6, 7, 9, 11, 12, 14, 15, 17, 19], 4: [0, 2, 3, 5, 7, 9, 10, 12, 14, 15, 17, 18, 20], 5: [0, 1, 3, 4, 7, 8, 12, 15, 16, 17, 19], 6: [0, 1, 3, 8, 9, 11, 12, 14, 15, 18, 19, 37], 7: [1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 19, 20], 8: [1, 5, 6, 7, 9, 10, 11, 12, 14, 16, 17, 18, 19], 9: [1, 2, 3, 4, 6, 7, 8, 14, 16, 18, 19], 10: [4, 7, 8, 13, 15, 16, 17, 18, 20], 11: [0, 3, 6, 7, 8, 12, 14, 18, 20], 12: [0, 1, 3, 4, 5, 6, 7, 8, 11, 13, 14, 16, 17, 18, 25, 26], 13: [0, 1, 2, 10, 12, 14, 15, 17, 18, 20], 14: [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 20], 15: [2, 3, 4, 5, 6, 10, 13, 14, 16, 17, 19], 16: [1, 5, 7, 8, 9, 10, 12, 15, 19], 17: [3, 4, 5, 7, 8, 10, 12, 13, 14, 15, 18, 19], 18: [0, 2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 17, 19, 20], 19: [0, 2, 3, 5, 6, 7, 8, 9, 14, 15, 16, 17, 18, 20, 37], 20: [0, 4, 7, 10, 11, 13, 14, 18, 19], 21: [23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39], 22: [24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40], 23: [21, 24, 28, 31, 33, 34, 35, 39, 40], 24: [21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 40], 25: [12, 21, 22, 28, 29, 31, 33, 34, 35, 37, 38, 40], 26: [12, 22, 24, 27, 28, 31, 32, 37, 38, 40], 27: [22, 24, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39], 28: [22, 23, 24, 25, 26, 27, 29, 31, 34, 36, 39, 40], 29: [21, 22, 24, 25, 27, 28, 33, 34, 35, 36, 37, 39], 30: [21, 22, 24, 27, 34, 36, 38, 39], 31: [21, 23, 24, 25, 26, 27, 28, 34, 38, 40], 32: [21, 24, 26, 27, 33, 34, 37, 39, 40], 33: [21, 22, 23, 25, 29, 32, 36, 37, 39], 34: [21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37], 35: [21, 22, 23, 24, 25, 27, 29, 34, 37, 39], 36: [22, 24, 27, 28, 29, 30, 33, 34, 37, 38, 39], 37: [6, 19, 21, 22, 24, 25, 26, 27, 29, 32, 33, 34, 35, 36, 39, 40], 38: [21, 22, 25, 26, 30, 31, 36, 40], 39: [21, 23, 27, 28, 29, 30, 32, 33, 35, 36, 37, 40], 40: [22, 23, 24, 25, 26, 28, 31, 32, 37, 38, 39]}

# Determine the graph pattern
print(determine_graph_pattern(adj_list))
```