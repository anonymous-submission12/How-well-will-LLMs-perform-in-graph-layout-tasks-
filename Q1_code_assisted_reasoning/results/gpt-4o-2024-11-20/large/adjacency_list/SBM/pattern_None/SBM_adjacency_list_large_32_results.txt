```python
from collections import defaultdict

def determine_graph_pattern(adjacency_list):
    def is_star():
        center_count = 0
        for node, neighbors in adjacency_list.items():
            if len(neighbors) == len(adjacency_list) - 1:
                center_count += 1
            elif len(neighbors) != 1:
                return False
        return center_count == 1

    def is_cycle():
        edges = sum(len(neighbors) for neighbors in adjacency_list.values()) // 2
        if edges != len(adjacency_list):
            return False
        for neighbors in adjacency_list.values():
            if len(neighbors) != 2:
                return False
        return True

    def is_path():
        if not (sum(len(neighbors) == 1 for neighbors in adjacency_list.values()) == 2):
            return False
        for neighbors in adjacency_list.values():
            if len(neighbors) > 2:
                return False
        return True

    def is_grid():
        rows = defaultdict(list)
        cols = defaultdict(list)
        for node, neighbors in adjacency_list.items():
            rows[node // int(len(adjacency_list)**0.5)].append(len(neighbors))
            cols[node % int(len(adjacency_list)**0.5)].append(len(neighbors))
        return all(2 <= len(set(v)) <= 3 for v in rows.values()) and \
               all(2 <= len(set(v)) <= 3 for v in cols.values())

    def is_complete():
        node_count = len(adjacency_list)
        for neighbors in adjacency_list.values():
            if len(neighbors) != node_count - 1:
                return False
        return True

    def is_clustered():
        visited = set()

        def dfs(node, component):
            for neighbor in adjacency_list[node]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    component.add(neighbor)
                    dfs(neighbor, component)

        clusters = []
        for node in adjacency_list:
            if node not in visited:
                component = set([node])
                visited.add(node)
                dfs(node, component)
                clusters.append(component)

        cluster_sizes = [len(c) for c in clusters]
        return len(clusters) > 1 and all(s >= 2 for s in cluster_sizes)

    def is_random():
        return True  # Assume the graph is random if no other pattern is detected

    if is_star():
        return "Star"
    elif is_cycle():
        return "Cycle"
    elif is_path():
        return "Path"
    elif is_grid():
        return "Grid"
    elif is_complete():
        return "Complete"
    elif is_clustered():
        return "Clustered"
    else:
        return "Random"

adjacency_list = {
    0: [1, 2, 3, 4, 7, 39], 1: [0, 2, 4, 6], 2: [0, 1, 3, 4, 5, 6], 3: [0, 2, 6, 7, 25], 
    4: [0, 1, 2, 5, 6], 5: [2, 4, 6, 7], 6: [1, 2, 3, 4, 5], 7: [0, 3, 5], 8: [10, 13, 14, 15, 21], 
    9: [11, 12, 13, 14], 10: [8, 11, 13, 14, 15, 35], 11: [9, 10, 14, 15], 12: [9, 15], 13: [8, 9, 10, 14], 
    14: [8, 9, 10, 11, 13, 15, 24], 15: [8, 10, 11, 12, 14], 16: [17, 20, 22], 17: [16, 18, 19, 22], 
    18: [17, 19, 21, 22], 19: [17, 18, 21, 23, 26], 20: [16, 21], 21: [8, 18, 19, 20, 23], 22: [16, 17, 18, 23], 
    23: [19, 21, 22], 24: [14, 26, 27, 28, 29, 30, 43], 25: [3, 26, 27, 30, 31], 26: [19, 24, 25, 27, 28, 29, 30, 31], 
    27: [24, 25, 26, 28, 31, 34], 28: [24, 26, 27, 29, 31], 29: [24, 26, 28, 30, 31], 30: [24, 25, 26, 29], 
    31: [25, 26, 27, 28, 29], 32: [36, 38], 33: [34, 36, 37], 34: [27, 33, 35, 36, 37, 38], 35: [10, 34, 36, 38], 
    36: [32, 33, 34, 35], 37: [33, 34], 38: [32, 34, 35], 39: [0, 40, 42, 43, 44], 40: [39, 42, 45], 
    41: [42, 43, 45], 42: [39, 40, 41, 43, 44], 43: [24, 39, 41, 42, 44], 44: [39, 42, 43], 45: [40, 41]
}

print(determine_graph_pattern(adjacency_list))
```