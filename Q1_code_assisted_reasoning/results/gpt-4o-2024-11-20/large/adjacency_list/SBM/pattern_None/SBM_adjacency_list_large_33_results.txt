```python
from collections import defaultdict

def determine_graph_pattern(adj_list):
    # Helper function to check if the graph is a star
    def is_star():
        center_count = 0
        leaf_count = 0
        for node, neighbors in adj_list.items():
            if len(neighbors) == len(adj_list) - 1:
                center_count += 1
            elif len(neighbors) == 1:
                leaf_count += 1
        return center_count == 1 and leaf_count == len(adj_list) - 1

    # Helper function to check if the graph is a cycle
    def is_cycle():
        for node, neighbors in adj_list.items():
            if len(neighbors) != 2:
                return False
        return True

    # Helper function to check if the graph is a path
    def is_path():
        end_count = 0
        for node, neighbors in adj_list.items():
            if len(neighbors) == 1:
                end_count += 1
            elif len(neighbors) > 2:
                return False
        return end_count == 2

    # Helper function to check if the graph is complete
    def is_complete():
        n = len(adj_list)
        for node, neighbors in adj_list.items():
            if len(neighbors) != n - 1:
                return False
        return True

    # Helper function to check if the graph is a grid
    def is_grid():
        # A grid graph has nodes with degree 2, 3, or 4
        for node, neighbors in adj_list.items():
            if len(neighbors) not in {2, 3, 4}:
                return False
        return True

    # Helper function to check if the graph is clustered
    def is_clustered():
        # A clustered graph has dense subgraphs (cliques) connected sparsely
        # Check for cliques in the graph
        visited = set()
        clusters = []

        def dfs(node, cluster):
            visited.add(node)
            cluster.append(node)
            for neighbor in adj_list[node]:
                if neighbor not in visited:
                    dfs(neighbor, cluster)

        for node in adj_list:
            if node not in visited:
                cluster = []
                dfs(node, cluster)
                clusters.append(cluster)

        # Check if each cluster is a clique
        for cluster in clusters:
            for node in cluster:
                if len(set(adj_list[node]) & set(cluster)) != len(cluster) - 1:
                    return False
        return True

    # Helper function to check if the graph is random
    def is_random():
        # A random graph does not fit any of the above patterns
        return True

    # Check patterns in order
    if is_star():
        return "Star"
    elif is_cycle():
        return "Cycle"
    elif is_path():
        return "Path"
    elif is_complete():
        return "Complete"
    elif is_grid():
        return "Grid"
    elif is_clustered():
        return "Clustered"
    else:
        return "Random"

# Input adjacency list
adj_list = {
    0: [2, 3, 4], 1: [4, 5, 6, 7, 8], 2: [0, 3, 6, 7, 8, 46], 3: [0, 2, 5], 4: [0, 1, 5, 6],
    5: [1, 3, 4, 7], 6: [1, 2, 4, 7, 8, 9, 20, 25], 7: [1, 2, 5, 6, 8], 8: [1, 2, 6, 7, 9],
    9: [6, 8], 10: [13, 15, 16, 17, 18, 19], 11: [13, 14, 15, 16, 17, 18], 12: [14, 15, 17, 18, 19],
    13: [10, 11, 14, 15, 16, 17, 18, 19], 14: [11, 12, 13, 17, 18], 15: [10, 11, 12, 13, 16, 17, 18],
    16: [10, 11, 13, 15, 18], 17: [10, 11, 12, 13, 14, 15, 19], 18: [10, 11, 12, 13, 14, 15, 16, 19],
    19: [10, 12, 13, 17, 18, 29], 20: [6, 21, 22, 25, 26, 27, 30], 21: [20, 23, 24, 25, 26, 28, 29],
    22: [20, 27, 28, 29], 23: [21, 25, 26, 27, 28, 29], 24: [21, 28], 25: [6, 20, 21, 23, 27, 28, 29],
    26: [20, 21, 23, 27, 28, 29], 27: [20, 22, 23, 25, 26, 29], 28: [21, 22, 23, 24, 25, 26, 29],
    29: [19, 21, 22, 23, 25, 26, 27, 28, 43], 32: [30, 31, 34, 37, 39], 33: [31, 34, 37, 39],
    34: [30, 31, 32, 33, 35, 39], 35: [31, 34, 39], 36: [30, 37], 37: [30, 32, 33, 36, 38, 39],
    38: [30, 37], 39: [30, 32, 33, 34, 35, 37], 30: [20, 31, 32, 34, 36, 37, 38, 39],
    31: [30, 32, 33, 34, 35], 40: [41, 43, 44, 45, 48, 49], 41: [40, 42, 44, 46, 49],
    42: [41, 43, 44, 45, 48], 43: [29, 40, 42, 44, 45, 47, 48, 49], 44: [40, 41, 42, 43, 45, 46, 48, 49],
    45: [40, 42, 43, 44, 47], 46: [2, 41, 44, 47, 48, 49], 47: [43, 45, 46, 48],
    48: [40, 42, 43, 44, 46, 47, 49], 49: [40, 41, 43, 44, 46, 48]
}

# Determine the graph pattern
print(determine_graph_pattern(adj_list))
```