```python
from collections import defaultdict

def determine_graph_pattern(adj_list):
    # Helper function to count edges
    def count_edges(adj_list):
        edge_count = 0
        for node, neighbors in adj_list.items():
            edge_count += len(neighbors)
        return edge_count // 2  # Each edge is counted twice

    # Helper function to check if graph is complete
    def is_complete(adj_list):
        n = len(adj_list)
        expected_edges = n * (n - 1) // 2
        return count_edges(adj_list) == expected_edges

    # Helper function to check if graph is a star
    def is_star(adj_list):
        center_count = 0
        leaf_count = 0
        for node, neighbors in adj_list.items():
            if len(neighbors) == len(adj_list) - 1:
                center_count += 1
            elif len(neighbors) == 1:
                leaf_count += 1
        return center_count == 1 and leaf_count == len(adj_list) - 1

    # Helper function to check if graph is a cycle
    def is_cycle(adj_list):
        for node, neighbors in adj_list.items():
            if len(neighbors) != 2:
                return False
        return True

    # Helper function to check if graph is a path
    def is_path(adj_list):
        end_count = 0
        for node, neighbors in adj_list.items():
            if len(neighbors) == 1:
                end_count += 1
            elif len(neighbors) > 2:
                return False
        return end_count == 2

    # Helper function to check if graph is a grid
    def is_grid(adj_list):
        # A grid graph has nodes with degree 2, 3, or 4
        for node, neighbors in adj_list.items():
            if len(neighbors) not in {2, 3, 4}:
                return False
        return True

    # Helper function to check if graph is clustered
    def is_clustered(adj_list):
        # A clustered graph has dense subgraphs (clusters) connected sparsely
        # This is a heuristic check based on average degree
        total_degree = sum(len(neighbors) for neighbors in adj_list.values())
        avg_degree = total_degree / len(adj_list)
        return avg_degree > 2 and avg_degree < len(adj_list) - 1

    # Helper function to check if graph is random
    def is_random(adj_list):
        # A random graph has no discernible pattern
        # This is a heuristic check based on average degree
        total_degree = sum(len(neighbors) for neighbors in adj_list.values())
        avg_degree = total_degree / len(adj_list)
        return avg_degree > 1 and avg_degree < len(adj_list) - 1

    # Determine the graph pattern
    if is_complete(adj_list):
        return "Complete"
    elif is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_grid(adj_list):
        return "Grid"
    elif is_clustered(adj_list):
        return "Clustered"
    elif is_random(adj_list):
        return "Random"
    else:
        return "Unknown"

# Input adjacency list
adj_list = {
    0: [1, 2, 3, 4, 5, 8], 1: [0, 2, 3, 4, 5, 6], 2: [0, 1, 3, 4, 5, 6, 8],
    3: [0, 1, 2, 4, 7, 8, 20, 35], 4: [0, 1, 2, 3, 6, 7, 8, 24],
    5: [0, 1, 2, 6, 7, 8, 10], 6: [1, 2, 4, 5], 7: [3, 4, 5],
    8: [0, 2, 3, 4, 5], 9: [11, 12, 13, 14, 15, 16],
    10: [5, 12, 13, 16, 17, 36], 11: [9, 14, 15, 16],
    12: [9, 10, 13, 14, 15, 16, 17, 38], 13: [9, 10, 12, 14, 15, 16, 17],
    14: [9, 11, 12, 13, 15, 16], 15: [9, 11, 12, 13, 14, 16, 17],
    16: [9, 10, 11, 12, 13, 14, 15, 17, 35], 17: [10, 12, 13, 15, 16, 24],
    18: [20, 21, 22, 23, 24], 19: [20, 22, 23, 24, 25],
    20: [3, 18, 19, 22, 23, 24, 25], 21: [18, 22, 24, 25, 30],
    22: [18, 19, 20, 21], 23: [18, 19, 20, 25],
    24: [4, 17, 18, 19, 20, 21], 25: [19, 20, 21, 23],
    32: [28, 29, 31, 33], 33: [29, 30, 32],
    26: [27, 29, 30, 39], 27: [26, 28],
    28: [27, 29, 30, 31, 32, 34], 29: [26, 28, 30, 32, 33],
    30: [21, 26, 28, 29, 33], 31: [28, 32],
    34: [28, 35, 36, 40, 41], 35: [3, 16, 34, 36, 37, 38, 40, 41],
    36: [10, 34, 35, 38, 40, 41], 37: [35, 39, 40, 41],
    38: [12, 35, 36, 39, 41], 39: [26, 37, 38, 40],
    40: [34, 35, 36, 37, 39, 41], 41: [34, 35, 36, 37, 38, 40]
}

print(determine_graph_pattern(adj_list))
```