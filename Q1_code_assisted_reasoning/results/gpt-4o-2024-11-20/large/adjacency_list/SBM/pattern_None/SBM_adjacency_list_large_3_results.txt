```python
def categorize_graph(adj_list):
    def is_star(adj_list):
        center_count = sum(1 for node in adj_list if len(adj_list[node]) == len(adj_list) - 1)
        if center_count == 1:
            leaf_count = sum(1 for node in adj_list if len(adj_list[node]) == 1)
            return leaf_count == len(adj_list) - 1
        return False

    def is_cycle(adj_list):
        return all(len(adj_list[node]) == 2 for node in adj_list) and len(adj_list) == sum(len(adj_list[node]) for node in adj_list) // 2

    def is_path(adj_list):
        degree_count = [len(adj_list[node]) for node in adj_list]
        return degree_count.count(2) == len(adj_list) - 2 and degree_count.count(1) == 2

    def is_grid(adj_list):
        from math import sqrt
        nodes = len(adj_list)
        possible_dim = sqrt(nodes)
        if not possible_dim.is_integer():
            return False
        dim = int(possible_dim)
        for node in adj_list:
            degree = len(adj_list[node])
            if degree not in [2, 3, 4]:  # Possible degrees in a grid
                return False
        return True

    def is_complete(adj_list):
        return all(len(adj_list[node]) == len(adj_list) - 1 for node in adj_list)

    def is_clustered_graph(adj_list):
        visited = set()
        clusters = 0

        def dfs(node):
            stack = [node]
            while stack:
                curr = stack.pop()
                if curr not in visited:
                    visited.add(curr)
                    stack.extend(adj_list[curr])

        for node in adj_list:
            if node not in visited:
                clusters += 1
                dfs(node)

        return clusters > 1

    def is_random(adj_list):
        return not (is_star(adj_list) or is_cycle(adj_list) or is_path(adj_list) or is_grid(adj_list) or is_complete(adj_list) or is_clustered_graph(adj_list))

    patterns = [
        ("Star", is_star(adj_list)),
        ("Cycle", is_cycle(adj_list)),
        ("Path", is_path(adj_list)),
        ("Grid", is_grid(adj_list)),
        ("Complete", is_complete(adj_list)),
        ("Clustered Graph", is_clustered_graph(adj_list)),
        ("Random Graph", is_random(adj_list)),
    ]

    for pattern, is_match in patterns:
        if is_match:
            return pattern


adj_list = {0: [1, 4, 5, 7, 8, 10, 12, 30], 1: [0, 2, 3, 4, 6, 7, 8, 10, 11], 2: [1, 3, 4, 5, 6, 7, 8, 20], 3: [1, 2, 4, 5, 6, 7, 8, 9, 11, 12], 4: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], 5: [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12], 6: [1, 2, 3, 4, 5, 7, 9, 10, 11], 7: [0, 1, 2, 3, 4, 5, 6, 11], 8: [0, 1, 2, 3, 4, 5, 9, 10, 11, 12], 9: [3, 4, 5, 6, 8, 11, 12], 10: [0, 1, 4, 5, 6, 8, 11, 46], 11: [1, 3, 4, 5, 6, 7, 8, 9, 10, 27], 12: [0, 3, 4, 5, 8, 9, 27, 44], 13: [14, 15, 16, 17, 18, 21, 22, 23, 24], 14: [13, 18, 19, 20, 22, 23, 24], 15: [13, 16, 17, 18, 19, 20, 21, 22, 24], 16: [13, 15, 18, 19, 20, 21, 23, 24], 17: [13, 15, 18, 19, 20, 21, 23, 24], 18: [13, 14, 15, 16, 17, 20, 22], 19: [14, 15, 16, 17, 20, 21, 22, 23, 24], 20: [2, 14, 15, 16, 17, 18, 19, 21, 23, 24], 21: [13, 15, 16, 17, 19, 20, 22, 28], 22: [13, 14, 15, 18, 19, 21], 23: [13, 14, 16, 17, 19, 20], 24: [13, 14, 15, 16, 17, 19, 20], 32: [25, 29, 33, 34, 36], 33: [25, 27, 31, 32, 34, 36], 34: [26, 29, 31, 32, 33, 44], 35: [25, 26, 27, 28, 29, 36], 36: [27, 29, 30, 31, 32, 33, 35], 25: [26, 27, 28, 29, 31, 32, 33, 35], 26: [25, 27, 34, 35], 27: [11, 12, 25, 26, 28, 29, 31, 33, 35, 36], 28: [21, 25, 27, 29, 35], 29: [25, 27, 28, 32, 34, 35, 36, 46], 30: [0, 31, 36], 31: [25, 27, 30, 33, 34, 36], 37: [39, 43, 45, 46, 47, 48], 38: [40, 43, 45, 46, 47], 39: [37, 41, 43, 44, 45, 46, 47, 48], 40: [38, 41, 42, 44, 45, 46, 47, 48], 41: [39, 40, 42, 43, 44, 47, 48], 42: [40, 41, 44, 47, 48], 43: [37, 38, 39, 41, 45, 46], 44: [12, 34, 39, 40, 41, 42, 47, 48], 45: [37, 38, 39, 40, 43, 46], 46: [10, 29, 37, 38, 39, 40, 43, 45, 47, 48], 47: [37, 38, 39, 40, 41, 42, 44, 46, 48], 48: [37, 39, 40, 41, 42, 44, 46, 47]}
print(categorize_graph(adj_list))
```