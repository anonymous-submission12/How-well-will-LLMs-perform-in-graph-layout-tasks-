```python
from collections import defaultdict

def graph_type(adj_list):
    # Helper function to count edges
    def count_edges(adj_list):
        return sum(len(neighbors) for neighbors in adj_list.values()) // 2

    # Check if the graph is a star
    def is_star(adj_list):
        center_count = 0
        leaf_count = 0
        for node, neighbors in adj_list.items():
            if len(neighbors) == len(adj_list) - 1:
                center_count += 1
            elif len(neighbors) == 1:
                leaf_count += 1
        return center_count == 1 and leaf_count == len(adj_list) - 1

    # Check if the graph is a cycle
    def is_cycle(adj_list):
        return all(len(neighbors) == 2 for neighbors in adj_list.values()) and count_edges(adj_list) == len(adj_list)

    # Check if the graph is a path
    def is_path(adj_list):
        end_points = 0
        for neighbors in adj_list.values():
            if len(neighbors) == 1:
                end_points += 1
            elif len(neighbors) > 2:
                return False
        return end_points == 2

    # Check if the graph is a complete graph
    def is_complete(adj_list):
        n = len(adj_list)
        return all(len(neighbors) == n - 1 for neighbors in adj_list.values())

    # Check if the graph is a grid
    def is_grid(adj_list):
        # A grid graph has nodes with degree 2, 3, or 4
        return all(2 <= len(neighbors) <= 4 for neighbors in adj_list.values())

    # Check if the graph is clustered
    def is_clustered(adj_list):
        # A clustered graph has dense subgraphs (cliques) connected sparsely
        # Approximation: Check if there are groups of nodes with high internal connectivity
        visited = set()
        clusters = []

        def dfs(node, cluster):
            visited.add(node)
            cluster.append(node)
            for neighbor in adj_list[node]:
                if neighbor not in visited:
                    dfs(neighbor, cluster)

        for node in adj_list:
            if node not in visited:
                cluster = []
                dfs(node, cluster)
                clusters.append(cluster)

        # Check if each cluster is a clique
        for cluster in clusters:
            for node in cluster:
                if len(set(adj_list[node]) & set(cluster)) != len(cluster) - 1:
                    return False
        return True

    # Check if the graph is random
    def is_random(adj_list):
        # A random graph has no discernible structure
        return not (is_star(adj_list) or is_cycle(adj_list) or is_path(adj_list) or is_complete(adj_list) or is_grid(adj_list) or is_clustered(adj_list))

    # Determine the type of graph
    if is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_complete(adj_list):
        return "Complete"
    elif is_grid(adj_list):
        return "Grid"
    elif is_clustered(adj_list):
        return "Clustered"
    elif is_random(adj_list):
        return "Random"
    else:
        return "Unknown"

# Input adjacency list
adj_list = {
    0: [1, 3, 5, 6, 11], 1: [0, 2, 5, 7, 9, 10], 2: [1, 3, 4, 6, 8, 9, 10], 3: [0, 2, 4, 5, 6, 8, 9],
    4: [2, 3, 5, 7, 8, 9, 11], 5: [0, 1, 3, 4, 7, 8, 9, 10, 14], 6: [0, 2, 3, 8, 10, 11], 7: [1, 4, 5, 8, 9, 11],
    8: [2, 3, 4, 5, 6, 7, 9], 9: [1, 2, 3, 4, 5, 7, 8, 10, 11, 42], 10: [1, 2, 5, 6, 9], 11: [0, 4, 6, 7, 9],
    12: [16, 18, 20, 21, 23], 13: [15, 16, 19, 22, 23], 14: [5, 16, 17, 19, 20, 21, 22, 23, 37],
    15: [13, 16, 17, 18, 20, 21, 22, 23], 16: [12, 13, 14, 15, 17, 23], 17: [14, 15, 16, 18, 19, 21, 23],
    18: [12, 15, 17, 19, 20, 21, 22, 23], 19: [13, 14, 17, 18, 21, 22], 20: [12, 14, 15, 18, 21],
    21: [12, 14, 15, 17, 18, 19, 20, 22, 23], 22: [13, 14, 15, 18, 19, 21, 23], 23: [12, 13, 14, 15, 16, 17, 18, 21, 22],
    32: [24, 25, 26, 27, 29, 31, 34, 35], 33: [24, 26, 27, 28, 31], 34: [24, 25, 28, 31, 32, 35, 37],
    35: [24, 25, 26, 27, 29, 32, 34], 24: [25, 27, 28, 32, 33, 34, 35], 25: [24, 26, 27, 28, 29, 31, 32, 34, 35],
    26: [25, 28, 30, 31, 32, 33, 35], 27: [24, 25, 28, 30, 31, 32, 33, 35], 28: [24, 25, 26, 27, 29, 33, 34, 44],
    29: [25, 28, 30, 32, 35], 30: [26, 27, 29], 31: [25, 26, 27, 32, 33, 34], 36: [40, 45, 46],
    37: [14, 34, 39, 40, 41, 42, 46], 38: [39, 42, 43, 44, 45, 46], 39: [37, 38, 42, 43, 45, 46],
    40: [36, 37, 43, 44, 45, 46], 41: [37, 42, 43], 42: [9, 37, 38, 39, 41, 43, 44, 45, 46],
    43: [38, 39, 40, 41, 42, 44, 45], 44: [28, 38, 40, 42, 43], 45: [36, 38, 39, 40, 42, 43],
    46: [36, 37, 38, 39, 40, 42]
}

print(graph_type(adj_list))
```