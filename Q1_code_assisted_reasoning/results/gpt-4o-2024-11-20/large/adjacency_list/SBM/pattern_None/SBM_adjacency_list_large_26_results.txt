```python
from collections import defaultdict

def identify_graph_pattern(adjacency_list):
    def is_star_graph():
        # Star graph has one central node connected to all other nodes,
        # and other nodes have degree 1.
        central_nodes = [node for node, neighbors in adjacency_list.items() 
                         if len(neighbors) == len(adjacency_list) - 1]
        leaf_nodes = [node for node, neighbors in adjacency_list.items() if len(neighbors) == 1]
        return len(central_nodes) == 1 and len(leaf_nodes) == len(adjacency_list) - 1

    def is_cycle_graph():
        # Cycle graph has all nodes connected in a single cycle.
        return all(len(neighbors) == 2 for neighbors in adjacency_list.values())

    def is_path_graph():
        # Path graph has two endpoints with degree 1 and all intermediate nodes with degree 2.
        degree_count = [len(neighbors) for neighbors in adjacency_list.values()]
        return degree_count.count(1) == 2 and degree_count.count(2) == len(degree_count) - 2

    def is_grid_graph():
        # Grid graph has nodes connected in a 2D grid-like manner.
        # This is heuristic-based and assumes the graph has approximate grid connectivity.
        total_edges = sum(len(neighbors) for neighbors in adjacency_list.values()) // 2
        approx_grid_size = int(len(adjacency_list) ** 0.5)
        return total_edges == approx_grid_size * (approx_grid_size - 1) or total_edges == approx_grid_size ** 2

    def is_complete_graph():
        # Complete graph has edges between every pair of nodes.
        total_nodes = len(adjacency_list)
        total_edges = sum(len(neighbors) for neighbors in adjacency_list.values()) // 2
        return total_edges == total_nodes * (total_nodes - 1) // 2

    def is_clustered_graph():
        # Clustered graph has dense connectivity within clusters and sparse connectivity between clusters.
        # This is heuristic-based and checks for subgraphs with high internal connectivity.
        visited = set()
        clusters = []

        def explore_cluster(node):
            stack = [node]
            cluster = set()
            while stack:
                current = stack.pop()
                if current not in visited:
                    visited.add(current)
                    cluster.add(current)
                    stack.extend(adjacency_list[current] - visited)
            return cluster

        for node in adjacency_list:
            if node not in visited:
                cluster = explore_cluster(node)
                clusters.append(cluster)

        intra_cluster_density = all(
            sum(len(adjacency_list[n]) for n in cluster) // 2 >= len(cluster) * (len(cluster) - 1) // 4
            for cluster in clusters
        )
        inter_cluster_density = sum(
            len(adjacency_list[n]) for cluster in clusters for n in cluster
        ) // 2 < len(adjacency_list)
        return intra_cluster_density and inter_cluster_density

    def is_random_graph():
        # Random graph doesn't follow any specific patterns of other graph types.
        return True

    if is_star_graph():
        return "Star"
    elif is_cycle_graph():
        return "Cycle"
    elif is_path_graph():
        return "Path"
    elif is_grid_graph():
        return "Grid"
    elif is_complete_graph():
        return "Complete"
    elif is_clustered_graph():
        return "Clustered Graph"
    else:
        return "Random Graph"

# Input
adjacency_list = {
    0: {1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 14}, 1: {0, 2, 3, 4, 5, 6, 8, 12, 13, 14, 22},
    2: {0, 1, 3, 4, 5, 6, 8, 11, 14}, 3: {1, 2, 5, 7, 8, 10, 13, 14}, 4: {0, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13},
    5: {0, 1, 2, 3, 8, 9, 11, 14}, 6: {0, 1, 2, 4, 7, 8, 10, 11, 12, 16}, 7: {0, 3, 4, 6, 9, 12, 14},
    8: {0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 13, 14}, 9: {0, 4, 5, 7, 8, 13, 14}, 10: {0, 3, 4, 6, 8, 13},
    11: {2, 4, 5, 6, 8, 13}, 12: {0, 1, 4, 6, 7, 13}, 13: {1, 3, 4, 8, 9, 10, 11, 12, 14},
    14: {0, 1, 2, 3, 5, 7, 8, 9, 13}, 15: {16, 17, 20, 21, 23, 24, 26, 27}, 16: {6, 15, 18, 20, 21, 22, 27, 28},
    17: {15, 18, 21, 23, 25, 28, 42}, 18: {16, 17, 22, 25, 26, 27}, 19: {21, 22, 24, 25, 26, 28},
    20: {15, 16, 23, 25, 26, 27, 28}, 21: {15, 16, 17, 19, 22, 23, 25, 26},
    22: {1, 16, 18, 19, 21, 23, 24, 25, 27, 28}, 23: {15, 17, 20, 21, 22, 24, 27},
    24: {15, 19, 22, 23, 26, 27, 28, 41}, 25: {17, 18, 19, 20, 21, 22, 26, 27, 28},
    26: {15, 18, 19, 20, 21, 24, 25}, 27: {15, 16, 18, 20, 22, 23, 24, 25, 28},
    28: {16, 17, 19, 20, 22, 24, 25, 27}, 32: {29, 30, 35, 36, 37, 38, 39, 41, 42},
    33: {29, 30, 31, 35, 37, 38, 39, 41}, 34: {29, 30, 31, 35, 36, 37, 38, 39, 40},
    35: {29, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42}, 36: {30, 31, 32, 34, 37, 38, 39, 40, 42},
    37: {29, 31, 32, 33, 34, 35, 36, 39}, 38: {32, 33, 34, 35, 36, 40, 41},
    39: {29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41}, 40: {29, 34, 35, 36, 38, 39, 41},
    41: {24, 29, 30, 32, 33, 35, 38, 39, 40}, 42: {17, 30, 31, 32, 35, 36},
    29: {32, 33, 34, 35, 37, 39, 40, 41}, 30: {32, 33, 34, 36, 39, 41, 42},
    31: {33, 34, 35, 36, 37, 39, 42}
}

print(identify_graph_pattern(adjacency_list))
```