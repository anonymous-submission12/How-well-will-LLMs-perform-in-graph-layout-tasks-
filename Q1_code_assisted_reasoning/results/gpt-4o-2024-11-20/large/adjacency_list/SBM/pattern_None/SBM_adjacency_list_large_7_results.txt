```python:/home/app/graph_analysis.py
from collections import defaultdict
import networkx as nx

# Given adjacency list
adj_list = {
    0: [4, 5, 8, 9, 22], 1: [4, 8, 10, 11, 37], 2: [3, 7, 9, 10, 11], 
    3: [2, 4, 5, 6], 4: [0, 1, 3, 7, 8, 9, 10, 11], 5: [0, 3, 7, 8, 9, 10, 11, 37], 
    6: [3, 9, 11], 7: [2, 4, 5, 8, 9, 10], 8: [0, 1, 4, 5, 7, 9], 
    9: [0, 2, 4, 5, 6, 7, 8, 11], 10: [1, 2, 4, 5, 7], 
    11: [1, 2, 4, 5, 6, 9], 12: [13, 15, 17, 18, 20, 22, 23], 
    13: [12, 14, 15, 19, 20, 22, 40], 14: [13, 15, 19, 20, 21, 23], 
    15: [12, 13, 14, 16, 17, 18, 19, 20, 21, 23], 16: [15, 17, 19, 20, 22], 
    17: [12, 15, 16, 19, 20, 21, 22], 18: [12, 15, 19, 20, 23], 
    19: [13, 14, 15, 16, 17, 18, 20, 21, 22], 20: [12, 13, 14, 15, 16, 17, 18, 19, 22, 31], 
    21: [14, 15, 17, 19, 22, 23], 22: [0, 12, 13, 16, 17, 19, 20, 21, 23], 
    23: [12, 14, 15, 18, 21, 22, 43], 32: [24, 26, 27, 28, 30, 33], 
    33: [25, 26, 27, 30, 32, 34], 34: [24, 26, 27, 30, 33], 
    24: [28, 30, 32, 34], 25: [26, 28, 30, 31, 33], 
    26: [25, 28, 29, 30, 32, 33, 34], 27: [28, 30, 32, 33, 34], 
    28: [24, 25, 26, 27, 32], 29: [26, 30, 31], 
    30: [24, 25, 26, 27, 29, 32, 33, 34], 31: [20, 25, 29], 
    35: [38, 40, 42, 44, 45], 36: [38, 39, 40, 41, 42, 43, 44, 45], 
    37: [1, 5, 38, 40, 44], 38: [35, 36, 37, 40, 41, 42, 43, 44, 45], 
    39: [36, 42, 43, 44, 45], 40: [13, 35, 36, 37, 38, 45], 
    41: [36, 38, 42, 44, 45], 42: [35, 36, 38, 39, 41, 43, 45], 
    43: [23, 36, 38, 39, 42, 44], 44: [35, 36, 37, 38, 39, 41, 43], 
    45: [35, 36, 38, 39, 40, 41, 42]
}

# Convert adjacency list to graph
G = nx.Graph(adj_list)

# Checking patterns

# Check for complete graph
n = len(G.nodes)
is_complete = all(len(neighbors) == n - 1 for node, neighbors in adj_list.items())

# Check for cycle
is_cycle = nx.is_chordal(G) and all(deg == 2 for _, deg in G.degree())

# Check for path
end_nodes = [node for node, deg in G.degree() if deg == 1]
is_path = len(end_nodes) == 2 and nx.is_connected(G) and not is_cycle

# Check for star
center = None
for node, neighbors in adj_list.items():
    if len(neighbors) == n - 1:  # A single node connects to all others
        center = node
        break
is_star = center is not None and all(len(adj_list[n]) == 1 for n in G.nodes if n != center)

# Check for grid
def is_grid(G):
    degree_counts = set(deg for _, deg in G.degree())
    return degree_counts.issubset({2, 3, 4})  # Grid-like graphs have nodes with deg 2, 3, or 4

is_grid_graph = is_grid(G)

# Check for clustered graph (components with high internal connections and fewer external ones)
communities = list(nx.connected_components(G))
is_clustered = len(communities) > 1 and any(len(c) > 5 for c in communities)

# If none of the above, assume random
if is_complete:
    result = "Complete"
elif is_cycle:
    result = "Cycle"
elif is_path:
    result = "Path"
elif is_star:
    result = "Star"
elif is_grid_graph:
    result = "Grid"
elif is_clustered:
    result = "Clustered Graph"
else:
    result = "Random Graph"

print(result)
```