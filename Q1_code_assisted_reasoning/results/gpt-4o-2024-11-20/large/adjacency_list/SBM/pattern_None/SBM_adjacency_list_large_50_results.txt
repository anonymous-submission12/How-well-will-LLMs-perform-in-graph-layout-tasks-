```python
def determine_graph_pattern(adj_list):
    def is_star(adj_list):
        center_count = sum(len(neighbors) == len(adj_list) - 1 for node, neighbors in adj_list.items())
        return center_count == 1

    def is_cycle(adj_list):
        return all(len(neighbors) == 2 for neighbors in adj_list.values())

    def is_path(adj_list):
        end_count = sum(len(neighbors) == 1 for neighbors in adj_list.values())
        middle_count = sum(len(neighbors) == 2 for neighbors in adj_list.values())
        return end_count == 2 and middle_count == len(adj_list) - 2

    def is_grid(adj_list):
        # A grid graph has nodes connected in a 2D grid pattern.
        # This is a heuristic check based on degree distribution.
        degree_counts = [len(neighbors) for neighbors in adj_list.values()]
        return all(degree in {2, 3, 4} for degree in degree_counts)

    def is_complete(adj_list):
        n = len(adj_list)
        return all(len(neighbors) == n - 1 for neighbors in adj_list.values())

    def is_clustered(adj_list):
        # A clustered graph has groups of nodes with high connectivity within groups.
        # This is a heuristic check based on average degree.
        avg_degree = sum(len(neighbors) for neighbors in adj_list.values()) / len(adj_list)
        return avg_degree > len(adj_list) / 4

    def is_random(adj_list):
        # A random graph has no specific pattern.
        return True

    if is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_grid(adj_list):
        return "Grid"
    elif is_complete(adj_list):
        return "Complete"
    elif is_clustered(adj_list):
        return "Clustered"
    else:
        return "Random"

adj_list = {0: [1, 2, 5, 6, 7, 8, 12, 25], 1: [0, 2, 3, 6, 7, 8, 10, 11, 12], 2: [0, 1, 5, 6, 7, 8, 11, 12, 27], 3: [1, 5, 6, 9], 4: [5, 8, 9, 10, 12], 5: [0, 2, 3, 4, 6, 7, 8, 10, 11, 12], 6: [0, 1, 2, 3, 5, 9, 10, 12], 7: [0, 1, 2, 5, 10, 11], 8: [0, 1, 2, 4, 5, 9, 10, 11, 12], 9: [3, 4, 6, 8, 10, 11, 12], 10: [1, 4, 5, 6, 7, 8, 9, 11, 12], 11: [1, 2, 5, 7, 8, 9, 10], 12: [0, 1, 2, 4, 5, 6, 8, 9, 10], 13: [16, 17, 20, 21, 22, 23, 25], 14: [16, 18, 19, 21, 22, 24, 25], 15: [17, 20, 21, 22, 24], 16: [13, 14, 18, 20, 22, 24], 17: [13, 15, 18, 19, 23], 18: [14, 16, 17, 20, 21, 22, 23, 24, 25], 19: [14, 17, 21, 22, 23, 24, 25, 28], 20: [13, 15, 16, 18, 25], 21: [13, 14, 15, 18, 19, 24, 27], 22: [13, 14, 15, 16, 18, 19, 25], 23: [13, 17, 18, 19, 24, 25], 24: [14, 15, 16, 18, 19, 21, 23, 25, 49], 25: [0, 13, 14, 18, 19, 20, 22, 23, 24], 32: [26, 27, 29, 30, 31, 37, 41], 33: [26, 31, 35, 37], 34: [26, 27, 28, 29, 31, 35, 36, 37], 35: [26, 27, 28, 29, 30, 31, 33, 34, 36, 37], 36: [27, 29, 30, 31, 34, 35], 37: [27, 29, 30, 31, 32, 33, 34, 35], 26: [27, 29, 30, 32, 33, 34, 35], 27: [2, 21, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37], 28: [19, 27, 30, 31, 34, 35], 29: [26, 27, 30, 31, 32, 34, 35, 36, 37], 30: [26, 27, 28, 29, 31, 32, 35, 36, 37], 31: [27, 28, 29, 30, 32, 33, 34, 35, 36, 37], 38: [43, 46, 48], 39: [40, 41, 42, 46, 47, 48, 49], 40: [39, 41, 43, 45, 46, 47, 48, 49], 41: [32, 39, 40, 42, 44, 47, 48, 49], 42: [39, 41, 43, 44, 45, 47, 48, 49], 43: [38, 40, 42, 46, 48, 49], 44: [41, 42, 45, 47, 48], 45: [40, 42, 44, 46, 49], 46: [38, 39, 40, 43, 45, 48, 49], 47: [39, 40, 41, 42, 44, 48, 49], 48: [38, 39, 40, 41, 42, 43, 44, 46, 47], 49: [24, 39, 40, 41, 42, 43, 45, 46, 47]}
print(determine_graph_pattern(adj_list))
```