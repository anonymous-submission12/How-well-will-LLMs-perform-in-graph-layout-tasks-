```python
def determine_graph_pattern(adj_list):
    def is_star(adj_list):
        center_count = sum(len(neighbors) == len(adj_list) - 1 for neighbors in adj_list.values())
        return center_count == 1

    def is_cycle(adj_list):
        return all(len(neighbors) == 2 for neighbors in adj_list.values())

    def is_path(adj_list):
        end_points = sum(len(neighbors) == 1 for neighbors in adj_list.values())
        middle_points = sum(len(neighbors) == 2 for neighbors in adj_list.values())
        return end_points == 2 and middle_points == len(adj_list) - 2

    def is_grid(adj_list):
        # Grid graphs are harder to detect without specific coordinates.
        # For simplicity, we check if most nodes have 2-4 neighbors.
        return all(2 <= len(neighbors) <= 4 for neighbors in adj_list.values())

    def is_complete(adj_list):
        n = len(adj_list)
        return all(len(neighbors) == n - 1 for neighbors in adj_list.values())

    def is_clustered(adj_list):
        # Clustered graphs have dense subgraphs with sparse connections between them.
        # We approximate this by checking if there are groups of nodes with high connectivity.
        clusters = []
        visited = set()

        def dfs(node, cluster):
            visited.add(node)
            cluster.append(node)
            for neighbor in adj_list[node]:
                if neighbor not in visited:
                    dfs(neighbor, cluster)

        for node in adj_list:
            if node not in visited:
                cluster = []
                dfs(node, cluster)
                clusters.append(cluster)

        return len(clusters) > 1 and all(len(cluster) > 1 for cluster in clusters)

    def is_random(adj_list):
        # Random graphs don't fit any specific pattern.
        return not (is_star(adj_list) or is_cycle(adj_list) or is_path(adj_list) or is_grid(adj_list) or is_complete(adj_list) or is_clustered(adj_list))

    if is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_grid(adj_list):
        return "Grid"
    elif is_complete(adj_list):
        return "Complete"
    elif is_clustered(adj_list):
        return "Clustered Graph"
    elif is_random(adj_list):
        return "Random Graph"

adj_list = {0: [1, 3, 4, 5, 6, 7, 8], 1: [0, 2, 5, 6, 9], 2: [1, 3, 4, 6, 7], 3: [0, 2, 4, 5, 6, 7, 8, 9], 4: [0, 2, 3, 5, 7, 8, 12], 5: [0, 1, 3, 4, 6, 7, 8, 17], 6: [0, 1, 2, 3, 5, 8, 9], 7: [0, 2, 3, 4, 5, 10], 8: [0, 3, 4, 5, 6, 9, 45], 9: [1, 3, 6, 8, 22], 10: [7, 11, 12, 14, 15, 16, 19], 11: [10, 14, 16, 18, 19, 43], 12: [4, 10, 13, 14, 15, 18, 19], 13: [12, 14, 15, 16, 18, 19, 25], 14: [10, 11, 12, 13, 16, 17, 18], 15: [10, 12, 13, 18, 19], 16: [10, 11, 13, 14, 17, 19], 17: [5, 14, 16, 18, 19], 18: [11, 12, 13, 14, 15, 17], 19: [10, 11, 12, 13, 15, 16, 17], 20: [21, 22, 26, 27, 28, 29], 21: [20, 22, 25, 28, 29], 22: [9, 20, 21, 23, 24, 25, 27, 29], 23: [22, 25, 26, 28, 29], 24: [22, 26, 29], 25: [13, 21, 22, 23, 28, 29], 26: [20, 23, 24, 27], 27: [20, 22, 26, 28, 36], 28: [20, 21, 23, 25, 27, 29], 29: [20, 21, 22, 23, 24, 25, 28], 32: [30, 33, 36, 39], 33: [31, 32, 34, 35, 37, 39], 34: [30, 31, 33, 35], 35: [30, 33, 34, 37, 39], 36: [27, 31, 32, 38], 37: [30, 33, 35, 39], 38: [30, 36, 39], 39: [32, 33, 35, 37, 38], 30: [31, 32,34,35,37,38], 31: [30,33,34,36], 40: [41,43,45,46,48], 41: [40,43,44,45,47,48], 42: [43,44,45,46,47], 43: [11,40,41,42,44,47,48], 44: [41,42,43,47], 45: [8,40,41,42,46,48], 46: [40,42,45], 47: [41,42,43,44,48], 48: [40,41,43,45,47]}
print(determine_graph_pattern(adj_list))
```