```python
from collections import defaultdict

def graph_pattern(adjacency_list):
    # Count the number of nodes and edges
    num_nodes = len(adjacency_list)
    num_edges = sum(len(neighbors) for neighbors in adjacency_list.values()) // 2
    
    # Check for star pattern: one central node connected to all others
    if any(len(neighbors) == num_nodes - 1 for neighbors in adjacency_list.values()):
        return "Star"
    
    # Check for cycle pattern: all nodes have degree 2 and form a loop
    if all(len(neighbors) == 2 for neighbors in adjacency_list.values()) and num_edges == num_nodes:
        return "Cycle"
    
    # Check for path pattern: two nodes have degree 1, others have degree 2
    if sum(len(neighbors) == 1 for neighbors in adjacency_list.values()) == 2 and \
       sum(len(neighbors) == 2 for neighbors in adjacency_list.values()) == num_nodes - 2:
        return "Path"
    
    # Check for grid pattern: more complex, here we just check for degrees resembling inner (4 edges) and border (2 or 3 edges) grid nodes
    if all(len(neighbors) in {2, 3, 4} for neighbors in adjacency_list.values()):
        return "Grid"
    
    # Check for complete graph: every node connects to every other node
    if num_edges == (num_nodes * (num_nodes - 1)) // 2:
        return "Complete"
    
    # Check for clustered graph: Identify clusters by connected components or dense regions
    visited = set()
    component_sizes = []

    def dfs(node):
        stack, size = [node], 0
        while stack:
            n = stack.pop()
            if n not in visited:
                visited.add(n)
                size += 1
                stack.extend(adjacency_list[n])
        return size

    for node in adjacency_list:
        if node not in visited:
            component_sizes.append(dfs(node))
    
    if len(component_sizes) > 1 and all(size > 1 for size in component_sizes):
        return "Clustered"
    
    # If no other pattern fits, classify as a random graph
    return "Random"

adjacency_list = {
    0: [2, 3, 6, 7], 1: [3, 5, 7, 20], 2: [0, 3, 4, 5, 7, 43, 45], 3: [0, 1, 2, 5, 6, 7], 
    4: [2, 29], 5: [1, 2, 3], 6: [0, 3, 13, 37], 7: [0, 1, 2, 3, 11], 8: [9, 10, 11, 13, 14], 
    9: [8, 10, 11, 12, 13, 14, 15, 17], 10: [8, 9, 11, 12, 13, 15, 35], 11: [7, 8, 9, 10, 14, 15], 
    12: [9, 10, 13, 14, 27, 28], 13: [6, 8, 9, 10, 12], 14: [8, 9, 11, 12], 15: [9, 10, 11], 
    16: [18, 19, 21, 22], 17: [9, 18, 19, 20, 21, 22, 23], 18: [16, 17, 19, 20, 21, 23, 47], 
    19: [16, 17, 18, 20, 21, 23, 31], 20: [1, 17, 18, 19, 23, 46], 21: [16, 17, 18, 19, 24, 45], 
    22: [16, 17, 28], 23: [17, 18, 19, 20], 24: [21, 26, 27, 30, 31], 25: [26, 27, 28, 29, 31], 
    26: [24, 25, 27, 29, 30, 31], 27: [12, 24, 25, 26, 28, 30], 28: [12, 22, 25, 27, 30, 31], 
    29: [4, 25, 26, 31, 34], 30: [24, 26, 27, 28, 31], 31: [19, 24, 25, 26, 28, 29, 30], 
    32: [34, 35, 36], 33: [34, 35, 36, 37, 38], 34: [29, 32, 33, 35, 36, 37], 
    35: [10, 32, 33, 34, 36, 37, 38], 36: [32, 33, 34, 35, 37, 39], 37: [6, 33, 34, 35, 36, 39], 
    38: [33, 35], 39: [36, 37], 40: [41, 42, 43, 46, 47], 41: [40, 42, 44, 47], 
    42: [40, 41, 45, 47], 43: [2, 40, 45, 46, 47], 44: [41, 45, 46, 47], 
    45: [2, 21, 42, 43, 44, 47], 46: [20, 40, 43, 44], 47: [18, 40, 41, 42, 43, 44, 45]
}

print(graph_pattern(adjacency_list))
```