```python
def determine_graph_pattern(adj_list):
    n = len(adj_list)
    edges = sum(len(neighbors) for neighbors in adj_list.values()) // 2

    # Check for Star pattern
    if any(len(neighbors) == n - 1 for neighbors in adj_list.values()):
        return "Star"

    # Check for Cycle pattern
    if edges == n and all(len(neighbors) == 2 for neighbors in adj_list.values()):
        return "Cycle"

    # Check for Path pattern
    if edges == n - 1 and sum(len(neighbors) == 1 for neighbors in adj_list.values()) == 2:
        return "Path"

    # Check for Complete pattern
    if edges == n * (n - 1) // 2:
        return "Complete"

    # Check for Grid pattern (approximation)
    sqrt_n = int(n**0.5)
    if sqrt_n * sqrt_n == n and all(len(neighbors) <= 4 for neighbors in adj_list.values()):
        return "Grid"

    # Check for Clustered graph (approximation)
    clusters = []
    visited = set()
    for node in adj_list:
        if node not in visited:
            cluster = set()
            stack = [node]
            while stack:
                current = stack.pop()
                if current not in visited:
                    visited.add(current)
                    cluster.add(current)
                    stack.extend(adj_list[current])
            clusters.append(cluster)
    if len(clusters) > 1:
        return "Clustered graph"

    # Default to Random graph
    return "Random graph"

# Input adjacency list
adj_list = {
    0: [3, 4, 5, 7, 8, 10, 14, 15, 17, 19, 20, 22], 1: [3, 5, 8, 11, 14, 15, 16, 22],
    2: [4, 5, 6, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 31], 3: [0, 1, 4, 5, 6, 7, 9, 10, 12, 13, 16, 18, 19, 20, 22, 23],
    4: [0, 2, 3, 5, 6, 7, 10, 11, 12, 13, 15, 18, 19, 21], 5: [0, 1, 2, 3, 4, 7, 10, 11, 12, 13, 14, 17, 18, 19, 21, 22],
    6: [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 18, 19, 22], 7: [0, 3, 4, 5, 6, 8, 9, 10, 13, 14, 16, 17, 20, 22],
    8: [0, 1, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21], 9: [3, 6, 7, 8, 10, 12, 15, 17, 18, 19, 21, 22],
    10: [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 19, 22], 11: [1, 2, 4, 5, 6, 8, 10, 12, 13, 14, 15, 17, 18],
    12: [3, 4, 5, 6, 8, 9, 10, 11, 13, 17, 21], 13: [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 17, 18, 21, 26],
    14: [0, 1, 2, 5, 7, 10, 11, 13, 15, 17, 18, 20, 22], 15: [0, 1, 2, 4, 8, 9, 10, 11, 13, 14, 16, 17, 21, 22],
    16: [1, 2, 3, 7, 8, 10, 13, 15, 18, 21, 22], 17: [0, 2, 5, 7, 8, 9, 11, 12, 13, 14, 15, 20, 21, 22],
    18: [2, 3, 4, 5, 6, 8, 9, 11, 13, 14, 16, 20, 27], 19: [0, 3, 4, 5, 6, 9, 10, 20, 21],
    20: [0, 2, 3, 7, 8, 14, 17, 18, 19], 21: [2, 4, 5, 8, 9, 12, 13, 15, 16, 17, 19, 22],
    22: [0, 1, 2, 3, 5, 6, 7, 9, 10, 14, 15, 16, 17, 21], 23: [3, 24, 25, 26, 29, 31, 32, 36, 41, 42],
    24: [23, 26, 27, 28, 29, 31, 36, 37, 40, 41, 44], 25: [23, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44],
    26: [13, 23, 24, 25, 27, 28, 29, 31, 33, 35, 38, 39, 44], 27: [18, 24, 25, 26, 28, 29, 32, 33, 36, 37, 38, 41, 42, 43, 44],
    28: [24, 25, 26, 27, 29, 33, 35, 36, 37, 38, 40, 43, 44], 29: [23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 40, 42, 43],
    30: [25, 29, 32, 34, 35, 36, 38, 40, 41, 43], 31: [2, 23, 24, 25, 26, 29, 32, 34, 37, 42, 43],
    32: [23, 25, 27, 30, 31, 33, 35, 41, 43], 33: [25, 26, 27, 28, 29, 32, 35, 39, 40, 43],
    34: [29, 30, 31, 36, 40, 41, 44], 35: [25, 26, 28, 29, 30, 32, 33, 36, 38, 39, 40, 41, 43],
    36: [23, 24, 25, 27, 28, 29, 30, 34, 35, 37, 38, 39, 41, 42, 43, 44], 37: [24, 25, 27, 28, 31, 36, 38, 39, 43],
    38: [25, 26, 27, 28, 30, 35, 36, 37, 39, 40, 41, 42, 44], 39: [25, 26, 33, 35, 36, 37, 38, 40, 41, 42, 43],
    40: [24, 25, 28, 29, 30, 33, 34, 35, 38, 39, 41, 42, 44], 41: [23, 24, 25, 27, 30, 32, 34, 35, 36, 38, 39, 40, 43, 44],
    42: [23, 25, 27, 29, 31, 36, 38, 39, 40, 43, 44], 43: [25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 41, 42],
    44: [24, 25, 26, 27, 28, 34, 36, 38, 40, 41, 42]
}

print(determine_graph_pattern(adj_list))
```