```python
def graph_pattern(adj_list):
    n = len(adj_list)

    # Check for star pattern
    degree_count = [len(adj_list[node]) for node in adj_list]
    if degree_count.count(1) == n - 1 and degree_count.count(n - 1) == 1:
        return "Star"

    # Check for cycle pattern
    if all(degree == 2 for degree in degree_count):
        return "Cycle"

    # Check for path pattern
    if degree_count.count(1) == 2 and degree_count.count(2) == n - 2:
        return "Path"
    
    # Check for grid pattern (approximately)
    import math
    sqrt_n = math.isqrt(n)
    if sqrt_n * sqrt_n == n:
        edges = sum(len(neighbors) for neighbors in adj_list.values()) // 2
        if edges == 2 * n - 2:
            return "Grid"

    # Check for complete graph
    if all(len(adj_list[node]) == n - 1 for node in adj_list):
        return "Complete"

    # Check for clustered graph (loosely defined as clusters with denser internal connections)
    def get_cluster_count(adj_list):
        visited = set()
        def dfs(node):
            stack = [node]
            cluster = set()
            while stack:
                current = stack.pop()
                if current not in visited:
                    visited.add(current)
                    cluster.add(current)
                    stack.extend([neighbor for neighbor in adj_list[current] if neighbor not in visited])
            return cluster

        clusters = []
        for node in adj_list:
            if node not in visited:
                clusters.append(dfs(node))
        return len(clusters)
    
    clusters = get_cluster_count(adj_list)
    if clusters > 1:
        return "Clustered"

    # Default to random graph assumption
    return "Random"

adjacency_list = {0: [2, 4, 6, 36], 1: [3, 5, 33], 2: [0, 3, 4, 5], 3: [1, 2, 5, 6], 4: [0, 2, 5, 6], 5: [1, 2, 3, 4, 6], 6: [0, 3, 4, 5, 32], 7: [8, 11, 13, 27], 8: [7, 10, 11, 12, 13, 32], 9: [10, 11, 12], 10: [8, 9, 13], 11: [7, 8, 9, 12, 13, 36], 12: [8, 9, 11, 26], 13: [7, 8, 10, 11], 14: [15, 16, 18], 15: [14, 16, 17, 18, 19, 20, 26], 16: [14, 15, 18], 17: [15, 18, 19, 20], 18: [14, 15, 16, 17, 19], 19: [15, 17, 18, 20], 20: [15, 17, 19], 21: [24, 25, 26, 27], 22: [24, 26], 23: [24, 27], 24: [21, 22, 23, 25, 26], 25: [21, 24, 26, 27], 26: [12, 15, 21, 22, 24, 25, 27], 27: [7, 21, 23, 25, 26], 32: [6, 8, 28, 31], 33: [1, 28, 29], 34: [28, 30, 31], 28: [29, 30, 32, 33, 34], 29: [28, 31, 33, 38], 30: [28, 31, 34], 31: [29, 30, 32, 34], 35: [36, 39, 40], 36: [0, 11, 35, 38, 39, 40], 37: [38], 38: [29, 36, 37], 39: [35, 36, 40], 40: [35, 36, 39]}
print(graph_pattern(adjacency_list))
```