```python
def detect_pattern(adj_list):
    nodes = list(adj_list.keys())
    edges = sum(len(neighbors) for neighbors in adj_list.values()) // 2
    n = len(nodes)

    # Check for Star Pattern
    degree_counts = {node: len(neighbors) for node, neighbors in adj_list.items()}
    max_degree = max(degree_counts.values())
    if max_degree == n - 1 and list(degree_counts.values()).count(1) == n - 1:
        return "Star"

    # Check for Cycle
    if all(len(neighbors) == 2 for neighbors in adj_list.values()) and edges == n:
        return "Cycle"

    # Check for Path
    if list(degree_counts.values()).count(1) == 2 and all(degree <= 2 for degree in degree_counts.values()):
        return "Path"

    # Check for Grid
    sqrt_n = int(n**0.5)
    if sqrt_n**2 == n and all(2 <= len(neighbors) <= 4 for neighbors in adj_list.values()):
        return "Grid"

    # Check for Complete Graph
    if edges == n * (n - 1) // 2:
        return "Complete"

    # Check for Clustered Graph
    # A rough approximation using modularity can be used for clustered graphs
    cluster_nodes = set()
    for node, neighbors in adj_list.items():
        if len(neighbors) > n // 4:  # arbitrary threshold for node clusters
            cluster_nodes.add(node)
    if cluster_nodes:
        return "Clustered Graph"

    # Default to Random Graph
    return "Random Graph"


graph_data = {
    0: [1, 2, 5, 6, 7, 8, 10, 11], 1: [0, 6, 9, 10, 11], 2: [0, 6, 9, 10, 11], 3: [4, 5, 9, 11],
    4: [3, 6, 8, 9, 10, 11, 45], 5: [0, 3, 7, 9, 11], 6: [0, 1, 2, 4, 10], 7: [0, 5, 8, 9, 10, 11], 
    8: [0, 4, 7, 9], 9: [1, 2, 3, 4, 5, 7, 8, 11, 21], 10: [0, 1, 2, 4, 6, 7, 11], 
    11: [0, 1, 2, 3, 4, 5, 7, 9, 10], 12: [15, 16, 17, 18, 19, 20, 22], 
    13: [14, 15, 17, 18, 19, 20, 21, 22, 23], 14: [13, 15, 17, 18, 19, 20, 21, 22, 23], 
    15: [12, 13, 14, 17, 18, 19, 32], 16: [12, 19, 23], 17: [12, 13, 14, 15, 18], 
    18: [12, 13, 14, 15, 17, 20, 21, 22, 26], 19: [12, 13, 14, 15, 16, 21, 22, 23], 
    20: [12, 13, 14, 18, 21, 22], 21: [9, 13, 14, 18, 19, 20, 22, 23], 
    22: [12, 13, 14, 18, 19, 20, 21, 23, 45], 23: [13, 14, 16, 19, 21, 22, 35],
    32: [15, 24, 27, 28, 34], 33: [24, 26, 28, 31, 34, 35], 34: [24, 25, 27, 28, 29, 32, 33, 35], 
    35: [23, 26, 28, 30, 33, 34], 24: [25, 26, 30, 32, 33, 34], 25: [24, 27, 28, 29, 30, 34], 
    26: [18, 24, 27, 31, 33, 35], 27: [25, 26, 28, 29, 30, 31, 32, 34], 28: [25, 27, 29, 30, 31, 32, 33, 34, 35],
    29: [25, 27, 28, 30, 31, 34, 43], 30: [24, 25, 27, 28, 29, 35], 31: [26, 27, 28, 29, 33],
    36: [38, 43, 44], 37: [38, 40, 41, 44], 38: [36, 37, 39, 44, 45, 46], 39: [38, 40, 41, 44, 45, 46],
    40: [37, 39, 41, 43, 44, 45, 46], 41: [37, 39, 40, 42, 43, 45], 42: [41, 45, 46],
    43: [29, 36, 40, 41, 44, 45], 44: [36, 37, 38, 39, 40, 43, 45, 46], 45: [4, 22, 38, 39, 40, 41, 42, 43, 44, 46],
    46: [38, 39, 40, 42, 44, 45]
}

print(detect_pattern(graph_data))
```