```python
from collections import deque

def count_communities(graph):
    visited = set()
    communities = 0

    def bfs(node):
        queue = deque([node])
        while queue:
            current = queue.popleft()
            for neighbor in graph.get(current, []):
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append(neighbor)

    for node in graph:
        if node not in visited:
            visited.add(node)
            bfs(node)
            communities += 1

    print(communities)

graph = {
    0: [1, 2, 3, 4, 5, 6, 7, 8], 1: [0, 2, 3, 6, 8], 2: [0, 1, 4, 5, 6],
    3: [0, 1, 5, 8, 26], 4: [0, 2, 6, 7, 8], 5: [0, 2, 3, 7, 8], 6: [0, 1, 2, 4, 7],
    7: [0, 4, 5, 6, 8], 8: [0, 1, 3, 4, 5, 7], 9: [10, 12, 13, 14, 15, 16, 17],
    10: [9, 11, 12, 15, 16], 11: [10, 12, 13], 12: [9, 10, 11, 14, 16, 19, 26],
    13: [9, 11, 14], 14: [9, 12, 13, 15, 16], 15: [9, 10, 14], 16: [9, 10, 12, 14],
    17: [9, 18, 21, 22, 24], 18: [17, 21, 24, 38], 19: [12, 20, 21, 22],
    20: [19, 21, 22, 23, 24], 21: [17, 18, 19, 20, 23, 24], 22: [17, 19, 20, 23, 24],
    23: [20, 21, 22], 24: [17, 18, 20, 21, 22], 32: [25, 26, 27, 28, 29, 30, 31],
    25: [26, 27, 29, 30, 32, 34], 26: [3, 12, 25, 32], 27: [25, 28, 30, 32],
    28: [27, 29, 31, 32], 29: [25, 28, 31, 32], 30: [25, 27, 31, 32],
    31: [28, 29, 30, 32], 33: [35, 38, 39], 34: [25, 35, 36],
    35: [33, 34, 39], 36: [34, 37, 38, 39, 40], 37: [36, 40],
    38: [18, 33, 36, 40], 39: [33, 35, 36], 40: [36, 37, 38]
}

count_communities(graph)
```