```python
from collections import defaultdict

# Function to perform DFS and mark visited nodes
def dfs(node, visited, adjacency_list):
    visited.add(node)
    for neighbor in adjacency_list[node]:
        if neighbor not in visited:
            dfs(neighbor, visited, adjacency_list)

# Function to count the number of connected components (communities)
def count_communities(adjacency_list):
    visited = set()
    community_count = 0
    for node in adjacency_list.keys():
        if node not in visited:
            dfs(node, visited, adjacency_list)
            community_count += 1
    return community_count

# Input adjacency list
adjacency_list = {
    0: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16], 
    1: [0, 3, 4, 5, 7, 8, 10, 13, 14, 15, 16], 
    2: [0, 3, 4, 5, 7, 8, 11, 15, 16, 30], 
    3: [0, 1, 2, 4, 6, 7, 9, 10, 13, 14, 15], 
    4: [0, 1, 2, 3, 5, 7, 8, 11, 12, 13], 
    5: [0, 1, 2, 4, 7, 9, 10, 12, 14, 15], 
    6: [0, 3, 7, 8, 12, 14, 15, 16], 
    7: [0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14], 
    8: [0, 1, 2, 4, 6, 7, 10, 13, 15], 
    9: [0, 3, 5, 7, 13, 14, 15, 16], 
    10: [0, 1, 3, 5, 8, 11, 12, 13, 15], 
    11: [2, 4, 7, 10, 12, 13, 14, 15, 16, 28], 
    12: [4, 5, 6, 7, 10, 11, 13, 14, 15], 
    13: [0, 1, 3, 4, 7, 8, 9, 10, 11, 12, 15, 16], 
    14: [0, 1, 3, 5, 6, 7, 9, 11, 12, 15, 16], 
    15: [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14], 
    16: [0, 1, 2, 6, 9, 11, 13, 14], 
    32: [17, 18, 19, 21, 22, 24, 26, 27, 28, 29, 30, 31, 33], 
    33: [18, 19, 20, 22, 27, 28, 29, 30, 31, 32], 
    17: [18, 19, 25, 26, 27, 28, 32, 49], 
    18: [17, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33], 
    19: [17, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33], 
    20: [18, 21, 22, 24, 26, 27, 28, 29, 33], 
    21: [18, 19, 20, 22, 23, 24, 26, 27, 29, 30, 31, 32, 38], 
    22: [18, 19, 20, 21, 23, 26, 28, 29, 30, 32, 33, 43], 
    23: [19, 21, 22, 25, 26, 27, 29, 30, 31], 
    24: [19, 20, 21, 25, 26, 27, 28, 30, 31, 32], 
    25: [17, 18, 19, 23, 24, 27, 29, 30, 31], 
    26: [17, 18, 19, 20, 21, 22, 23, 24, 28, 30, 31, 32], 
    27: [17, 18, 20, 21, 23, 24, 25, 29, 31, 32, 33], 
    28: [11, 17, 18, 19, 20, 22, 24, 26, 29, 30, 32, 33], 
    29: [18, 19, 20, 21, 22, 23, 25, 27, 28, 30, 31, 32, 33], 
    30: [2, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 32, 33], 
    31: [18, 19, 21, 23, 24, 25, 26, 27, 29, 32, 33], 
    34: [35, 36, 37, 39, 40, 41, 42, 45, 46, 48], 
    35: [34, 37, 38, 41, 42, 43, 45, 46, 47, 48, 49], 
    36: [34, 39, 41, 42, 44, 48], 
    37: [34, 35, 39, 41, 42, 49], 
    38: [21, 35, 39, 40, 41, 44, 45, 46, 47, 48], 
    39: [34, 36, 37, 38, 40, 41, 42, 43, 44, 45], 
    40: [34, 38, 39, 43, 44, 46, 47, 48, 49], 
    41: [34, 35, 36, 37, 38, 39, 42, 44, 45, 48], 
    42: [34, 35, 36, 37, 39, 41, 46, 47, 48, 49], 
    43: [22, 35, 39, 40, 47, 49], 
    44: [36, 38, 39, 40, 41, 45, 46, 47, 49], 
    45: [34, 35, 38, 39, 41, 44, 46, 47, 48], 
    46: [34, 35, 38, 40, 42, 44, 45, 48], 
    47: [35, 38, 40, 42, 43, 44, 45, 49], 
    48: [34, 35, 36, 38, 40, 41, 42, 45, 46, 49], 
    49: [17, 35, 37, 40, 42, 43, 44, 47, 48]
}

# Count and print the number of communities
print(count_communities(adjacency_list))
```