```python
from collections import defaultdict

def dfs(node, graph, visited):
    visited.add(node)
    for neighbor in graph[node]:
        if neighbor not in visited:
            dfs(neighbor, graph, visited)

def count_communities(graph):
    visited = set()
    communities = 0

    for node in graph:
        if node not in visited:
            communities += 1
            dfs(node, graph, visited)
            
    return communities

graph = {0: [2, 3, 5, 6, 7, 8], 1: [2, 3, 5, 6, 8], 2: [0, 1, 3, 4, 5, 6, 8],
         3: [0, 1, 2, 4, 7], 4: [2, 3, 7], 5: [0, 1, 2, 7, 8], 6: [0, 1, 2, 7, 8, 22],
         7: [0, 3, 4, 5, 6, 8], 8: [0, 1, 2, 5, 6, 7], 9: [12, 15, 17], 10: [12, 13, 16],
         11: [12, 13, 14, 16, 17], 12: [9, 10, 11, 13, 16, 17, 22], 13: [10, 11, 12, 15, 16],
         14: [11, 16, 17], 15: [9, 13, 16, 17], 16: [10, 11, 12, 13, 14, 15, 17],
         17: [9, 11, 12, 14, 15, 16], 18: [19, 20, 21, 24, 25, 26], 19: [18, 20, 22, 24],
         20: [18, 19, 21, 23, 24], 21: [18, 20, 22, 24, 25, 26], 22: [6, 12, 19, 21, 23, 24, 43],
         23: [20, 22, 25, 26], 24: [18, 19, 20, 21, 22, 25, 26], 25: [18, 21, 23, 24],
         26: [18, 21, 23, 24, 38, 41], 32: [27, 29, 30, 31], 33: [27, 28, 30, 31, 44],
         34: [30, 31, 35], 35: [27, 29, 31, 34], 27: [28, 31, 32, 33, 35], 28: [27, 29, 33],
         29: [28, 30, 32, 35, 42], 30: [29, 31, 32, 33, 34], 31: [27, 30, 32, 33, 34, 35],
         36: [37, 38, 39, 40, 42], 37: [36, 38, 39, 41, 42, 43], 38: [26, 36, 37, 40, 42, 43],
         39: [36, 37, 40, 41, 44], 40: [36, 38, 39, 41, 42, 44], 41: [26, 37, 39, 40, 42, 44],
         42: [29, 36, 37, 38, 40, 41, 43], 43: [22, 37, 38, 42], 44: [33, 39, 40, 41]}

print(count_communities(graph))
```