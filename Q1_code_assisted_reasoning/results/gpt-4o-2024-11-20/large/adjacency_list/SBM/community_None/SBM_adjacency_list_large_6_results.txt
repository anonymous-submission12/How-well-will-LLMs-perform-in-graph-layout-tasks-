```python
from collections import defaultdict, deque

def find_communities(graph):
    visited = set()
    communities = 0

    def bfs(node):
        queue = deque([node])
        while queue:
            current = queue.popleft()
            if current not in visited:
                visited.add(current)
                queue.extend(n for n in graph[current] if n not in visited)

    for node in graph:
        if node not in visited:
            bfs(node)
            communities += 1

    return communities

graph = {0: [1, 2, 3, 4, 8, 19, 41], 1: [0, 3, 5, 7, 8, 30], 2: [0, 3, 7, 8, 29], 3: [0, 1, 2, 6, 7], 4: [0, 6, 8], 5: [1, 6, 7, 22], 6: [3, 4, 5, 8, 21], 7: [1, 2, 3, 5, 11], 8: [0, 1, 2, 4, 6], 9: [10, 15, 16], 10: [9, 12, 14, 15, 16, 30], 11: [7, 12, 13, 14, 15, 16, 17], 12: [10, 11, 13, 14, 15, 16], 13: [11, 12, 14, 15, 17], 14: [10, 11, 12, 13, 15, 16], 15: [9, 10, 11, 12, 13, 14, 20], 16: [9, 10, 11, 12, 14, 17], 17: [11, 13, 16], 18: [19, 21, 22, 23, 25], 19: [0, 18, 20, 21, 22, 23, 24], 20: [15, 19, 22, 23, 24, 25], 21: [6, 18, 19, 22, 23, 24], 22: [5, 18, 19, 20, 21, 23], 23: [18, 19, 20, 21, 22, 24, 25], 24: [19, 20, 21, 23, 25], 25: [18, 20, 23, 24], 32: [27, 28, 29, 30, 31], 33: [27, 29, 31], 26: [28, 29, 30, 31], 27: [29, 32, 33], 28: [26, 31, 32], 29: [2, 26, 27, 31, 32, 33], 30: [1, 10, 26, 32], 31: [26, 28, 29, 32, 33], 34: [35, 37, 38, 39, 40], 35: [34, 36, 38, 39, 40, 41], 36: [35, 37, 38, 39], 37: [34, 36, 39, 41], 38: [34, 35, 36, 39, 40, 41], 39: [34, 35, 36, 37, 38], 40: [34, 35, 38], 41: [0, 35, 37, 38]}

print(find_communities(graph))
```