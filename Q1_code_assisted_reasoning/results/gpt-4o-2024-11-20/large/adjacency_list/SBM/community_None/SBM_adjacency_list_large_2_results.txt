```python
from collections import defaultdict

def dfs(node, visited, graph):
    stack = [node]
    while stack:
        current = stack.pop()
        for neighbor in graph[current]:
            if neighbor not in visited:
                visited.add(neighbor)
                stack.append(neighbor)

def count_communities(graph):
    visited = set()
    communities = 0
    for node in graph:
        if node not in visited:
            visited.add(node)
            dfs(node, visited, graph)
            communities += 1
    return communities

graph = {0: [2, 3, 5, 6, 7, 29], 1: [5, 6, 7, 8, 34], 2: [0, 3, 6, 7], 3: [0, 2, 4, 5, 6, 7, 30], 4: [3, 6], 5: [0, 1, 3, 6, 7, 8], 6: [0, 1, 2, 3, 4, 5, 7], 7: [0, 1, 2, 3, 5, 6, 8], 8: [1, 5, 7], 9: [13, 17], 10: [11, 13, 14], 11: [10, 12, 13, 14, 15], 12: [11, 13, 15, 16], 13: [9, 10, 11, 12, 14, 15, 16], 14: [10, 11, 13, 15, 16, 17, 30], 15: [11, 12, 13, 14, 16, 17], 16: [12, 13, 14, 15, 17], 17: [9, 14, 15, 16], 18: [19, 20, 23, 24, 33], 19: [18, 22, 23], 20: [18, 21, 22, 24, 37], 21: [20, 23, 24], 22: [19, 20, 23, 24, 25], 23: [18, 19, 21, 22, 24], 24: [18, 20, 21, 22, 23, 25], 25: [22, 24, 34], 32: [27, 28, 33], 33: [18, 26, 28, 29, 30, 32], 26: [31, 33], 27: [28, 29, 30, 32], 28: [27, 29, 32, 33], 29: [0, 27, 28, 30, 33], 30: [3, 14, 27, 29, 33], 31: [26], 34: [1, 25, 37, 39, 41], 35: [37, 38, 41], 36: [38, 40], 37: [20, 34, 35, 38, 40], 38: [35, 36, 37, 39, 40, 41], 39: [34, 38, 40], 40: [36, 37, 38, 39, 41], 41: [34, 35, 38, 40]}
print(count_communities(graph))
```