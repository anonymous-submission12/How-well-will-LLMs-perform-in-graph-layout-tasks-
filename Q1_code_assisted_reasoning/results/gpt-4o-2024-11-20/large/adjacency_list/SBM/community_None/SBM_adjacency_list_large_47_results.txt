```python
from collections import defaultdict

def dfs(node, visited, graph):
    stack = [node]
    while stack:
        current = stack.pop()
        for neighbor in graph[current]:
            if neighbor not in visited:
                visited.add(neighbor)
                stack.append(neighbor)

def count_communities(graph):
    visited = set()
    communities = 0
    for node in graph:
        if node not in visited:
            visited.add(node)
            dfs(node, visited, graph)
            communities += 1
    return communities

graph = {0: [1, 2, 3], 1: [0, 2, 3, 4, 5, 7, 38], 2: [0, 1, 6], 3: [0, 1, 5, 7, 10], 4: [1, 5, 7, 30], 5: [1, 3, 4, 6, 18], 6: [2, 5], 7: [1, 3, 4, 39], 8: [10, 11, 12, 13, 14, 15], 9: [12, 13, 15], 10: [3, 8, 11, 12, 13, 14], 11: [8, 10, 14, 15], 12: [8, 9, 10, 14], 13: [8, 9, 10, 15], 14: [8, 10, 11, 12, 15, 19], 15: [8, 9, 11, 13, 14], 16: [20, 23, 32], 17: [18, 19, 20, 21, 23], 18: [5, 17, 19, 20, 21, 22], 19: [14, 17, 18, 20, 21, 22], 20: [16, 17, 18, 19, 21], 21: [17, 18, 19, 20, 22, 23, 28], 22: [18, 19, 21, 23, 42], 23: [16, 17, 21, 22], 24: [25, 26, 27, 29, 30], 25: [24, 26, 29], 26: [24, 25, 27, 28, 30], 27: [24, 26, 30], 28: [21, 26], 29: [24, 25, 30], 30: [4, 24, 26, 27, 29], 32: [16, 31, 35, 36, 37], 33: [31, 34, 35, 36, 37], 34: [31, 33], 35: [31, 32, 33, 36, 37], 36: [31, 32, 33, 35, 37], 37: [32, 33, 35, 36], 31: [32, 33, 34, 35, 36], 38: [1, 39, 40, 41, 42, 43, 44], 39: [7, 38, 40, 41, 42, 43, 44], 40: [38, 39, 41, 42, 44], 41: [38, 39, 40, 42, 44], 42: [22, 38, 39, 40, 41, 43], 43: [38, 39, 42, 44], 44: [38, 39, 40, 41, 43]}
print(count_communities(graph))
```