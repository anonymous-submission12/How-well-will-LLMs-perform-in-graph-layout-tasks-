```python:/home/app/scripts/highest_degree.py
# Given adjacency list representation of a graph
graph = {
    0: [2, 3, 4, 5, 6, 7, 8, 10, 12, 13], 
    1: [2, 3, 4, 7, 10, 12, 13], 
    2: [0, 1, 3, 6, 7, 8, 11, 12, 13, 14], 
    3: [0, 1, 2, 5, 6, 7, 8, 9, 11, 12, 13, 14], 
    4: [0, 1, 7, 8, 9, 10, 11, 14, 31, 38, 41], 
    5: [0, 3, 9, 10, 12, 13], 
    6: [0, 2, 3, 7, 8, 11, 13, 14], 
    7: [0, 1, 2, 3, 4, 6, 8, 11, 13], 
    8: [0, 2, 3, 4, 6, 7, 9, 10, 11, 14], 
    9: [3, 4, 5, 8, 14, 42], 
    10: [0, 1, 4, 5, 8, 12, 13], 
    11: [2, 3, 4, 6, 7, 8, 12, 13], 
    12: [0, 1, 2, 3, 5, 10, 11, 13, 14], 
    13: [0, 1, 2, 3, 5, 6, 7, 10, 11, 12, 14], 
    14: [2, 3, 4, 6, 8, 9, 12, 13, 40], 
    15: [16, 17, 18, 19, 20, 22, 24], 
    16: [15, 17, 18, 19, 22, 23, 24, 28, 29], 
    17: [15, 16, 18, 20, 22, 23, 24, 25, 28, 29, 43], 
    18: [15, 16, 17, 19, 20, 21, 22, 23, 27, 28], 
    19: [15, 16, 18, 20, 22, 23, 24, 25, 27], 
    20: [15, 17, 18, 19, 22, 24, 25, 27, 29], 
    21: [18, 22, 23, 24, 25, 26, 28, 29], 
    22: [15, 16, 17, 18, 19, 20, 21, 24, 26, 27, 29], 
    23: [16, 17, 18, 19, 21, 27, 28, 29], 
    24: [15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 29], 
    25: [17, 19, 20, 21, 24, 27, 28, 29], 
    26: [21, 22, 24, 27], 
    27: [18, 19, 20, 22, 23, 24, 25, 26, 28], 
    28: [16, 17, 18, 21, 23, 24, 25, 27], 
    29: [16, 17, 20, 21, 22, 23, 24, 25], 
    32: [31, 33, 34, 35, 36, 38, 39, 41, 43], 
    33: [32, 35, 36, 37, 38, 39, 42, 43, 44], 
    34: [30, 32, 35, 36, 37, 38, 40, 42, 43], 
    35: [30, 31, 32, 33, 34, 40, 42, 43], 
    36: [30, 31, 32, 33, 34, 37, 38, 41, 42, 43], 
    37: [30, 31, 33, 34, 36, 38, 43, 44], 
    38: [4, 30, 32, 33, 34, 36, 37, 39, 40, 41, 44], 
    39: [30, 31, 32, 33, 38, 42], 
    40: [14, 30, 31, 34, 35, 38, 41, 43], 
    41: [4, 31, 32, 36, 38, 40, 42, 43], 
    42: [9, 30, 33, 34, 35, 36, 39, 41, 43, 44], 
    43: [17, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42], 
    44: [30, 31, 33, 37, 38, 42], 
    30: [31, 34, 35, 36, 37, 38, 39, 40, 42, 44], 
    31: [4, 30, 32, 35, 36, 37, 39, 40, 41, 43, 44]
}

# Calculate highest degree
highest_degree = max(len(neighbors) for neighbors in graph.values())

# Print the result
print(highest_degree)
```