```python
import networkx as nx

# Define the edge list
edge_list = [(0, 1), (0, 22), (1, 2), (1, 23), (2, 3), (2, 24), (3, 4), (3, 25), (4, 5), (4, 26), 
             (5, 6), (5, 27), (6, 7), (6, 28), (7, 8), (7, 29), (8, 9), (8, 30), (9, 10), (9, 31), 
             (10, 11), (10, 32), (11, 12), (11, 33), (12, 13), (12, 34), (13, 14), (13, 35), (14, 15), 
             (14, 36), (15, 16), (15, 37), (16, 17), (16, 38), (17, 18), (17, 39), (18, 19), (18, 40), 
             (19, 20), (19, 41), (20, 21), (20, 42), (21, 43), (22, 23), (23, 24), (24, 25), (25, 26), 
             (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), 
             (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Check the graph pattern
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for star graph
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(1) == 2 and degrees.count(2) == n - 2:
        return "Path"
    
    # Check for grid graph
    if nx.is_connected(G) and all(deg <= 4 for deg in degrees):
        return "Grid"
    
    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for clustered graph
    if nx.number_connected_components(G) > 1:
        return "Clustered graph"
    
    # Default to random graph
    return "Random graph"

print(determine_graph_pattern(G))
```