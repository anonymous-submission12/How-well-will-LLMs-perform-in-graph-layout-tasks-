```python
import networkx as nx

# Define the edge list
edge_list = [
    (0, 1), (0, 25), (1, 2), (1, 26), (2, 3), (2, 27), (3, 4), (3, 28), 
    (4, 5), (4, 29), (5, 6), (5, 30), (6, 7), (6, 31), (7, 8), (7, 32), 
    (8, 9), (8, 33), (9, 10), (9, 34), (10, 11), (10, 35), (11, 12), 
    (11, 36), (12, 13), (12, 37), (13, 14), (13, 38), (14, 15), (14, 39), 
    (15, 16), (15, 40), (16, 17), (16, 41), (17, 18), (17, 42), (18, 19), 
    (18, 43), (19, 20), (19, 44), (20, 21), (20, 45), (21, 22), (21, 46), 
    (22, 23), (22, 47), (23, 24), (23, 48), (24, 49), (25, 26), (26, 27), 
    (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), 
    (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), 
    (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49)
]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Determine the pattern
def determine_graph_type(graph):
    n = len(graph.nodes)
    m = len(graph.edges)
    
    # Check for Complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Cycle graph
    if m == n and all(deg == 2 for _, deg in graph.degree):
        return "Cycle"
    
    # Check for Path graph
    if m == n - 1 and sum(deg == 1 for _, deg in graph.degree) == 2 and all(deg <= 2 for _, deg in graph.degree):
        return "Path"
    
    # Check for Star graph
    if sum(deg == 1 for _, deg in graph.degree) == n - 1 and 1 in dict(graph.degree).values():
        return "Star"
    
    # Check for Grid graph
    rows = cols = None
    for r in range(1, int(n**0.5) + 1):
        if n % r == 0:
            c = n // r
            grid_edges = r * (c - 1) + c * (r - 1)
            if m == grid_edges:
                rows, cols = r, c
                break
    if rows and cols:
        return "Grid"
    
    # Check for Clustered graph (heuristic based on modularity)
    if nx.algorithms.community.quality.modularity(graph, nx.algorithms.community.label_propagation_communities(graph)) > 0.3:
        return "Clustered graph"
    
    # Default to Random graph otherwise
    return "Random graph"

print(determine_graph_type(G))
```