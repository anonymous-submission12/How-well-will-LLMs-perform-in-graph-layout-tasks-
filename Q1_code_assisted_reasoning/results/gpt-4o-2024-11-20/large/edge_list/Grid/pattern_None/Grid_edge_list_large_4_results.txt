```python
import networkx as nx

# Define the edge list
edges = [(0, 1), (0, 8), (1, 2), (1, 9), (2, 3), (2, 10), (3, 4), (3, 11), 
         (4, 5), (4, 12), (5, 6), (5, 13), (6, 7), (6, 14), (7, 15), (8, 9), 
         (8, 16), (9, 10), (9, 17), (10, 11), (10, 18), (11, 12), (11, 19), 
         (12, 13), (12, 20), (13, 14), (13, 21), (14, 15), (14, 22), (15, 23), 
         (16, 17), (16, 24), (17, 18), (17, 25), (18, 19), (18, 26), (19, 20), 
         (19, 27), (20, 21), (20, 28), (21, 22), (21, 29), (22, 23), (22, 30), 
         (23, 31), (24, 25), (24, 32), (25, 26), (25, 33), (26, 27), (26, 34), 
         (27, 28), (27, 35), (28, 29), (28, 36), (29, 30), (29, 37), (30, 31), 
         (30, 38), (31, 39), (32, 33), (32, 40), (33, 34), (33, 41), (34, 35), 
         (34, 42), (35, 36), (35, 43), (36, 37), (36, 44), (37, 38), (37, 45), 
         (38, 39), (38, 46), (39, 47), (40, 41), (41, 42), (42, 43), (43, 44), 
         (44, 45), (45, 46), (46, 47)]

# Create the graph
G = nx.Graph(edges)

# Check the pattern
def graph_pattern(G):
    num_nodes = nx.number_of_nodes(G)
    num_edges = nx.number_of_edges(G)
    
    if nx.is_tree(G):
        # Star check: One central node connected to all others
        degrees = [deg for _, deg in G.degree()]
        if max(degrees) == num_nodes - 1 and degrees.count(1) == num_nodes - 1:
            return "Star"
        # Path check: Linear arrangement of nodes
        if max(degrees) == 2 and degrees.count(1) == 2:
            return "Path"
    if nx.is_connected(G):
        cycle_basis = nx.cycle_basis(G)
        # Cycle check: Graph that forms a single cycle
        if len(cycle_basis) == 1 and len(cycle_basis[0]) == num_nodes:
            return "Cycle"
        # Grid check: Rectangular arrangement of nodes
        sqrt_nodes = int(num_nodes**0.5)
        if num_nodes == sqrt_nodes**2 and num_edges == 2*(sqrt_nodes**2 - sqrt_nodes):
            return "Grid"
    # Complete graph check: Every node connected to every other node
    if num_edges == num_nodes * (num_nodes - 1) // 2:
        return "Complete"
    
    # Clustered graph check: Look for communities or dense subgraphs
    communities = list(nx.algorithms.community.greedy_modularity_communities(G))
    if len(communities) > 1:
        return "Clustered Graph"
    
    # Random graph as fallback
    return "Random Graph"

print(graph_pattern(G))
```