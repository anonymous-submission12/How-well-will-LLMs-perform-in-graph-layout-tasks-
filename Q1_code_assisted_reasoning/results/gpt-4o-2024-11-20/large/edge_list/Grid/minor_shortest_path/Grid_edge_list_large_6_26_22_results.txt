```python
from collections import deque

# Define the graph
edge_list = [(0, 1), (0, 7), (1, 2), (1, 8), (2, 3), (2, 9), (3, 4), (3, 10), (4, 5), (4, 11), (5, 6), (5, 12), 
             (6, 13), (7, 8), (7, 14), (8, 9), (8, 15), (9, 10), (9, 16), (10, 11), (10, 17), (11, 12), (11, 18), 
             (12, 13), (12, 19), (13, 20), (14, 15), (14, 21), (15, 16), (15, 22), (16, 17), (16, 23), (17, 18), 
             (17, 24), (18, 19), (18, 25), (19, 20), (19, 26), (20, 27), (21, 22), (21, 28), (22, 23), (22, 29), 
             (23, 24), (23, 30), (24, 25), (24, 31), (25, 26), (25, 32), (26, 27), (26, 33), (27, 34), (28, 29), 
             (28, 35), (29, 30), (29, 36), (30, 31), (30, 37), (31, 32), (31, 38), (32, 33), (32, 39), (33, 34), 
             (33, 40), (34, 41), (35, 36), (35, 42), (36, 37), (36, 43), (37, 38), (37, 44), (38, 39), (38, 45), 
             (39, 40), (39, 46), (40, 41), (40, 47), (41, 48), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), 
             (47, 48)]

# Build adjacency list
graph = {}
for u, v in edge_list:
    graph.setdefault(u, []).append(v)
    graph.setdefault(v, []).append(u)

# BFS to find shortest path
def bfs_shortest_path(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph.get(current, []):
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # If there is no path

# Calculate shortest path between node '26' and '22'
result = bfs_shortest_path(graph, 26, 22)
print(result)
```