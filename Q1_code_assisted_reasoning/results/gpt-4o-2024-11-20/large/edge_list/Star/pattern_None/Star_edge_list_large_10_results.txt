```python
def identify_graph_pattern(edge_list):
    from collections import defaultdict
    
    # Create the adjacency list of the graph
    adjacency = defaultdict(set)
    for u, v in edge_list:
        adjacency[u].add(v)
        adjacency[v].add(u)
    
    # Get the degree of each node
    degrees = {node: len(neighbors) for node, neighbors in adjacency.items()}
    
    # Check for Star Pattern
    center_nodes = [node for node, degree in degrees.items() if degree == len(edge_list)]
    leaf_nodes = [node for node, degree in degrees.items() if degree == 1]
    if len(center_nodes) == 1 and len(leaf_nodes) == len(edge_list):
        return "Star"

    # If not Star, return Unknown for this input
    return "Unknown"

# Input edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), 
             (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), 
             (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), 
             (0, 26), (0, 27), (0, 28), (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), 
             (0, 34), (0, 35), (0, 36), (0, 37), (0, 38), (0, 39), (0, 40), (0, 41), 
             (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), (0, 47), (0, 48), (0, 49)]

print(identify_graph_pattern(edge_list))
```