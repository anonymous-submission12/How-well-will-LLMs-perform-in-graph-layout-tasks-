```python
def identify_graph_pattern(edge_list):
    from collections import defaultdict

    # Create adjacency list
    adjacency_list = defaultdict(list)
    for u, v in edge_list:
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)

    # Count nodes and edges
    num_nodes = len(adjacency_list)
    num_edges = len(edge_list)

    # Check for Path: A path graph has exactly two nodes with degree 1, and all other nodes have degree 2
    degree_counts = [len(adjacency_list[node]) for node in adjacency_list]
    if degree_counts.count(1) == 2 and degree_counts.count(2) == num_nodes - 2:
        return "Path"

    return "Unknown"

# Input edge list
edge_list = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41)]

# Determine the graph pattern
print(identify_graph_pattern(edge_list))
```