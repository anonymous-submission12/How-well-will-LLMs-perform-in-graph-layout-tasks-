```python
def determine_graph_pattern(edge_list):
    from collections import defaultdict

    # Create adjacency list
    adjacency_list = defaultdict(list)
    for u, v in edge_list:
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)

    # Check for Path
    degree_counts = [len(adjacency_list[node]) for node in adjacency_list]
    if degree_counts.count(1) == 2 and degree_counts.count(2) == len(degree_counts) - 2:
        return "Path"

    # Check for Cycle
    if all(degree == 2 for degree in degree_counts):
        return "Cycle"

    # Check for Star
    if degree_counts.count(1) == len(degree_counts) - 1 and degree_counts.count(len(degree_counts) - 1) == 1:
        return "Star"

    # Check for Complete
    n = len(adjacency_list)
    if all(degree == n - 1 for degree in degree_counts):
        return "Complete"

    # Check for Grid (not implemented here, as it requires specific structure)

    # Check for Clustered Graph (not implemented here, as it requires specific structure)

    # Default to Random Graph
    return "Random Graph"

edge_list = [(0, 1), (0, 49), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49)]
print(determine_graph_pattern(edge_list))
```