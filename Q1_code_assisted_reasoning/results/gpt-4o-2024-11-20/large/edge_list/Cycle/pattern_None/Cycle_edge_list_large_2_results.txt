```python
def determine_graph_type(edge_list):
    from collections import defaultdict
    
    # Build a graph from edge list
    graph = defaultdict(set)
    for u, v in edge_list:
        graph[u].add(v)
        graph[v].add(u)
    
    # Extract vertices and edges
    vertices = set(graph.keys())
    edges = edge_list
    
    # Check for star pattern: one vertex connected to all others
    if any(len(neighbors) == len(vertices) - 1 for neighbors in graph.values()):
        return "Star"
    
    # Check for cycle pattern: all vertices are connected in a single loop
    visited = set()
    def has_cycle(v, parent):
        visited.add(v)
        for neighbor in graph[v]:
            if neighbor not in visited:
                if has_cycle(neighbor, v):
                    return True
            elif neighbor != parent:
                return True
        return False

    if len(edges) == len(vertices) and len(vertices) >= 3 and has_cycle(next(iter(vertices)), None):
        return "Cycle"
    
    # Check for path pattern: linear sequence of vertices (like a line)
    if len(edges) == len(vertices) - 1 and all(len(neighbors) <= 2 for neighbors in graph.values()):
        return "Path"
    
    # Not checking for Grid, Complete, Clustered, or Random patterns in this simple implementation
    return "Unknown"

edge_list = [(0, 1), (0, 41), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41)]
print(determine_graph_type(edge_list))
```