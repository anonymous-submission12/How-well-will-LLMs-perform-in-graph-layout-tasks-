```python
def determine_graph_pattern(edge_list):
    # Create adjacency list
    from collections import defaultdict
    adj_list = defaultdict(list)
    for u, v in edge_list:
        adj_list[u].append(v)
        adj_list[v].append(u)

    # Check for Star pattern
    degrees = {node: len(neighbors) for node, neighbors in adj_list.items()}
    if max(degrees.values()) == len(edge_list) and list(degrees.values()).count(1) == len(edge_list) - 1:
        return "Star"

    # Check for Cycle pattern
    visited = set()
    def dfs(node, parent):
        visited.add(node)
        for neighbor in adj_list[node]:
            if neighbor not in visited:
                if not dfs(neighbor, node):
                    return False
            elif neighbor != parent:
                return False
        return True
    if len(edge_list) == len(adj_list) and all(len(neighbors) == 2 for neighbors in adj_list.values()) and not dfs(next(iter(adj_list)), None):
        return "Cycle"

    # Check for Path pattern
    if all(degree <= 2 for degree in degrees.values()) and list(degrees.values()).count(1) == 2:
        return "Path"

    # Check for Grid pattern
    # Grid detection is complex; skipping for simplicity

    # Check for Complete pattern
    n = len(adj_list)
    if len(edge_list) == n * (n - 1) // 2:
        return "Complete"

    # Check for Clustered graph
    # Clustered graph detection is complex; skipping for simplicity

    # Default to Random graph
    return "Random"

edge_list = [(0, 1), (0, 43), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43)]
print(determine_graph_pattern(edge_list))
```