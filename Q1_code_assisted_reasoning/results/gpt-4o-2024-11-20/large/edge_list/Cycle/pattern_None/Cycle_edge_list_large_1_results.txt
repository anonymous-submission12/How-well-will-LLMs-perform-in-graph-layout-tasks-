```python
import networkx as nx

# Input graph data
edge_list = [(0, 1), (0, 40), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), 
             (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), 
             (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), 
             (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), 
             (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40)]

# Create graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Determine the graph pattern
def identify_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Complete graph (every pair of nodes is connected by an edge)
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Star graph (one central node connected to n-1 nodes)
    degrees = [deg for _, deg in G.degree()]
    if degrees.count(1) == n - 1 and degrees.count(n - 1) == 1:
        return "Star"
    
    # Check for Cycle graph (every node forming a cycle)
    if n == m and nx.is_connected(G) and all(deg == 2 for _, deg in G.degree()):
        return "Cycle"
    
    # Check for Path graph (every node forming a single path)
    if m == n - 1 and nx.is_connected(G) and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for Grid (cartesian grid graph)
    grid_size = nx.grid_2d_graph(int(n**0.5), int(n**0.5))
    if nx.is_isomorphic(G, grid_size):
        return "Grid"
    
    # Check for Clustered graph (several dense clusters)
    # This is more subjective and domain-specific. No specific algorithm here.
    
    # Default to random graph if none of the above apply
    return "Random"

print(identify_graph_pattern(G))
```