```python
import networkx as nx

# Define the edge list
edge_list = [(0, 21), (0, 27), (0, 28), (0, 34), (0, 38), (0, 43), (1, 38), (1, 39), (1, 40), (2, 3), (2, 4), (2, 19), 
             (2, 35), (2, 37), (3, 7), (3, 11), (3, 12), (3, 14), (3, 15), (3, 19), (3, 35), (3, 42), (4, 16), (4, 23), 
             (4, 25), (4, 26), (4, 28), (4, 37), (5, 17), (5, 26), (5, 28), (5, 30), (5, 38), (6, 22), (6, 25), (6, 29), 
             (6, 30), (6, 40), (7, 32), (7, 36), (7, 40), (7, 41), (8, 15), (8, 18), (8, 24), (8, 27), (8, 36), (8, 42), 
             (9, 11), (9, 36), (9, 37), (10, 19), (10, 25), (10, 29), (10, 33), (11, 14), (11, 20), (11, 27), (11, 34), 
             (12, 21), (12, 22), (12, 31), (12, 41), (13, 27), (13, 30), (13, 31), (14, 41), (15, 19), (15, 26), (15, 37), 
             (16, 22), (16, 30), (17, 19), (17, 23), (17, 40), (17, 43), (18, 21), (18, 35), (18, 37), (19, 22), (19, 25), 
             (19, 29), (19, 35), (19, 43), (20, 23), (20, 25), (21, 25), (21, 39), (22, 38), (22, 39), (23, 33), (24, 29), 
             (24, 34), (25, 27), (25, 32), (26, 37), (28, 30), (29, 34), (29, 36), (31, 35), (31, 42), (32, 33), (32, 36), 
             (33, 35), (33, 40), (36, 41), (37, 38), (39, 42), (41, 43)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Determine the graph pattern
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star
    degrees = [deg for _, deg in G.degree]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle
    if nx.is_connected(G) and m == n and all(deg == 2 for _, deg in G.degree):
        return "Cycle"
    
    # Check for Path
    if nx.is_connected(G) and m == n - 1 and degrees.count(1) == 2 and all(deg == 2 for _, deg in G.degree if deg != 1):
        return "Path"
    
    # Check for Grid
    if nx.is_connected(G) and nx.grid_graph(dim=[int(n**0.5), int(n**0.5)]).edges == G.edges:
        return "Grid"
    
    # Check for Complete
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered
    if nx.number_connected_components(G) > 1:
        return "Clustered"
    
    # Default to Random
    return "Random"

print(determine_graph_pattern(G))
```