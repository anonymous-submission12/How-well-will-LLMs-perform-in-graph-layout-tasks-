```python
import networkx as nx

# Define the edge list
edge_list = [(0, 2), (0, 3), (0, 23), (0, 38), (1, 29), (2, 5), (2, 7), (2, 8), (2, 29), (2, 41), (3, 10), (3, 12), (3, 36), (3, 41), (4, 6), (4, 12), (4, 14), (4, 27), (4, 34), (4, 35), (5, 12), (5, 15), (5, 16), (5, 19), (6, 9), (6, 10), (6, 29), (6, 30), (7, 32), (7, 39), (8, 23), (9, 18), (9, 26), (9, 28), (10, 11), (10, 16), (10, 20), (10, 26), (10, 42), (11, 14), (11, 23), (11, 25), (11, 38), (11, 39), (12, 17), (12, 19), (12, 22), (12, 24), (12, 31), (12, 37), (12, 42), (13, 40), (14, 30), (15, 16), (15, 19), (15, 27), (15, 37), (16, 33), (17, 18), (17, 38), (17, 39), (18, 30), (18, 37), (19, 20), (19, 42), (21, 22), (21, 26), (22, 32), (22, 42), (23, 24), (23, 33), (24, 25), (24, 33), (24, 39), (25, 26), (25, 29), (26, 36), (28, 30), (28, 41), (31, 35), (31, 40), (32, 35), (33, 34), (33, 36), (37, 39), (37, 42), (38, 42), (40, 41)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Check for patterns
def determine_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for star graph
    degrees = [deg for _, deg in G.degree]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(1) == 2 and degrees.count(2) == n - 2:
        return "Path"
    
    # Check for grid graph
    if nx.is_connected(G) and nx.grid_graph(dim=[int(n**0.5), int(n**0.5)]).edges == G.edges:
        return "Grid"
    
    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for clustered graph
    if nx.algorithms.community.modularity(G, [list(G.nodes)]) < 0.5:
        return "Clustered graph"
    
    # Default to random graph
    return "Random graph"

print(determine_pattern(G))
```