```python
import networkx as nx

# Define the edge list
edge_list = [(0, 3), (0, 7), (0, 10), (1, 8), (1, 15), (1, 21), (1, 32), (2, 15), (2, 16), (2, 18), (2, 21), (3, 9), (3, 16), (4, 8), (4, 16), (4, 19), (4, 38), (4, 39), (5, 23), (6, 23), (7, 18), (7, 24), (7, 30), (7, 33), (8, 10), (8, 15), (8, 25), (9, 22), (9, 31), (9, 35), (10, 13), (10, 31), (10, 36), (11, 20), (11, 31), (11, 33), (12, 16), (12, 24), (12, 39), (13, 30), (13, 32), (14, 25), (14, 28), (14, 36), (14, 37), (15, 22), (15, 23), (15, 30), (16, 18), (16, 33), (17, 23), (17, 27), (17, 34), (17, 38), (18, 40), (19, 22), (19, 23), (19, 30), (19, 31), (20, 34), (20, 35), (21, 23), (21, 36), (21, 37), (22, 27), (24, 27), (24, 30), (24, 35), (26, 28), (27, 31), (28, 31), (29, 36), (30, 31), (31, 38), (31, 39), (32, 35), (34, 35), (34, 39), (36, 39), (37, 39), (37, 40)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Check for patterns
def determine_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for Path
    if nx.is_connected(G) and m == n - 1 and degrees.count(1) == 2 and degrees.count(2) == n - 2:
        return "Path"
    
    # Check for Grid
    sqrt_n = int(n**0.5)
    if sqrt_n * sqrt_n == n and m == 2 * n - 2:
        return "Grid"
    
    # Check for Complete
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered Graph
    if nx.number_connected_components(G) > 1:
        return "Clustered Graph"
    
    # Default to Random Graph
    return "Random Graph"

print(determine_pattern(G))
```