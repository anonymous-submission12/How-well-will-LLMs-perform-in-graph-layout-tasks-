```python
import networkx as nx

# Define the edge list
edge_list = [
    (0, 2), (0, 6), (0, 19), (0, 31), (0, 33), (1, 4), (1, 16), (1, 19), (1, 23),
    (1, 28), (1, 39), (2, 20), (2, 34), (2, 37), (2, 40), (3, 28), (3, 44), (4, 18),
    (4, 20), (4, 38), (5, 11), (5, 23), (5, 39), (5, 42), (6, 8), (6, 10), (6, 25),
    (6, 26), (6, 39), (7, 9), (7, 21), (7, 24), (7, 25), (8, 40), (9, 30), (10, 29),
    (11, 12), (11, 16), (11, 20), (11, 21), (12, 13), (12, 27), (12, 28), (12, 32),
    (13, 45), (14, 25), (14, 36), (14, 40), (14, 41), (15, 16), (15, 19), (15, 30),
    (16, 23), (16, 36), (17, 28), (17, 29), (17, 35), (17, 46), (18, 23), (18, 26),
    (18, 28), (19, 26), (20, 21), (21, 26), (21, 31), (21, 38), (21, 39), (21, 43),
    (22, 26), (22, 38), (22, 40), (23, 30), (23, 37), (23, 38), (24, 28), (24, 32),
    (24, 41), (24, 44), (24, 46), (26, 27), (26, 29), (26, 31), (26, 43), (27, 33),
    (28, 29), (29, 39), (29, 45), (31, 36), (31, 37), (32, 33), (32, 39), (33, 37),
    (34, 43), (35, 40), (36, 42), (38, 43), (41, 43)
]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Function to check graph type
def determine_graph_pattern(G):
    n = len(G.nodes())
    m = len(G.edges())
    
    # Check for Star graph
    degrees = [deg for _, deg in G.degree()]
    if degrees.count(n - 1) == 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle graph
    if nx.cycle_graph(n).edges() == set(G.edges()) and m == n:
        return "Cycle"
    
    # Check for Path graph
    if nx.is_tree(G) and max(degrees) <= 2:
        return "Path"
    
    # Check for Grid graph
    grid_lengths = [i for i in range(1, n + 1) if n % i == 0]
    for rows in grid_lengths:
        cols = n // rows
        if nx.grid_2d_graph(rows, cols).edges() == set(nx.convert_node_labels_to_integers(G).edges()):
            return "Grid"
    
    # Check for Complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered graph
    if nx.average_clustering(G) > 0.5:  # Arbitrary threshold to define clustering
        return "Clustered graph"
    
    # Default to Random graph
    return "Random graph"

# Determine and print the graph pattern
print(determine_graph_pattern(G))
```