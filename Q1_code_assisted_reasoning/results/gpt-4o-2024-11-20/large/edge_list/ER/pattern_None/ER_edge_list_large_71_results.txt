```python
import networkx as nx

# Define the edge list
edge_list = [(0, 1), (0, 29), (0, 35), (0, 41), (0, 48), (1, 13), (1, 23), (1, 44), (1, 45), (2, 5), (2, 8), (2, 27), 
             (2, 33), (2, 39), (2, 43), (2, 45), (3, 10), (3, 12), (3, 16), (3, 20), (3, 24), (3, 32), (4, 14), (4, 21), 
             (4, 37), (4, 39), (4, 40), (5, 7), (5, 28), (6, 18), (6, 28), (6, 39), (7, 30), (7, 48), (8, 32), (8, 35), 
             (8, 42), (9, 22), (9, 43), (9, 44), (10, 19), (10, 30), (10, 34), (10, 47), (11, 22), (11, 28), (11, 46), 
             (12, 44), (13, 17), (13, 27), (13, 28), (13, 40), (14, 25), (14, 30), (14, 35), (15, 42), (16, 17), (16, 23), 
             (16, 28), (16, 29), (17, 26), (17, 28), (17, 33), (17, 38), (17, 41), (17, 43), (17, 44), (18, 46), (19, 22), 
             (19, 33), (19, 37), (19, 41), (20, 30), (21, 30), (21, 40), (22, 27), (23, 31), (24, 46), (25, 34), (25, 45), 
             (26, 27), (26, 29), (26, 30), (26, 34), (26, 48), (27, 35), (27, 43), (28, 42), (28, 48), (29, 48), (30, 31), 
             (30, 36), (30, 38), (30, 47), (31, 49), (32, 34), (32, 39), (32, 45), (32, 48), (33, 43), (33, 44), (34, 36), 
             (35, 41), (37, 41), (37, 45), (39, 42), (39, 43), (41, 49), (42, 48), (43, 47), (44, 49)]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Check graph patterns
def check_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for Path
    if nx.is_connected(G) and m == n - 1 and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for Grid
    if nx.is_connected(G) and all(deg in [2, 3, 4] for deg in degrees):
        return "Grid"
    
    # Check for Complete
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered Graph
    if nx.number_connected_components(G) > 1:
        return "Clustered Graph"
    
    # Default to Random Graph
    return "Random Graph"

# Determine the graph pattern
print(check_graph_pattern(G))
```