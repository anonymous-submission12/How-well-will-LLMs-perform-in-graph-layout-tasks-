```python
import networkx as nx

# Define the edge list
edge_list = [(0, 9), (0, 31), (0, 34), (0, 45), (1, 10), (1, 13), (1, 14), (1, 22), (1, 24), (1, 30), (1, 32), (1, 42), 
             (2, 15), (2, 44), (2, 48), (3, 4), (3, 19), (3, 38), (3, 40), (4, 17), (4, 24), (4, 27), (4, 35), (4, 38), 
             (5, 6), (5, 10), (5, 16), (5, 22), (5, 36), (5, 44), (5, 45), (5, 47), (5, 48), (6, 7), (6, 8), (6, 12), 
             (6, 26), (6, 32), (6, 39), (6, 42), (7, 10), (7, 12), (7, 15), (7, 29), (8, 16), (8, 24), (8, 26), (8, 41), 
             (8, 46), (8, 47), (9, 11), (9, 17), (9, 34), (10, 11), (10, 25), (10, 32), (10, 34), (10, 41), (10, 47), 
             (11, 12), (11, 13), (11, 36), (11, 37), (12, 35), (12, 46), (13, 25), (13, 30), (13, 35), (14, 20), (14, 26), 
             (14, 27), (14, 32), (14, 35), (14, 38), (14, 44), (15, 18), (15, 26), (15, 31), (15, 47), (16, 17), (16, 29), 
             (16, 37), (16, 38), (16, 39), (16, 42), (16, 48), (17, 20), (18, 21), (18, 29), (18, 36), (18, 38), (19, 27), 
             (19, 30), (19, 33), (19, 38), (19, 39), (19, 44), (20, 21), (20, 25), (20, 28), (20, 31), (20, 35), (20, 41), 
             (21, 28), (21, 44), (22, 23), (22, 24), (22, 31), (23, 45), (25, 35), (26, 27), (26, 31), (26, 34), (26, 42), 
             (27, 32), (28, 36), (28, 48), (29, 34), (29, 40), (29, 44), (30, 44), (31, 37), (31, 44), (31, 45), (31, 47), 
             (32, 33), (33, 35), (34, 44), (35, 37), (35, 43), (35, 46), (37, 45), (38, 48), (39, 47), (40, 46), (41, 48), 
             (42, 44), (43, 44)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Determine the graph pattern
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for Path
    if nx.is_connected(G) and m == n - 1 and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for Grid
    if nx.is_connected(G) and len(set(degrees)) <= 3:
        return "Grid"
    
    # Check for Complete
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered Graph
    if nx.number_connected_components(G) > 1:
        return "Clustered Graph"
    
    # Default to Random Graph
    return "Random Graph"

print(determine_graph_pattern(G))
```