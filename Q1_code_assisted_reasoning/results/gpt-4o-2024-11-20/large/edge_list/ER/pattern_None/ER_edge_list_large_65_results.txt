```python
import networkx as nx

# Define the edge list
edge_list = [(0, 22), (0, 29), (0, 31), (1, 19), (1, 20), (1, 21), (1, 38), (1, 46), (2, 10), (2, 26), (3, 22), (3, 35), 
             (3, 41), (3, 45), (4, 19), (4, 25), (4, 39), (5, 13), (5, 21), (5, 30), (5, 43), (6, 9), (6, 36), (7, 10), 
             (7, 20), (7, 29), (7, 31), (7, 32), (7, 35), (7, 38), (7, 41), (7, 43), (8, 18), (8, 31), (9, 10), (9, 16), 
             (9, 19), (9, 34), (9, 42), (10, 16), (10, 21), (10, 24), (10, 27), (10, 34), (11, 15), (12, 19), (12, 21), 
             (12, 28), (12, 40), (13, 20), (13, 26), (13, 30), (13, 31), (13, 34), (13, 36), (13, 41), (13, 45), (14, 17), 
             (14, 25), (14, 37), (14, 41), (14, 43), (15, 22), (15, 31), (15, 32), (16, 32), (16, 34), (16, 45), (17, 29), 
             (17, 41), (18, 35), (19, 23), (19, 37), (19, 40), (20, 36), (20, 44), (20, 45), (21, 34), (21, 35), (21, 40), 
             (22, 42), (23, 31), (23, 45), (24, 30), (24, 31), (24, 32), (24, 35), (24, 45), (25, 27), (25, 30), (25, 34), 
             (25, 44), (26, 33), (26, 37), (26, 41), (27, 28), (27, 37), (27, 38), (27, 40), (27, 42), (28, 38), (29, 35), 
             (29, 37), (29, 46), (30, 31), (30, 46), (31, 37), (32, 36), (32, 38), (32, 45), (33, 41), (33, 44), (34, 41), 
             (34, 43), (34, 44), (35, 43), (35, 44), (36, 42), (39, 46), (40, 42), (40, 43), (43, 45)]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Check graph patterns
def check_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star
    degrees = [deg for _, deg in G.degree]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for Path
    if nx.is_connected(G) and m == n - 1 and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for Grid
    sqrt_n = int(n**0.5)
    if sqrt_n * sqrt_n == n and m == 2 * n - 2:
        return "Grid"
    
    # Check for Complete
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered
    if nx.number_connected_components(G) > 1:
        return "Clustered"
    
    # Default to Random
    return "Random"

print(check_graph_pattern(G))
```