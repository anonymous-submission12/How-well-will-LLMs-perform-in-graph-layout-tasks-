```python
import networkx as nx

# Create the graph from the edge list
edges = [(0, 5), (0, 13), (0, 17), (0, 18), (0, 21), (0, 36), (0, 43), (1, 4), (1, 6), (1, 10), 
         (2, 4), (2, 9), (2, 15), (2, 24), (2, 25), (2, 43), (2, 45), (2, 46), (3, 47), (4, 10), 
         (4, 36), (4, 46), (5, 7), (5, 10), (5, 16), (5, 28), (5, 34), (5, 46), (6, 9), (6, 22), 
         (6, 46), (7, 25), (8, 15), (8, 25), (8, 26), (8, 34), (8, 41), (9, 28), (10, 26), 
         (10, 31), (10, 47), (11, 16), (11, 21), (11, 25), (12, 26), (12, 35), (12, 43), 
         (12, 45), (13, 19), (13, 34), (13, 39), (14, 22), (14, 27), (14, 28), (15, 27), 
         (15, 44), (15, 46), (15, 47), (16, 20), (16, 25), (16, 29), (17, 28), (17, 36), 
         (17, 41), (18, 27), (18, 32), (19, 41), (20, 24), (20, 41), (20, 45), (21, 22), 
         (21, 44), (22, 28), (22, 46), (23, 38), (23, 45), (23, 46), (24, 29), (24, 37), 
         (24, 47), (25, 34), (26, 40), (27, 31), (28, 32), (28, 34), (28, 42), (28, 46), 
         (30, 32), (31, 35), (31, 40), (33, 34), (33, 38), (34, 35), (34, 41), (35, 46), 
         (37, 45), (37, 46), (44, 47)]

G = nx.Graph(edges)

# Define checks for graph patterns
def is_star(graph):
    degrees = dict(graph.degree())
    center_count = sum(1 for d in degrees.values() if d > 1)
    leaf_count = sum(1 for d in degrees.values() if d == 1)
    return center_count == 1 and leaf_count == (graph.number_of_nodes() - 1)

def is_cycle(graph):
    return nx.is_connected(graph) and all(d == 2 for _, d in graph.degree())

def is_path(graph):
    degrees = dict(graph.degree())
    end_nodes = sum(1 for d in degrees.values() if d == 1)
    middle_nodes = sum(1 for d in degrees.values() if d == 2)
    return end_nodes == 2 and middle_nodes == (graph.number_of_nodes() - 2)

def is_grid(graph):
    def check_dimensions(nodes):
        for i in range(1, len(nodes) + 1):
            if len(nodes) % i == 0:
                rows, cols = i, len(nodes) // i
                if rows * cols == len(nodes):
                    return rows, cols
        return None

    dimensions = check_dimensions(graph.nodes())
    if dimensions is None:
        return False
    
    rows, cols = dimensions
    edges_needed = 2 * rows * cols - rows - cols
    return edges_needed == graph.number_of_edges()

def is_complete(graph):
    return graph.number_of_edges() == graph.number_of_nodes() * (graph.number_of_nodes() - 1) // 2

def is_clustered(graph):
    return nx.average_clustering(graph) > 0.6

def is_random(graph):
    return not (is_star(graph) or is_cycle(graph) or is_path(graph) or is_grid(graph) or is_complete(graph) or is_clustered(graph))

# Determine graph pattern
if is_star(G):
    print("Star")
elif is_cycle(G):
    print("Cycle")
elif is_path(G):
    print("Path")
elif is_grid(G):
    print("Grid")
elif is_complete(G):
    print("Complete")
elif is_clustered(G):
    print("Clustered")
elif is_random(G):
    print("Random")
```