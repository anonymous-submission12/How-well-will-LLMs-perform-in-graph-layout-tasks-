```python
import networkx as nx

# Define the edge list
edge_list = [(0, 2), (0, 17), (0, 21), (0, 38), (1, 12), (1, 29), (1, 35), (2, 13), (2, 20), (2, 23), (2, 24), (2, 26), 
             (3, 12), (3, 27), (3, 28), (4, 9), (5, 41), (6, 8), (6, 12), (6, 16), (6, 17), (6, 24), (7, 8), (7, 16), 
             (7, 30), (7, 41), (8, 24), (8, 36), (9, 10), (9, 26), (9, 29), (9, 31), (9, 36), (10, 11), (10, 13), 
             (10, 18), (10, 22), (10, 34), (12, 16), (12, 23), (12, 25), (13, 21), (13, 31), (13, 37), (14, 23), 
             (15, 20), (16, 19), (17, 20), (17, 34), (17, 39), (18, 26), (18, 31), (18, 38), (19, 29), (20, 21), 
             (20, 26), (20, 33), (21, 32), (23, 25), (23, 28), (23, 39), (24, 32), (24, 41), (25, 33), (25, 41), 
             (28, 31), (29, 31), (29, 36), (33, 41), (36, 40), (40, 41)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Check for graph patterns
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star pattern
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle pattern
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for Path pattern
    if nx.is_connected(G) and m == n - 1 and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for Grid pattern
    if nx.is_connected(G):
        rows = int(n**0.5)
        if rows * rows == n and m == 2 * rows * (rows - 1):
            return "Grid"
    
    # Check for Complete pattern
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered graph pattern
    if nx.number_connected_components(G) > 1:
        return "Clustered graph"
    
    # Default to Random graph
    return "Random graph"

# Determine the graph pattern
print(determine_graph_pattern(G))
```