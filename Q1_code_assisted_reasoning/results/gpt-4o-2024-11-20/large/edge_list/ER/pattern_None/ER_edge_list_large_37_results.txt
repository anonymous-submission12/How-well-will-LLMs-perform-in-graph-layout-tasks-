```python
import networkx as nx

# Define the edge list
edge_list = [(0, 38), (1, 6), (1, 13), (1, 22), (1, 28), (2, 28), (2, 33), (2, 37), (3, 11), (3, 17), (3, 19), (4, 10), 
             (4, 19), (4, 25), (5, 11), (5, 14), (5, 32), (5, 40), (5, 44), (6, 10), (6, 19), (6, 21), (7, 14), (7, 23), 
             (7, 30), (7, 31), (7, 36), (7, 40), (8, 9), (8, 10), (8, 20), (8, 31), (8, 32), (9, 19), (9, 21), (9, 33), 
             (9, 34), (9, 44), (11, 12), (11, 24), (11, 27), (11, 36), (12, 34), (13, 19), (13, 20), (13, 21), (14, 20), 
             (14, 21), (14, 26), (14, 34), (15, 23), (15, 30), (15, 34), (15, 35), (16, 17), (16, 19), (16, 21), (17, 23), 
             (17, 28), (17, 34), (17, 38), (18, 40), (18, 45), (19, 26), (19, 31), (19, 34), (19, 37), (20, 24), (20, 27), 
             (20, 28), (20, 42), (21, 31), (21, 32), (21, 35), (23, 36), (23, 45), (24, 32), (24, 43), (25, 28), (25, 38), 
             (26, 30), (26, 31), (26, 36), (26, 41), (28, 33), (28, 40), (29, 31), (29, 33), (29, 34), (29, 37), (29, 45), 
             (30, 31), (30, 45), (31, 38), (31, 40), (31, 42), (33, 40), (33, 42), (38, 43), (39, 41), (39, 42), (39, 45)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Determine the graph pattern
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for star graph
    degrees = [deg for _, deg in G.degree]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(1) == 2 and degrees.count(2) == n - 2:
        return "Path"
    
    # Check for grid graph
    if nx.is_connected(G) and nx.grid_graph(dim=[int(n**0.5), int(n**0.5)]).edges == G.edges:
        return "Grid"
    
    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for clustered graph
    if nx.algorithms.community.greedy_modularity_communities(G):
        return "Clustered graph"
    
    # Default to random graph
    return "Random graph"

print(determine_graph_pattern(G))
```