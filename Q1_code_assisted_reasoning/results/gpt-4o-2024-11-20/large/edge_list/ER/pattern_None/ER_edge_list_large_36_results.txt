```python
import networkx as nx

# Define the edge list
edge_list = [(0, 13), (0, 16), (0, 22), (0, 34), (0, 41), (0, 43), (1, 5), (1, 9), (1, 11), (1, 12), (1, 19), (1, 42), 
             (2, 19), (2, 24), (2, 35), (3, 12), (3, 24), (3, 25), (4, 11), (4, 12), (5, 6), (5, 15), (5, 19), (5, 20), 
             (5, 21), (5, 23), (5, 32), (5, 33), (5, 38), (5, 39), (5, 40), (5, 44), (5, 45), (6, 9), (6, 32), (6, 43), 
             (6, 44), (7, 15), (7, 16), (7, 17), (7, 30), (7, 44), (8, 15), (8, 30), (8, 40), (9, 11), (9, 27), (9, 30), 
             (9, 39), (9, 41), (9, 43), (10, 28), (10, 33), (10, 39), (11, 14), (11, 18), (11, 35), (12, 33), (12, 34), 
             (12, 38), (13, 21), (13, 25), (13, 38), (14, 30), (14, 31), (14, 43), (15, 17), (15, 22), (15, 29), (15, 30), 
             (15, 33), (16, 32), (16, 40), (16, 42), (17, 29), (17, 44), (18, 30), (18, 35), (20, 31), (20, 35), (21, 24), 
             (21, 30), (21, 33), (22, 28), (23, 39), (24, 28), (24, 29), (25, 37), (26, 29), (26, 32), (26, 33), (27, 29), 
             (27, 42), (28, 30), (29, 30), (29, 33), (29, 39), (29, 42), (30, 36), (31, 33), (33, 34), (33, 43), (34, 38), 
             (36, 38), (36, 41), (37, 45), (38, 43), (39, 44), (40, 42), (41, 42), (42, 43)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Check graph patterns
def check_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for Path
    if nx.is_connected(G) and m == n - 1 and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for Grid
    if nx.is_connected(G) and nx.grid_2d_graph(int(n**0.5), int(n**0.5)).edges == G.edges:
        return "Grid"
    
    # Check for Complete
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered Graph
    if nx.number_connected_components(G) > 1:
        return "Clustered Graph"
    
    # Default to Random Graph
    return "Random Graph"

# Determine the graph pattern
print(check_graph_pattern(G))
```