```python
import networkx as nx

# Define the edge list
edge_list = [(0, 8), (0, 22), (0, 27), (0, 43), (0, 46), (1, 8), (1, 24), (1, 25), (2, 7), (2, 9), (2, 12), (2, 25), 
             (2, 37), (2, 39), (2, 44), (3, 7), (3, 24), (3, 36), (3, 38), (3, 41), (3, 43), (4, 37), (5, 7), (5, 13), 
             (5, 45), (6, 7), (6, 27), (6, 38), (7, 11), (7, 31), (7, 43), (8, 16), (8, 17), (8, 28), (8, 43), (9, 16), 
             (9, 24), (9, 27), (9, 28), (9, 36), (9, 41), (9, 42), (10, 12), (10, 22), (10, 30), (10, 45), (11, 18), 
             (11, 23), (11, 25), (11, 26), (11, 28), (11, 29), (11, 33), (11, 36), (12, 17), (12, 36), (12, 44), (13, 21), 
             (13, 35), (13, 40), (13, 41), (13, 43), (14, 22), (15, 33), (16, 35), (16, 40), (17, 25), (17, 29), (18, 27), 
             (18, 36), (18, 40), (19, 20), (19, 21), (19, 23), (19, 37), (19, 45), (20, 37), (20, 44), (20, 45), (21, 23), 
             (21, 24), (21, 43), (21, 44), (22, 25), (22, 39), (23, 44), (24, 25), (24, 30), (24, 36), (25, 31), (26, 27), 
             (26, 33), (26, 44), (27, 33), (27, 41), (27, 45), (29, 31), (29, 32), (29, 39), (30, 35), (32, 46), (34, 39), 
             (34, 42), (34, 44), (35, 46), (36, 45), (38, 42), (38, 45), (39, 44), (41, 46)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Check for graph patterns
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star graph
    degrees = [deg for _, deg in G.degree]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for _, deg in G.degree):
        return "Cycle"
    
    # Check for Path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(1) == 2 and all(deg == 2 for deg in degrees if deg != 1):
        return "Path"
    
    # Check for Grid graph
    if nx.is_connected(G) and nx.grid_graph(dim=[int(n**0.5), int(n**0.5)]).edges == G.edges:
        return "Grid"
    
    # Check for Complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered graph
    if nx.algorithms.community.modularity(G, [list(G.nodes)]) > 0.3:
        return "Clustered"
    
    # Default to Random graph
    return "Random"

# Determine the graph pattern
print(determine_graph_pattern(G))
```