```python
import networkx as nx

# Define the graph from the edge list
edge_list = [(0, 13), (0, 31), (0, 34), (1, 4), (1, 23), (1, 44), (2, 6), (2, 10), (2, 19), (2, 22), (2, 31), 
             (2, 47), (3, 17), (3, 23), (3, 34), (3, 36), (3, 40), (3, 41), (4, 16), (4, 23), (4, 29), (4, 43), 
             (4, 46), (5, 12), (5, 33), (5, 44), (6, 11), (6, 28), (6, 29), (6, 35), (6, 37), (6, 47), (7, 9), 
             (7, 15), (7, 27), (7, 28), (7, 34), (7, 41), (7, 44), (7, 47), (8, 11), (8, 13), (8, 25), (9, 19), 
             (9, 22), (9, 23), (9, 46), (10, 12), (10, 20), (10, 24), (10, 27), (10, 33), (10, 36), (10, 40), 
             (10, 48), (11, 12), (11, 22), (11, 24), (11, 30), (11, 39), (12, 33), (12, 48), (13, 15), (13, 17), 
             (13, 25), (13, 36), (13, 38), (13, 43), (14, 19), (14, 32), (14, 33), (15, 19), (15, 26), (15, 47), 
             (16, 44), (17, 20), (17, 26), (17, 39), (17, 44), (18, 24), (18, 32), (18, 35), (18, 48), (19, 29), 
             (19, 34), (19, 37), (20, 28), (20, 41), (20, 48), (21, 23), (22, 23), (22, 46), (23, 24), (23, 27), 
             (23, 29), (23, 38), (23, 39), (24, 29), (24, 34), (24, 37), (25, 48), (26, 27), (26, 29), (30, 31), 
             (30, 37), (30, 44), (31, 39), (32, 44), (33, 34), (34, 44), (35, 37), (36, 43), (36, 48), (37, 42), 
             (40, 44), (40, 45), (45, 47), (46, 47), (46, 48), (47, 48)]

G = nx.Graph(edge_list)

# Determine the topology of the graph
def determine_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)

    # Check complete graph: n * (n - 1) / 2 edges
    if m == n * (n - 1) // 2:
        return "Complete"

    # Check star graph: One central node connected to all others
    degrees = [d for _, d in G.degree]
    if degrees.count(n - 1) == 1 and degrees.count(1) == n - 1:
        return "Star"

    # Check cycle graph: n nodes and n edges, all degrees are 2
    if m == n and all(d == 2 for d in degrees):
        return "Cycle"

    # Check path graph: n nodes and n-1 edges, and all degrees are <= 2
    if m == n - 1 and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"

    # Check grid graph (approximation): Verify graph has no long chains
    if nx.is_connected(G):
        try:
            nx.grid_2d_graph(int(n**0.5), int(n**0.5))
            return "Grid"
        except:
            pass

    # Check clustered graph: High clustering coefficient
    avg_clustering = nx.average_clustering(G)
    if avg_clustering > 0.5:
        return "Clustered"

    # Default: Random graph
    return "Random"

print(determine_pattern(G))
```