```python
import networkx as nx

# Define the edge list
edge_list = [(0, 7), (0, 11), (0, 22), (0, 28), (0, 33), (0, 37), (1, 17), (1, 21), (1, 43), (1, 45), 
             (2, 9), (2, 15), (2, 17), (2, 18), (2, 30), (2, 37), (2, 47), (3, 8), (3, 9), (3, 11), 
             (3, 20), (3, 36), (4, 20), (4, 28), (5, 15), (5, 19), (5, 24), (6, 33), (6, 37), (6, 39), 
             (7, 8), (7, 10), (7, 26), (7, 35), (7, 42), (7, 43), (8, 19), (8, 23), (8, 35), (8, 44), 
             (9, 10), (9, 13), (9, 27), (10, 11), (10, 26), (11, 41), (12, 38), (12, 47), (13, 36), 
             (13, 40), (13, 41), (13, 43), (13, 46), (13, 48), (14, 30), (14, 31), (14, 37), (14, 43), 
             (14, 48), (15, 16), (15, 18), (15, 33), (15, 40), (15, 45), (15, 48), (16, 17), (16, 27), 
             (16, 47), (17, 27), (18, 22), (18, 30), (18, 36), (18, 44), (19, 32), (19, 37), (19, 48), 
             (20, 24), (20, 44), (21, 22), (21, 27), (22, 25), (22, 37), (22, 44), (23, 33), (24, 31), 
             (24, 35), (25, 26), (25, 31), (25, 40), (27, 31), (29, 48), (30, 34), (30, 38), (31, 38), 
             (31, 40), (31, 41), (32, 39), (32, 47), (33, 34), (33, 38), (33, 41), (34, 39), (35, 36), 
             (35, 47), (36, 44), (37, 41), (38, 48), (43, 46), (43, 48)]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Check graph patterns
def check_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for Path
    if nx.is_connected(G) and m == n - 1 and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for Grid
    if nx.is_connected(G):
        sqrt_n = int(n**0.5)
        if sqrt_n * sqrt_n == n and m == 2 * (sqrt_n * (sqrt_n - 1)):
            return "Grid"
    
    # Check for Complete
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered Graph
    if nx.number_connected_components(G) > 1:
        return "Clustered Graph"
    
    # Default to Random Graph
    return "Random Graph"

print(check_graph_pattern(G))
```