```python
import networkx as nx

# Define the edge list
edge_list = [(0, 5), (0, 13), (0, 37), (1, 12), (1, 13), (1, 24), (1, 26), (1, 32), (1, 44), 
             (2, 3), (2, 7), (2, 14), (2, 16), (2, 20), (2, 37), (2, 39), (3, 17), (3, 21), 
             (3, 25), (3, 27), (3, 30), (3, 41), (3, 45), (4, 21), (4, 29), (4, 35), (4, 47), 
             (5, 28), (6, 9), (6, 10), (6, 21), (6, 24), (6, 32), (6, 43), (6, 44), (7, 21), 
             (7, 23), (7, 35), (8, 15), (8, 40), (9, 13), (9, 21), (9, 27), (9, 35), (10, 17), 
             (10, 44), (11, 22), (11, 34), (11, 43), (11, 44), (12, 18), (12, 31), (12, 39), 
             (12, 45), (13, 26), (14, 23), (14, 32), (14, 34), (14, 41), (14, 42), (14, 46), 
             (15, 19), (15, 21), (15, 26), (15, 30), (15, 42), (16, 27), (16, 47), (17, 27), 
             (17, 29), (17, 38), (17, 42), (18, 19), (18, 30), (18, 34), (18, 47), (19, 20), 
             (19, 27), (20, 31), (20, 37), (21, 45), (22, 28), (22, 32), (22, 36), (22, 37), 
             (23, 29), (23, 40), (23, 41), (23, 42), (23, 47), (24, 41), (25, 30), (25, 33), 
             (25, 39), (26, 28), (26, 29), (26, 30), (26, 33), (26, 34), (26, 35), (26, 37), 
             (26, 43), (26, 47), (28, 38), (28, 43), (29, 36), (30, 31), (30, 34), (30, 40), 
             (31, 36), (31, 38), (31, 43), (32, 43), (33, 37), (33, 42), (34, 39), (34, 47), 
             (35, 36), (35, 45), (36, 45), (37, 41), (37, 47), (38, 47), (40, 47), (41, 44)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Check for graph patterns
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star
    degrees = [deg for _, deg in G.degree]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for Path
    if nx.is_connected(G) and m == n - 1 and degrees.count(1) == 2 and degrees.count(2) == n - 2:
        return "Path"
    
    # Check for Grid
    sqrt_n = int(n**0.5)
    if sqrt_n * sqrt_n == n and m == 2 * n - 2:
        return "Grid"
    
    # Check for Complete
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered Graph
    if nx.number_connected_components(G) > 1:
        return "Clustered Graph"
    
    # Default to Random Graph
    return "Random Graph"

# Determine the graph pattern
print(determine_graph_pattern(G))
```