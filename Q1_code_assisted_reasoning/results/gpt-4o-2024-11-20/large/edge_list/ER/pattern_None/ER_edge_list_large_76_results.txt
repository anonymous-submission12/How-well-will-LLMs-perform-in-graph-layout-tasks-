```python
import networkx as nx

# Define the edge list
edge_list = [(0, 25), (1, 17), (1, 25), (1, 36), (2, 3), (2, 21), (2, 35), (2, 38), (2, 42), (3, 46), (4, 15), (4, 20), (4, 22), (4, 44), (4, 46), (5, 16), (5, 39), (5, 42), (5, 44), (6, 16), (6, 37), (6, 42), (7, 19), (7, 27), (7, 30), (8, 16), (8, 21), (8, 34), (8, 42), (8, 45), (9, 16), (9, 17), (9, 19), (9, 28), (9, 30), (9, 32), (9, 37), (10, 13), (10, 33), (11, 21), (11, 27), (11, 34), (11, 37), (12, 14), (12, 19), (12, 30), (12, 38), (12, 41), (13, 22), (13, 32), (14, 17), (14, 37), (15, 16), (15, 22), (15, 31), (15, 37), (16, 17), (17, 24), (17, 28), (18, 19), (18, 22), (18, 23), (18, 32), (18, 34), (18, 36), (18, 42), (19, 20), (19, 45), (21, 34), (21, 43), (22, 23), (22, 24), (22, 32), (22, 35), (23, 31), (23, 33), (23, 42), (24, 29), (24, 36), (25, 37), (25, 38), (25, 40), (26, 34), (27, 30), (27, 37), (28, 30), (28, 33), (28, 42), (28, 46), (30, 32), (30, 34), (30, 41), (31, 38), (32, 34), (32, 36), (34, 39), (34, 41), (35, 42), (37, 44), (38, 39), (38, 42), (38, 46), (40, 41)]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Determine the graph pattern
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for star graph
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(1) == 2 and degrees.count(2) == n - 2:
        return "Path"
    
    # Check for grid graph
    if nx.is_connected(G) and all(deg <= 4 for deg in degrees):
        return "Grid"
    
    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for clustered graph
    if nx.algorithms.community.greedy_modularity_communities(G):
        return "Clustered Graph"
    
    # Default to random graph
    return "Random Graph"

print(determine_graph_pattern(G))
```