```python
import networkx as nx

# Define the edge list
edge_list = [(0, 29), (0, 35), (0, 37), (0, 41), (1, 2), (1, 16), (1, 25), (1, 29), (1, 37), (1, 39), (1, 40), 
             (2, 12), (2, 22), (2, 30), (3, 5), (3, 8), (3, 17), (3, 21), (3, 33), (3, 38), (3, 41), (3, 42), 
             (4, 7), (4, 13), (4, 16), (4, 21), (4, 26), (4, 31), (5, 9), (5, 10), (5, 17), (5, 32), (6, 15), 
             (6, 18), (6, 27), (6, 28), (6, 41), (7, 19), (7, 32), (7, 34), (7, 39), (8, 9), (8, 11), (8, 14), 
             (8, 18), (8, 38), (9, 15), (9, 18), (9, 23), (9, 29), (10, 15), (10, 22), (10, 36), (11, 13), 
             (11, 16), (11, 28), (11, 31), (11, 39), (12, 30), (13, 15), (13, 43), (14, 18), (14, 31), (14, 38), 
             (15, 18), (15, 25), (15, 35), (15, 42), (16, 37), (16, 38), (17, 18), (18, 31), (19, 31), (19, 43), 
             (20, 22), (20, 32), (20, 37), (20, 38), (21, 38), (22, 30), (22, 34), (22, 37), (22, 43), (23, 27), 
             (24, 36), (27, 30), (27, 32), (27, 38), (27, 39), (27, 41), (28, 30), (29, 32), (29, 41), (30, 31), 
             (30, 34), (30, 40), (30, 43), (31, 32), (31, 36), (33, 34), (36, 43), (38, 42), (39, 43), (40, 42), 
             (41, 43)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Check graph patterns
def check_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star
    degrees = [deg for _, deg in G.degree]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for Path
    if nx.is_connected(G) and m == n - 1 and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for Grid
    sqrt_n = int(n**0.5)
    if sqrt_n * sqrt_n == n and m == 2 * n - 2:
        return "Grid"
    
    # Check for Complete
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered Graph
    if nx.number_connected_components(G) > 1:
        return "Clustered Graph"
    
    # Default to Random Graph
    return "Random Graph"

# Determine the graph pattern
print(check_graph_pattern(G))
```