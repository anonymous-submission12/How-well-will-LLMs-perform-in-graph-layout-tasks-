```python
import networkx as nx

# Define the graph data
edge_list = [(0, 12), (0, 20), (0, 25), (0, 30), (0, 36), (0, 38), (1, 4), (1, 8), 
             (1, 31), (1, 34), (1, 40), (2, 36), (3, 8), (3, 12), (3, 39), (4, 14), 
             (4, 19), (4, 32), (4, 40), (5, 6), (5, 13), (5, 23), (5, 33), (5, 41), 
             (6, 32), (7, 13), (8, 20), (8, 41), (8, 42), (8, 44), (9, 21), (9, 22), 
             (9, 24), (9, 33), (10, 21), (10, 25), (10, 32), (10, 39), (11, 20), 
             (12, 17), (12, 28), (12, 30), (13, 23), (13, 28), (13, 39), (13, 42), 
             (14, 17), (14, 30), (14, 43), (15, 24), (15, 38), (15, 39), (16, 25), 
             (16, 27), (16, 30), (17, 18), (17, 29), (17, 31), (17, 35), (18, 48), 
             (19, 41), (19, 43), (21, 25), (21, 34), (21, 40), (21, 45), (22, 23), 
             (22, 24), (23, 24), (23, 32), (24, 38), (24, 45), (24, 47), (25, 35), 
             (25, 47), (26, 28), (26, 48), (27, 34), (28, 37), (28, 48), (29, 44), 
             (30, 37), (30, 41), (30, 44), (32, 46), (33, 38), (35, 38), (35, 39), 
             (36, 41), (36, 48), (37, 44), (43, 47)]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Analyze the graph pattern
nodes = len(G.nodes)
edges = len(G.edges)

# Check for complete graph
if edges == nodes * (nodes - 1) // 2:
    print("Complete")
# Check for star graph
elif any(len(list(G.neighbors(node))) == nodes - 1 for node in G.nodes):
    print("Star")
# Check for cycle graph
elif edges == nodes and nx.is_connected(G) and all(degree == 2 for node, degree in G.degree()):
    print("Cycle")
# Check for path graph
elif edges == nodes - 1 and nx.is_connected(G) and (sum(degree == 1 for _, degree in G.degree()) == 2):
    print("Path")
# Check for grid graph
elif all(len(list(G.neighbors(node))) <= 4 for node in G.nodes):
    print("Grid")
# Check for clustered graph
elif nx.average_clustering(G) > 0.5:
    print("Clustered graph")
# Default to random graph
else:
    print("Random graph")
```