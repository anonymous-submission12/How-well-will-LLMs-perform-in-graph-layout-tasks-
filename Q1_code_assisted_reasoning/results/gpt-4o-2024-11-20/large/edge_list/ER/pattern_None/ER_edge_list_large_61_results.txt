```python
import networkx as nx

# Define the edge list
edge_list = [(0, 10), (0, 16), (0, 18), (0, 23), (0, 38), (0, 40), (0, 41), (1, 9), (1, 11), (1, 29), (1, 30), (1, 32), (1, 46), (2, 17), (2, 23), (2, 35), (2, 39), (2, 42), (3, 28), (4, 13), (4, 28), (4, 34), (4, 41), (5, 17), (5, 20), (5, 45), (6, 10), (6, 12), (6, 13), (6, 22), (6, 26), (6, 27), (7, 8), (7, 22), (7, 38), (8, 10), (8, 20), (8, 38), (8, 43), (9, 23), (9, 43), (9, 44), (10, 19), (10, 47), (11, 18), (11, 33), (11, 36), (11, 38), (11, 41), (12, 28), (12, 36), (12, 39), (12, 45), (13, 14), (13, 21), (13, 33), (14, 27), (14, 33), (14, 35), (15, 32), (15, 45), (16, 23), (16, 32), (17, 18), (17, 22), (17, 30), (17, 32), (17, 45), (18, 23), (18, 46), (18, 47), (19, 32), (19, 36), (19, 44), (20, 22), (20, 30), (20, 33), (20, 39), (20, 41), (20, 44), (22, 30), (22, 33), (22, 46), (23, 37), (23, 43), (23, 47), (24, 39), (25, 27), (25, 32), (25, 34), (25, 42), (26, 29), (26, 39), (27, 31), (27, 36), (27, 42), (27, 45), (28, 39), (28, 43), (28, 46), (29, 31), (30, 31), (31, 32), (31, 43), (31, 47), (32, 41), (32, 42), (33, 34), (33, 35), (34, 44), (35, 40), (35, 46), (36, 46), (38, 42), (38, 43), (39, 46), (39, 47), (40, 42), (41, 44), (41, 45), (44, 45)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Check for patterns
def determine_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for star graph
    degrees = [deg for _, deg in G.degree]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(1) == 2 and degrees.count(2) == n - 2:
        return "Path"
    
    # Check for grid graph
    if nx.is_connected(G) and nx.grid_graph(dim=[int(n**0.5), int(n**0.5)]).edges == G.edges:
        return "Grid"
    
    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for clustered graph
    if nx.algorithms.community.greedy_modularity_communities(G):
        return "Clustered graph"
    
    # Default to random graph
    return "Random graph"

print(determine_pattern(G))
```