```python
import networkx as nx

# Define the edge list
edge_list = [
    (0, 12), (0, 14), (0, 28), (0, 32), (0, 33), (0, 35), (0, 37), (0, 40),
    (1, 2), (1, 5), (1, 11), (1, 31), (2, 6), (2, 18), (2, 38),
    (3, 5), (3, 11), (3, 14), (3, 20), (3, 30), (3, 32), (3, 35), (3, 36), (3, 39),
    (4, 8), (4, 13), (4, 17), (4, 24), (4, 29), (4, 33), (4, 39),
    (5, 6), (5, 27), (5, 38), (5, 41), (6, 36), (6, 39),
    (7, 13), (7, 21), (7, 22), (8, 12), (8, 26),
    (9, 11), (9, 25), (9, 39), (10, 12), (10, 21), (10, 26),
    (11, 22), (12, 19), (12, 26), (12, 28), (12, 37),
    (13, 15), (13, 19), (13, 22), (13, 27), (13, 39),
    (14, 23), (14, 31), (14, 33), (14, 37),
    (15, 21), (15, 27), (15, 31), (15, 36),
    (16, 21), (16, 29), (16, 38),
    (17, 19), (17, 31), (17, 33), (17, 40),
    (18, 28), (18, 31), (18, 33), (18, 41),
    (19, 20), (19, 30), (20, 22), (20, 26),
    (21, 29), (21, 31), (21, 39),
    (22, 30), (23, 25), (23, 26), (23, 41),
    (24, 30), (25, 35),
    (26, 31), (26, 39),
    (27, 30), (27, 34), (27, 37),
    (29, 31),
    (30, 31), (30, 34), (30, 36),
    (31, 41), (34, 39), (34, 41),
    (35, 38), (35, 40),
    (39, 40)
]

# Create a graph using NetworkX
G = nx.Graph()
G.add_edges_from(edge_list)

# Check the graph type
if nx.is_star(G):
    print("Star")
elif nx.is_cycle(G):
    print("Cycle")
elif nx.is_path(G):
    print("Path")
elif nx.is_grid_2d(G):
    print("Grid")
elif all(G.number_of_edges() == len(G.nodes) * (len(G.nodes) - 1) // 2 for node in G):
    print("Complete")
elif nx.is_connected(G) and nx.average_clustering(G) > 0.5:
    print("Clustered")
else:
    print("Random")
```