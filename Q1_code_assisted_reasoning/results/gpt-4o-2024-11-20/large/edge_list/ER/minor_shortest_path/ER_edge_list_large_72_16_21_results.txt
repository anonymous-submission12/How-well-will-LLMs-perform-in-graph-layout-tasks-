```python
import networkx as nx

# Define the graph using edge list
edge_list = [(0, 5), (0, 9), (0, 13), (0, 25), (0, 26), (0, 41), (1, 4), (1, 8), (1, 10), (1, 17), (2, 12), (2, 13), (2, 25), (2, 41), (3, 10), (3, 28), (3, 31), (3, 37), (4, 12), (4, 26), (4, 38), (6, 9), (6, 17), (6, 24), (6, 38), (7, 13), (7, 15), (7, 25), (7, 36), (7, 39), (7, 41), (8, 13), (8, 21), (8, 29), (9, 28), (10, 14), (10, 36), (10, 37), (10, 38), (11, 13), (11, 19), (11, 38), (12, 14), (12, 16), (12, 19), (12, 31), (12, 41), (13, 20), (13, 27), (13, 28), (13, 41), (14, 16), (14, 34), (15, 27), (15, 32), (15, 34), (15, 40), (16, 17), (16, 22), (16, 29), (16, 34), (17, 25), (17, 26), (18, 25), (19, 22), (19, 24), (19, 25), (19, 26), (19, 41), (20, 24), (20, 31), (21, 27), (21, 31), (22, 37), (22, 39), (23, 28), (24, 37), (25, 26), (25, 38), (27, 37), (28, 35), (29, 41), (30, 36), (31, 33), (32, 33), (32, 37), (33, 35), (33, 39), (34, 38), (36, 40)]

# Create a graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Calculate the shortest path length between node '16' and '21'
shortest_path_length = nx.shortest_path_length(G, source=16, target=21)

# Print the result
print(shortest_path_length)
```