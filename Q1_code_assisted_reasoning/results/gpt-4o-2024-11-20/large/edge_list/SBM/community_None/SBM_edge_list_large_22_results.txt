```python
import networkx as nx
from networkx.algorithms.community import greedy_modularity_communities

# Define the edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (2, 3), (2, 4), (2, 5), (2, 6), (2, 9), (2, 10), (2, 11), (3, 8), (3, 11), (3, 27), (4, 5), (4, 8), (4, 11), (5, 7), (5, 9), (5, 10), (5, 11), (6, 7), (6, 8), (6, 10), (6, 11), (6, 36), (7, 8), (7, 10), (7, 11), (7, 16), (7, 18), (7, 29), (8, 10), (8, 11), (9, 10), (12, 13), (12, 14), (12, 16), (12, 19), (12, 20), (12, 21), (12, 22), (13, 14), (13, 17), (13, 22), (13, 23), (13, 29), (13, 31), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (14, 21), (14, 22), (15, 16), (15, 22), (15, 23), (16, 17), (16, 18), (16, 21), (16, 22), (16, 23), (16, 29), (17, 18), (17, 19), (17, 20), (17, 21), (17, 22), (17, 23), (18, 19), (18, 21), (18, 22), (19, 20), (19, 23), (20, 21), (20, 22), (21, 22), (21, 23), (22, 23), (24, 28), (24, 29), (24, 30), (25, 27), (25, 28), (25, 29), (25, 30), (25, 31), (26, 29), (26, 31), (27, 29), (27, 31), (28, 29), (28, 31), (29, 30), (29, 31), (30, 31), (32, 24), (32, 25), (32, 26), (32, 27), (32, 28), (32, 29), (32, 30), (32, 35), (33, 25), (33, 26), (33, 30), (33, 31), (33, 35), (34, 25), (34, 26), (34, 27), (34, 28), (34, 30), (35, 24), (35, 26), (35, 27), (35, 28), (35, 31), (35, 47), (36, 37), (36, 38), (36, 39), (36, 40), (36, 41), (36, 42), (36, 43), (36, 44), (36, 46), (37, 38), (37, 40), (37, 41), (37, 43), (37, 44), (37, 46), (38, 39), (38, 40), (38, 41), (38, 42), (38, 43), (38, 44), (38, 45), (38, 46), (38, 47), (39, 43), (39, 44), (39, 46), (39, 47), (40, 42), (40, 44), (40, 46), (41, 42), (41, 43), (41, 45), (41, 47), (42, 44), (42,45), (42, 46), (42, 47), (43, 44), (43, 47), (45, 46), (45, 47), (46, 47)]

# Create the graph
G = nx.Graph(edge_list)

# Detect communities using the greedy modularity method
communities = greedy_modularity_communities(G)

# Print the number of communities
print(len(communities))
```