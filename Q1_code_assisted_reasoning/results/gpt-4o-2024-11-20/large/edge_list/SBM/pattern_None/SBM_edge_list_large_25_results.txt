```python
import networkx as nx

# Define the edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 12), (0, 15), (0, 16), (0, 18), (0, 19), (0, 20), (0, 25), (1, 9), (1, 10), (1, 11), (1, 16), (1, 18), (1, 20), (2, 3), (2, 7), (2, 10), (2, 11), (2, 12), (2, 14), (2, 15), (2, 16), (2, 17), (2, 20), (2, 29), (3, 4), (3, 7), (3, 8), (3, 14), (3, 18), (3, 20), (4, 5), (4, 6), (4, 8), (4, 9), (4, 10), (4, 12), (4, 13), (4, 15), (4, 18), (4, 19), (4, 20), (5, 6), (5, 7), (5, 9), (5, 14), (5, 15), (5, 16), (5, 17), (5, 18), (5, 19), (5, 20), (5, 32), (6, 7), (6, 9), (6, 11), (6, 16), (7, 8), (7, 12), (7, 13), (7, 14), (7, 15), (7, 16), (7, 17), (7, 19), (8, 9), (8, 12), (8, 13), (8, 14), (8, 16), (8, 17), (8, 19), (8, 20), (9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 18), (9, 19), (9, 20), (10, 11), (10, 14), (10, 15), (10, 18), (10, 19), (10, 20), (11, 12), (11, 14), (11, 15), (11, 16), (11, 18), (12, 13), (12, 14), (12, 16), (12, 17), (12, 20), (12, 29), (13, 14), (13, 15), (13, 19), (14, 15), (14, 17), (14, 18), (14, 20), (15, 16), (15, 17), (15, 18), (15, 19), (15, 20), (16, 18), (16, 19), (16, 35), (17, 29), (17, 34), (18, 20), (21, 22), (21, 24), (21, 25), (21, 26), (21, 27), (21, 31), (21, 33), (21, 34), (21, 36), (21, 38), (21, 39), (21, 40), (22, 23), (22, 25), (22, 26), (22, 27), (22, 28), (22, 29), (22, 30), (22, 32), (22, 33), (22, 34), (22, 35), (22, 36), (22, 37), (22, 39), (22, 40), (23, 24), (23, 25), (23, 26), (23, 27), (23, 28), (23, 30), (23, 31), (23, 35), (23, 39), (23, 41), (24, 26), (24, 27), (24, 28), (24, 29), (24, 30), (24, 31), (24, 33), (24, 34), (24, 35), (24, 36), (24, 37), (24, 41), (25, 26), (25, 28), (25, 29), (25, 31), (25, 32), (25, 33), (25, 34), (25, 40), (26, 27), (26, 28), (26, 29), (26, 30), (26, 31), (26, 32), (26, 33), (26, 34), (26, 35), (26, 37), (26, 38), (26, 39), (26, 40), (27, 28), (27, 32), (27, 33), (27, 36), (27, 37), (27, 40), (27, 41), (28, 29), (28, 30), (28, 31), (28, 32), (28, 33), (28, 36), (28, 37), (28, 38), (28, 39), (28, 40), (29, 30), (29, 33), (29, 34), (29, 35), (29, 36), (29, 37), (29, 38), (29, 40), (29, 41), (30, 33), (30, 34), (30, 37), (30, 40), (31, 34), (31, 38), (32, 33), (32, 35), (32, 37), (32, 38), (32, 41), (33, 35), (33, 36), (33, 37), (33, 38), (33, 39), (33, 40), (34, 37), (34, 38), (34, 39), (35, 36), (35, 37), (35, 39), (35, 40), (35, 41), (36, 37), (36, 39), (37, 38), (38, 40), (39, 41), (40, 41)]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Determine the graph pattern
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for star graph
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(1) == 2 and degrees.count(2) == n - 2:
        return "Path"
    
    # Check for grid graph
    if nx.is_connected(G) and nx.grid_2d_graph(int(n**0.5), int(n**0.5)).edges == G.edges:
        return "Grid"
    
    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for clustered graph
    if nx.average_clustering(G) > 0.5:
        return "Clustered graph"
    
    # Default to random graph
    return "Random graph"

print(determine_graph_pattern(G))
```