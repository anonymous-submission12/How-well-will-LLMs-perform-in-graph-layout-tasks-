```python
import networkx as nx

# Define the edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 8), (0, 19), (0, 41), (1, 3), (1, 5), (1, 7), (1, 8), (1, 30), 
    (2, 3), (2, 7), (2, 8), (2, 29), (3, 6), (3, 7), (4, 6), (4, 8), (5, 6), (5, 7), (5, 22), (6, 8), 
    (6, 21), (7, 11), (9, 10), (9, 15), (9, 16), (10, 12), (10, 14), (10, 15), (10, 16), (10, 30), 
    (11, 12), (11, 13), (11, 14), (11, 15), (11, 16), (11, 17), (12, 13), (12, 14), (12, 15), (12, 16), 
    (13, 14), (13, 15), (13, 17), (14, 15), (14, 16), (15, 20), (16, 17), (18, 19), (18, 21), (18, 22), 
    (18, 23), (18, 25), (19, 20), (19, 21), (19, 22), (19, 23), (19, 24), (20, 22), (20, 23), (20, 24), 
    (20, 25), (21, 22), (21, 23), (21, 24), (22, 23), (23, 24), (23, 25), (24, 25), (26, 28), (26, 29), 
    (26, 30), (26, 31), (27, 29), (28, 31), (29, 31), (32, 27), (32, 28), (32, 29), (32, 30), (32, 31), 
    (33, 27), (33, 29), (33, 31), (34, 35), (34, 37), (34, 38), (34, 39), (34, 40), (35, 36), (35, 38), 
    (35, 39), (35, 40), (35, 41), (36, 37), (36, 38), (36, 39), (37, 39), (37, 41), (38, 39), (38, 40), 
    (38, 41)
]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Check for graph patterns
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star
    degrees = [deg for _, deg in G.degree]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for Path
    if nx.is_connected(G) and m == n - 1 and degrees.count(1) == 2 and degrees.count(2) == n - 2:
        return "Path"
    
    # Check for Grid
    if nx.is_connected(G) and nx.grid_graph(dim=[int(n**0.5), int(n**0.5)]).edges == G.edges:
        return "Grid"
    
    # Check for Complete
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered Graph
    if nx.number_connected_components(G) > 1:
        return "Clustered Graph"
    
    # Default to Random Graph
    return "Random Graph"

# Determine the graph pattern
print(determine_graph_pattern(G))
```