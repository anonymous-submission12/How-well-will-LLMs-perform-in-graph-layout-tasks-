```python
import networkx as nx

# Define the edge list
edge_list = [(0, 3), (0, 4), (0, 5), (0, 6), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 20), (1, 2), (1, 4), (1, 5), (1, 10), (1, 12), (2, 3), (2, 4), (2, 5), (2, 6), (2, 10), (2, 11), (2, 12), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 12), (4, 7), (4, 8), (4, 9), (4, 11), (4, 12), (4, 44), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 23), (5, 46), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12), (7, 8), (7, 9), (7, 10), (7, 11), (7, 12), (8, 10), (8, 11), (9, 10), (9, 12), (10, 11), (10, 12), (13, 14), (13, 16), (13, 23), (13, 24), (13, 25), (14, 15), (14, 18), (14, 19), (14, 20), (14, 21), (14, 22), (14, 23), (15, 18), (15, 24), (15, 25), (15, 45), (16, 17), (16, 18), (16, 19), (16, 20), (16, 21), (16, 25), (17, 18), (17, 19), (17, 20), (17, 21), (17, 24), (17, 25), (18, 22), (18, 24), (19, 20), (19, 23), (19, 24), (19, 38), (20, 22), (20, 24), (20, 25), (21, 22), (21, 23), (21, 25), (22, 25), (24, 25), (26, 27), (26, 28), (26, 29), (26, 30), (26, 31), (27, 28), (27, 29), (27, 30), (29, 30), (29, 31), (30, 31), (31, 40), (32, 27), (32, 28), (32, 30), (32, 31), (32, 34), (32, 36), (32, 37), (33, 28), (33, 29), (33, 30), (33, 34), (33, 36), (34, 27), (34, 28), (34, 29), (34, 30), (34, 35), (35, 27), (35, 29), (35, 30), (35, 31), (35, 36), (36, 26), (36, 28), (36, 29), (36, 30), (36, 31), (37, 26), (37, 28), (37, 29), (37, 43), (38, 41), (38, 43), (38, 44), (38, 45), (38, 46), (38, 47), (38, 49), (39, 42), (39, 44), (39, 45), (39, 47), (39, 48), (39, 49), (40, 41), (40, 42), (40, 43), (40, 45), (40, 46), (40, 47), (40, 49), (41, 42), (41, 43), (41, 46), (41, 47), (41, 48), (41, 49), (42, 43), (42, 46), (42, 47), (42, 48), (43, 44), (43, 45), (43, 46), (43, 47), (43, 49), (44, 45), (44, 46), (44, 47), (45, 47), (46, 47), (46, 48), (46, 49), (47, 48), (47, 49), (48, 49)]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Check the graph pattern
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for star graph
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for _, deg in G.degree()):
        return "Cycle"
    
    # Check for path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(1) == 2 and all(deg == 2 for _, deg in G.degree() if deg != 1):
        return "Path"
    
    # Check for grid graph
    if nx.is_connected(G) and nx.grid_graph(dim=[int(n**0.5), int(n**0.5)]).edges == G.edges:
        return "Grid"
    
    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for clustered graph
    if nx.algorithms.community.greedy_modularity_communities(G):
        return "Clustered graph"
    
    # Default to random graph
    return "Random graph"

print(determine_graph_pattern(G))
```