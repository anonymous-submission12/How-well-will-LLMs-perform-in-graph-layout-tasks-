```python
import networkx as nx

# Define the edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 8), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 3), (2, 4), (2, 5), (2, 6), (2, 8), (3, 4), (3, 7), (3, 8), (3, 20), (3, 35), (4, 6), (4, 7), (4, 8), (4, 24), (5, 6), (5, 7), (5, 8), (5, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (10, 12), (10, 13), (10, 16), (10, 17), (10, 36), (11, 14), (11, 15), (11, 16), (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (12, 38), (13, 14), (13, 15), (13, 16), (13, 17), (14, 15), (14, 16), (15, 16), (15, 17), (16, 17), (16, 35), (17, 24), (18, 20), (18, 21), (18, 22), (18, 23), (18, 24), (19, 20), (19, 22), (19, 23), (19, 24), (19, 25), (20, 22), (20, 23), (20, 24), (20, 25), (21, 22), (21, 24), (21, 25), (21, 30), (23, 25), (26, 27), (26, 29), (26, 30), (26, 39), (27, 28), (28, 29), (28, 30), (28, 31), (28, 34), (29, 30), (32, 28), (32, 29), (32, 31), (32, 33), (33, 29), (33, 30), (34, 35), (34, 36), (34, 40), (34, 41), (35, 36), (35, 37), (35, 38), (35, 40), (35, 41), (36, 38), (36, 40), (36, 41), (37, 39), (37, 40), (37, 41), (38, 39), (38, 41), (39, 40), (40, 41)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Check for patterns
def determine_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for Path
    if nx.is_connected(G) and m == n - 1 and degrees.count(1) == 2 and all(deg <= 2 for deg in degrees):
        return "Path"
    
    # Check for Grid
    if nx.is_connected(G) and nx.grid_graph(dim=[int(n**0.5), int(n**0.5)]).edges == G.edges:
        return "Grid"
    
    # Check for Complete
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered Graph
    if nx.number_connected_components(G) > 1:
        return "Clustered Graph"
    
    # Default to Random Graph
    return "Random Graph"

print(determine_pattern(G))
```