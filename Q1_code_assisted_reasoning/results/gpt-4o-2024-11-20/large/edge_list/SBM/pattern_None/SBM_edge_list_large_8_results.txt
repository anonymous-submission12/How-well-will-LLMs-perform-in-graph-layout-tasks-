```python
import networkx as nx

# Define the edge list
edge_list = [(0, 3), (0, 4), (0, 8), (1, 2), (1, 3), (1, 4), (1, 6), (1, 32), (2, 3), (2, 4), (2, 5), (2, 6), (2, 8), (2, 9), (3, 4), (3, 6), (3, 7), (3, 8), (3, 9), (4, 7), (4, 8), (4, 9), (5, 6), (6, 7), (7, 10), (10, 11), (10, 12), (10, 13), (10, 16), (10, 18), (11, 12), (11, 15), (11, 16), (11, 17), (11, 18), (11, 19), (12, 13), (12, 14), (12, 17), (12, 19), (13, 18), (13, 37), (14, 15), (14, 18), (14, 19), (14, 25), (15, 16), (15, 17), (16, 17), (16, 18), (17, 18), (17, 19), (19, 21), (19, 37), (20, 21), (20, 25), (20, 26), (20, 27), (20, 28), (21, 27), (21, 28), (21, 45), (22, 23), (22, 24), (22, 25), (22, 26), (23, 25), (23, 27), (23, 28), (24, 26), (24, 27), (24, 28), (24, 30), (25, 27), (26, 27), (26, 28), (27, 28), (30, 31), (32, 29), (32, 31), (32, 34), (32, 35), (32, 37), (33, 30), (33, 34), (33, 35), (33, 36), (34, 31), (34, 35), (34, 37), (35, 29), (35, 31), (35, 36), (35, 37), (36, 29), (36, 30), (36, 31), (37, 29), (37, 30), (38, 40), (38, 42), (38, 45), (39, 41), (39, 43), (39, 45), (39, 46), (40, 42), (40, 44), (40, 45), (40, 46), (41, 42), (41, 43), (41, 45), (42, 43), (42, 45), (42, 46), (43, 44), (43, 45), (44, 45), (44, 46), (45, 46)]

# Create the graph
G = nx.Graph(edge_list)

# Check graph patterns
def check_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star
    degrees = [deg for _, deg in G.degree]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle
    if nx.is_connected(G) and m == n and all(deg == 2 for _, deg in G.degree):
        return "Cycle"
    
    # Check for Path
    if nx.is_connected(G) and m == n - 1 and degrees.count(1) == 2 and all(deg <= 2 for _, deg in G.degree):
        return "Path"
    
    # Check for Grid
    if nx.is_connected(G) and all(deg <= 4 for _, deg in G.degree):
        return "Grid"
    
    # Check for Complete
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered
    if nx.number_connected_components(G) > 1:
        return "Clustered"
    
    # Default to Random
    return "Random"

# Determine the graph pattern
print(check_graph_pattern(G))
```