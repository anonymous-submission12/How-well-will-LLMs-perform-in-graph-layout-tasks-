```python
import networkx as nx

# Define the edge list
edge_list = [(0, 1), (0, 3), (0, 4), (0, 5), (0, 7), (0, 9), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 9), (2, 5), (2, 8), (2, 14), (3, 6), (3, 7), (3, 8), (3, 9), (3, 24), (4, 7), (4, 8), (4, 33), (5, 9), (6, 9), (7, 8), (8, 9), (8, 13), (9, 21), (10, 12), (10, 14), (10, 16), (10, 17), (10, 26), (11, 12), (11, 13), (11, 14), (11, 16), (11, 19), (12, 14), (12, 15), (12, 16), (12, 18), (12, 25), (13, 15), (14, 15), (14, 16), (14, 17), (14, 18), (15, 17), (16, 18), (17, 18), (20, 21), (20, 23), (20, 24), (20, 25), (20, 27), (20, 28), (20, 29), (21, 22), (21, 23), (21, 24), (21, 25), (21, 26), (21, 28), (22, 23), (22, 24), (22, 25), (22, 27), (22, 28), (23, 24), (23, 25), (23, 26), (23, 28), (23, 29), (23, 32), (24, 26), (24, 29), (25, 26), (25, 28), (25, 34), (26, 27), (27, 29), (27, 48), (28, 29), (32, 30), (32, 31), (32, 33), (32, 34), (32, 35), (32, 36), (32, 37), (33, 30), (33, 34), (33, 35), (33, 36), (33, 37), (33, 38), (34, 30), (34, 31), (34, 35), (34, 36), (34, 37), (35, 31), (35, 36), (35, 37), (35, 38), (35, 39), (36, 30), (36, 31), (36, 37), (36, 39), (36, 42), (37, 38), (38, 30), (39, 31), (40, 41), (40, 43), (40, 45), (40, 47), (41, 42), (41, 44), (41, 48), (42, 47), (42, 48), (43, 45), (43, 46), (43, 47), (44, 46), (45, 46), (45, 47), (46, 47), (47, 48)]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Determine the graph pattern
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for star graph
    degrees = [deg for _, deg in G.degree]
    if degrees.count(n - 1) == 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_connected(G) and all(deg == 2 for _, deg in G.degree):
        return "Cycle"
    
    # Check for path graph
    if nx.is_connected(G) and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for grid graph
    if nx.grid_graph(dim=[int(n**0.5), int(n**0.5)]).edges == G.edges:
        return "Grid"
    
    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for clustered graph (heuristic: high clustering coefficient)
    if nx.average_clustering(G) > 0.5:
        return "Clustered graph"
    
    # Default to random graph
    return "Random graph"

print(determine_graph_pattern(G))
```