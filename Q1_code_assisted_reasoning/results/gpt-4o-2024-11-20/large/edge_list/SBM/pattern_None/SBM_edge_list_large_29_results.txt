```python
import networkx as nx

# Define the edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 7), (0, 9), (0, 12), (0, 13), (0, 16), (1, 2), (1, 5), (1, 7), (1, 8), (1, 9), (1, 12), (1, 14), (2, 4), (2, 5), (2, 7), (2, 9), (2, 10), (2, 11), (2, 12), (3, 5), (3, 7), (3, 9), (3, 10), (3, 11), (3, 14), (3, 16), (3, 46), (4, 5), (4, 6), (4, 7), (4, 9), (4, 10), (4, 11), (4, 13), (4, 14), (4, 15), (4, 16), (5, 8), (5, 10), (5, 12), (5, 13), (5, 14), (6, 7), (6, 8), (6, 10), (6, 12), (6, 13), (6, 15), (6, 16), (7, 10), (7, 11), (7, 14), (7, 15), (7, 16), (8, 10), (8, 11), (8, 12), (8, 13), (8, 16), (8, 32), (8, 37), (8, 43), (9, 10), (9, 11), (9, 13), (9, 14), (9, 32), (10, 11), (10, 13), (10, 14), (10, 15), (11, 12), (11, 13), (11, 14), (11, 16), (12, 14), (12, 15), (12, 16), (13, 14), (13, 15), (14, 23), (16, 35), (17, 18), (17, 20), (17, 22), (17, 24), (17, 25), (17, 26), (17, 30), (17, 41), (18, 20), (18, 22), (18, 24), (18, 25), (18, 28), (18, 30), (18, 31), (19, 20), (19, 21), (19, 22), (19, 23), (19, 24), (19, 25), (19, 27), (19, 30), (19, 31), (20, 22), (20, 23), (20, 24), (20, 25), (20, 27), (20, 28), (20, 30), (21, 23), (21, 24), (21, 25), (21, 26), (21, 27), (21, 28), (21, 29), (21, 30), (21, 31), (22, 24), (22, 25), (22, 27), (22, 29), (22, 30), (22, 31), (23, 24), (23, 25), (23, 26), (23, 27), (23, 28), (23, 29), (23, 30), (24, 25), (24, 30), (24, 31), (25, 26), (25, 27), (25, 29), (25, 30), (25, 31), (26, 27), (26, 29), (26, 31), (27, 29), (27, 30), (27, 31), (28, 30), (28, 47), (29, 31), (30, 31), (32, 20), (32, 21), (32, 26), (32, 27), (32, 28), (33, 18), (33, 20), (33, 22), (33, 23), (33, 24), (33, 25), (33, 26), (33, 27), (33, 28), (33, 30), (34, 35), (34, 37), (34, 38), (34, 39), (34, 40), (34, 41), (34, 43), (34, 44), (34, 45), (34, 46), (34, 48), (35, 38), (35, 39), (35, 41), (35, 42), (35, 44), (35, 48), (35, 49), (36, 37), (36, 38), (36, 40), (36, 41), (36, 42), (36, 43), (36, 44), (36, 45), (36, 47), (36, 48), (36, 49), (37, 40), (37, 41), (37, 42), (37, 43), (37, 44), (37, 45), (37, 46), (37, 49), (38, 39), (38, 40), (38, 41), (38, 42), (38, 43), (38, 45), (38, 48), (38, 49), (39, 41), (39, 42), (39, 47), (39, 48), (39, 49), (40, 41), (40, 42), (40, 43), (40, 46), (40, 47), (41, 42), (41, 44), (41, 47), (42, 44), (42, 47), (42, 48), (43, 45), (43, 46), (43, 48), (43, 49), (44, 46), (44, 48), (45, 46), (45, 47), (45, 48), (46, 47), (46, 49), (48, 49)]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Determine the graph pattern
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for star graph
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(1) == 2 and degrees.count(2) == n - 2:
        return "Path"
    
    # Check for grid graph
    if nx.is_connected(G) and all(deg in [2, 3, 4] for deg in degrees):
        return "Grid"
    
    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for clustered graph
    if nx.algorithms.community.modularity(G, [list(G.nodes)]) < 0.5:
        return "Clustered graph"
    
    # Default to random graph
    return "Random graph"

print(determine_graph_pattern(G))
```