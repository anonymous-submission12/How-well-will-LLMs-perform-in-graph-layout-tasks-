```python
import networkx as nx

# Input graph data as edge list
edges = [(0, 2), (0, 3), (0, 6), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), 
         (1, 2), (1, 3), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), 
         (1, 12), (2, 5), (2, 7), (2, 8), (2, 9), (3, 4), (3, 5), (3, 7), 
         (3, 8), (3, 12), (4, 5), (4, 6), (4, 7), (4, 9), (4, 11), (4, 12), 
         (4, 30), (5, 6), (5, 7), (5, 8), (5, 10), (5, 11), (5, 12), (6, 8), 
         (6, 9), (6, 11), (6, 12), (7, 8), (7, 9), (7, 11), (7, 12), (9, 14), 
         (9, 26), (10, 11), (10, 12), (10, 20), (11, 12), (13, 14), (13, 20), 
         (13, 21), (13, 22), (13, 24), (14, 16), (14, 18), (14, 19), (14, 20), 
         (14, 23), (14, 24), (15, 16), (15, 19), (15, 20), (15, 21), (15, 24), 
         (16, 19), (16, 23), (17, 19), (17, 21), (17, 22), (17, 23), (18, 19), 
         (18, 20), (18, 22), (19, 23), (20, 22), (20, 23), (20, 24), (21, 23), 
         (22, 24), (23, 24), (25, 27), (25, 28), (25, 29), (25, 31), (26, 27), 
         (26, 30), (27, 28), (27, 30), (27, 31), (28, 29), (28, 31), (29, 30), 
         (29, 31), (30, 31), (31, 39), (32, 25), (32, 26), (32, 27), (32, 28), 
         (32, 29), (32, 30), (32, 31), (32, 33), (32, 34), (32, 36), (32, 39), 
         (33, 26), (33, 29), (33, 31), (33, 34), (33, 35), (33, 36), (34, 25), 
         (34, 29), (34, 36), (35, 25), (35, 26), (35, 29), (35, 30), (35, 31), 
         (36, 25), (36, 26), (36, 30), (36, 31), (37, 38), (37, 39), (37, 40), 
         (37, 41), (37, 43), (37, 44), (37, 45), (37, 47), (37, 48), (38, 39), 
         (38, 40), (38, 42), (38, 43), (38, 46), (38, 47), (38, 48), (39, 41), 
         (39, 44), (40, 42), (40, 43), (40, 45), (41, 42), (41, 43), (41, 46), 
         (41, 47), (41, 48), (42, 43), (42, 44), (42, 45), (42, 46), (42, 47), 
         (43, 44), (43, 45), (43, 46), (43, 47), (44, 47), (44, 48), (45, 48), 
         (46, 48)]

# Build graph
G = nx.Graph()
G.add_edges_from(edges)

# Determine the graph type
def is_star_graph(G):
    degrees = dict(G.degree())
    center_nodes = sum(deg == len(G.nodes) - 1 for deg in degrees.values())
    leaf_nodes = sum(deg == 1 for deg in degrees.values())
    return center_nodes == 1 and leaf_nodes == len(G.nodes) - 1

def is_cycle_graph(G):
    return nx.cycle_basis(G) != [] and nx.is_connected(G) and len(G.edges) == len(G.nodes)

def is_path_graph(G):
    endpoints = sum(deg == 1 for _, deg in G.degree())
    return endpoints == 2 and nx.is_connected(G) and len(G.edges) == len(G.nodes) - 1

def is_grid_graph(G):
    # Checks if the graph is roughly a grid shape
    try:
        nx.grid_2d_graph(int(len(G.nodes)**0.5), int(len(G.nodes)**0.5))
        return True
    except:
        return False

def is_complete_graph(G):
    return nx.is_connected(G) and nx.density(G) == 1.0

def is_clustered_graph(G):
    return nx.average_clustering(G) > 0.5 and not is_complete_graph(G)

def is_random_graph(G):
    return not is_star_graph(G) and not is_cycle_graph(G) and not is_path_graph(G) and not is_grid_graph(G) and not is_complete_graph(G) and not is_clustered_graph(G)

if is_star_graph(G):
    print("Star")
elif is_cycle_graph(G):
    print("Cycle")
elif is_path_graph(G):
    print("Path")
elif is_grid_graph(G):
    print("Grid")
elif is_complete_graph(G):
    print("Complete")
elif is_clustered_graph(G):
    print("Clustered Graph")
elif is_random_graph(G):
    print("Random Graph")
```