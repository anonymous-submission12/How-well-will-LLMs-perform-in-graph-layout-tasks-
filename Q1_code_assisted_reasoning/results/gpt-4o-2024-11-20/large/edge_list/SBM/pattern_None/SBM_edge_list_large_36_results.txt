```python
import networkx as nx

# Define the edge list
edge_list = [(0, 2), (0, 4), (0, 6), (0, 36), (1, 3), (1, 5), (1, 33), (2, 3), (2, 4), (2, 5), (3, 5), (3, 6), (4, 5), (4, 6), (5, 6), (6, 32), (7, 8), (7, 11), (7, 13), (7, 27), (8, 10), (8, 11), (8, 12), (8, 13), (8, 32), (9, 10), (9, 11), (9, 12), (10, 13), (11, 12), (11, 13), (11, 36), (12, 26), (14, 15), (14, 16), (14, 18), (15, 16), (15, 17), (15, 18), (15, 19), (15, 20), (15, 26), (16, 18), (17, 18), (17, 19), (17, 20), (18, 19), (19, 20), (21, 24), (21, 25), (21, 26), (21, 27), (22, 24), (22, 26), (23, 24), (23, 27), (24, 25), (24, 26), (25, 26), (25, 27), (26, 27), (28, 29), (28, 30), (29, 31), (29, 38), (30, 31), (32, 28), (32, 31), (33, 28), (33, 29), (34, 28), (34, 30), (34, 31), (35, 36), (35, 39), (35, 40), (36, 38), (36, 39), (36, 40), (37, 38), (39, 40)]

# Create a graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Check for patterns
def check_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)

    # Check for star graph
    degrees = [deg for _, deg in G.degree()]
    if degrees.count(n - 1) == 1 and degrees.count(1) == n - 1:
        return "Star"

    # Check for cycle graph
    if nx.is_connected(G) and all(deg == 2 for deg in degrees):
        return "Cycle"

    # Check for path graph
    if nx.is_connected(G) and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"

    # Check for grid graph
    if nx.is_connected(G) and all(deg in [2, 3, 4] for deg in degrees):
        return "Grid"

    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"

    # Check for clustered graph
    clustering_coeffs = nx.clustering(G)
    avg_clustering = sum(clustering_coeffs.values()) / n
    if avg_clustering > 0.5:
        return "Clustered graph"

    # Default to random graph
    return "Random graph"

# Determine the graph pattern
print(check_graph_pattern(G))
```