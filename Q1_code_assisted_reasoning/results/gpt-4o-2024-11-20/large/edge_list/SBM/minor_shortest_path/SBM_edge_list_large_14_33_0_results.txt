```python
import networkx as nx

# Define the graph using the edge list
edge_list = [(0, 1), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 11), (0, 12), (1, 2), (1, 3), (1, 7), (1, 8), (1, 11), (1, 13), (2, 4), (2, 5), (2, 8), (2, 9), (2, 11), (2, 12), (2, 13), (3, 5), (3, 8), (3, 12), (4, 6), (4, 7), (4, 11), (4, 12), (4, 36), (5, 6), (5, 7), (5, 8), (5, 10), (5, 11), (5, 12), (5, 13), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 13), (7, 8), (7, 9), (7, 11), (7, 12), (8, 9), (8, 11), (8, 12), (8, 13), (9, 10), (9, 12), (10, 11), (12, 13), (12, 24), (13, 21), (14, 15), (14, 20), (14, 21), (14, 22), (14, 24), (14, 27), (15, 16), (15, 17), (15, 18), (15, 19), (15, 20), (15, 21), (15, 22), (15, 23), (15, 26), (16, 17), (16, 19), (16, 20), (16, 23), (16, 24), (16, 25), (16, 26), (16, 27), (17, 18), (17, 19), (17, 21), (17, 22), (17, 24), (17, 25), (18, 21), (18, 23), (18, 24), (18, 25), (18, 26), (19, 20), (19, 23), (19, 24), (19, 25), (20, 21), (20, 22), (20, 25), (20, 27), (21, 22), (21, 24), (21, 25), (21, 26), (21, 27), (22, 23), (22, 24), (22, 26), (23, 24), (23, 25), (23, 26), (24, 26), (24, 27), (25, 26), (25, 27), (26, 27), (28, 30), (28, 31), (29, 31), (30, 31), (32, 28), (32, 29), (32, 34), (32, 35), (32, 36), (32, 37), (32, 38), (32, 39), (32, 41), (33, 28), (33, 29), (33, 30), (33, 31), (33, 37), (33, 38), (33, 39), (33, 40), (34, 28), (34, 29), (34, 31), (34, 36), (34, 37), (34, 38), (34, 40), (34, 41), (35, 28), (35, 29), (35, 30), (35, 36), (35, 39), (35, 40), (36, 28), (36, 30), (36, 31), (36, 40), (36, 41), (37, 28), (37, 29), (37, 31), (37, 41), (38, 29), (38, 30), (38, 39), (38, 40), (39, 29), (39, 30), (40, 29), (40, 31), (41, 28)]

# Create a graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Calculate the shortest path length between node '33' and '0'
shortest_path_length = nx.shortest_path_length(G, source=33, target=0)

# Print the result
print(shortest_path_length)
```