```python
import networkx as nx

# Define the graph using edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 7), (1, 4), (1, 5), (1, 7), (2, 5), (2, 6), (2, 24), (2, 44), (3, 4), (3, 6), (3, 36), (4, 7), (4, 15), (4, 36), (4, 38), (4, 40), (5, 6), (5, 7), (6, 7), (6, 24), (8, 9), (8, 10), (8, 11), (8, 12), (8, 13), (8, 14), (8, 15), (9, 10), (9, 11), (9, 13), (9, 15), (9, 21), (10, 13), (10, 14), (11, 13), (11, 14), (11, 15), (11, 30), (12, 13), (13, 15), (14, 15), (16, 21), (17, 18), (17, 19), (17, 21), (17, 22), (18, 19), (18, 20), (18, 22), (18, 23), (19, 20), (20, 21), (20, 22), (21, 22), (22, 23), (24, 25), (24, 26), (24, 27), (24, 29), (24, 31), (25, 27), (25, 30), (26, 27), (26, 28), (26, 30), (26, 31), (27, 28), (27, 29), (27, 31), (28, 29), (29, 30), (29, 31), (30, 31), (32, 35), (32, 36), (32, 39), (32, 42), (33, 34), (33, 35), (33, 36), (33, 38), (34, 35), (34, 36), (34, 37), (34, 39), (35, 36), (35, 37), (35, 39), (36, 39), (37, 38), (37, 39), (38, 39), (40, 42), (40, 45), (40, 46), (40, 47), (41, 42), (41, 43), (41, 44), (41, 45), (42, 43), (42, 44), (42, 47), (43, 44), (45, 46), (45, 47), (46, 47)]

# Create a graph
G = nx.Graph(edge_list)

# Calculate the shortest path length between node '38' and '24'
result = nx.shortest_path_length(G, source=38, target=24)

# Print the result
print(result)
```