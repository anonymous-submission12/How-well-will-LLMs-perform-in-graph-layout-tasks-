```python
def determine_graph_pattern(edge_list):
    # Extract all nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    
    # Count the degree of each node
    degree_count = {node: 0 for node in nodes}
    for edge in edge_list:
        degree_count[edge[0]] += 1
        degree_count[edge[1]] += 1
    
    # Check for Star pattern
    if max(degree_count.values()) == len(nodes) - 1 and list(degree_count.values()).count(1) == len(nodes) - 1:
        return "Star"
    
    # Check for Cycle pattern
    if all(degree == 2 for degree in degree_count.values()) and len(edge_list) == len(nodes):
        return "Cycle"
    
    # Check for Path pattern
    if list(degree_count.values()).count(1) == 2 and all(degree <= 2 for degree in degree_count.values()):
        return "Path"
    
    # Check for Complete graph
    if len(edge_list) == len(nodes) * (len(nodes) - 1) // 2:
        return "Complete"
    
    # Check for Grid pattern (not directly determinable from edge list without additional info)
    # Skip Grid check
    
    # Check for Clustered graph (requires additional info about clusters)
    # Skip Clustered graph check
    
    # Default to Random graph if no other pattern matches
    return "Random graph"

edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27)]
print(determine_graph_pattern(edge_list))
```