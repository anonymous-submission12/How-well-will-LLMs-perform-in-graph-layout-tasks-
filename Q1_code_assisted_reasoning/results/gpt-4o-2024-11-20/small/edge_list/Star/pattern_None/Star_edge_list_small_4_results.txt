```python
def determine_graph_pattern(edge_list):
    from collections import defaultdict

    # Create adjacency list
    adjacency_list = defaultdict(list)
    for u, v in edge_list:
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)

    # Count nodes and edges
    num_nodes = len(adjacency_list)
    num_edges = len(edge_list)

    # Check for Star pattern
    center_node = None
    for node, neighbors in adjacency_list.items():
        if len(neighbors) == num_nodes - 1:  # One node connected to all others
            center_node = node
        elif len(neighbors) != 1:  # Other nodes should have exactly one connection
            center_node = None
            break
    if center_node is not None:
        return "Star"

    # Check for Cycle pattern
    if num_edges == num_nodes and all(len(neighbors) == 2 for neighbors in adjacency_list.values()):
        return "Cycle"

    # Check for Path pattern
    if num_edges == num_nodes - 1 and sum(len(neighbors) == 1 for neighbors in adjacency_list.values()) == 2:
        return "Path"

    # Check for Complete pattern
    if num_edges == num_nodes * (num_nodes - 1) // 2:
        return "Complete"

    # Check for Grid pattern (not implemented in detail here, requires grid structure detection)
    # Check for Clustered graph (not implemented in detail here, requires community detection)
    # Check for Random graph (not implemented in detail here, requires statistical analysis)

    return "Unknown"

edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23)]
print(determine_graph_pattern(edge_list))
```