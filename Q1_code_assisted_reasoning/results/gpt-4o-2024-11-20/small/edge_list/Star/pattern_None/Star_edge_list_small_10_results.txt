```python
def determine_graph_pattern(edge_list):
    from collections import defaultdict

    # Create adjacency list
    adjacency_list = defaultdict(list)
    for u, v in edge_list:
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)

    # Count the degrees of each node
    degrees = {node: len(neighbors) for node, neighbors in adjacency_list.items()}

    # Check for Star pattern
    if list(degrees.values()).count(len(edge_list)) == 1 and list(degrees.values()).count(1) == len(edge_list):
        return "Star"

    # If not Star, return "Unknown"
    return "Unknown"

# Input edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), (0, 29)]

# Determine the graph pattern
print(determine_graph_pattern(edge_list))
```