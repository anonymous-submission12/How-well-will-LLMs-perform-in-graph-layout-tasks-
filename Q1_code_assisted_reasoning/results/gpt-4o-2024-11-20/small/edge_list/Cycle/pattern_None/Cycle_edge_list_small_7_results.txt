```python
import networkx as nx

# Define the graph from the provided edge list
edge_list = [(0, 1), (0, 26), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), 
             (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), 
             (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26)]
G = nx.Graph(edge_list)

# Define helper functions to identify patterns
def is_star(graph):
    degrees = sorted(dict(graph.degree()).values())
    return degrees[-1] == len(graph.nodes) - 1 and degrees[:-1] == [1] * (len(graph.nodes) - 1)

def is_cycle(graph):
    try:
        nx.find_cycle(graph)
        return len(graph.edges) == len(graph.nodes)
    except nx.NetworkXNoCycle:
        return False

def is_path(graph):
    degrees = dict(graph.degree())
    return sorted(degrees.values()) == [1] * (len(graph.nodes) - 2) + [2, 2]

def is_grid(graph):
    # For simplicity, we test whether the graph forms a rectangular grid
    all_positions = nx.multipartite_layout(graph)  # This only approximates grids
    return len(set(pos[0] for pos in all_positions.values())) > 1 \
           and len(set(pos[1] for pos in all_positions.values())) > 1

def is_complete(graph):
    n = len(graph.nodes)
    return len(graph.edges) == n * (n - 1) // 2

def is_random_graph(graph):
    # A very simple check - none of the above should pass
    return not (is_star(graph) or is_cycle(graph) or is_path(graph) or is_grid(graph) or is_complete(graph))

def is_clustered_graph(graph):
    # Clustering implies modular communities - we'll approximate using connected components
    return len(list(nx.connected_components(graph))) > 1

# Determine graph pattern
if is_star(G):
    result = "Star"
elif is_cycle(G):
    result = "Cycle"
elif is_path(G):
    result = "Path"
elif is_grid(G):
    result = "Grid"
elif is_complete(G):
    result = "Complete"
elif is_clustered_graph(G):
    result = "Clustered graph"
else:
    result = "Random graph"

print(result)
```