```python
def determine_graph_pattern(edge_list):
    from collections import defaultdict

    # Build adjacency list
    adjacency_list = defaultdict(list)
    for u, v in edge_list:
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)

    # Check for Star pattern
    center_nodes = [node for node, neighbors in adjacency_list.items() if len(neighbors) > 2]
    if len(center_nodes) == 1 and all(len(adjacency_list[node]) == 1 for node in adjacency_list if node != center_nodes[0]):
        print("Star")
        return

    # Check for Cycle pattern
    visited = set()
    def dfs(node, parent):
        visited.add(node)
        for neighbor in adjacency_list[node]:
            if neighbor not in visited:
                if dfs(neighbor, node):
                    return True
            elif neighbor != parent:
                return True
        return False

    if len(edge_list) == len(adjacency_list) and dfs(next(iter(adjacency_list)), -1):
        print("Cycle")
        return

    # Check for Path pattern
    end_nodes = [node for node, neighbors in adjacency_list.items() if len(neighbors) == 1]
    if len(end_nodes) == 2 and all(len(neighbors) <= 2 for neighbors in adjacency_list.values()):
        print("Path")
        return

    # Check for Grid pattern
    # Grid detection is complex and requires additional checks, skipping for simplicity

    # Check for Complete pattern
    n = len(adjacency_list)
    if all(len(neighbors) == n - 1 for neighbors in adjacency_list.values()):
        print("Complete")
        return

    # Check for Clustered graph
    # Clustered graph detection requires community detection, skipping for simplicity

    # Default to Random graph
    print("Random")

# Input edge list
edge_list = [(0, 1), (0, 25), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25)]
determine_graph_pattern(edge_list)
```