```python
from collections import deque

# Graph definition in edge_list format
edge_list = [(0, 1), (0, 27), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), 
             (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), 
             (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27)]

# Build adjacency list from edge_list
graph = {}
for u, v in edge_list:
    if u not in graph:
        graph[u] = []
    if v not in graph:
        graph[v] = []
    graph[u].append(v)
    graph[v].append(u)

# BFS to find the shortest path
def bfs_shortest_path(start, target):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    while queue:
        current, distance = queue.popleft()
        if current == target:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # Target not reachable

# Calculate the shortest path distance
result = bfs_shortest_path(7, 19)
print(result)
```