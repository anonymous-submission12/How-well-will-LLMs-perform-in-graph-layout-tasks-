```python
from collections import deque

# Define the graph as an adjacency list
edges = [(0, 1), (0, 23), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23)]
graph = {i: [] for i in range(24)}
for u, v in edges:
    graph[u].append(v)
    graph[v].append(u)

# BFS to find the shortest path
def shortest_path_length(graph, start, end):
    queue = deque([(start, 0)])  # (current_node, current_distance)
    visited = set()
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in graph[node]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1

# Calculate the shortest path length from node 3 to node 22
print(shortest_path_length(graph, 3, 22))
```