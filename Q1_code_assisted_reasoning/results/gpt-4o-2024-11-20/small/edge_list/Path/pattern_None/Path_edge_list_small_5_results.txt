```python
def determine_graph_pattern(edge_list):
    from collections import defaultdict

    # Create adjacency list
    adjacency_list = defaultdict(list)
    for u, v in edge_list:
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)

    # Check if the graph is a Path
    # A path graph has exactly two nodes with degree 1, and all other nodes have degree 2
    degree_counts = [len(adjacency_list[node]) for node in adjacency_list]
    if degree_counts.count(1) == 2 and degree_counts.count(2) == len(degree_counts) - 2:
        return "Path"

    return "Unknown"

edge_list = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24)]
print(determine_graph_pattern(edge_list))
```