```python
import networkx as nx

# Initialize the graph using the given edge list
edge_list = [(0, 1), (0, 2), (0, 4), (0, 5), (0, 16), (1, 3), (1, 4), (1, 5), (1, 9), 
             (2, 4), (2, 5), (2, 11), (3, 4), (3, 5), (4, 27), (5, 16), (6, 7), (6, 8), 
             (6, 9), (6, 10), (6, 11), (7, 8), (7, 9), (7, 10), (8, 9), (8, 10), (8, 11), 
             (9, 10), (9, 11), (12, 13), (12, 14), (12, 16), (13, 14), (13, 15), (13, 17), 
             (14, 15), (14, 16), (14, 17), (15, 16), (15, 17), (16, 17), (16, 19), 
             (18, 19), (18, 21), (18, 22), (19, 20), (19, 22), (20, 21), (20, 22), 
             (23, 27), (24, 26), (24, 27), (25, 26), (25, 27), (26, 27)]

G = nx.Graph(edge_list)

# Define functions for pattern checks
def is_star_graph(G):
    center_nodes = [node for node in G.nodes if G.degree[node] == len(G) - 1]
    return len(center_nodes) == 1

def is_cycle_graph(G):
    return nx.is_connected(G) and all(G.degree[node] == 2 for node in G.nodes)

def is_path_graph(G):
    degrees = [G.degree[node] for node in G.nodes]
    return nx.is_connected(G) and degrees.count(2) == len(G.nodes) - 2 and degrees.count(1) == 2

def is_grid_graph(G):
    try:
        nx.grid_2d_graph(len(G.nodes), len(G.nodes))
        return True
    except:
        return False

def is_complete_graph(G):
    return nx.is_connected(G) and nx.density(G) == 1.0

def is_random_graph(G):
    # Simple heuristic: randomness can be inferred by density
    density = nx.density(G)
    return density < 0.5 and not is_clustered_graph(G)

def is_clustered_graph(G):
    cliques = list(nx.find_cliques(G))
    return len(cliques) < len(G.nodes)

# Determine the pattern
if is_star_graph(G):
    print("Star")
elif is_cycle_graph(G):
    print("Cycle")
elif is_path_graph(G):
    print("Path")
elif is_grid_graph(G):
    print("Grid")
elif is_complete_graph(G):
    print("Complete")
elif is_clustered_graph(G):
    print("Clustered Graph")
elif is_random_graph(G):
    print("Random Graph")
else:
    print("Unknown")
```