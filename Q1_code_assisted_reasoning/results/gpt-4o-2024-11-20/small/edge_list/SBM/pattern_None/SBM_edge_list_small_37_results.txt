```python
import networkx as nx

# Defining the graph from the edge list
edges = [(0, 1), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 20), (1, 2), (1, 3), (1, 4), (1, 5), (1, 8),
         (1, 9), (1, 10), (1, 11), (1, 12), (2, 3), (2, 4), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (2, 12), (3, 5),
         (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (4, 11), (4, 12),
         (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 10), (6, 11), (7, 8), (7, 9), (7, 11), (7, 12), (8, 9),
         (8, 10), (8, 14), (9, 10), (9, 11), (9, 12), (9, 14), (11, 12), (13, 14), (13, 15), (13, 16), (13, 17),
         (13, 18), (13, 19), (13, 20), (13, 21), (13, 22), (13, 24), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19),
         (14, 20), (14, 21), (14, 22), (14, 23), (14, 24), (15, 16), (15, 17), (15, 18), (15, 19), (15, 21), (15, 22),
         (15, 24), (16, 17), (16, 20), (16, 22), (16, 24), (17, 19), (17, 20), (17, 21), (17, 22), (17, 24), (18, 20),
         (18, 24), (19, 20), (19, 22), (19, 23), (19, 24), (20, 22), (20, 23), (20, 24), (21, 22), (21, 23), (21, 24),
         (22, 23), (23, 24)]

G = nx.Graph()
G.add_edges_from(edges)

# Helper functions to check graph patterns
def is_star(graph):
    degrees = [deg for _, deg in graph.degree()]
    return degrees.count(len(graph) - 1) == 1 and degrees.count(1) == len(graph) - 1

def is_cycle(graph):
    return nx.is_connected(graph) and len(graph.edges) == len(graph.nodes)

def is_path(graph):
    degrees = [deg for _, deg in graph.degree()]
    return degrees.count(2) == len(graph) - 2 and degrees.count(1) == 2

def is_grid(graph):
    # A grid graph has all nodes with degree 2, 3, or 4 (except at boundaries)
    rows = cols = int(len(graph)**0.5)
    if rows * cols != len(graph):  # Not a perfect square number of nodes
        return False
    expected_edges = 2 * rows * cols - rows - cols
    return len(graph.edges) == expected_edges

def is_complete(graph):
    n = len(graph)
    return len(graph.edges) == n * (n - 1) // 2

def is_clustered(graph):
    return nx.average_clustering(graph) > 0.5

def is_random(graph):
    return not (is_star(graph) or is_cycle(graph) or is_path(graph) or is_grid(graph) or is_complete(graph) or is_clustered(graph))

# Determine the graph pattern
if is_star(G):
    print("Star")
elif is_cycle(G):
    print("Cycle")
elif is_path(G):
    print("Path")
elif is_grid(G):
    print("Grid")
elif is_complete(G):
    print("Complete")
elif is_clustered(G):
    print("Clustered")
elif is_random(G):
    print("Random")
```