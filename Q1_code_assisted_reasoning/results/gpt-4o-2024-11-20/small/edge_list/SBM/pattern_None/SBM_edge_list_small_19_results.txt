```python
import networkx as nx

# Define the graph from edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7),
    (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (2, 4),
    (2, 5), (2, 7), (2, 14), (3, 4), (3, 5), (3, 7), (4, 6),
    (4, 7), (5, 6), (5, 7), (6, 7), (8, 9), (8, 10), (8, 11),
    (8, 12), (8, 13), (8, 14), (8, 18), (9, 10), (9, 11), (9, 12),
    (9, 14), (10, 11), (10, 13), (10, 14), (11, 12), (11, 13),
    (11, 14), (12, 14), (13, 14), (15, 16), (15, 17), (15, 18),
    (15, 19), (15, 20), (15, 21), (15, 25), (16, 17), (16, 18),
    (16, 19), (16, 20), (16, 21), (17, 18), (17, 19), (17, 20),
    (17, 21), (18, 19), (18, 20), (18, 21), (19, 21), (20, 21),
    (22, 23), (22, 24), (22, 26), (22, 27), (23, 24), (23, 25),
    (23, 28), (24, 25), (24, 26), (24, 27), (24, 28), (25, 26),
    (25, 27), (25, 28), (26, 27)
]
G = nx.Graph(edge_list)

# Function to identify graph pattern
def determine_graph_pattern(graph):
    n = graph.number_of_nodes()
    m = graph.number_of_edges()
    
    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"

    # Check for star graph
    degrees = [deg for node, deg in graph.degree()]
    if degrees.count(n - 1) == 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_connected(graph) and all(deg == 2 for node, deg in graph.degree()):
        return "Cycle"
    
    # Check for path graph
    if nx.is_connected(graph) and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for grid graph (heuristic: if the nodes and edges match a grid-like structure)
    try:
        rows, cols = nx.grid_graph(dim=[2, 2]).number_of_nodes(), nx.grid_graph(dim=[2, 2]).number_of_edges()
        if n == rows and m == cols:
            return "Grid"
    except:
        pass
    
    # Check for clustered graph (connected components exist, and subgraph patterns vary)
    if nx.number_connected_components(graph) > 1:
        return "Clustered graph"
    
    # Default to random graph
    return "Random graph"

print(determine_graph_pattern(G))
```