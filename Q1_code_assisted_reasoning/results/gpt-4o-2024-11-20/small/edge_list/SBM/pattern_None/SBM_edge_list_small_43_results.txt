```python
import networkx as nx

# Define the edge list
edge_list = [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 9), (1, 2), (1, 3), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), 
             (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 22), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 6), 
             (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 28), (6, 7), (6, 8), (6, 9), (7, 8), (7, 9), (10, 11), 
             (10, 12), (10, 13), (10, 14), (10, 16), (10, 17), (10, 18), (10, 19), (11, 12), (11, 13), (11, 14), (11, 15), 
             (11, 16), (11, 17), (11, 18), (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (12, 19), (13, 14), (13, 15), 
             (13, 16), (13, 18), (13, 19), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (15, 16), (15, 18), (15, 19), 
             (16, 17), (16, 18), (17, 19), (17, 21), (18, 19), (20, 22), (20, 23), (20, 24), (20, 25), (20, 26), (20, 27), 
             (20, 28), (21, 23), (21, 24), (21, 25), (21, 26), (21, 27), (21, 28), (22, 23), (22, 24), (22, 25), (22, 28), 
             (23, 26), (23, 28), (24, 25), (24, 26), (24, 28), (25, 27), (25, 28), (26, 27), (27, 28)]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Check the graph pattern
def check_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)

    # Check for star graph
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"

    # Check for cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for _, deg in G.degree()):
        return "Cycle"

    # Check for path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(1) == 2 and degrees.count(2) == n - 2:
        return "Path"

    # Check for grid graph
    if nx.is_connected(G) and nx.grid_graph(dim=[int(n**0.5), int(n**0.5)]).edges == G.edges:
        return "Grid"

    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"

    # Check for clustered graph
    if nx.number_connected_components(G) > 1:
        return "Clustered"

    # Default to random graph
    return "Random"

print(check_graph_pattern(G))
```