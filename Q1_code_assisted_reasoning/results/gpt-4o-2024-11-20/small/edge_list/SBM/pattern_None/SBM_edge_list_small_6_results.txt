```python
import networkx as nx

# Define the edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), 
    (2, 3), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6), (4, 6), (4, 24), (5, 6), 
    (7, 8), (7, 9), (7, 10), (7, 11), (7, 12), (8, 12), (9, 10), (9, 11), (10, 11), 
    (10, 12), (11, 12), (12, 24), (13, 16), (13, 17), (14, 15), (14, 16), (14, 17), 
    (14, 18), (15, 16), (16, 17), (17, 18), (18, 23), (19, 21), (19, 22), (19, 23), 
    (20, 21), (20, 22), (20, 24), (21, 22), (21, 23), (21, 24), (22, 23), (22, 24), (23, 24)
]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Determine the graph pattern
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for star graph
    degrees = [deg for _, deg in G.degree()]
    if degrees.count(n - 1) == 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for _, deg in G.degree()):
        return "Cycle"
    
    # Check for path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for grid graph
    if nx.is_connected(G) and nx.grid_2d_graph(int(n**0.5), int(n**0.5)).edges == G.edges:
        return "Grid"
    
    # Check for clustered graph
    clusters = list(nx.connected_components(G))
    if len(clusters) > 1:
        return "Clustered"
    
    # Default to random graph
    return "Random"

print(determine_graph_pattern(G))
```