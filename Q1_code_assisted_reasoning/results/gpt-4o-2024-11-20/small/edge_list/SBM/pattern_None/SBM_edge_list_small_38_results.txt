```python
import networkx as nx

# Define the edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 6), (1, 2), (1, 3), (1, 24), (2, 3), (2, 4), (3, 4), 
             (5, 6), (5, 7), (5, 8), (5, 9), (6, 7), (6, 8), (6, 9), (6, 29), (7, 8), (7, 9), (7, 23), 
             (8, 9), (10, 11), (10, 13), (10, 14), (11, 12), (11, 14), (11, 28), (12, 13), (12, 26), 
             (15, 16), (15, 17), (15, 18), (15, 19), (16, 17), (16, 19), (16, 26), (17, 18), 
             (20, 21), (20, 22), (20, 23), (20, 24), (21, 22), (21, 23), (22, 23), (22, 24), 
             (25, 26), (25, 27), (25, 28), (25, 29), (26, 27), (26, 28), (26, 29), (27, 28), (28, 29)]

# Create a graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Check for patterns
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for star graph
    degrees = [deg for _, deg in G.degree()]
    if degrees.count(n - 1) == 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_connected(G) and all(deg == 2 for _, deg in G.degree()):
        return "Cycle"
    
    # Check for path graph
    if nx.is_connected(G) and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for grid graph
    if nx.is_connected(G) and nx.check_planarity(G)[0]:
        # A grid graph is planar and has a specific structure
        # Check if the number of edges matches a grid pattern
        rows = cols = int(n**0.5)
        if rows * cols == n and m == 2 * rows * cols - rows - cols:
            return "Grid"
    
    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for clustered graph
    # A clustered graph has dense subgraphs (communities)
    if nx.number_connected_components(G) > 1:
        return "Clustered graph"
    
    # Default to random graph
    return "Random graph"

# Determine the pattern
print(determine_graph_pattern(G))
```