```python
import networkx as nx

# Define the graph edges
edges = [(0, 1), (0, 3), (1, 2), (2, 5), (3, 4), (3, 5), (4, 5), (5, 11), (6, 8), (6, 9), (6, 10), (6, 11), (6, 13),
         (7, 10), (7, 11), (8, 9), (8, 10), (8, 11), (9, 10), (9, 11), (10, 11), (12, 13), (12, 15), (12, 16), (12, 17),
         (13, 15), (13, 17), (13, 25), (14, 15), (14, 17), (15, 16), (15, 17), (15, 22), (16, 17), (18, 19), (18, 21),
         (18, 22), (19, 20), (19, 21), (20, 22), (23, 24), (23, 25), (23, 26), (23, 27), (24, 25), (24, 26), (24, 27),
         (25, 26), (25, 27), (26, 27)]

# Build the graph
graph = nx.Graph()
graph.add_edges_from(edges)

def is_complete_graph(graph):
    n = len(graph.nodes)
    return len(graph.edges) == n * (n - 1) // 2

def is_star_graph(graph):
    degrees = [d for _, d in graph.degree()]
    return degrees.count(len(graph.nodes) - 1) == 1 and degrees.count(1) == len(graph.nodes) - 1

def is_cycle_graph(graph):
    return nx.cycle_graph(len(graph.nodes)).edges == edges

def is_path_graph(graph):
    return nx.is_connected(graph) and len(graph.edges) == len(graph.nodes) - 1

def is_grid_graph(graph):
    # Check if graph can form a grid layout
    try:
        nx.grid_2d_graph(int(len(graph.nodes) ** 0.5), int(len(graph.nodes) ** 0.5)).edges == edges
        return True
    except:
        return False

if is_complete_graph(graph):
    print("Complete")
elif is_star_graph(graph):
    print("Star")
elif is_cycle_graph(graph):
    print("Cycle")
elif is_path_graph(graph):
    print("Path")
elif is_grid_graph(graph):
    print("Grid")
else:
    print("Clustered graph or Random graph")
```