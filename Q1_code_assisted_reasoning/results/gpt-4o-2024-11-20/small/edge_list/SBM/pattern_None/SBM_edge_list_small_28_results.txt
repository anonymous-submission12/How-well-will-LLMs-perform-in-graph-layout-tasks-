```python:/home/app/graph_analysis.py
import networkx as nx

# Define the edge list
edge_list = [(0, 4), (0, 5), (0, 6), (0, 8), (0, 9), (0, 10), (0, 11), 
             (1, 3), (1, 4), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), 
             (2, 3), (2, 4), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), 
             (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 11), 
             (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), 
             (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (7, 8), (7, 9), (7, 10), (7, 11), 
             (8, 9), (8, 10), (8, 11), (9, 11), (9, 22), 
             (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (12, 18), (12, 19), (12, 20), 
             (12, 21), (12, 22), (12, 23), (13, 14), (13, 15), (13, 16), (13, 18), (13, 19), 
             (13, 20), (13, 22), (13, 23), (14, 15), (14, 17), (14, 18), (14, 19), (14, 20), 
             (14, 22), (14, 23), (15, 16), (15, 17), (15, 18), (15, 19), (15, 22), (15, 23), 
             (16, 17), (16, 18), (16, 19), (16, 22), (16, 23), (17, 19), (17, 20), (17, 21), 
             (17, 22), (17, 23), (18, 20), (18, 21), (18, 23), (19, 21), (19, 23), (20, 21), 
             (20, 22), (21, 22), (21, 23)]

# Create a graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Get basic properties
num_nodes = len(G)
num_edges = G.number_of_edges()

# Check for different graph types
def is_star(G):
    degrees = [d for _, d in G.degree()]
    return degrees.count(max(degrees)) == 1 and max(degrees) == num_nodes - 1

def is_cycle(G):
    return nx.is_connected(G) and all(d == 2 for _, d in G.degree())

def is_path(G):
    return nx.is_connected(G) and sum(1 for _, d in G.degree() if d == 1) == 2 and all(d in {1, 2} for _, d in G.degree())

def is_complete(G):
    return num_edges == num_nodes * (num_nodes - 1) // 2

def is_grid(G):
    sqrt_n = int(num_nodes ** 0.5)
    return sqrt_n * sqrt_n == num_nodes and all(d in {2, 3, 4} for _, d in G.degree())

# Identify whether the graph has obvious clusters (community structure)
def is_clustered(G):
    communities = list(nx.community.greedy_modularity_communities(G))
    return len(communities) > 1

def is_random(G):
    avg_deg = sum(dict(G.degree()).values()) / num_nodes
    return 0.2 * num_nodes < avg_deg < 0.8 * num_nodes and not is_clustered(G)

# Identify the type
if is_star(G):
    print("Star")
elif is_cycle(G):
    print("Cycle")
elif is_path(G):
    print("Path")
elif is_grid(G):
    print("Grid")
elif is_complete(G):
    print("Complete")
elif is_clustered(G):
    print("Clustered Graph")
elif is_random(G):
    print("Random Graph")
else:
    print("Unknown")
```