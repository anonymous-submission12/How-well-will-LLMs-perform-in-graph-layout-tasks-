```python
import networkx as nx

# Define the edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 5), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), 
             (2, 3), (2, 5), (2, 6), (3, 5), (3, 6), (3, 22), (4, 5), (4, 6), (5, 6), 
             (5, 21), (7, 9), (7, 10), (7, 11), (7, 13), (8, 9), (8, 13), (8, 17), 
             (10, 12), (10, 13), (11, 12), (11, 13), (12, 13), (13, 18), (14, 15), 
             (14, 16), (14, 17), (14, 18), (14, 20), (15, 17), (15, 20), (16, 17), 
             (16, 18), (16, 20), (17, 18), (17, 20), (18, 19), (18, 20), (18, 21), 
             (21, 22), (21, 25), (21, 26), (21, 27), (22, 23), (22, 24), (22, 25), 
             (22, 26), (22, 27), (23, 24), (23, 25), (23, 26), (24, 25), (24, 26), 
             (24, 27), (25, 26), (25, 27)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Check for patterns
def determine_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for star graph
    degrees = [deg for _, deg in G.degree]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for grid graph
    if nx.is_connected(G) and nx.grid_graph(dim=[int(n**0.5), int(n**0.5)]).edges == G.edges:
        return "Grid"
    
    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for clustered graph
    if nx.number_connected_components(G) > 1:
        return "Clustered"
    
    # Default to random graph
    return "Random"

# Determine the pattern
print(determine_pattern(G))
```