```python
import networkx as nx

# Define the edge list
edge_list = [
    (0, 1), (0, 2), (0, 4), (0, 5), (1, 3), (1, 5), (1, 6), (1, 7), (2, 5), 
    (2, 6), (2, 13), (2, 19), (2, 23), (3, 4), (3, 5), (3, 6), (3, 7), (3, 13), 
    (4, 5), (4, 6), (4, 7), (5, 6), (5, 13), (5, 21), (6, 7), (8, 9), (8, 10), 
    (8, 11), (8, 12), (9, 11), (9, 12), (9, 13), (9, 14), (10, 11), (10, 12), 
    (10, 13), (10, 14), (10, 20), (11, 12), (11, 13), (11, 14), (12, 13), 
    (12, 14), (13, 14), (13, 20), (15, 16), (15, 18), (15, 19), (15, 20), 
    (15, 21), (16, 18), (16, 20), (16, 21), (17, 18), (17, 20), (17, 21), 
    (18, 19), (18, 21), (19, 20), (19, 21), (20, 21), (22, 23), (22, 24), 
    (22, 26), (22, 27), (22, 28), (23, 24), (23, 25), (23, 27), (23, 28), 
    (24, 25), (24, 27), (24, 28), (25, 27), (27, 28)
]

# Instantiate the graph
graph = nx.Graph(edge_list)

# Check for graph patterns
def check_graph_pattern(graph):
    # Check for star graph
    degrees = [graph.degree(n) for n in graph.nodes]
    if max(degrees) == len(graph.nodes) - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_cycle_graph(graph):
        return "Cycle"
    
    # Check for path graph
    if nx.is_path_graph(graph):
        return "Path"
    
    # Check for grid
    grid_pattern = True
    for node in graph.nodes:
        neighbors = list(graph.neighbors(node))
        if len(neighbors) > 5: # Grid vertices have limited connections
            grid_pattern = False
            break
    if grid_pattern:
        return "Grid"
    
    # Check for complete graph
    if nx.is_complete_graph(graph):
        return "Complete"
    
    # Check for clustered graph
    if nx.number_connected_components(graph) > 1:
        return "Clustered graph"

    # Default as a random graph
    return "Random graph"

print(check_G