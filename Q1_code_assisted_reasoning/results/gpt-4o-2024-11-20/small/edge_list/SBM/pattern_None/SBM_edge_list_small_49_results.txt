```python
import networkx as nx

# Define the edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 7), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13),
    (1, 2), (1, 5), (1, 6), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13),
    (2, 3), (2, 6), (2, 7), (2, 9), (2, 11), (2, 12), (2, 13), (3, 4), (3, 6), (3, 7),
    (3, 8), (3, 11), (3, 13), (4, 5), (4, 6), (4, 8), (4, 9), (4, 10), (4, 11),
    (5, 6), (5, 7), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (6, 7), (6, 8), (6, 10),
    (6, 11), (6, 12), (6, 13), (7, 8), (7, 9), (7, 11), (7, 12), (8, 9), (8, 10),
    (8, 11), (8, 12), (8, 13), (9, 10), (9, 12), (9, 13), (10, 11), (10, 12), (10, 13),
    (11, 13), (11, 22), (12, 13), (14, 16), (14, 17), (14, 18), (14, 19), (14, 20),
    (14, 21), (14, 25), (14, 26), (15, 16), (15, 19), (15, 21), (15, 23), (15, 25),
    (15, 26), (16, 17), (16, 18), (16, 19), (16, 20), (16, 21), (16, 23), (16, 25),
    (16, 26), (17, 18), (17, 19), (17, 20), (17, 21), (17, 25), (17, 26), (18, 19),
    (18, 21), (18, 22), (18, 23), (18, 25), (18, 26), (19, 20), (19, 22), (19, 24),
    (19, 25), (19, 26), (20, 22), (20, 23), (20, 26), (21, 22), (21, 23), (21, 25),
    (21, 26), (22, 23), (22, 25), (22, 26), (23, 24), (23, 25), (23, 26), (24, 25)
]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Check graph patterns
def is_star_graph(G):
    degrees = [deg for _, deg in G.degree()]
    return degrees.count(len(G.nodes) - 1) == 1 and degrees.count(1) == len(G.nodes) - 1

def is_cycle_graph(G):
    return nx.cycle_graph(len(G.nodes)).edges == G.edges

def is_path_graph(G):
    return nx.path_graph(len(G.nodes)).edges == G.edges

def is_grid_graph(G):
    try:
        rows, cols = nx.grid_graph(dim=[len(G.nodes), len(G.nodes)]).graph['dim']
        return nx.grid_graph(dim=[rows, cols]).edges == G.edges
    except:
        return False

def is_complete_graph(G):
    return nx.complete_graph(len(G.nodes)).edges == G.edges

def is_clustered_graph(G):
    return nx.average_clustering(G) > 0.5

def is_random_graph(G):
    return not (is_star_graph(G) or is_cycle_graph(G) or is_path_graph(G) or is_grid_graph(G) or is_complete_graph(G) or is_clustered_graph(G))

if is_star_graph(G):
    print("Star")
elif is_cycle_graph(G):
    print("Cycle")
elif is_path_graph(G):
    print("Path")
elif is_grid_graph(G):
    print("Grid")
elif is_complete_graph(G):
    print("Complete")
elif is_clustered_graph(G):
    print("Clustered")
elif is_random_graph(G):
    print("Random")
```