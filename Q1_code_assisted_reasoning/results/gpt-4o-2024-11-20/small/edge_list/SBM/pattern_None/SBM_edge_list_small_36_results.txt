```python
import networkx as nx

# Define the edge list
edge_list = [(0, 1), (0, 3), (0, 5), (0, 6), (0, 7), (0, 19), (1, 2), (1, 5), (1, 6), (1, 7), (1, 21), 
             (2, 3), (2, 4), (2, 6), (2, 7), (2, 15), (3, 4), (3, 5), (3, 6), (3, 7), (3, 9), (4, 5), 
             (4, 6), (4, 7), (5, 7), (6, 7), (8, 11), (8, 12), (8, 13), (8, 14), (8, 15), (9, 10), 
             (9, 11), (9, 12), (9, 13), (9, 14), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), 
             (11, 12), (11, 13), (11, 15), (12, 13), (12, 15), (13, 14), (14, 21), (16, 17), (16, 19), 
             (16, 20), (16, 21), (16, 22), (17, 21), (17, 22), (18, 20), (18, 22), (19, 21), (19, 22), 
             (20, 21), (20, 22), (21, 22)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Check for patterns
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for star graph
    degrees = [deg for _, deg in G.degree]
    if degrees.count(n - 1) == 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_connected(G) and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for path graph
    if nx.is_connected(G) and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for grid graph
    if nx.is_connected(G) and nx.check_planarity(G)[0]:
        # A grid graph is planar and has a specific structure
        sqrt_n = int(n**0.5)
        if sqrt_n * sqrt_n == n and m == 2 * (sqrt_n * (sqrt_n - 1)):
            return "Grid"
    
    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for clustered graph
    if nx.number_connected_components(G) > 1:
        return "Clustered"
    
    # If none of the above, assume random graph
    return "Random"

# Determine the graph pattern
print(determine_graph_pattern(G))
```