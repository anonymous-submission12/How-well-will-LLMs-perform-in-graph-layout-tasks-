```python
import networkx as nx

# Input Graph Edges
edges = [(0, 1), (0, 3), (0, 9), (1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 5), (3, 5), 
         (4, 5), (5, 19), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (7, 8), (7, 9), (7, 10), 
         (7, 11), (8, 9), (8, 10), (10, 11), (11, 15), (12, 13), (12, 14), (12, 15), (12, 16), 
         (12, 17), (13, 14), (13, 15), (13, 16), (13, 21), (14, 15), (14, 16), (16, 17), 
         (18, 19), (18, 20), (18, 21), (18, 22), (19, 20), (19, 21), (20, 21), (20, 22), 
         (21, 22), (22, 26), (23, 24), (23, 25), (23, 26), (24, 25), (24, 27), (25, 26), 
         (25, 27), (26, 27)]

# Create graph from edges
G = nx.Graph()
G.add_edges_from(edges)

# Helper Functions
def is_star_graph(G):
    center_nodes = [node for node in G.nodes if G.degree(node) == len(G.nodes) - 1]
    return len(center_nodes) == 1

def is_cycle_graph(G):
    return nx.is_connected(G) and all(deg == 2 for _, deg in G.degree) and len(G.edges) == len(G.nodes)

def is_path_graph(G):
    return nx.is_connected(G) and all(deg <= 2 for _, deg in G.degree)

def is_grid_graph(G):
    rows, cols = divmod(len(G.nodes), int(len(G.edges) ** 0.5))
    return nx.grid_graph(dim=[rows, cols]).edges == G.edges

def is_complete_graph(G):
    n = len(G.nodes)
    return len(G.edges) == n * (n - 1) // 2

def is_clustered_graph(G):
    return nx.average_clustering(G) > 0.5

def is_random_graph(G):
    # A loose check to identify random graphs (low clustering coefficient and structureless)
    return nx.average_clustering(G) < 0.1 and len(set(dict(G.degree).values())) > len(G.nodes) // 2

# Determine Graph Type
if is_star_graph(G):
    print("Star")
elif is_cycle_graph(G):
    print("Cycle")
elif is_path_graph(G):
    print("Path")
elif is_grid_graph(G):
    print("Grid")
elif is_complete_graph(G):
    print("Complete")
elif is_clustered_graph(G):
    print("Clustered Graph")
elif is_random_graph(G):
    print("Random Graph")
else:
    print("Unknown")
```