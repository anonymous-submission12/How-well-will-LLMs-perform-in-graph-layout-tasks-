```python
import networkx as nx

edges = [
    (0, 1), (0, 2), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 26), 
    (1, 2), (1, 3), (1, 4), (1, 6), (1, 7), (1, 8), (1, 9), (2, 3), (2, 4), 
    (2, 5), (2, 6), (2, 9), (2, 18), (3, 4), (3, 5), (3, 7), (3, 8), (3, 9), 
    (3, 23), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 24), (5, 6), (5, 7), 
    (5, 8), (6, 7), (6, 8), (7, 8), (7, 9), (8, 9), (10, 11), (10, 12), 
    (10, 13), (10, 14), (10, 15), (10, 16), (10, 17), (10, 18), (10, 19), 
    (11, 12), (11, 13), (11, 14), (11, 18), (12, 13), (12, 15), (12, 16), 
    (12, 17), (12, 18), (12, 19), (13, 15), (13, 17), (13, 18), (14, 15), 
    (14, 17), (14, 18), (14, 19), (15, 16), (15, 17), (15, 19), (16, 17), 
    (16, 18), (17, 18), (17, 19), (18, 20), (20, 22), (20, 24), (20, 25), 
    (20, 27), (20, 28), (21, 22), (21, 23), (21, 24), (21, 26), (21, 27), 
    (21, 28), (22, 23), (22, 24), (22, 25), (22, 26), (22, 27), (22, 28), 
    (23, 25), (23, 27), (24, 26), (24, 27), (25, 28), (26, 28)
]

# Create the graph
G = nx.Graph()
G.add_edges_from(edges)

# Helper function to check patterns
def graph_pattern(G):
    n = len(G)
    m = G.size()

    # Check for star graph
    if any(len(G[node]) == n - 1 for node in G):  # Central node connected to all others
        return "Star"

    # Check for cycle graph
    try:
        cycle = nx.find_cycle(G)
        if len(cycle) == n:
            return "Cycle"
    except:
        pass

    # Check for path graph
    degrees = [deg for _, deg in G.degree]
    if sorted(degrees) == [1] + [2] * (n - 2) + [1]:  # Two endpoints and nodes in a chain
        return "Path"

    # Check for complete graph
    if m == n * (n - 1) // 2:  # All possible edges are present
        return "Complete"

    # Check for grid graph
    if nx.grid_graph(dim=[int(n**0.5), int(n**0.5)]).size() == m:  # 2D Grid with nxn nodes
        return "Grid"

    # Check for clustered graph (detect components)
    if nx.number_connected_components(G) > 1:
        return "Clustered Graph"

    # Assume other patterns are random
    return "Random Graph"

print(graph_pattern(G))
```