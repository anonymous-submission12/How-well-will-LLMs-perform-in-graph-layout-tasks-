```python
import networkx as nx

# Define the edge list
edge_list = [(0, 3), (0, 4), (0, 6), (0, 7), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 17), (1, 18), 
             (2, 3), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6), (3, 9), (3, 20), (4, 5), (4, 6), (4, 7), (5, 6), 
             (5, 7), (8, 11), (8, 13), (9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (10, 11), (10, 12), (10, 13), 
             (10, 14), (11, 12), (11, 13), (11, 14), (11, 15), (12, 13), (12, 14), (13, 23), (15, 16), (15, 17), 
             (15, 18), (15, 19), (15, 20), (15, 21), (16, 18), (16, 20), (17, 18), (17, 19), (17, 20), (18, 19), 
             (18, 20), (18, 21), (19, 20), (19, 21), (20, 21), (20, 26), (22, 23), (22, 25), (22, 26), (22, 27), 
             (22, 28), (23, 24), (23, 25), (23, 28), (24, 26), (24, 27), (24, 28), (25, 26), (25, 28), (26, 27), 
             (27, 28)]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Check graph patterns
def check_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star
    degrees = [deg for _, deg in G.degree]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for Path
    if nx.is_connected(G) and m == n - 1 and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for Grid
    if nx.is_connected(G) and len(set(degrees)) <= 3:
        return "Grid"
    
    # Check for Complete
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered Graph
    if nx.number_connected_components(G) > 1:
        return "Clustered Graph"
    
    # Default to Random Graph
    return "Random Graph"

# Output the result
print(check_graph_pattern(G))
```