```python
import networkx as nx

edges = [(0, 2), (0, 5), (0, 6), (0, 7), (1, 2), (1, 3), (1, 5), (1, 6), (1, 7), (1, 8), 
         (1, 19), (1, 20), (2, 3), (2, 4), (2, 6), (2, 7), (3, 4), (3, 5), (3, 6), (4, 6), 
         (4, 7), (4, 22), (5, 6), (5, 7), (6, 7), (8, 9), (8, 10), (8, 11), (8, 12), (8, 13), 
         (8, 14), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (10, 12), (10, 13), (10, 15), 
         (11, 13), (11, 14), (11, 15), (12, 13), (12, 14), (12, 15), (14, 15), (16, 17), 
         (16, 18), (16, 19), (16, 20), (16, 21), (16, 23), (17, 18), (17, 19), (17, 20), 
         (17, 21), (17, 22), (17, 23), (18, 19), (19, 20), (19, 21), (19, 22), (19, 23), 
         (20, 21), (21, 23), (22, 23)]

G = nx.Graph(edges)

def determine_graph_pattern(G):
    if nx.is_connected(G):
        n = len(G.nodes)
        m = len(G.edges)
        if m == (n * (n - 1)) // 2:
            return "Complete"
        elif nx.radius(G) == 1 and nx.diameter(G) == 1:
            return "Star"
        elif nx.is_chordal(G) and nx.cycle_basis(G) and len(G.nodes) == len(G.edges):
            return "Cycle"
        elif nx.is_tree(G):
            return "Path"
        elif nx.is_grid_2d(G):
            return "Grid"
    clusters = list(nx.connected_components(G))
    if len(clusters) > 1:
        return "Clustered graph"
    return "Random graph"

print(determine_graph_pattern(G))
```