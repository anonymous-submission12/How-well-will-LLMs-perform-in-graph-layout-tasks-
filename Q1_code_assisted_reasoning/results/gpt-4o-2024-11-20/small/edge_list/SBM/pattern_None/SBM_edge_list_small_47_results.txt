```python
import networkx as nx

# Define the edge list
edge_list = [(0, 4), (0, 5), (0, 7), (1, 2), (1, 3), (1, 5), (1, 7), (2, 3), (2, 4), (2, 5), (2, 6), (3, 5), (3, 6), (3, 7), (3, 22), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (6, 7), (8, 10), (8, 11), (8, 12), (8, 13), (8, 14), (8, 15), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (11, 12), (11, 13), (12, 13), (12, 14), (12, 15), (13, 14), (13, 15), (14, 18), (16, 17), (16, 18), (16, 20), (16, 21), (16, 22), (17, 19), (17, 20), (17, 21), (17, 22), (18, 19), (18, 20), (18, 21), (18, 22), (19, 20), (19, 21), (19, 22), (20, 21)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Check for patterns
def determine_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for star graph
    degrees = [deg for _, deg in G.degree]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(1) == 2 and degrees.count(2) == n - 2:
        return "Path"
    
    # Check for grid graph
    if nx.is_connected(G) and nx.grid_graph(dim=[int(n**0.5), int(n**0.5)]).edges == G.edges:
        return "Grid"
    
    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for clustered graph
    clusters = list(nx.connected_components(G))
    if len(clusters) > 1 and all(len(G.subgraph(cluster).edges) > 0 for cluster in clusters):
        return "Clustered"
    
    # Default to random graph
    return "Random"

print(determine_pattern(G))
```