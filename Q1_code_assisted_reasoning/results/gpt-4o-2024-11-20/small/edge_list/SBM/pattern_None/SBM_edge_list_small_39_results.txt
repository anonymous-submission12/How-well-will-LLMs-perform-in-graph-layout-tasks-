```python
import networkx as nx

edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), 
             (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11),
             (2, 3), (2, 4), (2, 5), (2, 6), (2, 8), (2, 9), (2, 10), (3, 5), (3, 6), (3, 9), (3, 10),
             (4, 5), (4, 6), (4, 7), (4, 9), (5, 6), (5, 7), (5, 9), (5, 11), (6, 7), (6, 9), (6, 11),
             (7, 9), (7, 11), (8, 9), (8, 11), (9, 10), (9, 11), (10, 11), (10, 12), (12, 13), (12, 14),
             (12, 15), (12, 16), (12, 17), (12, 18), (12, 19), (12, 20), (12, 22), (13, 14), (13, 15),
             (13, 16), (13, 17), (13, 18), (13, 20), (13, 21), (14, 15), (14, 17), (14, 18), (14, 19),
             (14, 20), (14, 22), (15, 17), (15, 18), (15, 19), (15, 20), (15, 21), (15, 22), (16, 18),
             (16, 20), (16, 21), (16, 22), (17, 18), (17, 19), (17, 22), (18, 19), (18, 20), (18, 21),
             (18, 22), (19, 22), (20, 22), (21, 22)]

G = nx.Graph()
G.add_edges_from(edge_list)

def classify_graph(G):
    nodes = list(G.nodes)
    edges = list(G.edges)

    # Check for Complete Graph
    n = len(nodes)
    if len(edges) == n * (n - 1) // 2:
        return "Complete"

    # Check for Cycle Graph
    if nx.is_connected(G) and all(deg == 2 for _, deg in G.degree):
        return "Cycle"

    # Check for Path Graph
    if nx.is_connected(G) and sorted([deg for _, deg in G.degree]) == [1, *(2 for _ in range(len(nodes) - 2)), 1]:
        return "Path"

    # Check for Star Graph
    if len(nodes) > 1 and 1 in [deg for _, deg in G.degree]:
        if sorted([deg for _, deg in G.degree]) == [*(1 for _ in range(len(nodes) - 1)), len(nodes) - 1]:
            return "Star"

    # Check for Grid Graph (approximation only)
    if len(nodes) > 1 and len(edges) <= 2 * len(nodes):
        degrees = [deg for _, deg in G.degree]
        if max(degrees) <= 4 and min(degrees) >= 2:
            return "Grid"

    # Check for Clustered Graph (approximation)
    # Assuming clustered graph has tightly-knit subgraphs with high modularity
    communities = nx.algorithms.community.greedy_modularity_communities(G)
    if len(communities) > 1:
        return "Clustered"

    # Default to Random Graph
    return "Random"

print(classify_graph(G))
```