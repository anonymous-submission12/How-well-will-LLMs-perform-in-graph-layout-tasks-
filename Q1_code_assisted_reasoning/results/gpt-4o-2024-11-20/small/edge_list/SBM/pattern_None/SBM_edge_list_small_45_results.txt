```python
import networkx as nx

# Graph data
edges = [
    (0, 2), (0, 3), (0, 4), (0, 5), (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (2, 5),
    (3, 4), (4, 5), (5, 6), (6, 7), (6, 8), (6, 10), (6, 11), (7, 8), (7, 9), (7, 10),
    (7, 11), (7, 14), (8, 9), (8, 10), (8, 11), (9, 10), (9, 11), (10, 11), (12, 13),
    (12, 14), (12, 17), (13, 15), (13, 16), (13, 17), (13, 23), (14, 15), (14, 17),
    (15, 16), (15, 17), (16, 17), (16, 22), (18, 19), (18, 21), (18, 22), (18, 23),
    (19, 20), (19, 21), (19, 22), (20, 21), (20, 22), (20, 23), (21, 22), (21, 23),
    (22, 23)
]

# Create graph
G = nx.Graph(edges)

# Check graph patterns
def check_pattern(G):
    nodes = len(G.nodes)
    edges = len(G.edges)

    # Check for star graph
    degree_counts = [d for _, d in G.degree()]
    if degree_counts.count(nodes - 1) == 1 and degree_counts.count(1) == nodes - 1:
        return "Star"

    # Check for cycle graph
    if edges == nodes and all(d == 2 for d in degree_counts):
        return "Cycle"

    # Check for path graph
    if edges == nodes - 1 and degree_counts.count(2) == nodes - 2 and degree_counts.count(1) == 2:
        return "Path"

    # Check for grid graph (approximation for square/rectangular grid)
    root = int(nodes**0.5)
    if root * root == nodes:
        expected_edges = 2 * nodes - 2 * root
        if edges == expected_edges:
            return "Grid"

    # Check for complete graph
    if edges == nodes * (nodes - 1) // 2:
        return "Complete"

    # Check for clustered graph (communities or dense subgraphs)
    components = list(nx.connected_components(G))
    if len(components) > 1:
        return "Clustered"

    # Default to random graph
    return "Random"

print(check_pattern(G))
```