```python
import networkx as nx

# Define the edge list
edge_list = [(0, 1), (0, 2), (0, 5), (0, 6), (0, 8), (0, 9), (0, 10), (0, 11), (1, 2), (1, 3), (1, 4), (1, 7), (1, 9), (1, 10), (1, 11), (1, 21), (2, 4), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (2, 11), (3, 5), (3, 6), (3, 8), (3, 9), (3, 10), (3, 11), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (5, 6), (5, 7), (5, 8), (5, 10), (5, 11), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 19), (7, 8), (7, 9), (7, 10), (7, 11), (8, 9), (8, 11), (9, 10), (9, 12), (10, 11), (10, 12), (12, 13), (12, 14), (12, 15), (12, 17), (12, 19), (12, 20), (12, 21), (13, 14), (13, 16), (13, 17), (13, 18), (13, 19), (13, 20), (13, 21), (14, 16), (14, 18), (14, 19), (14, 20), (14, 21), (14, 22), (15, 16), (15, 18), (15, 20), (15, 21), (16, 17), (16, 18), (16, 21), (16, 22), (17, 18), (17, 19), (17, 20), (17, 21), (17, 22), (18, 20), (18, 22), (19, 20), (19, 21), (19, 22), (20, 22), (21, 22)]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Check graph patterns
def is_star(graph):
    degrees = [deg for _, deg in graph.degree()]
    return degrees.count(len(graph) - 1) == 1 and degrees.count(1) == len(graph) - 1

def is_cycle(graph):
    return nx.is_connected(graph) and all(deg == 2 for _, deg in graph.degree())

def is_path(graph):
    return nx.is_connected(graph) and sum(deg == 1 for _, deg in graph.degree()) == 2 and all(deg <= 2 for _, deg in graph.degree())

def is_grid(graph):
    # A grid graph has nodes arranged in a rectangular grid, with edges connecting adjacent nodes.
    # Check if the graph matches the structure of a grid graph.
    try:
        rows, cols = nx.grid_graph(dim=[len(graph.nodes), len(graph.nodes)]).graph['dim']
        return nx.is_isomorphic(graph, nx.grid_graph(dim=[rows, cols]))
    except:
        return False

def is_complete(graph):
    return nx.is_connected(graph) and len(graph.edges) == len(graph.nodes) * (len(graph.nodes) - 1) // 2

def is_clustered(graph):
    # A clustered graph has high clustering coefficient.
    return nx.average_clustering(graph) > 0.5

def is_random(graph):
    # A random graph typically has low clustering coefficient and no specific structure.
    return not (is_star(graph) or is_cycle(graph) or is_path(graph) or is_grid(graph) or is_complete(graph) or is_clustered(graph))

if is_star(G):
    print("Star")
elif is_cycle(G):
    print("Cycle")
elif is_path(G):
    print("Path")
elif is_grid(G):
    print("Grid")
elif is_complete(G):
    print("Complete")
elif is_clustered(G):
    print("Clustered Graph")
elif is_random(G):
    print("Random Graph")
else:
    print("Unknown")
```