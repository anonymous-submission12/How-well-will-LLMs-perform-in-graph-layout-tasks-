```python
from collections import deque

# Graph data
edges = [(0, 4), (0, 9), (0, 11), (1, 2), (1, 22), (1, 24), (2, 23), (3, 6), (3, 7), (3, 9), 
         (3, 12), (3, 18), (3, 24), (4, 5), (6, 10), (6, 12), (6, 18), (6, 24), (8, 11), (8, 16), 
         (8, 22), (10, 13), (10, 16), (10, 24), (10, 25), (11, 18), (11, 19), (11, 25), (11, 26), 
         (13, 18), (13, 21), (13, 24), (14, 24), (14, 25), (15, 21), (16, 21), (16, 23), (16, 26), 
         (17, 18), (17, 19), (18, 22), (18, 26), (19, 20), (19, 23), (19, 24), (21, 22), (22, 23), 
         (23, 26), (24, 26)]

# Build graph from edge list
graph = {}
for u, v in edges:
    graph.setdefault(u, []).append(v)
    graph.setdefault(v, []).append(u)

def bfs_shortest_path(graph, start, end):
    queue = deque([(start, 0)])
    visited = set()
    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph.get(current, []):
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return float('inf')

# Calculate shortest path length between node '9' and '25'
print(bfs_shortest_path(graph, 9, 25))
```