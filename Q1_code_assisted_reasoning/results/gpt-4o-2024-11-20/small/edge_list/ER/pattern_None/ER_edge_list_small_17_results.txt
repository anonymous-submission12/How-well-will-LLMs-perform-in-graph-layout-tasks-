```python
import networkx as nx

# Define the graph using the edge list
edges = [(0, 12), (1, 9), (1, 10), (1, 21), (2, 3), (2, 6), (2, 17), (2, 21), (2, 24), 
         (3, 4), (3, 5), (3, 8), (3, 13), (4, 10), (4, 11), (4, 15), (4, 20), (5, 6), 
         (6, 8), (6, 9), (6, 26), (6, 28), (7, 27), (8, 22), (8, 25), (9, 11), (10, 22), 
         (10, 23), (11, 22), (12, 16), (12, 20), (13, 14), (13, 15), (14, 18), (14, 19), 
         (14, 28), (16, 28), (17, 28), (18, 22), (19, 22), (20, 23), (22, 23), (23, 27), 
         (27, 28)]
G = nx.Graph(edges)

# Check for graph patterns
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for Path
    if nx.is_connected(G) and m == n - 1 and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for Grid
    # A grid graph has nodes arranged in a rectangular lattice structure
    if nx.is_connected(G) and n > 1 and m == 2 * n - 2:
        return "Grid"
    
    # Check for Complete
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered graph
    # A clustered graph has dense subgraphs (communities) with sparse connections between them
    if nx.number_connected_components(G) > 1 or nx.algorithms.community.modularity(G, [list(c) for c in nx.connected_components(G)]) > 0.3:
        return "Clustered graph"
    
    # Default to Random graph
    return "Random graph"

print(determine_graph_pattern(G))
```