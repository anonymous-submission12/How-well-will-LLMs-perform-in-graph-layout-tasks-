Here is the Python code to determine the graph pattern:

```python
import networkx as nx

# Input graph as an edge list
edges = [(0, 2), (0, 5), (0, 10), (0, 18), (1, 5), (1, 13), (1, 26), (2, 6), (2, 24), (2, 26), 
         (3, 13), (3, 18), (3, 23), (3, 25), (4, 6), (4, 8), (4, 11), (4, 12), (4, 17), (4, 24), 
         (4, 25), (5, 6), (5, 13), (5, 25), (6, 7), (6, 11), (6, 20), (6, 23), (7, 17), (7, 20), 
         (8, 19), (9, 16), (9, 20), (9, 21), (11, 12), (11, 21), (12, 15), (12, 24), (14, 15), 
         (16, 24), (17, 26), (19, 25), (21, 22), (23, 24), (24, 25)]

# Create a graph using NetworkX
G = nx.Graph()
G.add_edges_from(edges)

# Helper function to check graph patterns
def graph_pattern(G):
    n = G.number_of_nodes()
    m = G.number_of_edges()
    
    # Star: One central node connected to all others
    degrees = [d for _, d in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Cycle: Every node has degree 2, and forms a single cycle
    if all(d == 2 for _, d in G.degree()) and nx.is_connected(G):
        return "Cycle"
    
    # Path: Every node except two endpoints has degree 2
    if sorted(degrees).count(1) == 2 and sorted(degrees).count(2) == n - 2:
        return "Path"
    
    # Grid: Check if the graph is a grid-like structure
    # A grid's edges count should roughly match a grid layout, e.g., ~2*n for n nodes
    if len(G) > 2 and 2 * n <= m <= 3 * n:
        return "Grid"
    
    # Complete: Every pair of distinct nodes is connected (n choose 2 edges)
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Clustered graph: Check using modularity or community detection
    communities = list(nx.algorithms.community.greedy_modularity_communities(G))
    if len(communities) > 1:  # If graph divides into distinct clusters
        return "Clustered Graph"
    
    # Random graph: If none of the structured patterns fit
    return "Random Graph"

# Determine the graph pattern
print(graph_pattern(G))
```