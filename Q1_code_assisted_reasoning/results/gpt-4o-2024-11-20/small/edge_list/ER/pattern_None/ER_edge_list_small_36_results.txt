```python
import networkx as nx

# Define the edge list
edge_list = [(0, 4), (0, 6), (0, 25), (1, 6), (1, 10), (1, 11), (1, 12), (1, 14), (1, 19), (1, 20), (1, 26), (1, 28), 
             (2, 4), (2, 5), (2, 13), (2, 25), (3, 10), (3, 11), (4, 17), (4, 22), (4, 24), (4, 25), (4, 26), (5, 21), 
             (6, 9), (6, 24), (6, 28), (7, 15), (7, 25), (7, 27), (8, 22), (9, 13), (10, 22), (10, 25), (10, 26), 
             (11, 12), (11, 15), (11, 23), (11, 26), (13, 19), (13, 27), (14, 18), (14, 24), (14, 25), (15, 17), 
             (16, 22), (16, 28), (18, 19), (18, 24), (21, 24), (21, 26), (22, 23), (25, 28)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Determine the graph pattern
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star graph
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for Path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for Grid graph
    if nx.is_connected(G) and all(deg in [2, 3, 4] for deg in degrees):
        return "Grid"
    
    # Check for Complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered graph
    if nx.number_connected_components(G) > 1:
        return "Clustered graph"
    
    # Default to Random graph
    return "Random graph"

# Print the result
print(determine_graph_pattern(G))
```