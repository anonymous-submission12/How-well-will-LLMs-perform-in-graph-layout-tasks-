```python
import networkx as nx

# Define the graph from edge list
edge_list = [(0, 3), (0, 11), (0, 13), (0, 17), (0, 21), (0, 28), (1, 24), 
             (2, 4), (2, 15), (2, 22), (2, 28), (3, 21), (4, 14), (4, 20), 
             (4, 22), (5, 9), (5, 15), (5, 21), (5, 25), (6, 7), (6, 13), 
             (6, 23), (6, 26), (7, 10), (7, 24), (8, 15), (8, 24), (8, 26), 
             (8, 28), (9, 15), (9, 22), (9, 23), (9, 25), (9, 27), (10, 13), 
             (11, 12), (11, 22), (11, 25), (11, 27), (12, 14), (12, 27), 
             (14, 16), (14, 19), (15, 21), (15, 22), (16, 26), (17, 21), 
             (17, 26), (18, 26), (18, 27), (20, 26), (21, 24), (26, 28), 
             (27, 28)]

G = nx.Graph(edge_list)

# Helper functions to determine graph patterns
def is_star(graph):
    degrees = list(dict(graph.degree).values())
    return degrees.count(len(graph) - 1) == 1 and degrees.count(1) == len(graph) - 1

def is_cycle(graph):
    return nx.is_connected(graph) and all(deg == 2 for _, deg in graph.degree)

def is_path(graph):
    return nx.is_connected(graph) and list(dict(graph.degree).values()).count(2) == len(graph) - 2

def is_grid(graph):
    # Grid graphs have a regular row-column structure with nodes having degrees mostly 4 (except edges).
    rows, columns = 0, 0
    num_nodes = len(graph)
    while rows * columns < num_nodes:
        if rows * columns == num_nodes:
            break
        if rows > columns:
            columns += 1
        else:
            rows += 1
    grid_nodes = rows * columns
    return grid_nodes == num_nodes and all(1 <= deg <= 4 for _, deg in graph.degree)

def is_complete(graph):
    n = len(graph)
    return graph.number_of_edges() == n * (n - 1) // 2

def is_clustered(graph):
    return nx.average_clustering(graph) > 0.7  # Arbitrary threshold for clustering coefficient

# Determine the type of graph
result = "random graph"
if is_star(G):
    result = "Star"
elif is_cycle(G):
    result = "Cycle"
elif is_path(G):
    result = "Path"
elif is_grid(G):
    result = "Grid"
elif is_complete(G):
    result = "Complete"
elif is_clustered(G):
    result = "clustered graph"

print(result)
```