```python
import networkx as nx

# Edge list
edges = [(0, 8), (0, 26), (0, 27), (1, 7), (1, 19), (1, 22), (2, 20), (2, 28), (3, 18), (3, 23), (3, 26), (4, 16), (5, 16), 
         (5, 19), (5, 21), (5, 24), (5, 28), (6, 22), (7, 18), (7, 26), (8, 15), (9, 10), (9, 14), (9, 24), (10, 22), 
         (11, 15), (11, 19), (11, 22), (11, 23), (12, 22), (12, 26), (13, 24), (13, 28), (14, 28), (15, 17), (15, 24), 
         (15, 25), (16, 26), (17, 20), (17, 27), (18, 25), (18, 26), (19, 21), (19, 23), (19, 28), (20, 25), (20, 28), 
         (21, 26), (23, 24)]

# Create the graph
G = nx.Graph(edges)

# Check patterns
def determine_graph_type(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star Graph
    degrees = [d for _, d in G.degree()]
    if degrees.count(n-1) == 1 and degrees.count(1) == n-1:
        return "Star"
    
    # Check for Cycle Graph
    if m == n and nx.is_connected(G) and all(degree == 2 for degree in degrees):
        return "Cycle"
    
    # Check for Path Graph
    if m == n-1 and nx.is_connected(G) and degrees.count(2) == n-2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for Grid Graph (Cartesian)
    sqrt_n = int(n**0.5)
    if sqrt_n**2 == n and nx.grid_graph(dim=[sqrt_n, sqrt_n]).edges == G.edges:
        return "Grid"
    
    # Check for Complete Graph
    if m == n*(n-1)//2:
        return "Complete"
    
    # Check for clustered graph
    components = nx.connected_components(G)
    for component in components:
        subgraph = G.subgraph(component)
        if len(subgraph.edges) < len(subgraph.nodes) * (len(subgraph.nodes) - 1) // 2:
            return "Clustered"
            
    # Default case: Random Graph
    return "Random"

print(determine_graph_type(G))
```