```python
import networkx as nx

# Define the edge list
edges = [(0, 5), (0, 8), (0, 12), (1, 15), (1, 20), (1, 22), (1, 24), (2, 7), (2, 9), (2, 14),
         (2, 19), (2, 26), (3, 13), (4, 26), (5, 10), (5, 19), (5, 21), (5, 22), (5, 24), (6, 9),
         (8, 11), (9, 13), (9, 15), (9, 16), (9, 18), (9, 21), (9, 24), (10, 17), (10, 18),
         (10, 22), (11, 14), (12, 18), (12, 26), (13, 21), (13, 26), (14, 19), (14, 25),
         (15, 18), (15, 24), (16, 19), (16, 21), (17, 25), (18, 26), (19, 21), (21, 23), (22, 25)]

# Create a graph
G = nx.Graph(edges)

# Check the structure of the graph
def identify_graph_pattern(graph):
    num_nodes = len(graph.nodes)
    num_edges = len(graph.edges)
    
    # Check for Star pattern: one central node connects to all other nodes
    degrees = [degree for _, degree in graph.degree]
    max_degree = max(degrees)
    if max_degree == num_nodes - 1 and degrees.count(1) == num_nodes - 1:
        return "Star"
    
    # Check for Cycle pattern: all nodes form a closed loop
    if nx.is_cycle(graph):
        return "Cycle"
    
    # Check for Path pattern: a linear sequence of nodes
    if nx.is_path(graph):
        return "Path"
    
    # Check for Grid: a graph that resembles a lattice structure
    # This is determined by number of edges inappropriate for complete or star graph, assuming grid shape
    if num_edges > num_nodes * (num_nodes - 1) / 4 and not nx.is_complete(graph):
        return "Grid"
    
    # Check for Complete graph: each node connects to every other node
    if nx.is_complete(graph):
        return "Complete"
    
    # Check for Clustered graph: A graph that has clusters or communities with denser connections within clusters
    if nx.algorithms.community.modularity_max.greedy_modularity_communities(graph):
        return "Clustered Graph"

    return "Random Graph"


print(identify_graph_pattern(G))
```