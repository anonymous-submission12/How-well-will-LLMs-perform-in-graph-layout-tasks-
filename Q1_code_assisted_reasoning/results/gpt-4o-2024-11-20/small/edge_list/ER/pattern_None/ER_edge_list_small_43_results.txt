```python
import networkx as nx

# Define the edge list
edge_list = [(0, 22), (0, 25), (1, 17), (1, 25), (2, 3), (2, 23), (2, 27), (3, 11), (3, 14), (4, 24), 
             (5, 8), (5, 23), (5, 24), (5, 27), (6, 15), (6, 27), (7, 9), (7, 22), (8, 12), (8, 18), 
             (9, 24), (9, 27), (10, 15), (10, 20), (10, 23), (11, 13), (12, 23), (14, 15), (14, 17), 
             (14, 25), (15, 25), (16, 26), (16, 27), (18, 22), (19, 21), (20, 22), (21, 25), (21, 26), 
             (25, 27)]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Check for properties
def identify_graph_type(G):
    num_nodes = len(G.nodes)
    num_edges = len(G.edges)
    
    # Check complete graph
    if num_edges == num_nodes * (num_nodes - 1) // 2:
        return "Complete"
    
    # Check star graph
    if len([node for node in G.nodes if G.degree[node] == num_nodes - 1]) == 1:
        return "Star"
    
    # Check cycle graph
    if num_edges == num_nodes and nx.is_connected(G) and all(G.degree[node] == 2 for node in G.nodes):
        return "Cycle"
    
    # Check path graph
    if num_edges == num_nodes - 1 and nx.is_connected(G) and len([node for node in G.nodes if G.degree[node] == 1]) == 2:
        return "Path"
    
    # Check grid graph
    try:
        # Checking for a rectangular grid
        rows = cols = int(num_nodes ** 0.5)
        if rows * cols == num_nodes and all(G.degree[node] <= 4 for node in G.nodes):
            return "Grid"
    except:
        pass

    # Check clustered graph
    cliques = list(nx.find_cliques(G))
    if sum(len(clique) * (len(clique) - 1) // 2 for clique in cliques) >= num_edges * 0.8:
        return "Clustered graph"
    
    # Otherwise, it's a random graph
    return "Random graph"

print(identify_graph_type(G))
```