Here's the Python code to determine the type of graph:

```python
import networkx as nx

# Define the graph using the edge list
edges = [(0, 6), (0, 13), (0, 16), (1, 3), (1, 21), (2, 7), (3, 5), (3, 20), 
         (4, 9), (4, 22), (5, 14), (5, 22), (6, 12), (6, 18), (6, 21), (7, 9), 
         (7, 13), (7, 18), (8, 19), (9, 12), (10, 11), (10, 14), (11, 16), 
         (11, 18), (11, 19), (13, 14), (14, 15), (14, 21), (17, 22), (20, 21), 
         (21, 22)]

G = nx.Graph()
G.add_edges_from(edges)

# Check for different graph patterns
def is_star_graph(G):
    degrees = [degree for _, degree in G.degree()]
    return degrees.count(len(G.nodes) - 1) == 1 and degrees.count(1) == len(G.nodes) - 1

def is_cycle_graph(G):
    return nx.cycle_graph(len(G.nodes)).edges() == set(G.edges()) and nx.is_connected(G)

def is_path_graph(G):
    return nx.path_graph(len(G.nodes)).edges() == set(G.edges()) and nx.is_connected(G)

def is_grid_graph(G):
    # Check against all possible m x n grids where m*n == number of nodes in G
    for m in range(1, int(len(G.nodes)**0.5) + 2):
        if len(G.nodes) % m == 0:
            n = len(G.nodes) // m
            if nx.grid_2d_graph(m, n).size() == G.size():
                return True
    return False

def is_complete_graph(G):
    return G.size() == len(G.nodes) * (len(G.nodes) - 1) // 2

def is_clustered_graph(G):
    clustering_coefficients = nx.clustering(G)
    avg_clustering = sum(clustering_coefficients.values()) / len(clustering_coefficients)
    return avg_clustering > 0.5

def is_random_graph(G):
    # Basic heuristic: a non-clustered, non-patterned graph is considered random
    return not (is_star_graph(G) or is_cycle_graph(G) or is_path_graph(G) or 
                is_grid_graph(G) or is_complete_graph(G) or is_clustered_graph(G))

# Determine the type of graph
if is_star_graph(G):
    print("Star")
elif is_cycle_graph(G):
    print("Cycle")
elif is_path_graph(G):
    print("Path")
elif is_grid_graph(G):
    print("Grid")
elif is_complete_graph(G):
    print("Complete")
elif is_clustered_graph(G):
    print("Clustered graph")
elif is_random_graph(G):
    print("Random graph")
else:
    print("Unknown")
```