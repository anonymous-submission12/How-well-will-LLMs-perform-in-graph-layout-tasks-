```python
from collections import defaultdict

# Given edge list
edge_list = [
    (0, 1), (0, 24), (1, 6), (1, 23), (1, 26), (1, 28), (2, 10), (2, 22), (2, 28), 
    (3, 4), (3, 5), (3, 8), (3, 10), (3, 22), (3, 25), (3, 27), (4, 8), (4, 11), 
    (4, 19), (4, 24), (4, 28), (6, 12), (6, 28), (7, 13), (7, 16), (7, 18), (7, 19), 
    (8, 9), (8, 16), (8, 23), (9, 11), (9, 14), (9, 16), (9, 17), (9, 18), (9, 19), 
    (9, 27), (10, 12), (10, 19), (10, 21), (11, 13), (11, 14), (11, 21), (12, 23), 
    (13, 18), (14, 20), (15, 21), (15, 22), (15, 27), (18, 26), (20, 24), (22, 25), 
    (22, 26), (24, 28), (25, 28)
]

# Build adjacency list
graph = defaultdict(list)
for u, v in edge_list:
    graph[u].append(v)
    graph[v].append(u)

# Determine the number of nodes and edges
nodes = set()
for u, v in edge_list:
    nodes.add(u)
    nodes.add(v)
num_nodes = len(nodes)
num_edges = len(edge_list)

# Check for various patterns
def is_star():
    center_nodes = [node for node in graph if len(graph[node]) == num_nodes - 1]
    leaf_nodes = [node for node in graph if len(graph[node]) == 1]
    return len(center_nodes) == 1 and len(leaf_nodes) == num_nodes - 1

def is_cycle():
    return all(len(graph[node]) == 2 for node in graph) and num_edges == num_nodes

def is_path():
    end_nodes = [node for node in graph if len(graph[node]) == 1]
    return len(end_nodes) == 2 and num_edges == num_nodes - 1

def is_complete():
    return num_edges == num_nodes * (num_nodes - 1) // 2

def is_grid():
    # Heuristic check for grid: each node has degree 2, 3, or 4
    degree_count = [len(adj) for adj in graph.values()]
    return all(2 <= deg <= 4 for deg in degree_count)

def is_clustered():
    # Clustered: the graph should have dense subgraphs (this is heuristic-based)
    from networkx import Graph, connected_components
    import networkx as nx

    G = Graph()
    G.add_edges_from(edge_list)
    subgraph_density = []
    for component in connected_components(G):
        subgraph = G.subgraph(component)
        edges = subgraph.number_of_edges()
        nodes = subgraph.number_of_nodes()
        if nodes > 1:
            density = 2 * edges / (nodes * (nodes - 1))
            subgraph_density.append(density)
    return any(d > 0.5 for d in subgraph_density)  # Threshold for "clustered"

def is_random():
    # Random will be a fallback if no other pattern matches
    return True

# Determine the pattern
if is_star():
    print("Star")
elif is_cycle():
    print("Cycle")
elif is_path():
    print("Path")
elif is_complete():
    print("Complete")
elif is_grid():
    print("Grid")
elif is_clustered():
    print("Clustered Graph")
elif is_random():
    print("Random Graph")
```