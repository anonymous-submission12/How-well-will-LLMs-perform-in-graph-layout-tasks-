```python
import networkx as nx

# Define the edge list
edge_list = [
    (0, 13), (0, 18), (0, 20), (1, 6), (1, 8), (1, 10), (1, 16), (1, 17), 
    (2, 28), (3, 16), (3, 18), (3, 28), (3, 29), (4, 15), (4, 17), (4, 23), 
    (5, 23), (6, 12), (6, 22), (7, 11), (7, 18), (7, 23), (8, 9), (8, 26), 
    (9, 10), (9, 17), (9, 21), (10, 27), (11, 15), (11, 19), (11, 21), 
    (11, 26), (11, 28), (12, 16), (12, 17), (12, 29), (13, 17), (14, 16), 
    (14, 21), (14, 22), (14, 26), (15, 20), (15, 24), (16, 17), (16, 25), 
    (17, 21), (17, 25), (18, 21), (18, 29), (20, 25), (20, 29), (21, 27), 
    (22, 24), (22, 26), (22, 29), (23, 27), (25, 26), (27, 28)
]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Determine the graph pattern
num_nodes = G.number_of_nodes()
num_edges = G.number_of_edges()

# Star graph: One central node connected to all other nodes
def is_star(G):
    degree_counts = sorted([d for n, d in G.degree()])
    return degree_counts[-1] == len(G) - 1 and degree_counts[:-1] == [1] * (len(G) - 1)

# Cycle graph: All nodes are connected in a closed loop
def is_cycle(G):
    return nx.is_connected(G) and all(d == 2 for n, d in G.degree()) and num_edges == num_nodes

# Path graph: All nodes are connected in a linear path (except endpoints)
def is_path(G):
    return nx.is_connected(G) and sorted([d for n, d in G.degree()]) == [1] * 2 + [2] * (num_nodes - 2)

# Grid graph: A rectangular grid pattern
def is_grid(G):
    rows, cols = divmod(num_nodes, int(num_nodes**0.5))
    return rows * cols == num_nodes and nx.grid_2d_graph(rows, cols).edges() == edge_list

# Complete graph: Every node is connected to every other node
def is_complete(G):
    return num_edges == num_nodes * (num_nodes - 1) // 2

# Clustered graph: Nodes are grouped in clusters, with dense intra-cluster edges
def is_clustered(G):
    clusters = list(nx.connected_components(G))
    return len(clusters) > 1 and all(nx.density(G.subgraph(cluster)) > 0.5 for cluster in clusters)

# Random graph: If no other specific structure matches
def is_random(G):
    return True

if is_star(G):
    print("Star")
elif is_cycle(G):
    print("Cycle")
elif is_path(G):
    print("Path")
elif is_grid(G):
    print("Grid")
elif is_complete(G):
    print("Complete")
elif is_clustered(G):
    print("clustered graph")
elif is_random(G):
    print("random graph")
```