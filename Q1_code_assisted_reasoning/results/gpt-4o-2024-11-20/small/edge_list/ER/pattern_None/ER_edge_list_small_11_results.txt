```python
import networkx as nx

# Define the edge list
edge_list = [(0, 5), (0, 6), (0, 10), (0, 20), (1, 21), (2, 19), (2, 21), (3, 20), (3, 21), 
             (4, 5), (4, 17), (5, 14), (5, 20), (6, 7), (6, 10), (6, 12), (6, 17), (6, 21), 
             (7, 9), (7, 13), (7, 16), (7, 19), (8, 10), (8, 15), (8, 17), (8, 18), (9, 11), 
             (9, 15), (10, 11), (11, 17), (11, 20), (13, 18), (13, 20), (14, 19)]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Determine the graph pattern
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star graph
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for Path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for Grid graph
    if nx.is_connected(G) and nx.grid_graph(dim=[int(n**0.5), int(n**0.5)]).edges == G.edges:
        return "Grid"
    
    # Check for Complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered graph
    if nx.algorithms.community.greedy_modularity_communities(G):
        return "Clustered graph"
    
    # Default to Random graph
    return "Random graph"

print(determine_graph_pattern(G))
```