```python
import networkx as nx

# Define the edge list
edge_list = [(0, 1), (0, 8), (0, 16), (0, 26), (0, 28), (1, 5), (1, 14), (1, 16), (1, 20), (1, 21), 
             (2, 8), (2, 15), (3, 20), (4, 7), (4, 8), (4, 16), (4, 17), (4, 21), (4, 25), (4, 28), 
             (5, 20), (6, 14), (6, 16), (6, 25), (6, 28), (7, 26), (8, 10), (8, 11), (8, 18), (8, 21), 
             (8, 28), (9, 12), (9, 27), (9, 28), (11, 14), (11, 24), (12, 14), (13, 14), (13, 22), 
             (14, 27), (15, 25), (16, 27), (17, 25), (18, 22), (18, 25), (18, 27), (19, 22), (19, 26), 
             (20, 25), (21, 27), (23, 25), (24, 25)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Check for patterns
def determine_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for star graph
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(1) == 2 and degrees.count(2) == n - 2:
        return "Path"
    
    # Check for grid graph
    if nx.is_connected(G) and nx.grid_graph(dim=[int(n**0.5), int(n**0.5)]).edges == G.edges:
        return "Grid"
    
    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for clustered graph (heuristic: high clustering coefficient)
    if nx.average_clustering(G) > 0.5:
        return "Clustered graph"
    
    # Default to random graph
    return "Random graph"

# Determine the pattern
print(determine_pattern(G))
```