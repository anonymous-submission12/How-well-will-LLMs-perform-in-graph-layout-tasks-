```python
import networkx as nx

# Define the edge list
edge_list = [(0, 22), (0, 25), (1, 7), (1, 8), (1, 14), (1, 21), (2, 5), (2, 12), (2, 20), (2, 28), 
             (3, 6), (3, 16), (3, 23), (4, 8), (4, 14), (4, 15), (4, 16), (4, 27), (5, 13), (5, 22), 
             (5, 24), (6, 13), (6, 19), (6, 22), (7, 12), (7, 19), (7, 22), (8, 9), (9, 10), (9, 12), 
             (11, 18), (11, 22), (12, 15), (13, 15), (13, 18), (13, 23), (13, 25), (14, 19), (14, 25), 
             (14, 27), (15, 21), (15, 23), (15, 25), (16, 24), (17, 20), (17, 26), (18, 23), (19, 22), 
             (19, 23), (19, 28), (20, 23), (20, 25), (20, 26), (23, 27), (24, 25), (24, 26), (25, 27)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Check graph patterns
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for star graph
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for grid graph
    if nx.is_connected(G) and nx.grid_graph(dim=[int(n**0.5), int(n**0.5)]).edges == G.edges:
        return "Grid"
    
    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for clustered graph
    if nx.algorithms.community.greedy_modularity_communities(G):
        return "Clustered graph"
    
    # Default to random graph
    return "Random graph"

print(determine_graph_pattern(G))
```