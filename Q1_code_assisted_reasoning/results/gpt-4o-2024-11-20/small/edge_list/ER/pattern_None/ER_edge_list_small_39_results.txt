```python
import networkx as nx

# Define the edge list
edge_list = [(0, 6), (0, 10), (0, 24), (1, 7), (1, 15), (1, 17), (1, 20), (1, 22), (1, 23), 
             (2, 4), (2, 6), (2, 7), (2, 13), (2, 16), (2, 17), (2, 21), (3, 5), (3, 7), 
             (3, 10), (3, 11), (3, 12), (3, 14), (3, 15), (3, 19), (3, 20), (3, 22), 
             (4, 17), (4, 24), (5, 6), (5, 21), (6, 13), (7, 11), (7, 16), (8, 9), 
             (8, 10), (8, 22), (9, 11), (9, 24), (10, 17), (12, 14), (12, 25), 
             (13, 17), (13, 18), (14, 16), (14, 24), (15, 19), (15, 23), (16, 17), 
             (17, 19), (17, 22), (18, 19), (18, 24), (20, 24), (21, 25), (22, 26)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Determine the graph pattern
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star graph
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for Path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for Grid graph
    if nx.is_connected(G) and all(deg <= 4 for deg in degrees):
        return "Grid"
    
    # Check for Complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered graph
    if nx.number_connected_components(G) > 1:
        return "Clustered graph"
    
    # Default to Random graph
    return "Random graph"

# Print the result
print(determine_graph_pattern(G))
```