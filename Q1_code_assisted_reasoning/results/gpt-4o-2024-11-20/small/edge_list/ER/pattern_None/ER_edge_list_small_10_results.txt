```python
import networkx as nx

# Define the edge list
edge_list = [(0, 12), (0, 23), (0, 24), (1, 2), (1, 4), (1, 12), (1, 15), (2, 5), (2, 7), (2, 11), 
             (3, 8), (4, 6), (4, 16), (4, 18), (4, 22), (4, 24), (5, 7), (5, 8), (5, 9), (5, 16), 
             (6, 9), (7, 13), (7, 14), (7, 24), (8, 12), (9, 24), (10, 22), (12, 13), (12, 14), 
             (12, 15), (12, 21), (12, 24), (13, 24), (14, 17), (14, 21), (17, 18), (17, 23), 
             (17, 24), (19, 20), (20, 21), (22, 23)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Check for graph patterns
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star graph
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for Path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for Grid graph
    if nx.is_connected(G) and nx.grid_2d_graph(int(n**0.5), int(n**0.5)).edges == G.edges:
        return "Grid"
    
    # Check for Complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered graph
    if nx.algorithms.community.greedy_modularity_communities(G):
        return "Clustered graph"
    
    # Default to Random graph
    return "Random graph"

# Determine the graph pattern
print(determine_graph_pattern(G))
```