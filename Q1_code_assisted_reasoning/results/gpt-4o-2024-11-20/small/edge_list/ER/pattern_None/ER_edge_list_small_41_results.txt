```python
import networkx as nx

# Define the edge list
edge_list = [(0, 4), (0, 9), (0, 11), (1, 2), (1, 22), (1, 24), (2, 23), (3, 6), (3, 7), (3, 9), (3, 12), (3, 18), (3, 24), 
             (4, 5), (6, 10), (6, 12), (6, 18), (6, 24), (8, 11), (8, 16), (8, 22), (10, 13), (10, 16), (10, 24), (10, 25), 
             (11, 18), (11, 19), (11, 25), (11, 26), (13, 18), (13, 21), (13, 24), (14, 24), (14, 25), (15, 21), (16, 21), 
             (16, 23), (16, 26), (17, 18), (17, 19), (18, 22), (18, 26), (19, 20), (19, 23), (19, 24), (21, 22), (22, 23), 
             (23, 26), (24, 26)]

# Create a graph from the edge list
G = nx.Graph(edge_list)

# Check for graph patterns
def determine_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star graph
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for Path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for Grid graph
    if nx.is_connected(G) and nx.grid_2d_graph(int(n**0.5), int(n**0.5)).edges == G.edges:
        return "Grid"
    
    # Check for Complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered graph
    if nx.number_connected_components(G) > 1:
        return "Clustered graph"
    
    # Default to Random graph
    return "Random graph"

# Determine the graph pattern
print(determine_graph_pattern(G))
```