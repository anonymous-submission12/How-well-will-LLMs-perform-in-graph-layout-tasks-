```python
import networkx as nx

# Define the graph from the edge list
edge_list = [(0, 7), (0, 16), (0, 18), (0, 28), (1, 5), (1, 11), (1, 12), (1, 27), (2, 5), (2, 11), (2, 20), (3, 7), (3, 14), (3, 18), (3, 22), (4, 10), (5, 23), (6, 13), (6, 14), (6, 16), (6, 28), (7, 10), (7, 13), (7, 24), (8, 25), (8, 27), (9, 10), (9, 20), (9, 24), (10, 12), (10, 19), (10, 22), (10, 23), (11, 12), (11, 22), (11, 24), (11, 28), (12, 27), (13, 24), (13, 28), (14, 17), (14, 26), (14, 28), (15, 21), (15, 27), (16, 18), (16, 24), (16, 27), (17, 20), (18, 20), (18, 28), (19, 28), (20, 21), (22, 25), (23, 26)]
G = nx.Graph(edge_list)

# Check for graph patterns
def check_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for Star graph
    degrees = [deg for _, deg in G.degree()]
    if max(degrees) == n - 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for Path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(1) == 2 and degrees.count(2) == n - 2:
        return "Path"
    
    # Check for Grid graph
    if nx.is_connected(G) and nx.grid_2d_graph(int(n**0.5), int(n**0.5)).edges == G.edges:
        return "Grid"
    
    # Check for Complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for Clustered graph
    if nx.algorithms.community.greedy_modularity_communities(G):
        return "Clustered graph"
    
    # Default to Random graph
    return "Random graph"

print(check_graph_pattern(G))
```