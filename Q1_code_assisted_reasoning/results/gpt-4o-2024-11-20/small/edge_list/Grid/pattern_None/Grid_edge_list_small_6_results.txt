```python
import networkx as nx

# Define graph data
edges = [(0, 1), (0, 8), (1, 2), (1, 9), (2, 3), (2, 10), (3, 4), (3, 11),
         (4, 5), (4, 12), (5, 6), (5, 13), (6, 7), (6, 14), (7, 15), (8, 9),
         (8, 16), (9, 10), (9, 17), (10, 11), (10, 18), (11, 12), (11, 19),
         (12, 13), (12, 20), (13, 14), (13, 21), (14, 15), (14, 22), (15, 23),
         (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23)]

# Create graph
G = nx.Graph()
G.add_edges_from(edges)

# Define graph patterns
def is_star(graph):
    degrees = [d for _, d in graph.degree()]
    return degrees.count(len(graph.nodes) - 1) == 1 and degrees.count(1) == len(graph.nodes) - 1

def is_cycle(graph):
    return nx.is_connected(graph) and all(d == 2 for _, d in graph.degree())

def is_path(graph):
    return nx.is_connected(graph) and sum(d == 1 for _, d in graph.degree()) == 2 and all(d <= 2 for _, d in graph.degree())

def is_grid(graph):
    # Check if the graph arrangement resembles a 2D grid
    num_nodes = len(graph.nodes)
    num_edges = len(graph.edges)
    sqrt_num = int(num_nodes**0.5)
    return sqrt_num * sqrt_num == num_nodes and num_edges == (2 * num_nodes - 2 * sqrt_num)

def is_complete(graph):
    num_nodes = len(graph.nodes)
    return len(graph.edges) == num_nodes * (num_nodes - 1) // 2

def is_clustered(graph):
    # Check modularity for community detection
    communities = list(nx.community.greedy_modularity_communities(graph))
    return len(communities) > 1 and nx.is_connected(graph)

def is_random(graph):
    # Random graph lacks distinguishing structure of other types
    return not (is_star(graph) or is_cycle(graph) or is_path(graph) or 
                is_grid(graph) or is_complete(graph) or is_clustered(graph))

# Determine graph pattern
if is_star(G):
    print("Star")
elif is_cycle(G):
    print("Cycle")
elif is_path(G):
    print("Path")
elif is_grid(G):
    print("Grid")
elif is_complete(G):
    print("Complete")
elif is_clustered(G):
    print("Clustered Graph")
elif is_random(G):
    print("Random Graph")
```