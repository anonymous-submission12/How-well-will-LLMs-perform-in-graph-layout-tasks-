```python
import networkx as nx

# Define the graph as an edge list
edge_list = [(0, 1), (0, 7), (1, 2), (1, 8), (2, 3), (2, 9), (3, 4), (3, 10),
             (4, 5), (4, 11), (5, 6), (5, 12), (6, 13), (7, 8), (7, 14), 
             (8, 9), (8, 15), (9, 10), (9, 16), (10, 11), (10, 17), (11, 12), 
             (11, 18), (12, 13), (12, 19), (13, 20), (14, 15), (14, 21), 
             (15, 16), (15, 22), (16, 17), (16, 23), (17, 18), (17, 24), 
             (18, 19), (18, 25), (19, 20), (19, 26), (20, 27), 
             (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27)]

# Create a graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Determine the type of graph
def identify_graph_type(graph):
    n = len(graph.nodes)
    m = len(graph.edges)
    
    # Check for star graph
    center_nodes = [node for node, degree in graph.degree if degree == n - 1]
    if len(center_nodes) == 1 and m == n - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_connected(graph) and all(degree == 2 for node, degree in graph.degree):
        return "Cycle"
    
    # Check for path graph
    if nx.is_connected(graph) and sum(1 for _, degree in graph.degree if degree == 1) == 2:
        return "Path"
    
    # Check for grid graph
    # A grid graph has nodes of degree 2, 3, or 4 and forms a 2D lattice
    degrees = [degree for _, degree in graph.degree]
    if set(degrees).issubset({2, 3, 4}):
        return "Grid"
    
    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for clustered graph
    # A clustered graph has dense clusters of nodes with high connectivity
    clustering_coefficients = nx.clustering(graph).values()
    avg_clustering = sum(clustering_coefficients) / n
    if avg_clustering > 0.5:
        return "Clustered graph"
    
    # Default to random graph
    return "Random graph"

# Output the type of graph
print(identify_graph_type(G))
```