```python
import networkx as nx

# Define the edge list
edge_list = [(0, 1), (0, 12), (1, 2), (1, 13), (2, 3), (2, 14), (3, 4), (3, 15), 
             (4, 5), (4, 16), (5, 6), (5, 17), (6, 7), (6, 18), (7, 8), (7, 19), 
             (8, 9), (8, 20), (9, 10), (9, 21), (10, 11), (10, 22), (11, 23), 
             (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), 
             (19, 20), (20, 21), (21, 22), (22, 23)]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Determine the pattern
def determine_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for star graph
    degrees = [deg for _, deg in G.degree()]
    if degrees.count(n - 1) == 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(1) == 2 and degrees.count(2) == n - 2:
        return "Path"
    
    # Check for grid graph
    if nx.is_connected(G) and all(deg in {2, 3, 4} for deg in degrees):
        return "Grid"
    
    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for clustered graph
    if nx.number_connected_components(G) > 1:
        return "Clustered graph"
    
    # Default to random graph
    return "Random graph"

print(determine_pattern(G))
```