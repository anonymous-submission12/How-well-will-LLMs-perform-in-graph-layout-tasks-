```python
import networkx as nx

# Define the edge list
edge_list = [(0, 1), (0, 14), (1, 2), (1, 15), (2, 3), (2, 16), (3, 4), (3, 17), 
             (4, 5), (4, 18), (5, 6), (5, 19), (6, 7), (6, 20), (7, 8), (7, 21), 
             (8, 9), (8, 22), (9, 10), (9, 23), (10, 11), (10, 24), (11, 12), 
             (11, 25), (12, 13), (12, 26), (13, 27), (14, 15), (15, 16), (16, 17), 
             (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), 
             (24, 25), (25, 26), (26, 27)]

# Create a graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Check for patterns
def check_graph_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for star graph
    degrees = [deg for _, deg in G.degree()]
    if degrees.count(n - 1) == 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_connected(G) and all(deg == 2 for deg in degrees) and m == n:
        return "Cycle"
    
    # Check for path graph
    if nx.is_connected(G) and degrees.count(1) == 2 and degrees.count(2) == n - 2:
        return "Path"
    
    # Check for grid graph
    if nx.is_connected(G):
        rows = cols = int(n**0.5)
        if rows * cols == n and m == 2 * (rows * (cols - 1)):
            return "Grid"
    
    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for clustered graph (heuristic: high clustering coefficient)
    clustering_coeff = nx.average_clustering(G)
    if clustering_coeff > 0.5:
        return "Clustered graph"
    
    # Check for random graph (fallback)
    return "Random graph"

# Determine the pattern
print(check_graph_pattern(G))
```