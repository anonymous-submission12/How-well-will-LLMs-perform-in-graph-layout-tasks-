```python
import networkx as nx

# Define the edge list
edge_list = [(0, 1), (0, 6), (1, 2), (1, 7), (2, 3), (2, 8), (3, 4), (3, 9), (4, 5), (4, 10), (5, 11), 
             (6, 7), (6, 12), (7, 8), (7, 13), (8, 9), (8, 14), (9, 10), (9, 15), (10, 11), (10, 16), 
             (11, 17), (12, 13), (12, 18), (13, 14), (13, 19), (14, 15), (14, 20), (15, 16), (15, 21), 
             (16, 17), (16, 22), (17, 23), (18, 19), (18, 24), (19, 20), (19, 25), (20, 21), (20, 26), 
             (21, 22), (21, 27), (22, 23), (22, 28), (23, 29), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29)]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Determine the pattern
def determine_pattern(G):
    n = len(G.nodes)
    m = len(G.edges)
    
    # Check for star graph
    degrees = [deg for _, deg in G.degree()]
    if degrees.count(n - 1) == 1 and degrees.count(1) == n - 1:
        return "Star"
    
    # Check for cycle graph
    if nx.is_connected(G) and m == n and all(deg == 2 for deg in degrees):
        return "Cycle"
    
    # Check for path graph
    if nx.is_connected(G) and m == n - 1 and degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"
    
    # Check for grid graph
    rows = int(n**0.5)
    if rows * rows == n and nx.grid_2d_graph(rows, rows).edges == G.edges:
        return "Grid"
    
    # Check for complete graph
    if m == n * (n - 1) // 2:
        return "Complete"
    
    # Check for clustered graph (heuristic: high clustering coefficient)
    if nx.average_clustering(G) > 0.5:
        return "Clustered graph"
    
    # Default to random graph
    return "Random graph"

print(determine_pattern(G))
```