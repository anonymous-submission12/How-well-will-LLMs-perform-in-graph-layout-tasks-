```python
def determine_graph_pattern(graph):
    n = len(graph)
    degrees = {node: len(neighbors) for node, neighbors in graph.items()}
    degree_values = list(degrees.values())
    
    # Check for Star
    if degree_values.count(n - 1) == 1 and degree_values.count(1) == n - 1:
        return "Star"
    
    # Check for Cycle
    if all(degree == 2 for degree in degree_values):
        return "Cycle"
    
    # Check for Path
    if degree_values.count(2) == n - 2 and degree_values.count(1) == 2:
        return "Path"
    
    # Check for Grid
    sqrt_n = int(n ** 0.5)
    if sqrt_n * sqrt_n == n and all(degree in {2, 3, 4} for degree in degree_values):
        return "Grid"
    
    # Check for Complete
    if all(degree == (n - 1) for degree in degree_values):
        return "Complete"
    
    # Check for Clustered Graph
    clusters_detected = False
    for node, neighbors in graph.items():
        for neighbor in neighbors:
            if not set(neighbors).issubset(graph[neighbor]):
                clusters_detected = True
                break
    if not clusters_detected:
        return "Clustered Graph"
    
    # Default to Random Graph
    return "Random Graph"

graph = {0: [1, 15], 1: [0, 2, 16], 2: [1, 3, 17], 3: [2, 4, 18], 4: [3, 5, 19], 5: [4, 6, 20], 6: [5, 7, 21], 7: [6, 8, 22], 8: [7, 9, 23], 9: [8, 10, 24], 10: [9, 11, 25], 11: [10, 12, 26], 12: [11, 13, 27], 13: [12, 14, 28], 14: [13, 29], 15: [0, 16], 16: [1, 15, 17], 17: [2, 16, 18], 18: [3, 17, 19], 19: [4, 18, 20], 20: [5, 19, 21], 21: [6, 20, 22], 22: [7, 21, 23], 23: [8, 22, 24], 24: [9, 23, 25], 25: [10, 24, 26], 26: [11, 25, 27], 27: [12, 26, 28], 28: [13, 27, 29], 29: [14, 28]}
print(determine_graph_pattern(graph))
```