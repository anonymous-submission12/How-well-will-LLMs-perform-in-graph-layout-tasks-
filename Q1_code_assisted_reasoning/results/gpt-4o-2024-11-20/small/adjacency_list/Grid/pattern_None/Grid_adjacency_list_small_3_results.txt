```python
def classify_graph(graph):
    n = len(graph)

    # Check for star graph
    degrees = [len(graph[node]) for node in graph]
    if degrees.count(1) == n - 1 and degrees.count(n - 1) == 1:
        return "Star"

    # Check for cycle graph
    if all(degree == 2 for degree in degrees):
        return "Cycle"

    # Check for path graph
    if degrees.count(1) == 2 and degrees.count(2) == n - 2:
        return "Path"

    # Check for grid graph
    sqrt_n = int(n**0.5)
    if sqrt_n * sqrt_n == n:
        is_grid = True
        for i in range(n):
            row, col = divmod(i, sqrt_n)
            expected_neighbors = []
            if row > 0:
                expected_neighbors.append((row - 1) * sqrt_n + col)
            if row < sqrt_n - 1:
                expected_neighbors.append((row + 1) * sqrt_n + col)
            if col > 0:
                expected_neighbors.append(row * sqrt_n + col - 1)
            if col < sqrt_n - 1:
                expected_neighbors.append(row * sqrt_n + col + 1)
            if sorted(graph[i]) != sorted(expected_neighbors):
                is_grid = False
                break
        if is_grid:
            return "Grid"

    # Check for complete graph
    if all(degree == n - 1 for degree in degrees):
        return "Complete"

    # Check for clustered graph (connected components > 1)
    visited = set()

    def dfs(node):
        stack = [node]
        while stack:
            current = stack.pop()
            for neighbor in graph[current]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    stack.append(neighbor)

    components = 0
    for node in graph:
        if node not in visited:
            components += 1
            dfs(node)
    if components > 1:
        return "Clustered graph"

    # If none of the above, assume it's a random graph
    return "Random graph"


graph = {0: [1, 12], 1: [0, 2, 13], 2: [1, 3, 14], 3: [2, 4, 15], 4: [3, 5, 16], 5: [4, 6, 17], 6: [5, 7, 18], 7: [6, 8, 19], 8: [7, 9, 20], 9: [8, 10, 21], 10: [9, 11, 22], 11: [10, 23], 12: [0, 13], 13: [1, 12, 14], 14: [2, 13, 15], 15: [3, 14, 16], 16: [4, 15, 17], 17: [5, 16, 18], 18: [6, 17, 19], 19: [7, 18, 20], 20: [8, 19, 21], 21: [9, 20, 22], 22: [10, 21, 23], 23: [11, 22]}

print(classify_graph(graph))
```