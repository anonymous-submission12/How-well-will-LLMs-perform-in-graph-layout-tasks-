```python
def determine_graph_pattern(adj_list):
    n = len(adj_list)

    # Check if the graph is a grid
    sqrt_n = int(n**0.5)
    if sqrt_n * sqrt_n == n:
        neighbors_count_grid = all(len(adj_list[node]) <= 4 for node in adj_list)
        if neighbors_count_grid:
            return "Grid"

    # Check if the graph is a path
    degrees = [len(adj_list[node]) for node in adj_list]
    if degrees.count(2) == n - 2 and degrees.count(1) == 2:
        return "Path"

    # Check if the graph is a cycle
    if degrees.count(2) == n:
        return "Cycle"

    # Check if the graph is a star
    center = degrees.count(n - 1)
    leaf = degrees.count(1)
    if center == 1 and leaf == n - 1:
        return "Star"

    # Check if the graph is complete
    is_complete = all(len(adj_list[node]) == n - 1 for node in adj_list)
    if is_complete:
        return "Complete"

    # Check if the graph is clustered
    detected_cluster = any(
        len(set(adj_list[node]) & set(adj_list[neighbor])) >= 2 for node in adj_list for neighbor in adj_list[node]
    )
    if detected_cluster:
        return "Clustered"

    # If none of the patterns fit, it is random
    return "Random"

adj_list = {0: [1, 7], 1: [0, 2, 8], 2: [1, 3, 9], 3: [2, 4, 10], 4: [3, 5, 11], 5: [4, 6, 12], 6: [5, 13], 7: [0, 8, 14], 8: [1, 7, 9, 15], 9: [2, 8, 10, 16], 10: [3, 9, 11, 17], 11: [4, 10, 12, 18], 12: [5, 11, 13, 19], 13: [6, 12, 20], 14: [7, 15], 15: [8, 14, 16], 16: [9, 15, 17], 17: [10, 16, 18], 18: [11, 17, 19], 19: [12, 18, 20], 20: [13, 19]}
print(determine_graph_pattern(adj_list))
```