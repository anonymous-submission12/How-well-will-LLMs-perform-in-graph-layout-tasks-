```python
def identify_graph_pattern(adjacency_list):
    # Helper function to check if the graph is a grid
    def is_grid():
        nodes = list(adjacency_list.keys())
        degree_counts = [len(adjacency_list[node]) for node in nodes]
        # In a 2D grid, inner nodes have degree 4, edge nodes have degree 3, and corner nodes have degree 2
        return all(degree in {2, 3, 4} for degree in degree_counts)

    # Check conditions for given patterns
    if is_grid():
        return "Grid"
    else:
        return "Unknown"

# Graph data
adjacency_list = {0: [1, 6], 1: [0, 2, 7], 2: [1, 3, 8], 3: [2, 4, 9], 4: [3, 5, 10], 5: [4, 11], 
                  6: [0, 7, 12], 7: [1, 6, 8, 13], 8: [2, 7, 9, 14], 9: [3, 8, 10, 15], 10: [4, 9, 11, 16], 11: [5, 10, 17], 
                  12: [6, 13, 18], 13: [7, 12, 14, 19], 14: [8, 13, 15, 20], 15: [9, 14, 16, 21], 16: [10, 15, 17, 22], 17: [11, 16, 23], 
                  18: [12, 19, 24], 19: [13, 18, 20, 25], 20: [14, 19, 21, 26], 21: [15, 20, 22, 27], 22: [16, 21, 23, 28], 23: [17, 22, 29], 
                  24: [18, 25], 25: [19, 24, 26], 26: [20, 25, 27], 27: [21, 26, 28], 28: [22, 27, 29], 29: [23, 28]}

# Determine the graph pattern
result = identify_graph_pattern(adjacency_list)
print(result)
```