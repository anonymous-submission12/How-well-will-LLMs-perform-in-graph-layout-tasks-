```python
def determine_graph_pattern(adj_list):
    # Check for Star pattern
    center_nodes = [node for node, neighbors in adj_list.items() if len(neighbors) == len(adj_list) - 1]
    if len(center_nodes) == 1:
        return "Star"

    # Check for Cycle pattern
    if all(len(neighbors) == 2 for neighbors in adj_list.values()):
        return "Cycle"

    # Check for Path pattern
    end_nodes = [node for node, neighbors in adj_list.items() if len(neighbors) == 1]
    if len(end_nodes) == 2 and all(len(neighbors) <= 2 for neighbors in adj_list.values()):
        return "Path"

    # Check for Grid pattern
    sqrt_len = int(len(adj_list)**0.5)
    if sqrt_len**2 == len(adj_list):
        for node, neighbors in adj_list.items():
            if len(neighbors) not in {2, 3, 4}:
                break
        else:
            return "Grid"

    # Check for Complete pattern
    if all(len(neighbors) == len(adj_list) - 1 for neighbors in adj_list.values()):
        return "Complete"

    # Check for Clustered graph
    # A clustered graph typically has groups of nodes with dense connections within groups and sparse connections between groups.
    # This is harder to define programmatically without additional information, so we skip this check.

    # Default to Random graph
    return "Random"

# Input adjacency list
adj_list = {0: [1, 14], 1: [0, 2, 15], 2: [1, 3, 16], 3: [2, 4, 17], 4: [3, 5, 18], 5: [4, 6, 19], 6: [5, 7, 20], 7: [6, 8, 21], 8: [7, 9, 22], 9: [8, 10, 23], 10: [9, 11, 24], 11: [10, 12, 25], 12: [11, 13, 26], 13: [12, 27], 14: [0, 15], 15: [1, 14, 16], 16: [2, 15, 17], 17: [3, 16, 18], 18: [4, 17, 19], 19: [5, 18, 20], 20: [6, 19, 21], 21: [7, 20, 22], 22: [8, 21, 23], 23: [9, 22, 24], 24: [10, 23, 25], 25: [11, 24, 26], 26: [12, 25, 27], 27: [13, 26]}

# Determine the graph pattern
print(determine_graph_pattern(adj_list))
```