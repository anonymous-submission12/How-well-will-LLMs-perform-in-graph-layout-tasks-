```python
def determine_graph_pattern(adj_list):
    # Check if the graph is a grid
    def is_grid(adj_list):
        rows = len(adj_list) // 2
        cols = 2
        for node, neighbors in adj_list.items():
            if len(neighbors) > 4:  # Grid nodes have at most 4 neighbors
                return False
        return True

    # Check if the graph is a cycle
    def is_cycle(adj_list):
        visited = set()
        def dfs(node, parent):
            visited.add(node)
            for neighbor in adj_list[node]:
                if neighbor not in visited:
                    if not dfs(neighbor, node):
                        return False
                elif neighbor != parent:
                    return False
            return True
        start_node = next(iter(adj_list))
        return dfs(start_node, None) and len(visited) == len(adj_list)

    # Check if the graph is a path
    def is_path(adj_list):
        endpoints = [node for node, neighbors in adj_list.items() if len(neighbors) == 1]
        if len(endpoints) != 2:
            return False
        visited = set()
        def dfs(node):
            visited.add(node)
            for neighbor in adj_list[node]:
                if neighbor not in visited:
                    dfs(neighbor)
        dfs(endpoints[0])
        return len(visited) == len(adj_list)

    # Check if the graph is a star
    def is_star(adj_list):
        center_nodes = [node for node, neighbors in adj_list.items() if len(neighbors) == len(adj_list) - 1]
        leaf_nodes = [node for node, neighbors in adj_list.items() if len(neighbors) == 1]
        return len(center_nodes) == 1 and len(leaf_nodes) == len(adj_list) - 1

    # Check if the graph is complete
    def is_complete(adj_list):
        n = len(adj_list)
        for neighbors in adj_list.values():
            if len(neighbors) != n - 1:
                return False
        return True

    # Check if the graph is clustered
    def is_clustered(adj_list):
        # A clustered graph typically has groups of nodes with high connectivity within groups
        # and sparse connectivity between groups. This is a heuristic check.
        for node, neighbors in adj_list.items():
            if len(neighbors) > len(adj_list) // 2:
                return False
        return True

    # Check if the graph is random
    def is_random(adj_list):
        # A random graph typically has no discernible pattern in connectivity.
        return True

    if is_grid(adj_list):
        return "Grid"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_star(adj_list):
        return "Star"
    elif is_complete(adj_list):
        return "Complete"
    elif is_clustered(adj_list):
        return "Clustered"
    else:
        return "Random"

adj_list = {0: [1, 11], 1: [0, 2, 12], 2: [1, 3, 13], 3: [2, 4, 14], 4: [3, 5, 15], 5: [4, 6, 16], 6: [5, 7, 17], 7: [6, 8, 18], 8: [7, 9, 19], 9: [8, 10, 20], 10: [9, 21], 11: [0, 12], 12: [1, 11, 13], 13: [2, 12, 14], 14: [3, 13, 15], 15: [4, 14, 16], 16: [5, 15, 17], 17: [6, 16, 18], 18: [7, 17, 19], 19: [8, 18, 20], 20: [9, 19, 21], 21: [10, 20]}
print(determine_graph_pattern(adj_list))
```