```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # If no path exists

graph = {0: [1, 12], 1: [0, 2, 13], 2: [1, 3, 14], 3: [2, 4, 15], 4: [3, 5, 16], 5: [4, 6, 17], 6: [5, 7, 18], 7: [6, 8, 19], 8: [7, 9, 20], 9: [8, 10, 21], 10: [9, 11, 22], 11: [10, 23], 12: [0, 13], 13: [1, 12, 14], 14: [2, 13, 15], 15: [3, 14, 16], 16: [4, 15, 17], 17: [5, 16, 18], 18: [6, 17, 19], 19: [7, 18, 20], 20: [8, 19, 21], 21: [9, 20, 22], 22: [10, 21, 23], 23: [11, 22]}

print(shortest_path_length(graph, 13, 2))
```