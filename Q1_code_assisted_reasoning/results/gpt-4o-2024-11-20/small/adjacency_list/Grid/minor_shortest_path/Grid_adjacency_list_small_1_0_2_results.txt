```python
from collections import deque

def shortest_path_length(graph, start, target):
    queue = deque([(start, 0)])  # (node, distance)
    visited = set()
    
    while queue:
        current, dist = queue.popleft()
        if current == target:
            return dist
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                queue.append((neighbor, dist + 1))
    return -1

graph = {0: [1, 11], 1: [0, 2, 12], 2: [1, 3, 13], 3: [2, 4, 14], 4: [3, 5, 15], 5: [4, 6, 16], 6: [5, 7, 17], 7: [6, 8, 18], 8: [7, 9, 19], 9: [8, 10, 20], 10: [9, 21], 11: [0, 12], 12: [1, 11, 13], 13: [2, 12, 14], 14: [3, 13, 15], 15: [4, 14, 16], 16: [5, 15, 17], 17: [6, 16, 18], 18: [7, 17, 19], 19: [8, 18, 20], 20: [9, 19, 21], 21: [10, 20]}

print(shortest_path_length(graph, 0, 2))
```