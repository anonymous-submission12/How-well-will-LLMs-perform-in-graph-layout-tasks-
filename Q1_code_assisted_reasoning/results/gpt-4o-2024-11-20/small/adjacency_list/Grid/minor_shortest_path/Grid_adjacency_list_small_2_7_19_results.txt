```python
from collections import deque

def shortest_path_length(adj_list, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current, distance = queue.popleft()
        
        if current == end:
            return distance
        
        if current not in visited:
            visited.add(current)
            for neighbor in adj_list[current]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))

# Graph data
adjacency_list = {0: [1, 5], 1: [0, 2, 6], 2: [1, 3, 7], 3: [2, 4, 8], 4: [3, 9], 
                  5: [0, 6, 10], 6: [1, 5, 7, 11], 7: [2, 6, 8, 12], 8: [3, 7, 9, 13], 
                  9: [4, 8, 14], 10: [5, 11, 15], 11: [6, 10, 12, 16], 12: [7, 11, 13, 17], 
                  13: [8, 12, 14, 18], 14: [9, 13, 19], 15: [10, 16, 20], 16: [11, 15, 17, 21], 
                  17: [12, 16, 18, 22], 18: [13, 17, 19, 23], 19: [14, 18, 24], 20: [15, 21], 
                  21: [16, 20, 22], 22: [17, 21, 23], 23: [18, 22, 24], 24: [19, 23]}

# Compute shortest path length
result = shortest_path_length(adjacency_list, 7, 19)
print(result)
```