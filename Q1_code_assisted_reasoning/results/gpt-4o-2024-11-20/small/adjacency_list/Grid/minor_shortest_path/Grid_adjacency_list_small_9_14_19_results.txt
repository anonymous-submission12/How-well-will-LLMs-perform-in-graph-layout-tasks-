```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)

    while queue:
        current_node, distance = queue.popleft()
        if current_node == end:
            return distance
        if current_node not in visited:
            visited.add(current_node)
            for neighbor in graph[current_node]:
                queue.append((neighbor, distance + 1))
    return -1  # Return -1 if no path exists

graph = {0: [1, 7], 1: [0, 2, 8], 2: [1, 3, 9], 3: [2, 4, 10], 4: [3, 5, 11], 5: [4, 6, 12], 6: [5, 13], 7: [0, 8, 14], 8: [1, 7, 9, 15], 9: [2, 8, 10, 16], 10: [3, 9, 11, 17], 11: [4, 10, 12, 18], 12: [5, 11, 13, 19], 13: [6, 12, 20], 14: [7, 15], 15: [8, 14, 16], 16: [9, 15, 17], 17: [10, 16, 18], 18: [11, 17, 19], 19: [12, 18, 20], 20: [13, 19]}

print(shortest_path_length(graph, 14, 19))
```