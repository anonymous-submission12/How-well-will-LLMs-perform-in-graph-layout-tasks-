```python
def determine_graph_pattern(adj_list):
    n = len(adj_list)
    degrees = [len(adj_list[node]) for node in adj_list]

    # Check for Cycle
    if all(degree == 2 for degree in degrees):
        return "Cycle"

    # Check for Path
    if degrees.count(1) == 2 and degrees.count(2) == n - 2:
        return "Path"

    # Check for Star
    if degrees.count(n - 1) == 1 and degrees.count(1) == n - 1:
        return "Star"

    # Check for Complete
    if all(degree == n - 1 for degree in degrees):
        return "Complete"

    # Check for Grid (not implemented in detail, as it requires specific structure)
    # Check for Clustered Graph (not implemented in detail, as it requires specific structure)
    # Check for Random Graph (not implemented in detail, as it requires specific structure)

    return "Unknown"

adj_list = {0: [1, 22], 1: [0, 2], 2: [1, 3], 3: [2, 4], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [6, 8], 8: [7, 9], 9: [8, 10], 10: [9, 11], 11: [10, 12], 12: [11, 13], 13: [12, 14], 14: [13, 15], 15: [14, 16], 16: [15, 17], 17: [16, 18], 18: [17, 19], 19: [18, 20], 20: [19, 21], 21: [20, 22], 22: [0, 21]}
print(determine_graph_pattern(adj_list))
```