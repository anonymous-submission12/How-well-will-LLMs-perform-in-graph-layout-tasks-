```python
def determine_graph_pattern(adj_list):
    # Check if the graph is a cycle
    num_nodes = len(adj_list)
    edge_count = sum(len(neighbors) for neighbors in adj_list.values()) // 2
    if all(len(neighbors) == 2 for neighbors in adj_list.values()) and edge_count == num_nodes:
        return "Cycle"
    return "Unknown"

# Input adjacency list
adjacency_list = {
    0: [1, 20], 1: [0, 2], 2: [1, 3], 3: [2, 4], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [6, 8], 8: [7, 9],
    9: [8, 10], 10: [9, 11], 11: [10, 12], 12: [11, 13], 13: [12, 14], 14: [13, 15], 15: [14, 16],
    16: [15, 17], 17: [16, 18], 18: [17, 19], 19: [18, 20], 20: [0, 19]
}

print(determine_graph_pattern(adjacency_list))
```