Here is the Python code to determine the graph pattern:

```python
from collections import defaultdict

# Graph adjacency list
graph = {0: [1, 25], 1: [0, 2], 2: [1, 3], 3: [2, 4], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [6, 8], 8: [7, 9], 9: [8, 10], 10: [9, 11], 11: [10, 12], 12: [11, 13], 13: [12, 14], 14: [13, 15], 15: [14, 16], 16: [15, 17], 17: [16, 18], 18: [17, 19], 19: [18, 20], 20: [19, 21], 21: [20, 22], 22: [21, 23], 23: [22, 24], 24: [23, 25], 25: [0, 24]}

# Function to check if a graph is a cycle
def is_cycle(graph):
    visited = set()
    nodes = list(graph.keys())
    start = nodes[0]
    stack = [(start, -1)]
    while stack:
        node, parent = stack.pop()
        if node in visited:
            continue
        visited.add(node)
        for neighbor in graph[node]:
            if neighbor != parent:
                stack.append((neighbor, node))
    return len(visited) == len(graph) and all(len(v) == 2 for v in graph.values())

# Determine the pattern
if is_cycle(graph):
    print("Cycle")
else:
    print("Unknown")
```