```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = {node: False for node in graph}
    queue = deque([(start, 0)])  # (current_node, current_distance)
    visited[start] = True

    while queue:
        current_node, current_distance = queue.popleft()

        if current_node == end:
            return current_distance

        for neighbor in graph[current_node]:
            if not visited[neighbor]:
                visited[neighbor] = True
                queue.append((neighbor, current_distance + 1))

graph = {0: [1, 23], 1: [0, 2], 2: [1, 3], 3: [2, 4], 4: [3, 5], 5: [4, 6], 6: [5, 7], 7: [6, 8], 8: [7, 9], 9: [8, 10], 10: [9, 11], 11: [10, 12], 12: [11, 13], 13: [12, 14], 14: [13, 15], 15: [14, 16], 16: [15, 17], 17: [16, 18], 18: [17, 19], 19: [18, 20], 20: [19, 21], 21: [20, 22], 22: [21, 23], 23: [0, 22]}
print(shortest_path_length(graph, 14, 7))
```