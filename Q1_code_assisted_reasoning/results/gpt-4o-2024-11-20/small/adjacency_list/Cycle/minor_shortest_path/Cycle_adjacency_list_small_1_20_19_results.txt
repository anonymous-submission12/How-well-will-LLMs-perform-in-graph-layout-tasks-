```python
from collections import deque

# Define the adjacency list
graph = {
    0: [1, 20], 1: [0, 2], 2: [1, 3], 3: [2, 4], 4: [3, 5], 5: [4, 6], 6: [5, 7], 
    7: [6, 8], 8: [7, 9], 9: [8, 10], 10: [9, 11], 11: [10, 12], 12: [11, 13], 
    13: [12, 14], 14: [13, 15], 15: [14, 16], 16: [15, 17], 17: [16, 18], 
    18: [17, 19], 19: [18, 20], 20: [0, 19]
}

def bfs_shortest_path(graph, start, goal):
    visited = set()
    queue = deque([(start, 0)])  # (node, path_length)
    
    while queue:
        node, distance = queue.popleft()
        
        if node == goal:
            return distance
        
        if node not in visited:
            visited.add(node)
            for neighbor in graph[node]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    
    return -1  # If there is no path

# Calculate the shortest path from node 20 to node 19
print(bfs_shortest_path(graph, 20, 19))
```