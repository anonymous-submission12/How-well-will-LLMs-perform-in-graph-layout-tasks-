```python
from collections import defaultdict

def determine_graph_pattern(adj_list):
    # Count the number of nodes and edges
    num_nodes = len(adj_list)
    num_edges = sum(len(neighbors) for neighbors in adj_list.values()) // 2

    # Check for Star pattern
    max_degree = max(len(neighbors) for neighbors in adj_list.values())
    if max_degree == num_nodes - 1 and num_edges == num_nodes - 1:
        return "Star"

    # Check for Cycle pattern
    if num_edges == num_nodes and all(len(neighbors) == 2 for neighbors in adj_list.values()):
        return "Cycle"

    # Check for Path pattern
    if num_edges == num_nodes - 1 and sum(len(neighbors) == 1 for neighbors in adj_list.values()) == 2:
        return "Path"

    # Check for Grid pattern
    # A grid graph has nodes arranged in a rectangular grid, each node connected to its neighbors.
    # This is a complex check, so we simplify by checking degree distribution.
    degree_counts = defaultdict(int)
    for neighbors in adj_list.values():
        degree_counts[len(neighbors)] += 1
    if 2 in degree_counts and 3 in degree_counts and 4 in degree_counts:
        return "Grid"

    # Check for Complete pattern
    if num_edges == num_nodes * (num_nodes - 1) // 2:
        return "Complete"

    # Check for Clustered graph
    # A clustered graph has groups of nodes with high connectivity within groups and sparse connectivity between groups.
    # This is a heuristic check based on average degree.
    avg_degree = sum(len(neighbors) for neighbors in adj_list.values()) / num_nodes
    if avg_degree > 2 and avg_degree < num_nodes - 1:
        return "Clustered graph"

    # Default to Random graph
    return "Random graph"

# Input adjacency list
adj_list = {
    0: [13, 18, 20], 1: [6, 8, 10, 16, 17], 2: [28], 3: [16, 18, 28, 29], 4: [15, 17, 23],
    5: [23], 6: [1, 12, 22], 7: [11, 18, 23], 8: [1, 9, 26], 9: [8, 10, 17, 21], 10: [1, 9, 27],
    11: [7, 15, 19, 21, 26, 28], 12: [6, 16, 17, 29], 13: [0, 17], 14: [16, 21, 22, 26],
    15: [4, 11, 20, 24], 16: [1, 3, 12, 14, 17, 25], 17: [1, 4, 9, 12, 13, 16, 21, 25],
    18: [0, 3, 7, 21, 29], 19: [11], 20: [0, 15, 25, 29], 21: [9, 11, 14, 17, 18, 27],
    22: [6, 14, 24, 26, 29], 23: [4, 5, 7, 27], 24: [15, 22], 25: [16, 17, 20, 26],
    26: [8, 11, 14, 22, 25], 27: [10, 21, 23, 28], 28: [2, 3, 11, 27], 29: [3, 12, 18, 20, 22]
}

# Determine the graph pattern
print(determine_graph_pattern(adj_list))
```