```python
from itertools import combinations
from math import isqrt

def is_star(graph):
    center_candidates = [node for node, neighbors in graph.items() if len(neighbors) == len(graph) - 1]
    if len(center_candidates) != 1:
        return False
    center = center_candidates[0]
    for node, neighbors in graph.items():
        if node != center and len(neighbors) != 1:
            return False
    return True

def is_cycle(graph):
    for neighbors in graph.values():
        if len(neighbors) != 2:
            return False

    visited = set()
    start_node = next(iter(graph))
    current, parent = start_node, None

    while current not in visited:
        visited.add(current)
        next_node = [n for n in graph[current] if n != parent][0]
        parent, current = current, next_node

    return len(visited) == len(graph)

def is_path(graph):
    end_nodes = [node for node, neighbors in graph.items() if len(neighbors) == 1]
    if len(end_nodes) != 2:
        return False

    visited = set()
    start_node = end_nodes[0]
    current, parent = start_node, None

    while current not in visited:
        visited.add(current)
        next_nodes = [n for n in graph[current] if n != parent]
        if len(next_nodes) > 1:
            return False
        parent, current = current, next_nodes[0] if next_nodes else None

    return len(visited) == len(graph)

def is_grid(graph):
    n = len(graph)
    sqrt_n = isqrt(n)
    if sqrt_n * sqrt_n != n:
        return False

    for node, neighbors in graph.items():
        row, col = divmod(node, sqrt_n)
        expected_neighbors = [
            (row - 1) * sqrt_n + col if row - 1 >= 0 else None,
            (row + 1) * sqrt_n + col if row + 1 < sqrt_n else None,
            row * sqrt_n + (col - 1) if col - 1 >= 0 else None,
            row * sqrt_n + (col + 1) if col + 1 < sqrt_n else None,
        ]
        expected_neighbors = set(filter(lambda x: x is not None, expected_neighbors))
        if set(neighbors) != expected_neighbors:
            return False

    return True

def is_complete(graph):
    n = len(graph)
    expected_degree = n - 1

    for neighbors in graph.values():
        if len(neighbors) != expected_degree:
            return False

    return True

def is_clustered_graph(graph):
    nodes = list(graph.keys())
    for cluster in combinations(nodes, 2):
        for u, v in combinations(cluster, 2):
            if v not in graph[u]:
                return False
    return True

def is_random_graph(graph):
    return not (is_star(graph) or is_cycle(graph) or is_path(graph) or
                is_grid(graph) or is_complete(graph) or is_clustered_graph(graph))

graph = {0: [4, 9, 11], 1: [2, 22, 24], 2: [1, 23], 3: [6, 7, 9, 12, 18, 24], 4: [0, 5], 5: [4], 6: [3, 10, 12, 18, 24], 7: [3], 8: [11, 16, 22], 9: [0, 3], 10: [6, 13, 16, 24, 25], 11: [0, 8, 18, 19, 25, 26], 12: [3, 6], 13: [10, 18, 21, 24], 14: [24, 25], 15: [21], 16: [8, 10, 21, 23, 26], 17: [18, 19], 18: [3, 6, 11, 13, 17, 22, 26], 19: [11, 17, 20, 23, 24], 20: [19], 21: [13, 15, 16, 22], 22: [1, 8, 18, 21, 23], 23: [2, 16, 19, 22, 26], 24: [1, 3, 6, 10, 13, 14, 19, 26], 25: [10, 11, 14], 26: [11, 16, 18, 23, 24]}

if is_star(graph):
    print("Star")
elif is_cycle(graph):
    print("Cycle")
elif is_path(graph):
    print("Path")
elif is_grid(graph):
    print("Grid")
elif is_complete(graph):
    print("Complete")
elif is_clustered_graph(graph):
    print("Clustered graph")
else:
    print("Random graph")
```