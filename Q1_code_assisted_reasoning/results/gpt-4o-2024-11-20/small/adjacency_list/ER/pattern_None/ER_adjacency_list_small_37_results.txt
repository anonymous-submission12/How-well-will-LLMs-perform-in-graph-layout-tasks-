```python
from collections import defaultdict

def graph_pattern(adj_list):
    # Count the number of nodes and edges
    num_nodes = len(adj_list)
    num_edges = sum(len(neighbors) for neighbors in adj_list.values()) // 2

    # Check for Star pattern
    max_degree = max(len(neighbors) for neighbors in adj_list.values())
    if max_degree == num_nodes - 1 and num_edges == num_nodes - 1:
        return "Star"

    # Check for Cycle pattern
    if num_edges == num_nodes and all(len(neighbors) == 2 for neighbors in adj_list.values()):
        return "Cycle"

    # Check for Path pattern
    if num_edges == num_nodes - 1 and sum(len(neighbors) == 1 for neighbors in adj_list.values()) == 2:
        return "Path"

    # Check for Grid pattern
    # A grid graph has a specific structure, so we approximate by checking degree distribution
    degree_counts = defaultdict(int)
    for neighbors in adj_list.values():
        degree_counts[len(neighbors)] += 1
    if 2 in degree_counts and 3 in degree_counts and degree_counts[2] > 0 and degree_counts[3] > 0:
        return "Grid"

    # Check for Complete graph
    if num_edges == num_nodes * (num_nodes - 1) // 2:
        return "Complete"

    # Check for Clustered graph
    # A clustered graph typically has groups of nodes with high internal connectivity
    # Approximate by checking if there are nodes with significantly higher degrees
    avg_degree = sum(len(neighbors) for neighbors in adj_list.values()) / num_nodes
    if any(len(neighbors) > avg_degree * 1.5 for neighbors in adj_list.values()):
        return "Clustered graph"

    # Default to Random graph
    return "Random graph"

# Input adjacency list
adj_list = {0: [1, 6, 9, 25], 1: [0, 4, 8], 2: [7, 13, 17], 3: [4, 5, 16, 19, 28, 29], 4: [1, 3, 12, 20, 27], 5: [3, 7, 9, 10], 6: [0, 23], 7: [2, 5, 12, 18, 22], 8: [1, 20, 27, 29], 9: [0, 5, 15, 24, 26, 28], 10: [5, 17], 11: [15, 28], 12: [4, 7, 18, 25], 13: [2, 17, 19], 14: [23], 15: [9, 11, 17, 28, 29], 16: [3, 26], 17: [2, 10, 13, 15], 18: [7, 12, 23, 29], 19: [3, 13, 26], 20: [4, 8, 27], 21: [24], 22: [7], 23: [6, 14, 18, 27, 28, 29], 24: [9, 21], 25: [0, 12], 26: [9, 16, 19, 28], 27: [4, 8, 20, 23], 28: [3, 9, 11, 15, 23, 26, 29], 29: [3, 8, 15, 18, 23, 28]}

# Determine the graph pattern
print(graph_pattern(adj_list))
```