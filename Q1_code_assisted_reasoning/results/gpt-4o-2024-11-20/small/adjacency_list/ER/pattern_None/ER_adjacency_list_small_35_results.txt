```python
from collections import defaultdict

def classify_graph(adj_list):
    # Helper functions
    def is_star(adj_list):
        central_nodes = [node for node, neighbors in adj_list.items() if len(neighbors) == len(adj_list) - 1]
        return len(central_nodes) == 1
    
    def is_cycle(adj_list):
        num_edges = sum(len(neighbors) for neighbors in adj_list.values()) // 2
        return num_edges == len(adj_list) and all(len(neighbors) == 2 for neighbors in adj_list.values())
    
    def is_path(adj_list):
        end_points = [node for node, neighbors in adj_list.items() if len(neighbors) == 1]
        return len(end_points) == 2 and all(len(neighbors) <= 2 for neighbors in adj_list.values())
    
    def is_grid(adj_list):
        nodes = list(adj_list.keys())
        edges = sum(len(neighbors) for neighbors in adj_list.values()) // 2
        # A rough condition for grid: |nodes| ~= |edges|
        return abs(len(nodes) - edges) <= 2
    
    def is_complete(adj_list):
        nodes = len(adj_list)
        return all(len(neighbors) == nodes - 1 for neighbors in adj_list.values())
    
    def is_clustered(adj_list):
        clusters = defaultdict(set)
        for node, neighbors in adj_list.items():
            clusters[frozenset(neighbors)].add(node)
        return len(clusters) < len(adj_list)
    
    def is_random(adj_list):
        # Assume randomness if none of the above structured patterns apply
        return True

    # Graph classification
    if is_star(adj_list):
        return "Star"
    if is_cycle(adj_list):
        return "Cycle"
    if is_path(adj_list):
        return "Path"
    if is_grid(adj_list):
        return "Grid"
    if is_complete(adj_list):
        return "Complete"
    if is_clustered(adj_list):
        return "Clustered graph"
    if is_random(adj_list):
        return "Random graph"

# Input adjacency list
adj_list = {
    0: [5, 8, 17], 1: [9, 17, 24], 2: [5], 3: [15, 21, 24], 4: [17, 25],
    5: [0, 2, 6, 9, 20, 23, 24, 26], 6: [5, 18, 26], 7: [16], 8: [0, 9, 11, 19, 24],
    9: [1, 5, 8, 21, 22], 10: [16], 11: [8, 17], 12: [23, 24], 13: [23],
    14: [21], 15: [3, 17, 20, 23, 25], 16: [7, 10, 23, 24], 17: [0, 1, 4, 11, 15, 20],
    18: [6], 19: [8], 20: [5, 15, 17, 21], 21: [3, 9, 14, 20, 24, 26], 22: [9],
    23: [5, 12, 13, 15, 16, 26], 24: [1, 3, 5, 8, 12, 16, 21], 25: [4, 15],
    26: [5, 6, 21, 23]
}

print(classify_graph(adj_list))
```