```python
from collections import defaultdict

def determine_graph_pattern(adj_list):
    # Count the number of edges and nodes
    num_nodes = len(adj_list)
    num_edges = sum(len(neighbors) for neighbors in adj_list.values()) // 2

    # Check for Star pattern
    center_nodes = [node for node, neighbors in adj_list.items() if len(neighbors) == num_nodes - 1]
    if len(center_nodes) == 1:
        return "Star"

    # Check for Cycle pattern
    if all(len(neighbors) == 2 for neighbors in adj_list.values()) and num_edges == num_nodes:
        return "Cycle"

    # Check for Path pattern
    end_nodes = [node for node, neighbors in adj_list.items() if len(neighbors) == 1]
    if len(end_nodes) == 2 and all(len(neighbors) <= 2 for neighbors in adj_list.values()):
        return "Path"

    # Check for Grid pattern
    degrees = sorted(len(neighbors) for neighbors in adj_list.values())
    if degrees.count(2) + degrees.count(3) + degrees.count(4) == num_nodes:
        return "Grid"

    # Check for Complete pattern
    if num_edges == num_nodes * (num_nodes - 1) // 2:
        return "Complete"

    # Check for Clustered graph
    clusters = defaultdict(set)
    for node, neighbors in adj_list.items():
        for neighbor in neighbors:
            clusters[node].add(neighbor)
            clusters[neighbor].add(node)
    cluster_sizes = [len(cluster) for cluster in clusters.values()]
    if max(cluster_sizes) > num_nodes // 2:
        return "Clustered graph"

    # Default to Random graph
    return "Random graph"

# Input adjacency list
adj_list = {
    0: [11, 20], 1: [5, 9], 2: [5, 11, 28], 3: [15, 17, 24], 4: [19, 21, 27],
    5: [1, 2], 6: [9, 24], 7: [9, 19, 20, 22, 23], 8: [9, 13, 15, 23, 26],
    9: [1, 6, 7, 8, 14, 15, 25, 26], 10: [17, 24], 11: [0, 2, 13, 19, 20, 23, 25],
    12: [14, 18, 28], 13: [8, 11, 17], 14: [9, 12, 22], 15: [3, 8, 9, 19, 23],
    16: [23], 17: [3, 10, 13, 25], 18: [12, 19], 19: [4, 7, 11, 15, 18, 21, 25, 28],
    20: [0, 7, 11, 27], 21: [4, 19], 22: [7, 14], 23: [7, 8, 11, 15, 16],
    24: [3, 6, 10, 28], 25: [9, 11, 17, 19, 26], 26: [8, 9, 25], 27: [4, 20],
    28: [2, 12, 19, 24]
}

# Determine the graph pattern
print(determine_graph_pattern(adj_list))
```