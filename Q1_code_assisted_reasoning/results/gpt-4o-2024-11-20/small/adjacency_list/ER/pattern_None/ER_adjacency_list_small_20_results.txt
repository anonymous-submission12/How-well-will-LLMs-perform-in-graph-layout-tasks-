```python
from collections import defaultdict

def graph_type(adjacency_list):
    def is_star():
        # A star graph has one central node connected to all others, which have degree 1
        degrees = {node: len(neighbors) for node, neighbors in adjacency_list.items()}
        central_nodes = [node for node, degree in degrees.items() if degree == len(adjacency_list) - 1]
        leaf_nodes = [node for node, degree in degrees.items() if degree == 1]
        return len(central_nodes) == 1 and len(leaf_nodes) == len(adjacency_list) - 1

    def is_cycle():
        # A cycle graph has all nodes with degree 2 and is connected
        if not is_connected():
            return False
        return all(len(neighbors) == 2 for neighbors in adjacency_list.values())

    def is_path():
        # A path graph has exactly 2 nodes of degree 1 and all other nodes of degree 2
        if not is_connected():
            return False
        degrees = [len(neighbors) for neighbors in adjacency_list.values()]
        return degrees.count(1) == 2 and degrees.count(2) == len(adjacency_list) - 2

    def is_grid():
        # A grid graph is a 2D structured connection of nodes
        # This is complex to verify; for now, assume false
        return False

    def is_complete():
        # A complete graph has all nodes connected to all others
        n = len(adjacency_list)
        return all(len(neighbors) == n - 1 for neighbors in adjacency_list.values())

    def is_clustered():
        # A clustered graph would have densely connected subgraphs
        # Possible through modularity detection, simplifying here
        return False

    def is_random():
        # A random graph lacks structure
        return not any([is_star(), is_cycle(), is_path(), is_grid(), is_complete(), is_clustered()])

    def is_connected():
        # Perform BFS to check if all nodes are reachable
        visited = set()
        queue = [list(adjacency_list.keys())[0]]

        while queue:
            node = queue.pop(0)
            if node not in visited:
                visited.add(node)
                queue.extend(neighbor for neighbor in adjacency_list[node] if neighbor not in visited)

        return len(visited) == len(adjacency_list)

    if is_star():
        return "Star"
    elif is_cycle():
        return "Cycle"
    elif is_path():
        return "Path"
    elif is_grid():
        return "Grid"
    elif is_complete():
        return "Complete"
    elif is_clustered():
        return "Clustered"
    elif is_random():
        return "Random"

adjacency_list = {
    0: [3, 11, 13, 17, 21, 28], 1: [24], 2: [4, 15, 22, 28], 3: [0, 21], 4: [2, 14, 20, 22], 
    5: [9, 15, 21, 25], 6: [7, 13, 23, 26], 7: [6, 10, 24], 8: [15, 24, 26, 28], 
    9: [5, 15, 22, 23, 25, 27], 10: [7, 13], 11: [0, 12, 22, 25, 27], 
    12: [11, 14, 27], 13: [0, 6, 10], 14: [4, 12, 16, 19], 15: [2, 5, 8, 9, 21, 22], 
    16: [14, 26], 17: [0, 21, 26], 18: [26, 27], 19: [14], 20: [4, 26], 
    21: [0, 3, 5, 15, 17, 24], 22: [2, 4, 9, 11, 15], 23: [6, 9], 24: [1, 7, 8, 21], 
    25: [5, 9, 11], 26: [6, 8, 16, 17, 18, 20, 28], 27: [9, 11, 12, 18, 28], 
    28: [0, 2, 8, 26, 27]
}

print(graph_type(adjacency_list))
```