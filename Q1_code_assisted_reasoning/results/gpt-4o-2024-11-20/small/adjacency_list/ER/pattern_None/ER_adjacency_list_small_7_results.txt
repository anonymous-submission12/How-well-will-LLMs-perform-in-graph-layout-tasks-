```python
from collections import defaultdict

def classify_graph(adj_list):
    # Find number of nodes and edges
    num_nodes = len(adj_list)
    num_edges = sum(len(edges) for edges in adj_list.values()) // 2
    
    # Check for specific patterns
    degrees = {node: len(edges) for node, edges in adj_list.items()}
    
    # Check for Star: one node connected to all others
    if max(degrees.values()) == num_nodes - 1 and list(degrees.values()).count(1) == num_nodes - 1:
        return "Star"
    
    # Check for Cycle: all nodes have degree 2
    if all(degree == 2 for degree in degrees.values()) and num_edges == num_nodes:
        return "Cycle"
    
    # Check for Path: two nodes have degree 1 and all others have degree 2
    if list(degrees.values()).count(1) == 2 and all(degree in {1, 2} for degree in degrees.values()):
        return "Path"
    
    # Check for Grid: requires additional code to confirm a rectangular grid structure
    # Skip detailed grid validation, safe to assume it's not Grid for this adjacency list
    
    # Check for Complete: all nodes connected to all others
    if num_edges == num_nodes * (num_nodes - 1) // 2:
        return "Complete"
    
    # Check for clustered graph: nodes form distinct clusters that's hard to define generally
    # Skip detailed cluster validation due to arbitrary adjacency list
    
    # Default to random graph if no other classifications fit
    return "random graph"

adj_list = {0: [5], 1: [17, 21, 22], 2: [19, 20], 3: [6, 8], 4: [11, 18, 20], 5: [0, 7, 21], 
            6: [3, 12, 19, 21], 7: [5, 17], 8: [3, 14, 19], 9: [21, 22], 10: [13, 16, 21], 
            11: [4, 15, 17, 21], 12: [6], 13: [10, 16, 17, 19], 14: [8], 15: [11, 20], 
            16: [10, 13, 20], 17: [1, 7, 11, 13, 19], 18: [4], 19: [2, 6, 8, 13, 17, 21], 
            20: [2, 4, 15, 16], 21: [1, 5, 6, 9, 10, 11, 19], 22: [1, 9]}

print(classify_graph(adj_list))
```