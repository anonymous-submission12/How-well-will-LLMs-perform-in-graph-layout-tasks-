```python
from collections import defaultdict

def check_graph_pattern(adj_list):
    nodes = list(adj_list.keys())
    edges = sum(len(adj_list[node]) for node in nodes) // 2

    def is_star():
        center_nodes = [node for node in nodes if len(adj_list[node]) == len(nodes) - 1]
        leaf_nodes = [node for node in nodes if len(adj_list[node]) == 1]
        return len(center_nodes) == 1 and len(center_nodes) + len(leaf_nodes) == len(nodes)

    def is_cycle():
        return all(len(adj_list[node]) == 2 for node in nodes) and edges == len(nodes)

    def is_path():
        degree_1 = [node for node in nodes if len(adj_list[node]) == 1]
        degree_2 = [node for node in nodes if len(adj_list[node]) == 2]
        return len(degree_1) == 2 and len(degree_1) + len(degree_2) == len(nodes)

    def is_grid():
        rows, cols = 0, 0
        sqrt_nodes = int(len(nodes)**0.5)
        if sqrt_nodes * sqrt_nodes == len(nodes):  # Ensure perfect square for grid-like structure
            rows, cols = sqrt_nodes, sqrt_nodes
        elif len(nodes) == rows * (rows + 1):  # Potential rectangular grid case
            cols = rows + 1
        if rows and cols:
            expected_edges = (rows - 1) * cols + (cols - 1) * rows
            return edges == expected_edges
        return False

    def is_complete():
        return edges == len(nodes) * (len(nodes) - 1) // 2

    def is_clustered():
        visited = set()
        cluster_sizes = []

        def dfs(node):
            visited.add(node)
            size = 1
            for neighbor in adj_list[node]:
                if neighbor not in visited:
                    size += dfs(neighbor)
            return size

        for node in nodes:
            if node not in visited:
                cluster_sizes.append(dfs(node))
        return all(size >= 3 for size in cluster_sizes)

    def is_random():
        return True  # Default fallback if none of the above patterns match

    if is_star():
        return 'Star'
    elif is_cycle():
        return 'Cycle'
    elif is_path():
        return 'Path'
    elif is_grid():
        return 'Grid'
    elif is_complete():
        return 'Complete'
    elif is_clustered():
        return 'Clustered graph'
    else:
        return 'Random graph'

# Adjacency list
adj_list = {
    0: [17], 1: [3, 14], 2: [15, 17, 18], 3: [1, 8, 9, 11, 13], 4: [9, 14, 16],
    5: [18, 20], 6: [7, 14, 20], 7: [6], 8: [3, 9], 9: [3, 4, 8, 15, 18],
    10: [12], 11: [3, 12, 13, 15], 12: [10, 11, 14, 18, 19],
    13: [3, 11, 14, 15, 17, 18], 14: [1, 4, 6, 12, 13],
    15: [2, 9, 11, 13], 16: [4, 20, 21],
    17: [0, 2, 13, 20], 18: [2, 5, 9, 12, 13, 21], 19: [12],
    20: [5, 6, 16, 17], 21: [16, 18]
}

print(check_graph_pattern(adj_list))
```