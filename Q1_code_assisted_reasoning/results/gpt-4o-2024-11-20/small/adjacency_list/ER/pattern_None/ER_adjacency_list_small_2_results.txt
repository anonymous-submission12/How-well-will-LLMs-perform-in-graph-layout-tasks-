```python
def graph_type(adjacency_list):
    # Helper function to count edges
    def count_edges(adj_list):
        return sum(len(neighbors) for neighbors in adj_list.values()) // 2

    # Check for Star Graph
    def is_star_graph(adj_list):
        degree_counts = [len(v) for v in adj_list.values()]
        center_count = degree_counts.count(len(adj_list) - 1)
        leaf_count = degree_counts.count(1)
        return center_count == 1 and leaf_count == len(adj_list) - 1

    # Check for Cycle Graph
    def is_cycle_graph(adj_list):
        return all(len(neighbors) == 2 for neighbors in adj_list.values()) and count_edges(adj_list) == len(adj_list)

    # Check for Path Graph
    def is_path_graph(adj_list):
        degree_counts = sorted(len(neighbors) for neighbors in adj_list.values())
        return degree_counts.count(1) == 2 and degree_counts.count(2) == len(adj_list) - 2

    # Check for Grid Graph
    def is_grid_graph(adj_list):
        import math
        n = len(adj_list)
        root = int(math.sqrt(n))
        if root * root != n:
            return False

        for node, neighbors in adj_list.items():
            if not (2 <= len(neighbors) <= 4):
                return False
        return True

    # Check for Complete Graph
    def is_complete_graph(adj_list):
        n = len(adj_list)
        return all(len(neighbors) == n - 1 for neighbors in adj_list.values())

    # Check for Clustered Graph
    # Heuristic: Find high-degree nodes connected to lower-degree nodes
    def is_clustered_graph(adj_list):
        degrees = {node: len(neighbors) for node, neighbors in adj_list.items()}
        clusters = 0
        for node, deg in degrees.items():
            neighbor_degrees = [degrees[neigh] for neigh in adj_list[node]]
            if all(deg > neighbor_deg for neighbor_deg in neighbor_degrees):
                clusters += 1
        return clusters > 1

    # Check for Random Graph
    # Assume it does not match any other specific types
    def is_random_graph(adj_list):
        return True

    if is_star_graph(adjacency_list):
        return "Star"
    elif is_cycle_graph(adjacency_list):
        return "Cycle"
    elif is_path_graph(adjacency_list):
        return "Path"
    elif is_grid_graph(adjacency_list):
        return "Grid"
    elif is_complete_graph(adjacency_list):
        return "Complete"
    elif is_clustered_graph(adjacency_list):
        return "Clustered"
    else:
        return "Random"

# Input adjacency list
adjacency_list = {0: [2, 4, 6, 17, 21, 24], 1: [2, 7, 9, 26, 27], 2: [0, 1, 12, 17], 3: [10, 14, 15, 24], 4: [0, 11, 15, 19, 26], 5: [12, 22], 6: [0, 7, 10], 7: [1, 6, 15], 8: [9, 15, 18], 9: [1, 8, 14, 21], 10: [3, 6, 19, 22, 23, 27], 11: [4], 12: [2, 5, 16, 20, 21, 22, 26], 13: [23, 27], 14: [3, 9, 16, 27], 15: [3, 4, 7, 8, 18, 22, 27], 16: [12, 14], 17: [0, 2, 23], 18: [8, 15, 24, 25, 26], 19: [4, 10], 20: [12], 21: [0, 9, 12], 22: [5, 10, 12, 15], 23: [10, 13, 17], 24: [0, 3, 18], 25: [18, 26], 26: [1, 4, 12, 18, 25], 27: [1, 10, 13, 14, 15]}

# Determine graph type
print(graph_type(adjacency_list))
```