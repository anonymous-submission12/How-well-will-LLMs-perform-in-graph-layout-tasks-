```python
from collections import defaultdict

# The input graph adjacency list
graph = {0: [6, 10, 24], 1: [7, 15, 17, 20, 22, 23], 2: [4, 6, 7, 13, 16, 17, 21], 3: [5, 7, 10, 11, 12, 14, 15, 19, 20, 22], 4: [2, 17, 24], 5: [3, 6, 21], 6: [0, 2, 5, 13], 7: [1, 2, 3, 11, 16], 8: [9, 10, 22], 9: [8, 11, 24], 10: [0, 3, 8, 17], 11: [3, 7, 9], 12: [3, 14, 25], 13: [2, 6, 17, 18], 14: [3, 12, 16, 24], 15: [1, 3, 19, 23], 16: [2, 7, 14, 17], 17: [1, 2, 4, 10, 13, 16, 19, 22], 18: [13, 19, 24], 19: [3, 15, 17, 18], 20: [1, 3, 24], 21: [2, 5, 25], 22: [1, 3, 8, 17, 26], 23: [1, 15], 24: [0, 4, 9, 14, 18, 20], 25: [12, 21], 26: [22]}

def is_star(graph):
    center_candidates = [node for node, neighbors in graph.items() if len(neighbors) == len(graph) - 1]
    leaves = [node for node, neighbors in graph.items() if len(neighbors) == 1]
    return len(center_candidates) == 1 and len(leaves) == len(graph) - 1

def is_cycle(graph):
    return all(len(neighbors) == 2 for neighbors in graph.values())

def is_path(graph):
    degree_count = defaultdict(int)
    for neighbors in graph.values():
        for neighbor in neighbors:
            degree_count[neighbor] += 1
    return list(degree_count.values()).count(1) == 2 and all(v in [1, 2] for v in degree_count.values())

def is_grid(graph):
    n = len(graph)
    if n <= 1:
        return False
    rows_cols = int(n**0.5)
    if rows_cols**2 != n:
        return False
    for node in graph:
        if len(graph[node]) not in [2, 3, 4]:
            return False
    return True

def is_complete(graph):
    n = len(graph)
    return all(len(neighbors) == n - 1 for neighbors in graph.values())

def is_clustered_graph(graph):
    # Here we loosely define a clustered graph by checking if nodes can be grouped into clusters
    # where nodes in each cluster are connected and there are less external edges.
    visited = set()
    clusters = []

    def dfs(node, current_cluster):
        visited.add(node)
        current_cluster.add(node)
        for neighbor in graph[node]:
            if neighbor not in visited:
                dfs(neighbor, current_cluster)

    for node in graph:
        if node not in visited:
            current_cluster = set()
            dfs(node, current_cluster)
            clusters.append(current_cluster)

    internal_edges = sum(len(graph[node]) for cluster in clusters for node in cluster)
    possible_edges = sum(len(cluster) * (len(cluster) - 1) for cluster in clusters)
    return possible_edges > internal_edges * 2  # Arbitrary condition for clustering

def is_random_graph(graph):
    # A random graph often does not conform to specific patterns like the above
    return True

# Determine the graph type
if is_star(graph):
    print("Star")
elif is_cycle(graph):
    print("Cycle")
elif is_path(graph):
    print("Path")
elif is_grid(graph):
    print("Grid")
elif is_complete(graph):
    print("Complete")
elif is_clustered_graph(graph):
    print("Clustered Graph")
elif is_random_graph(graph):
    print("Random Graph")
```