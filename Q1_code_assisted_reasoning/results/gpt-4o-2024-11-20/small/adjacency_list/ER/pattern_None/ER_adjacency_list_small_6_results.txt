```python
from collections import defaultdict

def graph_pattern(adj_list):
    # Count the number of nodes and edges
    num_nodes = len(adj_list)
    num_edges = sum(len(neighbors) for neighbors in adj_list.values()) // 2

    # Check for star pattern
    center_nodes = [node for node, neighbors in adj_list.items() if len(neighbors) == num_nodes - 1]
    if len(center_nodes) == 1:
        return "Star"

    # Check for cycle pattern
    if all(len(neighbors) == 2 for neighbors in adj_list.values()) and num_edges == num_nodes:
        return "Cycle"

    # Check for path pattern
    end_nodes = [node for node, neighbors in adj_list.items() if len(neighbors) == 1]
    if len(end_nodes) == 2 and all(len(neighbors) <= 2 for neighbors in adj_list.values()):
        return "Path"

    # Check for complete graph
    if num_edges == num_nodes * (num_nodes - 1) // 2:
        return "Complete"

    # Check for grid pattern (approximation)
    sqrt_nodes = int(num_nodes**0.5)
    if sqrt_nodes * sqrt_nodes == num_nodes and all(len(neighbors) <= 4 for neighbors in adj_list.values()):
        return "Grid"

    # Check for clustered graph (approximation)
    clusters = defaultdict(set)
    for node, neighbors in adj_list.items():
        for neighbor in neighbors:
            clusters[node].add(neighbor)
            clusters[neighbor].add(node)
    cluster_sizes = [len(cluster) for cluster in clusters.values()]
    if max(cluster_sizes) > num_nodes // 2:
        return "Clustered"

    # Default to random graph
    return "Random"

adj_list = {0: [2, 5, 10, 18], 1: [5, 13, 26], 2: [0, 6, 24, 26], 3: [13, 18, 23, 25], 4: [6, 8, 11, 12, 17, 24, 25], 5: [0, 1, 6, 13, 25], 6: [2, 4, 5, 7, 11, 20, 23], 7: [6, 17, 20], 8: [4, 19], 9: [16, 20, 21], 10: [0], 11: [4, 6, 12, 21], 12: [4, 11, 15, 24], 13: [1, 3, 5], 14: [15], 15: [12, 14], 16: [9, 24], 17: [4, 7, 26], 18: [0, 3], 19: [8, 25], 20: [6, 7, 9], 21: [9, 11, 22], 22: [21], 23: [3, 6, 24], 24: [2, 4, 12, 16, 23, 25], 25: [3, 4, 5, 19, 24], 26: [1, 2, 17]}
print(graph_pattern(adj_list))
```