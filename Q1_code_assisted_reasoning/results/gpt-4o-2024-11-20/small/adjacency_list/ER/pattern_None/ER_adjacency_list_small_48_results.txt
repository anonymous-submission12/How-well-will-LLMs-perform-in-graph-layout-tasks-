```python
def classify_graph(adj_list):
    # Helper function to count edges and check for cycles
    def count_edges(adj_list):
        edges = set()
        for u, neighbors in adj_list.items():
            for v in neighbors:
                if (v, u) not in edges:
                    edges.add((u, v))
        return len(edges)
    
    def contains_cycle(adj_list, visited, current, parent):
        visited[current] = True
        for neighbor in adj_list[current]:
            if not visited[neighbor]:
                if contains_cycle(adj_list, visited, neighbor, current):
                    return True
            elif neighbor != parent:
                return True
        return False

    # Classification checks
    nodes = list(adj_list.keys())
    num_nodes = len(nodes)
    num_edges = count_edges(adj_list)

    # Check for Complete graph
    if num_edges == num_nodes * (num_nodes - 1) // 2:
        return "Complete"

    # Check for Star graph
    degree_count = {node: len(neighbors) for node, neighbors in adj_list.items()}
    max_degree = max(degree_count.values())
    if max_degree == num_nodes - 1 and all(deg == 1 for node, deg in degree_count.items() if deg != max_degree):
        return "Star"

    # Check for Path graph
    if num_edges == num_nodes - 1 and all(len(neighbors) <= 2 for neighbors in adj_list.values()):
        visited = {node: False for node in nodes}
        if not contains_cycle(adj_list, visited, nodes[0], -1):
            return "Path"

    # Check for Cycle graph
    if num_edges == num_nodes and all(len(neighbors) == 2 for neighbors in adj_list.values()):
        visited = {node: False for node in nodes}
        if not contains_cycle(adj_list, visited, nodes[0], -1):
            return "Cycle"

    # Check for Grid graph (assuming it fits a rectangular grid)
    grid_candidates = [
        (r, c) for r in range(1, int(num_nodes ** 0.5) + 2)
        for c in range(1, int(num_nodes ** 0.5) + 2)
        if r * c == num_nodes
    ]
    for rows, cols in grid_candidates:
        grid_edges = 0
        for row in range(rows):
            for col in range(cols):
                current = row * cols + col
                if col < cols - 1:
                    grid_edges += 1
                if row < rows - 1:
                    grid_edges += 1
        if num_edges == grid_edges:
            return "Grid"

    # Check for Clustered graph (loosely defined)
    cluster_threshold = num_nodes // 5
    cluster_count = sum(1 for neighbors in adj_list.values() if len(neighbors) > cluster_threshold)
    if cluster_count > 1:
        return "Clustered"

    # If no pattern matches, assume random graph
    return "Random"

adj_list = {0: [4, 6, 9, 13, 24, 25], 1: [8, 25], 2: [3, 11, 14, 19, 24], 3: [2, 5, 6, 8, 14, 15, 16], 
            4: [0, 17, 25], 5: [3, 17, 22, 25], 6: [0, 3, 10, 15, 21], 7: [21, 23, 24], 
            8: [1, 3, 14, 20, 22], 9: [0, 13, 17, 18, 20, 21], 10: [6], 11: [2, 19], 
            12: [24], 13: [0, 9, 23], 14: [2, 3, 8, 20, 23], 15: [3, 6, 19, 24], 
            16: [3, 19], 17: [4, 5, 9], 18: [9], 19: [2, 11, 15, 16, 21, 25], 
            20: [8, 9, 14, 23], 21: [6, 7, 9, 19], 22: [5, 8], 23: [7, 13, 14, 20], 
            24: [0, 2, 7, 12, 15], 25: [0, 1, 4, 5, 19]}

print(classify_graph(adj_list))
```