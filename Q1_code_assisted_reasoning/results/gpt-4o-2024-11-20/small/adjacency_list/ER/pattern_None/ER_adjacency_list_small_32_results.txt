```python
def graph_pattern_check(adjacency_list):
    # Importing necessary libraries
    import networkx as nx
    
    # Create a Graph from the adjacency list
    G = nx.Graph(adjacency_list)
    
    # Number of nodes and edges
    num_nodes = len(G.nodes)
    num_edges = len(G.edges)
    
    # Check for Star Graph: A single central node connected to all others
    max_deg = max(dict(G.degree).values())
    if max_deg == num_nodes - 1 and num_edges == num_nodes - 1:
        return "Star"
    
    # Check for Cycle Graph: Every node has degree 2, and it forms a single cycle
    if all(deg == 2 for _, deg in G.degree()) and nx.is_connected(G):
        return "Cycle"
    
    # Check for Path Graph: Two nodes have degree 1, all others have degree 2
    degrees = sorted(dict(G.degree).values())
    if degrees.count(1) == 2 and degrees.count(2) == num_nodes - 2 and nx.is_connected(G):
        return "Path"
    
    # Check for Grid Graph: Check if it can be laid out as a 2D grid
    def is_grid_graph():
        import math
        sqrt_nodes = math.isqrt(num_nodes)
        if sqrt_nodes * sqrt_nodes != num_nodes:
            return False
        possible_grid = nx.grid_2d_graph(sqrt_nodes, sqrt_nodes)
        return nx.is_isomorphic(G, possible_grid)
    
    if is_grid_graph():
        return "Grid"
    
    # Check for Complete Graph: Every pair of nodes is connected
    if num_edges == num_nodes * (num_nodes - 1) // 2:
        return "Complete"
    
    # Check for Clustered Graph: Nodes can be partitioned into clusters with high internal connectivity
    # Approximating by checking high modularity clusters
    communities = nx.algorithms.community.greedy_modularity_communities(G)
    if len(communities) > 1:
        return "Clustered"

    # If none of the above fits, consider it as a Random Graph
    return "Random"

# Input adjacency_list
adjacency_list = {
    0: [9], 1: [10, 25, 26], 2: [4, 13, 20], 3: [17, 24], 4: [2, 6, 9, 26],
    5: [11, 16, 20, 21, 22, 27, 28], 6: [4, 13, 14, 15, 17, 18, 25],
    7: [12, 13, 27], 8: [23], 9: [0, 4, 14, 23, 27], 10: [1, 19, 23],
    11: [5, 17, 23, 26], 12: [7, 23, 27], 13: [2, 6, 7, 20, 27],
    14: [6, 9, 19, 22, 26], 15: [6], 16: [5], 17: [3, 6, 11, 20, 27, 28],
    18: [6, 26], 19: [10, 14], 20: [2, 5, 13, 17, 22], 21: [5],
    22: [5, 14, 20], 23: [8, 9, 10, 11, 12, 25, 28], 24: [3, 25],
    25: [1, 6, 23, 24], 26: [1, 4, 11, 14, 18], 27: [5, 7, 9, 12, 13, 17],
    28: [5, 17, 23]
}

# Determine the graph pattern
result = graph_pattern_check(adjacency_list)
print(result)
```