```python
def graph_pattern(adj_list):
    # Helper function to count edges
    def count_edges(adj_list):
        edge_count = 0
        for node, neighbors in adj_list.items():
            edge_count += len(neighbors)
        return edge_count // 2  # Each edge is counted twice

    # Check for Star pattern
    def is_star(adj_list):
        center_count = sum(len(neighbors) > 1 for neighbors in adj_list.values())
        return center_count == 1 and count_edges(adj_list) == len(adj_list) - 1

    # Check for Cycle pattern
    def is_cycle(adj_list):
        return all(len(neighbors) == 2 for neighbors in adj_list.values()) and count_edges(adj_list) == len(adj_list)

    # Check for Path pattern
    def is_path(adj_list):
        end_points = sum(len(neighbors) == 1 for neighbors in adj_list.values())
        return end_points == 2 and count_edges(adj_list) == len(adj_list) - 1

    # Check for Grid pattern
    def is_grid(adj_list):
        # Grid graphs are harder to identify without specific dimensions
        # Here we check if the graph is planar and has a grid-like structure
        return False  # Simplified assumption

    # Check for Complete pattern
    def is_complete(adj_list):
        n = len(adj_list)
        return count_edges(adj_list) == n * (n - 1) // 2

    # Check for Clustered graph
    def is_clustered(adj_list):
        # Clustered graphs have dense subgraphs
        # Here we check if there are multiple dense regions
        return False  # Simplified assumption

    # Check for Random graph
    def is_random(adj_list):
        # Random graphs have no specific structure
        return True  # Default assumption if no other pattern matches

    # Determine the pattern
    if is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_grid(adj_list):
        return "Grid"
    elif is_complete(adj_list):
        return "Complete"
    elif is_clustered(adj_list):
        return "Clustered"
    else:
        return "Random"

# Input graph data
adj_list = {0: [1], 1: [0, 2, 3, 9, 10, 17, 26], 2: [1, 5, 20, 22, 23], 3: [1], 4: [5, 10, 12, 26, 27], 5: [2, 4, 7, 12], 6: [14], 7: [5, 15, 16, 20, 27], 8: [11, 12, 15, 23], 9: [1, 21, 24, 27], 10: [1, 4, 18], 11: [8], 12: [4, 5, 8, 23, 26], 13: [15, 18, 22], 14: [6, 25], 15: [7, 8, 13, 21, 23, 25], 16: [7, 22, 25], 17: [1, 20, 23], 18: [10, 13], 19: [26], 20: [2, 7, 17], 21: [9, 15], 22: [2, 13, 16, 23], 23: [2, 8, 12, 15, 17, 22], 24: [9, 27], 25: [14, 15, 16], 26: [1, 4, 12, 19], 27: [4, 7, 9, 24]}

# Output the result
print(graph_pattern(adj_list))
```