```python
from collections import defaultdict

def determine_graph_pattern(adj_list):
    # Helper functions
    def is_star(adj_list):
        center_count = sum(len(neighbors) > 1 for neighbors in adj_list.values())
        return center_count == 1 and all(len(neighbors) == 1 for node, neighbors in adj_list.items() if len(neighbors) == 1)

    def is_cycle(adj_list):
        return all(len(neighbors) == 2 for neighbors in adj_list.values())

    def is_path(adj_list):
        end_points = sum(len(neighbors) == 1 for neighbors in adj_list.values())
        return end_points == 2 and all(len(neighbors) <= 2 for neighbors in adj_list.values())

    def is_grid(adj_list):
        # Grid graphs are hard to detect without coordinates, so we approximate by checking degree distribution
        degree_counts = defaultdict(int)
        for neighbors in adj_list.values():
            degree_counts[len(neighbors)] += 1
        return degree_counts.get(2, 0) > 0 and degree_counts.get(3, 0) > 0 and degree_counts.get(4, 0) > 0

    def is_complete(adj_list):
        n = len(adj_list)
        return all(len(neighbors) == n - 1 for neighbors in adj_list.values())

    def is_clustered(adj_list):
        # Clustered graphs have groups of nodes with high connectivity within groups
        # Approximation: Check if there are nodes with significantly higher degree than others
        degrees = [len(neighbors) for neighbors in adj_list.values()]
        avg_degree = sum(degrees) / len(degrees)
        return any(degree > avg_degree * 1.5 for degree in degrees)

    def is_random(adj_list):
        # Random graphs have no discernible pattern
        return True

    # Determine the pattern
    if is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_grid(adj_list):
        return "Grid"
    elif is_complete(adj_list):
        return "Complete"
    elif is_clustered(adj_list):
        return "Clustered"
    else:
        return "Random"

# Input graph data
adj_list = {0: [1, 8, 16, 26, 28], 1: [0, 5, 14, 16, 20, 21], 2: [8, 15], 3: [20], 4: [7, 8, 16, 17, 21, 25, 28], 5: [1, 20], 6: [14, 16, 25, 28], 7: [4, 26], 8: [0, 2, 4, 10, 11, 18, 21, 28], 9: [12, 27, 28], 10: [8], 11: [8, 14, 24], 12: [9, 14], 13: [14, 22], 14: [1, 6, 11, 12, 13, 27], 15: [2, 25], 16: [0, 1, 4, 6, 27], 17: [4, 25], 18: [8, 22, 25, 27], 19: [22, 26], 20: [1, 3, 5, 25], 21: [1, 4, 8, 27], 22: [13, 18, 19], 23: [25], 24: [11, 25], 25: [4, 6, 15, 17, 18, 20, 23, 24], 26: [0, 7, 19], 27: [9, 14, 16, 18, 21], 28: [0, 4, 6, 8, 9]}

# Output the result
print(determine_graph_pattern(adj_list))
```