```python
from collections import defaultdict

def determine_graph_pattern(adj_list):
    # Helper functions
    def is_star():
        center_count = sum(len(neighbors) > 1 for neighbors in adj_list.values())
        return center_count == 1 and all(len(neighbors) <= 1 for node, neighbors in adj_list.items() if len(neighbors) <= 1)

    def is_cycle():
        visited = set()
        def dfs(node, parent):
            visited.add(node)
            for neighbor in adj_list[node]:
                if neighbor not in visited:
                    if not dfs(neighbor, node):
                        return False
                elif neighbor != parent:
                    return False
            return True
        return all(len(neighbors) == 2 for neighbors in adj_list.values()) and dfs(next(iter(adj_list)), None) and len(visited) == len(adj_list)

    def is_path():
        endpoints = sum(len(neighbors) == 1 for neighbors in adj_list.values())
        return endpoints == 2 and all(len(neighbors) <= 2 for neighbors in adj_list.values())

    def is_grid():
        rows, cols = defaultdict(set), defaultdict(set)
        for node, neighbors in adj_list.items():
            for neighbor in neighbors:
                rows[node].add(neighbor)
                cols[neighbor].add(node)
        return len(rows) * len(cols) == len(adj_list)

    def is_complete():
        n = len(adj_list)
        return all(len(neighbors) == n - 1 for neighbors in adj_list.values())

    def is_clustered():
        clusters = []
        visited = set()
        def dfs(node, cluster):
            visited.add(node)
            cluster.add(node)
            for neighbor in adj_list[node]:
                if neighbor not in visited:
                    dfs(neighbor, cluster)
        for node in adj_list:
            if node not in visited:
                cluster = set()
                dfs(node, cluster)
                clusters.append(cluster)
        return len(clusters) > 1

    def is_random():
        return True  # Default fallback

    # Determine pattern
    if is_star():
        return "Star"
    elif is_cycle():
        return "Cycle"
    elif is_path():
        return "Path"
    elif is_grid():
        return "Grid"
    elif is_complete():
        return "Complete"
    elif is_clustered():
        return "Clustered Graph"
    else:
        return "Random Graph"

# Input graph data
adj_list = {0: [4, 6, 25], 1: [6, 10, 11, 12, 14, 19, 20, 26, 28], 2: [4, 5, 13, 25], 3: [10, 11], 4: [0, 2, 17, 22, 24, 25, 26], 5: [2, 21], 6: [0, 1, 9, 24, 28], 7: [15, 25, 27], 8: [22], 9: [6, 13], 10: [1, 3, 22, 25, 26], 11: [1, 3, 12, 15, 23, 26], 12: [1, 11], 13: [2, 9, 19, 27], 14: [1, 18, 24, 25], 15: [7, 11, 17], 16: [22, 28], 17: [4, 15], 18: [14, 19, 24], 19: [1, 13, 18], 20: [1], 21: [5, 24, 26], 22: [4, 8, 10, 16, 23], 23: [11, 22], 24: [4, 6, 14, 18, 21], 25: [0, 2, 4, 7, 10, 14, 28], 26: [1, 4, 10, 11, 21], 27: [7, 13], 28: [1, 6, 16, 25]}

# Output result
print(determine_graph_pattern(adj_list))
```