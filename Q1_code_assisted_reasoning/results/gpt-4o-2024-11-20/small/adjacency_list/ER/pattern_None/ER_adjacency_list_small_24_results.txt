```python
from collections import defaultdict

def classify_graph(adj_list):
    n = len(adj_list)
    degrees = {node: len(neighbors) for node, neighbors in adj_list.items()}
    max_degree = max(degrees.values())
    
    # Check if graph is a star
    if max_degree == n - 1 and list(degrees.values()).count(1) == n - 1:
        return "Star"
    
    # Check if graph is a cycle
    if all(deg == 2 for deg in degrees.values()):
        return "Cycle"
    
    # Check if graph is a path
    if sorted(degrees.values()) == [1, 1] + [2] * (n - 2):
        return "Path"
    
    # Check if graph is a complete graph
    expected_edges = n * (n - 1) // 2
    actual_edges = sum(len(neighbors) for neighbors in adj_list.values()) // 2
    if actual_edges == expected_edges:
        return "Complete"
    
    # Check if graph represents a grid
    # Simplified check for rectangular grid structure
    grid_nodes = set(adj_list.keys())
    for node, neighbors in adj_list.items():
        if len(neighbors) not in {2, 3, 4}:
            break
    else:
        return "Grid"
    
    # Check for clustered or random graph
    connected_components = []
    visited = set()

    def dfs(node, current_component):
        visited.add(node)
        current_component.append(node)
        for neighbor in adj_list[node]:
            if neighbor not in visited:
                dfs(neighbor, current_component)
                
    for node in adj_list:
        if node not in visited:
            current_component = []
            dfs(node, current_component)
            connected_components.append(current_component)
    
    if len(connected_components) > 1:
        return "Clustered"
    
    return "Random"

adj_list = {0: [5, 15], 1: [14, 15], 2: [3, 13, 19, 27], 3: [2, 18, 26], 4: [9, 17, 19, 28], 5: [0], 6: [7, 8, 13, 15, 16, 25, 26], 7: [6, 13, 19, 27], 8: [6, 19, 21], 9: [4, 22, 23], 10: [13, 16, 24], 11: [12, 13, 23, 26, 28], 12: [11], 13: [2, 6, 7, 10, 11, 18, 22, 28], 14: [1], 15: [0, 1, 6, 22], 16: [6, 10, 23], 17: [4, 28], 18: [3, 13], 19: [2, 4, 7, 8, 23], 20: [22, 26], 21: [8], 22: [9, 13, 15, 20], 23: [9, 11, 16, 19], 24: [10], 25: [6], 26: [3, 6, 11, 20], 27: [2, 7], 28: [4, 11, 13, 17]}
print(classify_graph(adj_list))
```