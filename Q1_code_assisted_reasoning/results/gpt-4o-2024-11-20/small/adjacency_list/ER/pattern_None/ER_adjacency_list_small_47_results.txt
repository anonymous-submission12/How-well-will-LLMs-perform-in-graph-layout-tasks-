```python
from collections import defaultdict

def determine_graph_pattern(adj_list):
    # Helper functions
    def is_star():
        center_count = sum(len(neighbors) > 1 for neighbors in adj_list.values())
        return center_count == 1 and all(len(neighbors) <= 1 for node, neighbors in adj_list.items() if len(neighbors) <= 1)

    def is_cycle():
        visited = set()
        def dfs(node, parent):
            visited.add(node)
            for neighbor in adj_list[node]:
                if neighbor not in visited:
                    if not dfs(neighbor, node):
                        return False
                elif neighbor != parent:
                    return False
            return True
        start_node = next(iter(adj_list))
        return dfs(start_node, None) and len(visited) == len(adj_list)

    def is_path():
        degree_count = defaultdict(int)
        for node, neighbors in adj_list.items():
            degree_count[node] += len(neighbors)
        endpoints = sum(1 for node, degree in degree_count.items() if degree == 1)
        return endpoints == 2 and all(degree <= 2 for degree in degree_count.values())

    def is_grid():
        rows, cols = set(), set()
        for node in adj_list:
            rows.add(node // 10)
            cols.add(node % 10)
        return len(rows) * len(cols) == len(adj_list)

    def is_complete():
        n = len(adj_list)
        return all(len(neighbors) == n - 1 for neighbors in adj_list.values())

    def is_clustered():
        # Check if the graph has clusters (subgraphs with dense connections)
        cluster_count = 0
        visited = set()
        def dfs(node):
            visited.add(node)
            for neighbor in adj_list[node]:
                if neighbor not in visited:
                    dfs(neighbor)
        for node in adj_list:
            if node not in visited:
                cluster_count += 1
                dfs(node)
        return cluster_count > 1

    def is_random():
        return True  # Default fallback if no other pattern matches

    # Determine the pattern
    if is_star():
        return "Star"
    elif is_cycle():
        return "Cycle"
    elif is_path():
        return "Path"
    elif is_grid():
        return "Grid"
    elif is_complete():
        return "Complete"
    elif is_clustered():
        return "Clustered Graph"
    else:
        return "Random Graph"

# Input adjacency list
adj_list = {0: [22, 25], 1: [7, 8, 14, 21], 2: [5, 12, 20, 28], 3: [6, 16, 23], 4: [8, 14, 15, 16, 27], 5: [2, 13, 22, 24], 6: [3, 13, 19, 22], 7: [1, 12, 19, 22], 8: [1, 4, 9], 9: [8, 10, 12], 10: [9], 11: [18, 22], 12: [2, 7, 9, 15], 13: [5, 6, 15, 18, 23, 25], 14: [1, 4, 19, 25, 27], 15: [4, 12, 13, 21, 23, 25], 16: [3, 4, 24], 17: [20, 26], 18: [11, 13, 23], 19: [6, 7, 14, 22, 23, 28], 20: [2, 17, 23, 25, 26], 21: [1, 15], 22: [0, 5, 6, 7, 11, 19], 23: [3, 13, 15, 18, 19, 20, 27], 24: [5, 16, 25, 26], 25: [0, 13, 14, 15, 20, 24, 27], 26: [17, 20, 24], 27: [4, 14, 23, 25], 28: [2, 19]}

# Output the result
print(determine_graph_pattern(adj_list))
```