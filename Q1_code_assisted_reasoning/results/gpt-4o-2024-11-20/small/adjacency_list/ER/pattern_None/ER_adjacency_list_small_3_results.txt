```python
from collections import defaultdict

def determine_graph_pattern(adj_list):
    # Count the number of nodes and edges
    num_nodes = len(adj_list)
    num_edges = sum(len(neighbors) for neighbors in adj_list.values()) // 2

    # Check for Star pattern
    center_nodes = [node for node, neighbors in adj_list.items() if len(neighbors) == num_nodes - 1]
    if len(center_nodes) == 1:
        return "Star"

    # Check for Cycle pattern
    if all(len(neighbors) == 2 for neighbors in adj_list.values()) and num_edges == num_nodes:
        return "Cycle"

    # Check for Path pattern
    if sum(len(neighbors) == 1 for neighbors in adj_list.values()) == 2 and all(len(neighbors) <= 2 for neighbors in adj_list.values()):
        return "Path"

    # Check for Complete graph
    if num_edges == num_nodes * (num_nodes - 1) // 2:
        return "Complete"

    # Check for Grid pattern (approximation)
    sqrt_nodes = int(num_nodes**0.5)
    if sqrt_nodes * sqrt_nodes == num_nodes and all(len(neighbors) <= 4 for neighbors in adj_list.values()):
        return "Grid"

    # Check for Clustered graph (approximation)
    clusters = defaultdict(set)
    for node, neighbors in adj_list.items():
        for neighbor in neighbors:
            clusters[node].add(neighbor)
            clusters[neighbor].add(node)
    cluster_sizes = [len(cluster) for cluster in clusters.values()]
    if max(cluster_sizes) > num_nodes // 2:
        return "Clustered"

    # Default to Random graph
    return "Random"

# Input adjacency list
adj_list = {0: [5, 10, 21, 22], 1: [12, 13, 16, 19], 2: [13, 18, 20, 27], 3: [8, 12, 17, 25, 28], 4: [8, 17, 23, 24, 26], 5: [0, 7, 16, 21, 25], 6: [12, 14], 7: [5, 11, 20, 23, 25], 8: [3, 4, 16, 19, 28], 9: [17, 21], 10: [0, 15], 11: [7, 14], 12: [1, 3, 6, 22, 28], 13: [1, 2, 14, 16, 24, 27], 14: [6, 11, 13], 15: [10, 19, 27], 16: [1, 5, 8, 13, 18, 19, 21], 17: [3, 4, 9], 18: [2, 16, 24], 19: [1, 8, 15, 16, 29], 20: [2, 7, 21, 23, 27, 28], 21: [0, 5, 9, 16, 20], 22: [0, 12, 25], 23: [4, 7, 20, 28], 24: [4, 13, 18, 28], 25: [3, 5, 7, 22], 26: [4], 27: [2, 13, 15, 20], 28: [3, 8, 12, 20, 23, 24], 29: [19]}

# Determine the graph pattern
print(determine_graph_pattern(adj_list))
```