```python
from collections import defaultdict

def determine_graph_pattern(adj_list):
    # Helper functions
    def is_star():
        center_count = sum(len(neighbors) > 1 for neighbors in adj_list.values())
        return center_count == 1 and all(len(neighbors) <= 1 for node, neighbors in adj_list.items() if len(neighbors) <= 1)

    def is_cycle():
        visited = set()
        def dfs(node, parent):
            visited.add(node)
            for neighbor in adj_list[node]:
                if neighbor not in visited:
                    if not dfs(neighbor, node):
                        return False
                elif neighbor != parent:
                    return False
            return True
        return all(len(neighbors) == 2 for neighbors in adj_list.values()) and dfs(next(iter(adj_list)), None) and len(visited) == len(adj_list)

    def is_path():
        endpoints = sum(len(neighbors) == 1 for neighbors in adj_list.values())
        return endpoints == 2 and all(len(neighbors) <= 2 for neighbors in adj_list.values())

    def is_grid():
        rows, cols = 0, 0
        for node, neighbors in adj_list.items():
            if len(neighbors) > 4:
                return False
        return True

    def is_complete():
        n = len(adj_list)
        return all(len(neighbors) == n - 1 for neighbors in adj_list.values())

    def is_clustered():
        clusters = defaultdict(set)
        for node, neighbors in adj_list.items():
            for neighbor in neighbors:
                clusters[node].add(neighbor)
                clusters[neighbor].add(node)
        return len(clusters) > 1

    def is_random():
        return True

    # Determine the pattern
    if is_star():
        return "Star"
    elif is_cycle():
        return "Cycle"
    elif is_path():
        return "Path"
    elif is_grid():
        return "Grid"
    elif is_complete():
        return "Complete"
    elif is_clustered():
        return "Clustered Graph"
    else:
        return "Random Graph"

# Input adjacency list
adj_list = {0: [7, 14, 18, 21, 22], 1: [4, 26], 2: [3, 4, 6, 11, 17, 21, 25], 3: [2, 5, 17, 20, 21, 22], 4: [1, 2, 16, 18, 20, 22], 5: [3, 22, 27], 6: [2, 8, 13], 7: [0, 21, 28], 8: [6, 13, 26, 28], 9: [11], 10: [24], 11: [2, 9, 23, 24], 12: [17], 13: [6, 8, 16, 22], 14: [0, 17, 22], 15: [19, 24, 27], 16: [4, 13, 27], 17: [2, 3, 12, 14], 18: [0, 4, 23, 24], 19: [15, 23, 26], 20: [3, 4, 26, 27], 21: [0, 2, 3, 7, 22, 25], 22: [0, 3, 4, 5, 13, 14, 21, 26], 23: [11, 18, 19, 25], 24: [10, 11, 15, 18], 25: [2, 21, 23], 26: [1, 8, 19, 20, 22], 27: [5, 15, 16, 20], 28: [7, 8]}

# Output the result
print(determine_graph_pattern(adj_list))
```