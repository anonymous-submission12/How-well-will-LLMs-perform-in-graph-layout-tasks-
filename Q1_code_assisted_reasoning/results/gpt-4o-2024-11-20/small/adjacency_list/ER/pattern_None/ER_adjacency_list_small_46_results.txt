```python
from collections import defaultdict

def determine_graph_pattern(adj_list):
    # Helper functions
    def is_star(adj_list):
        center_count = sum(len(neighbors) > 1 for neighbors in adj_list.values())
        return center_count == 1 and all(len(neighbors) == 1 or len(neighbors) > 1 for neighbors in adj_list.values())

    def is_cycle(adj_list):
        return all(len(neighbors) == 2 for neighbors in adj_list.values())

    def is_path(adj_list):
        end_points = sum(len(neighbors) == 1 for neighbors in adj_list.values())
        return end_points == 2 and all(len(neighbors) <= 2 for neighbors in adj_list.values())

    def is_grid(adj_list):
        # Grid graphs are hard to detect without coordinates, so we approximate
        degree_counts = [len(neighbors) for neighbors in adj_list.values()]
        return all(degree in {2, 3, 4} for degree in degree_counts)

    def is_complete(adj_list):
        n = len(adj_list)
        return all(len(neighbors) == n - 1 for neighbors in adj_list.values())

    def is_clustered(adj_list):
        # Clustered graphs have dense subgraphs with sparse connections between them
        # Approximation: Check if there are groups of nodes with high internal connectivity
        visited = set()
        clusters = []

        def dfs(node, cluster):
            visited.add(node)
            cluster.append(node)
            for neighbor in adj_list[node]:
                if neighbor not in visited:
                    dfs(neighbor, cluster)

        for node in adj_list:
            if node not in visited:
                cluster = []
                dfs(node, cluster)
                clusters.append(cluster)

        return len(clusters) > 1 and all(len(cluster) > 1 for cluster in clusters)

    def is_random(adj_list):
        # Random graphs don't fit any specific pattern
        return True

    # Check patterns
    if is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_grid(adj_list):
        return "Grid"
    elif is_complete(adj_list):
        return "Complete"
    elif is_clustered(adj_list):
        return "Clustered"
    else:
        return "Random"

# Input graph data
adj_list = {0: [2, 5, 18, 21], 1: [2, 11, 15], 2: [0, 1, 4, 7], 3: [13, 22], 4: [2, 5, 7, 17, 22], 5: [0, 4, 13], 6: [12, 16], 7: [2, 4, 8, 10, 12, 18, 19], 8: [7, 12, 17, 18], 9: [23], 10: [7, 11], 11: [1, 10, 12, 14, 20], 12: [6, 7, 8, 11], 13: [3, 5, 23], 14: [11, 19, 22], 15: [1, 23], 16: [6], 17: [4, 8], 18: [0, 7, 8], 19: [7, 14], 20: [11], 21: [0, 22, 23], 22: [3, 4, 14, 21], 23: [9, 13, 15, 21]}

# Determine graph pattern
print(determine_graph_pattern(adj_list))
```