```python
def determine_graph_pattern(adj_list):
    # Helper functions
    def is_star(adj_list):
        center_count = sum(len(neighbors) > 1 for neighbors in adj_list.values())
        leaf_count = sum(len(neighbors) == 1 for neighbors in adj_list.values())
        return center_count == 1 and leaf_count == len(adj_list) - 1

    def is_cycle(adj_list):
        return all(len(neighbors) == 2 for neighbors in adj_list.values())

    def is_path(adj_list):
        endpoints = sum(len(neighbors) == 1 for neighbors in adj_list.values())
        return endpoints == 2 and all(len(neighbors) <= 2 for neighbors in adj_list.values())

    def is_grid(adj_list):
        # Grid graphs are hard to detect without coordinates, so we approximate
        node_degrees = [len(neighbors) for neighbors in adj_list.values()]
        return all(degree in {2, 3, 4} for degree in node_degrees)

    def is_complete(adj_list):
        n = len(adj_list)
        return all(len(neighbors) == n - 1 for neighbors in adj_list.values())

    def is_clustered(adj_list):
        # Clustered graphs have dense subgraphs with sparse connections between them
        # Approximation: Check if there are nodes with significantly fewer connections
        node_degrees = [len(neighbors) for neighbors in adj_list.values()]
        avg_degree = sum(node_degrees) / len(node_degrees)
        return any(degree < avg_degree / 2 for degree in node_degrees)

    def is_random(adj_list):
        # Random graphs have no discernible pattern
        return True

    # Check patterns
    if is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_grid(adj_list):
        return "Grid"
    elif is_complete(adj_list):
        return "Complete"
    elif is_clustered(adj_list):
        return "Clustered"
    else:
        return "Random"

# Input graph data
adjacency_list = {
    0: [17, 18], 1: [3, 4], 2: [3, 14, 15, 18, 21], 3: [1, 2, 4, 10],
    4: [1, 3, 20], 5: [13, 15, 17], 6: [20], 7: [9, 11, 21], 8: [9, 10, 18],
    9: [7, 8, 12, 15, 18, 21], 10: [3, 8, 11, 16, 21], 11: [7, 10, 19],
    12: [9, 15], 13: [5, 18, 21], 14: [2, 15], 15: [2, 5, 9, 12, 14],
    16: [10, 17], 17: [0, 5, 16], 18: [0, 2, 8, 9, 13], 19: [11],
    20: [4, 6], 21: [2, 7, 9, 10, 13]
}

# Determine the graph pattern
print(determine_graph_pattern(adjacency_list))
```