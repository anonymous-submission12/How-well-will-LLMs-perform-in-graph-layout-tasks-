```python
from collections import deque

# Given adjacency list graph
graph = {
    0: [10, 12, 26, 27], 1: [18, 23], 2: [10, 11, 21, 22], 3: [6, 7, 21],
    4: [13, 17], 5: [10, 16, 18], 6: [3, 11, 26, 27], 7: [3, 11, 13, 14, 16, 22, 25],
    8: [12, 19, 20, 21], 9: [13, 20], 10: [0, 2, 5, 12, 17], 11: [2, 6, 7],
    12: [0, 8, 10, 19], 13: [4, 7, 9, 19], 14: [7, 16, 24, 26], 15: [17, 26],
    16: [5, 7, 14], 17: [4, 10, 15], 18: [1, 5, 22], 19: [8, 12, 13],
    20: [8, 9, 21], 21: [2, 3, 8, 20, 25, 27], 22: [2, 7, 18],
    23: [1, 24], 24: [14, 23, 27], 25: [7, 21], 26: [0, 6, 14, 15],
    27: [0, 6, 21, 24]
}

# Nodes to find shortest path between
start, end = 22, 24

# BFS to find shortest path
def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in graph[node]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # If no path exists

# Calculating shortest path length
result = shortest_path_length(graph, start, end)
print(result)
```