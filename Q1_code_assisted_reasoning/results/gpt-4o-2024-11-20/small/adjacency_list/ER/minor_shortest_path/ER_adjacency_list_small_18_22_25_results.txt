```python
from collections import deque

def shortest_path_length(graph, start, end):
    queue = deque([(start, 0)])
    visited = set()
    
    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # If no path exists

graph = {0: [7, 16, 18, 28], 1: [5, 11, 12, 27], 2: [5, 11, 20], 3: [7, 14, 18, 22], 4: [10], 5: [1, 2, 23], 6: [13, 14, 16, 28], 7: [0, 3, 10, 13, 24], 8: [25, 27], 9: [10, 20, 24], 10: [4, 7, 9, 12, 19, 22, 23], 11: [1, 2, 12, 22, 24, 28], 12: [1, 10, 11, 27], 13: [6, 7, 24, 28], 14: [3, 6, 17, 26, 28], 15: [21, 27], 16: [0, 6, 18, 24, 27], 17: [14, 20], 18: [0, 3, 16, 20, 28], 19: [10, 28], 20: [2, 9, 17, 18, 21], 21: [15, 20], 22: [3, 10, 11, 25], 23: [5, 10, 26], 24: [7, 9, 11, 13, 16], 25: [8, 22], 26: [14, 23], 27: [1, 8, 12, 15, 16], 28: [0, 6, 11, 13, 14, 18, 19]}
start_node = 22
end_node = 25

print(shortest_path_length(graph, start_node, end_node))
```