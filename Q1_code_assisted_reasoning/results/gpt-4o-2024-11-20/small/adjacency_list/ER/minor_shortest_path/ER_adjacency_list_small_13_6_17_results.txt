```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current_node, current_distance = queue.popleft()
        
        if current_node == end:
            return current_distance
        
        if current_node not in visited:
            visited.add(current_node)
            for neighbor in graph[current_node]:
                queue.append((neighbor, current_distance + 1))
    
    return -1  # If no path exists

graph = {0: [17, 18], 1: [3, 4], 2: [3, 14, 15, 18, 21], 3: [1, 2, 4, 10], 4: [1, 3, 20], 5: [13, 15, 17], 6: [20], 7: [9, 11, 21], 8: [9, 10, 18], 9: [7, 8, 12, 15, 18, 21], 10: [3, 8, 11, 16, 21], 11: [7, 10, 19], 12: [9, 15], 13: [5, 18, 21], 14: [2, 15], 15: [2, 5, 9, 12, 14], 16: [10, 17], 17: [0, 5, 16], 18: [0, 2, 8, 9, 13], 19: [11], 20: [4, 6], 21: [2, 7, 9, 10, 13]}
start_node = 6
end_node = 17

print(shortest_path_length(graph, start_node, end_node))
```