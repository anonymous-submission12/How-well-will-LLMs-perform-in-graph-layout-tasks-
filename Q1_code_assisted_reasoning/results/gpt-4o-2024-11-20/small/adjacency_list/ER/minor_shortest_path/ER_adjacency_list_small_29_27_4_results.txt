```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current_node, current_distance = queue.popleft()
        
        if current_node == end:
            return current_distance
        
        if current_node not in visited:
            visited.add(current_node)
            for neighbor in graph[current_node]:
                queue.append((neighbor, current_distance + 1))
    
    return -1  # If no path exists

graph = {0: [5, 6, 9, 20, 23], 1: [6, 8, 26], 2: [20, 21, 23], 3: [18, 27], 4: [10, 13, 21], 5: [0, 9, 14, 21, 27], 6: [0, 1], 7: [10, 14, 16], 8: [1, 9, 14, 19], 9: [0, 5, 8, 12], 10: [4, 7, 18, 24], 11: [24], 12: [9, 21], 13: [4, 20], 14: [5, 7, 8], 15: [16, 17, 23], 16: [7, 15, 27], 17: [15], 18: [3, 10], 19: [8, 24], 20: [0, 2, 13, 23], 21: [2, 4, 5, 12, 22], 22: [21, 24, 27], 23: [0, 2, 15, 20, 24, 25], 24: [10, 11, 19, 22, 23], 25: [23], 26: [1], 27: [3, 5, 16, 22]}
start_node = 27
end_node = 4

print(shortest_path_length(graph, start_node, end_node))
```