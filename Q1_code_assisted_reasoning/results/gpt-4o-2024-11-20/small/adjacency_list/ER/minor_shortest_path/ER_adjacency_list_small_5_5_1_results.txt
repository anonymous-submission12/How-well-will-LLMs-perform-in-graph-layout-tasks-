```python
from collections import deque

def shortest_path_length(graph, start, end):
    queue = deque([(start, 0)])
    visited = set()
    
    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                queue.append((neighbor, distance + 1))
    return -1  # Return -1 if no path exists

graph = {0: [7, 14, 18, 21, 22], 1: [4, 26], 2: [3, 4, 6, 11, 17, 21, 25], 3: [2, 5, 17, 20, 21, 22], 4: [1, 2, 16, 18, 20, 22], 5: [3, 22, 27], 6: [2, 8, 13], 7: [0, 21, 28], 8: [6, 13, 26, 28], 9: [11], 10: [24], 11: [2, 9, 23, 24], 12: [17], 13: [6, 8, 16, 22], 14: [0, 17, 22], 15: [19, 24, 27], 16: [4, 13, 27], 17: [2, 3, 12, 14], 18: [0, 4, 23, 24], 19: [15, 23, 26], 20: [3, 4, 26, 27], 21: [0, 2, 3, 7, 22, 25], 22: [0, 3, 4, 5, 13, 14, 21, 26], 23: [11, 18, 19, 25], 24: [10, 11, 15, 18], 25: [2, 21, 23], 26: [1, 8, 19, 20, 22], 27: [5, 15, 16, 20], 28: [7, 8]}

print(shortest_path_length(graph, 5, 1))
```