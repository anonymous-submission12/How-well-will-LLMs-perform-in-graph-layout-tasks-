```python
from collections import deque

def shortest_path_length(graph, start, end):
    queue = deque([(start, 0)])
    visited = set()
    
    while queue:
        node, dist = queue.popleft()
        if node == end:
            return dist
        
        if node not in visited:
            visited.add(node)
            for neighbor in graph[node]:
                queue.append((neighbor, dist + 1))
    return -1

graph = {0: [19], 1: [2, 7, 8, 11, 15, 17], 2: [1, 7], 3: [15, 20], 4: [5, 12, 17], 5: [4, 9, 19], 6: [8, 10, 17, 20], 7: [1, 2, 8, 12, 13, 15, 17], 8: [1, 6, 7, 16, 17, 18], 9: [5, 19, 20], 10: [6, 11], 11: [1, 10], 12: [4, 7, 15, 20], 13: [7], 14: [15], 15: [1, 3, 7, 12, 14], 16: [8, 18, 20], 17: [1, 4, 6, 7, 8, 18, 19], 18: [8, 16, 17], 19: [0, 5, 9, 17], 20: [3, 6, 9, 12, 16]}
start, end = '7', '11'
print(shortest_path_length(graph, int(start), int(end)))
```