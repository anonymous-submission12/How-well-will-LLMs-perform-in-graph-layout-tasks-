```python
from collections import deque

def shortest_path_length(graph, start, target):
    queue = deque([(start, 0)])
    visited = set([start])
    while queue:
        node, distance = queue.popleft()
        if node == target:
            return distance
        for neighbor in graph[node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, distance + 1))

graph = {0: [3, 11, 13, 17, 21, 28], 1: [24], 2: [4, 15, 22, 28], 3: [0, 21], 4: [2, 14, 20, 22], 5: [9, 15, 21, 25], 6: [7, 13, 23, 26], 7: [6, 10, 24], 8: [15, 24, 26, 28], 9: [5, 15, 22, 23, 25, 27], 10: [7, 13], 11: [0, 12, 22, 25, 27], 12: [11, 14, 27], 13: [0, 6, 10], 14: [4, 12, 16, 19], 15: [2, 5, 8, 9, 21, 22], 16: [14, 26], 17: [0, 21, 26], 18: [26, 27], 19: [14], 20: [4, 26], 21: [0, 3, 5, 15, 17, 24], 22: [2, 4, 9, 11, 15], 23: [6, 9], 24: [1, 7, 8, 21], 25: [5, 9, 11], 26: [6, 8, 16, 17, 18, 20, 28], 27: [9, 11, 12, 18, 28], 28: [0, 2, 8, 26, 27]}
start_node = 17
target_node = 9

print(shortest_path_length(graph, start_node, target_node))
```