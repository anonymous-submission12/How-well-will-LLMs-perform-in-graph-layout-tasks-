```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # If no path exists

graph = {0: [2, 5, 18, 21], 1: [2, 11, 15], 2: [0, 1, 4, 7], 3: [13, 22], 4: [2, 5, 7, 17, 22], 5: [0, 4, 13], 6: [12, 16], 7: [2, 4, 8, 10, 12, 18, 19], 8: [7, 12, 17, 18], 9: [23], 10: [7, 11], 11: [1, 10, 12, 14, 20], 12: [6, 7, 8, 11], 13: [3, 5, 23], 14: [11, 19, 22], 15: [1, 23], 16: [6], 17: [4, 8], 18: [0, 7, 8], 19: [7, 14], 20: [11], 21: [0, 22, 23], 22: [3, 4, 14, 21], 23: [9, 13, 15, 21]}
print(shortest_path_length(graph, 0, 14))
```