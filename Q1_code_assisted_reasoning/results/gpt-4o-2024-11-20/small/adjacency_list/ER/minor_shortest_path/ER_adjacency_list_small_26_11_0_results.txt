```python
from collections import deque

def shortest_path_length(graph, start, end):
    queue = deque([(start, 0)])
    visited = set()

    while queue:
        current_node, distance = queue.popleft()
        if current_node == end:
            return distance
        if current_node not in visited:
            visited.add(current_node)
            for neighbor in graph[current_node]:
                queue.append((neighbor, distance + 1))

    return -1  # Return -1 if there is no path

graph = {0: [2, 11, 21], 1: [7, 11, 17, 22], 2: [0, 3, 7, 8, 9, 14, 16], 3: [2], 4: [7, 19], 5: [7, 18], 6: [10, 12, 13, 17, 20], 7: [1, 2, 4, 5, 9, 17, 21, 22], 8: [2, 15, 18, 22], 9: [2, 7, 17], 10: [6, 15], 11: [0, 1], 12: [6], 13: [6, 15, 21], 14: [2, 17, 22], 15: [8, 10, 13, 19, 22], 16: [2], 17: [1, 6, 7, 9, 14], 18: [5, 8], 19: [4, 15, 22], 20: [6], 21: [0, 7, 13], 22: [1, 7, 8, 14, 15, 19]}
start_node = '11'
end_node = '0'
print(shortest_path_length(graph, int(start_node), int(end_node)))
```