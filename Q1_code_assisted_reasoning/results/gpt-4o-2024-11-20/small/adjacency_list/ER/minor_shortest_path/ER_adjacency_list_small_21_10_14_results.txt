```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # If no path exists

graph = {0: [1], 1: [0, 2, 3, 9, 10, 17, 26], 2: [1, 5, 20, 22, 23], 3: [1], 4: [5, 10, 12, 26, 27], 5: [2, 4, 7, 12], 6: [14], 7: [5, 15, 16, 20, 27], 8: [11, 12, 15, 23], 9: [1, 21, 24, 27], 10: [1, 4, 18], 11: [8], 12: [4, 5, 8, 23, 26], 13: [15, 18, 22], 14: [6, 25], 15: [7, 8, 13, 21, 23, 25], 16: [7, 22, 25], 17: [1, 20, 23], 18: [10, 13], 19: [26], 20: [2, 7, 17], 21: [9, 15], 22: [2, 13, 16, 23], 23: [2, 8, 12, 15, 17, 22], 24: [9, 27], 25: [14, 15, 16], 26: [1, 4, 12, 19], 27: [4, 7, 9, 24]}
start_node = 10
end_node = 14

print(shortest_path_length(graph, start_node, end_node))
```