```python
from collections import deque

def bfs_shortest_path(graph, start, goal):
    visited = {start}
    queue = deque([(start, 0)])
    
    while queue:
        current_node, distance = queue.popleft()
        if current_node == goal:
            return distance
        
        for neighbor in graph[current_node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, distance + 1))

    return float("inf")

graph = {0: [5, 6, 10], 1: [19], 2: [5, 8, 22], 3: [10], 4: [12, 16], 
         5: [0, 2, 18, 21], 6: [0, 12, 25], 7: [11, 17], 8: [2, 9, 12, 13, 19], 
         9: [8, 15], 10: [0, 3], 11: [7, 12, 15, 18, 19, 20, 25], 
         12: [4, 6, 8, 11, 19, 22, 25], 13: [8, 16, 25], 14: [20, 21], 
         15: [9, 11], 16: [4, 13, 21], 17: [7, 23, 24], 18: [5, 11, 23], 
         19: [1, 8, 11, 12, 23], 20: [11, 14], 21: [5, 14, 16], 
         22: [2, 12], 23: [17, 18, 19], 24: [17], 25: [6, 11, 12, 13]}

print(bfs_shortest_path(graph, 17, 1))
```