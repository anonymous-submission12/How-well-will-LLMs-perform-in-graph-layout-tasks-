```python
from collections import deque

def shortest_path(adj_list, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (node, distance)

    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in adj_list[node]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # If no path exists

adjacency_list = {
    0: [19], 1: [16], 2: [4, 8, 17, 29], 3: [9, 27], 4: [2, 7, 22, 27],
    5: [12, 16, 25, 26, 27], 6: [19, 24], 7: [4, 14, 27], 8: [2, 15, 18],
    9: [3, 18], 10: [21, 22], 11: [15, 29], 12: [5, 18], 13: [16, 18],
    14: [7, 15, 19, 22, 25, 28], 15: [8, 11, 14, 23], 16: [1, 5, 13, 18, 19, 21, 28],
    17: [2], 18: [8, 9, 12, 13, 16, 19], 19: [0, 6, 14, 16, 18, 21, 22, 29],
    20: [24], 21: [10, 16, 19], 22: [4, 10, 14, 19, 27], 23: [15], 24: [6, 20],
    25: [5, 14, 29], 26: [5], 27: [3, 4, 5, 7, 22], 28: [14, 16], 29: [2, 11, 19, 25]
}

print(shortest_path(adjacency_list, 19, 24))
```