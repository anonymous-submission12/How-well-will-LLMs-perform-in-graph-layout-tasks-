```python
from collections import deque

# The graph in adjacency_list format
graph = {0: [5, 15], 1: [14, 15], 2: [3, 13, 19, 27], 3: [2, 18, 26], 4: [9, 17, 19, 28], 
         5: [0], 6: [7, 8, 13, 15, 16, 25, 26], 7: [6, 13, 19, 27], 8: [6, 19, 21], 
         9: [4, 22, 23], 10: [13, 16, 24], 11: [12, 13, 23, 26, 28], 12: [11], 
         13: [2, 6, 7, 10, 11, 18, 22, 28], 14: [1], 15: [0, 1, 6, 22], 16: [6, 10, 23], 
         17: [4, 28], 18: [3, 13], 19: [2, 4, 7, 8, 23], 20: [22, 26], 21: [8], 
         22: [9, 13, 15, 20], 23: [9, 11, 16, 19], 24: [10], 25: [6], 26: [3, 6, 11, 20], 
         27: [2, 7], 28: [4, 11, 13, 17]}

def shortest_path_length(graph, start, end):
    # BFS initialization
    queue = deque([(start, 0)])  # (current_node, current_distance)
    visited = set()
    
    while queue:
        current_node, distance = queue.popleft()
        
        if current_node == end:
            return distance
        
        if current_node not in visited:
            visited.add(current_node)
            for neighbor in graph[current_node]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # return -1 if no path exists

# Calculate and print the shortest path between node '1' and '27'
print(shortest_path_length(graph, 1, 27))
```