```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current node, path length)
    
    while queue:
        current, length = queue.popleft()
        if current == end:
            return length
        if current in visited:
            continue
        visited.add(current)
        for neighbor in graph[current]:
            if neighbor not in visited:
                queue.append((neighbor, length + 1))

graph = {0: [1, 24], 1: [0, 6, 23, 26, 28], 2: [10, 22, 28], 3: [4, 5, 8, 10, 22, 25, 27], 4: [3, 8, 11, 19, 24, 28], 5: [3], 6: [1, 12, 28], 7: [13, 16, 18, 19], 8: [3, 4, 9, 16, 23], 9: [8, 11, 14, 16, 17, 18, 19, 27], 10: [2, 3, 12, 19, 21], 11: [4, 9, 13, 14, 21], 12: [6, 10, 23], 13: [7, 11, 18], 14: [9, 11, 20], 15: [21, 22, 27], 16: [7, 8, 9], 17: [9], 18: [7, 9, 13, 26], 19: [4, 7, 9, 10], 20: [14, 24], 21: [10, 11, 15], 22: [2, 3, 15, 25, 26], 23: [1, 8, 12], 24: [0, 4, 20, 28], 25: [3, 22, 28], 26: [1, 18, 22], 27: [3, 9, 15], 28: [1, 2, 4, 6, 24, 25]}
start_node = 4
end_node = 26
print(shortest_path_length(graph, start_node, end_node))
```