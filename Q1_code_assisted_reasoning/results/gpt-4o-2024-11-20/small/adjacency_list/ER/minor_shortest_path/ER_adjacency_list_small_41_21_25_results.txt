```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current_node, current_distance = queue.popleft()
        
        if current_node == end:
            return current_distance
        
        if current_node not in visited:
            visited.add(current_node)
            for neighbor in graph[current_node]:
                if neighbor not in visited:
                    queue.append((neighbor, current_distance + 1))
    return -1  # If no path exists

graph = {0: [4, 9, 11], 1: [2, 22, 24], 2: [1, 23], 3: [6, 7, 9, 12, 18, 24], 4: [0, 5], 5: [4], 6: [3, 10, 12, 18, 24], 7: [3], 8: [11, 16, 22], 9: [0, 3], 10: [6, 13, 16, 24, 25], 11: [0, 8, 18, 19, 25, 26], 12: [3, 6], 13: [10, 18, 21, 24], 14: [24, 25], 15: [21], 16: [8, 10, 21, 23, 26], 17: [18, 19], 18: [3, 6, 11, 13, 17, 22, 26], 19: [11, 17, 20, 23, 24], 20: [19], 21: [13, 15, 16, 22], 22: [1, 8, 18, 21, 23], 23: [2, 16, 19, 22, 26], 24: [1, 3, 6, 10, 13, 14, 19, 26], 25: [10, 11, 14], 26: [11, 16, 18, 23, 24]}
start_node = 21
end_node = 25

print(shortest_path_length(graph, start_node, end_node))
```