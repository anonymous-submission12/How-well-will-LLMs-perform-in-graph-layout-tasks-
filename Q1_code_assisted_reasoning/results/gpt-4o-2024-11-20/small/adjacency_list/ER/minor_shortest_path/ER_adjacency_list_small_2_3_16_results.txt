```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current_node, current_distance = queue.popleft()
        
        if current_node == end:
            return current_distance
        
        if current_node not in visited:
            visited.add(current_node)
            for neighbor in graph[current_node]:
                if neighbor not in visited:
                    queue.append((neighbor, current_distance + 1))
    return -1  # If no path exists

graph = {0: [2, 4, 6, 17, 21, 24], 1: [2, 7, 9, 26, 27], 2: [0, 1, 12, 17], 3: [10, 14, 15, 24], 4: [0, 11, 15, 19, 26], 5: [12, 22], 6: [0, 7, 10], 7: [1, 6, 15], 8: [9, 15, 18], 9: [1, 8, 14, 21], 10: [3, 6, 19, 22, 23, 27], 11: [4], 12: [2, 5, 16, 20, 21, 22, 26], 13: [23, 27], 14: [3, 9, 16, 27], 15: [3, 4, 7, 8, 18, 22, 27], 16: [12, 14], 17: [0, 2, 23], 18: [8, 15, 24, 25, 26], 19: [4, 10], 20: [12], 21: [0, 9, 12], 22: [5, 10, 12, 15], 23: [10, 13, 17], 24: [0, 3, 18], 25: [18, 26], 26: [1, 4, 12, 18, 25], 27: [1, 10, 13, 14, 15]}
start_node = 3
end_node = 16

print(shortest_path_length(graph, start_node, end_node))
```