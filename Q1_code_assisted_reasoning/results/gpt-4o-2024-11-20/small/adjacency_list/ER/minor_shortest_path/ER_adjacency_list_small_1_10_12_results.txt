```python
from collections import deque

def shortest_path_length(graph, start, end):
    queue = deque([(start, 0)])
    visited = set()

    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1

graph = {0: [3, 6, 7, 15, 25], 1: [14, 21], 2: [10], 3: [0, 9, 10, 18], 4: [7, 8, 9, 16, 21, 26, 28], 5: [6, 12, 29], 6: [0, 5, 15, 16, 25], 7: [0, 4, 17, 25, 26], 8: [4, 10, 14, 16, 17], 9: [3, 4, 24, 26, 29], 10: [2, 3, 8, 17, 29], 11: [14, 24], 12: [5, 18], 13: [29], 14: [1, 8, 11], 15: [0, 6, 24, 28], 16: [4, 6, 8, 25], 17: [7, 8, 10, 18, 22], 18: [3, 12, 17, 21], 19: [28, 29], 20: [28], 21: [1, 4, 18, 23], 22: [17, 27], 23: [21, 25], 24: [9, 11, 15, 25], 25: [0, 6, 7, 16, 23, 24, 29], 26: [4, 7, 9], 27: [22, 28], 28: [4, 15, 19, 20, 27], 29: [5, 9, 10, 13, 19, 25]}
print(shortest_path_length(graph, 10, 12))
```