```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current_node, current_distance = queue.popleft()
        
        if current_node == end:
            return current_distance
        
        if current_node not in visited:
            visited.add(current_node)
            for neighbor in graph[current_node]:
                if neighbor not in visited:
                    queue.append((neighbor, current_distance + 1))
    return -1  # If no path exists

graph = {0: [12, 23, 24], 1: [2, 4, 12, 15], 2: [1, 5, 7, 11], 3: [8], 4: [1, 6, 16, 18, 22, 24], 5: [2, 7, 8, 9, 16], 6: [4, 9], 7: [2, 5, 13, 14, 24], 8: [3, 5, 12], 9: [5, 6, 24], 10: [22], 11: [2], 12: [0, 1, 8, 13, 14, 15, 21, 24], 13: [7, 12, 24], 14: [7, 12, 17, 21], 15: [1, 12], 16: [4, 5], 17: [14, 18, 23, 24], 18: [4, 17], 19: [20], 20: [19, 21], 21: [12, 14, 20], 22: [4, 10, 23], 23: [0, 17, 22], 24: [0, 4, 7, 9, 12, 13, 17]}
print(shortest_path_length(graph, 22, 10))
```