```python
from collections import deque

def shortest_path_length(adj_list, start, end):
    visited = set()
    queue = deque([(start, 0)])

    while queue:
        current, length = queue.popleft()
        if current == end:
            return length
        if current not in visited:
            visited.add(current)
            for neighbor in adj_list[current]:
                if neighbor not in visited:
                    queue.append((neighbor, length + 1))
    return -1  # Return -1 if there's no path

adj_list = {0: [1, 7, 11, 14, 17, 19, 23, 26], 1: [0, 14, 17], 2: [8, 24, 25], 3: [19, 27], 4: [5, 6, 20, 25], 5: [4, 7, 12, 15, 21], 6: [4, 26], 7: [0, 5, 11, 15], 8: [2], 9: [14, 16], 10: [14, 19, 22], 11: [0, 7, 15], 12: [5, 18, 24, 26], 13: [14, 17, 27], 14: [0, 1, 9, 10, 13, 20, 23], 15: [5, 7, 11, 16, 23], 16: [9, 15, 19, 22, 24], 17: [0, 1, 13, 20, 24, 27], 18: [12, 22], 19: [0, 3, 10, 16, 26], 20: [4, 14, 17, 24], 21: [5, 22, 23, 25, 27], 22: [10, 16, 18, 21], 23: [0, 14, 15, 21], 24: [2, 12, 16, 17, 20], 25: [2, 4, 21], 26: [0, 6, 12, 19, 27], 27: [3, 13, 17, 21, 26]}
print(shortest_path_length(adj_list, 4, 3))
```