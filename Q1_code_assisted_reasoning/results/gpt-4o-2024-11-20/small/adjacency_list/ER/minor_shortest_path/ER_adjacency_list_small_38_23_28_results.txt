```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current_node, current_distance = queue.popleft()
        
        if current_node == end:
            return current_distance
        
        if current_node not in visited:
            visited.add(current_node)
            for neighbor in graph[current_node]:
                queue.append((neighbor, current_distance + 1))
    
    return -1  # Return -1 if no path exists

graph = {0: [13, 18, 20], 1: [6, 8, 10, 16, 17], 2: [28], 3: [16, 18, 28, 29], 4: [15, 17, 23], 5: [23], 6: [1, 12, 22], 7: [11, 18, 23], 8: [1, 9, 26], 9: [8, 10, 17, 21], 10: [1, 9, 27], 11: [7, 15, 19, 21, 26, 28], 12: [6, 16, 17, 29], 13: [0, 17], 14: [16, 21, 22, 26], 15: [4, 11, 20, 24], 16: [1, 3, 12, 14, 17, 25], 17: [1, 4, 9, 12, 13, 16, 21, 25], 18: [0, 3, 7, 21, 29], 19: [11], 20: [0, 15, 25, 29], 21: [9, 11, 14, 17, 18, 27], 22: [6, 14, 24, 26, 29], 23: [4, 5, 7, 27], 24: [15, 22], 25: [16, 17, 20, 26], 26: [8, 11, 14, 22, 25], 27: [10, 21, 23, 28], 28: [2, 3, 11, 27], 29: [3, 12, 18, 20, 22]}

print(shortest_path_length(graph, 23, 28))
```