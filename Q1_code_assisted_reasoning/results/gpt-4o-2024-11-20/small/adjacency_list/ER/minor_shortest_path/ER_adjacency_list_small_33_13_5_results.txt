```python
from collections import deque

# Graph data in adjacency list format
graph = {0: [6, 20, 21, 22], 1: [2, 6, 8, 29], 2: [1, 10, 21], 3: [10, 21, 22], 4: [12, 19, 25], 5: [13, 26], 6: [0, 1, 14, 15], 7: [9, 14, 15], 8: [1], 9: [7], 10: [2, 3, 11, 20, 27], 11: [10, 16, 18, 21, 29], 12: [4, 14, 23, 24, 26, 27], 13: [5], 14: [6, 7, 12, 16, 22, 28, 29], 15: [6, 7, 19, 28], 16: [11, 14], 17: [18, 25], 18: [11, 17, 20, 21], 19: [4, 15, 21, 24, 29], 20: [0, 10, 18], 21: [0, 2, 3, 11, 18, 19], 22: [0, 3, 14, 23, 29], 23: [12, 22, 26], 24: [12, 19], 25: [4, 17], 26: [5, 12, 23], 27: [10, 12, 28], 28: [14, 15, 27], 29: [1, 11, 14, 19, 22]}

def bfs_shortest_path(graph, start, goal):
    # Initialize queue and visited set
    queue = deque([(start, 0)])  # (node, distance)
    visited = set()
    
    while queue:
        # Dequeue node and distance
        current_node, distance = queue.popleft()
        
        # If the node equals the goal, return the distance
        if current_node == goal:
            return distance
        
        # Mark the node as visited
        if current_node in visited:
            continue
        visited.add(current_node)
        
        # Enqueue neighbors
        for neighbor in graph[current_node]:
            if neighbor not in visited:
                queue.append((neighbor, distance + 1))
                
    return float('inf')  # Return infinity if no path exists

# Calculate the shortest path from node '13' to '5'
result = bfs_shortest_path(graph, 13, 5)
print(result)
```