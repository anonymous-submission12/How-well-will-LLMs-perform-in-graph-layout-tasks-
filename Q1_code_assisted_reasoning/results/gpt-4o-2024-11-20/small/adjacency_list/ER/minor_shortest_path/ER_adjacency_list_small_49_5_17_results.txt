```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (node, distance)

    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                queue.append((neighbor, distance + 1))
    return -1  # Return -1 if no path exists

graph = {0: [6, 13, 16], 1: [3, 21], 2: [7], 3: [1, 5, 20], 4: [9, 22], 5: [3, 14, 22], 
         6: [0, 12, 18, 21], 7: [2, 9, 13, 18], 8: [19], 9: [4, 7, 12], 10: [11, 14], 
         11: [10, 16, 18, 19], 12: [6, 9], 13: [0, 7, 14], 14: [5, 10, 13, 15, 21], 
         15: [14], 16: [0, 11], 17: [22], 18: [6, 7, 11], 19: [8, 11], 20: [3, 21], 
         21: [1, 6, 14, 20, 22], 22: [4, 5, 17, 21]}

print(shortest_path_length(graph, 5, 17))
```