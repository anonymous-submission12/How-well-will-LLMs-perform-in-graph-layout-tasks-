```python
from collections import deque

def find_shortest_path(adjacency_list, start, end):
    queue = deque([(start, 0)])  # (current_node, distance)
    visited = set()
    
    while queue:
        current_node, distance = queue.popleft()
        if current_node == end:
            return distance
        if current_node not in visited:
            visited.add(current_node)
            for neighbor in adjacency_list[current_node]:
                queue.append((neighbor, distance + 1))
    return -1  # If no path is found

adjacency_list = {
    0: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
    1: [0], 2: [0], 3: [0], 4: [0], 5: [0], 6: [0], 7: [0], 8: [0], 9: [0], 10: [0], 
    11: [0], 12: [0], 13: [0], 14: [0], 15: [0], 16: [0], 17: [0], 18: [0], 19: [0], 
    20: [0], 21: [0], 22: [0], 23: [0], 24: [0], 25: [0], 26: [0], 27: [0], 28: [0], 29: [0]
}

print(find_shortest_path(adjacency_list, 28, 17))
```