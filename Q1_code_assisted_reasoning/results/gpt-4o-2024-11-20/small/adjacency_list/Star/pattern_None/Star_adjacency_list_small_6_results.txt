```python
def determine_graph_pattern(adjacency_list):
    # Check if the graph is a Star graph
    center_node = None
    for node, neighbors in adjacency_list.items():
        if len(neighbors) == len(adjacency_list) - 1:  # Center node
            if center_node is not None:  # More than one center node
                return "None"
            center_node = node
        elif len(neighbors) != 1:  # Leaf nodes should have exactly one neighbor
            return "None"
    if center_node is not None:
        return "Star"
    return "None"

# Input graph data
graph_data = {0: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], 
              1: [0], 2: [0], 3: [0], 4: [0], 5: [0], 6: [0], 7: [0], 8: [0], 9: [0], 10: [0], 11: [0], 
              12: [0], 13: [0], 14: [0], 15: [0], 16: [0], 17: [0], 18: [0], 19: [0], 20: [0], 21: [0], 
              22: [0], 23: [0], 24: [0], 25: [0]}

# Determine the graph pattern
print(determine_graph_pattern(graph_data))
```