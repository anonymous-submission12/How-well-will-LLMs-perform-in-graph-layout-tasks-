```python
def classify_graph(graph):
    n = len(graph)
    degrees = {node: len(neighbors) for node, neighbors in graph.items()}

    # Check for star pattern: One node has degree n-1, and the rest have degree 1
    if sum([deg == n-1 for deg in degrees.values()]) == 1 and sum([deg == 1 for deg in degrees.values()]) == n-1:
        return "Star"

    # Check for cycle pattern: All nodes have degree 2, and the graph forms a single cycle
    if all(deg == 2 for deg in degrees.values()) and n >= 3:
        return "Cycle"

    # Check for path pattern: Two nodes have degree 1 (ends), and the rest have degree 2
    if sum([deg == 2 for deg in degrees.values()]) == n-2 and sum([deg == 1 for deg in degrees.values()]) == 2:
        return "Path"

    # Check for grid pattern: Degrees vary depending on interior/edge/corner, hard to verify
    # Skipping grid detection because it's complex and this isn't a grid clearly

    # Check for complete pattern: All nodes have degree n-1
    if all(deg == n-1 for deg in degrees.values()):
        return "Complete"

    # Check for clustered graph: Hard to define universally; skipping specific check

    # Check for random graph: Default fallback if no other patterns fit
    return "Random"

# Graph input
graph = {0: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], 
         1: [0], 2: [0], 3: [0], 4: [0], 5: [0], 6: [0], 7: [0], 8: [0], 9: [0], 10: [0], 
         11: [0], 12: [0], 13: [0], 14: [0], 15: [0], 16: [0], 17: [0], 18: [0], 19: [0], 
         20: [0], 21: [0]}

print(classify_graph(graph))
```