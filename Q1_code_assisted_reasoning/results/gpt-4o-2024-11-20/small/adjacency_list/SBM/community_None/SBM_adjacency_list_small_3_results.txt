```python
from collections import defaultdict

# Function to perform Depth First Search
def dfs(node, visited, graph):
    visited.add(node)
    for neighbor in graph[node]:
        if neighbor not in visited:
            dfs(neighbor, visited, graph)

# Input graph adjacency list
graph = {
    0: [1, 2, 4, 5, 6], 1: [0, 2, 3, 4, 5, 6, 7, 8, 9], 2: [0, 1, 4, 6, 7, 8],
    3: [1, 5, 6, 7, 8], 4: [0, 1, 2, 5, 6, 8], 5: [0, 1, 3, 4, 7],
    6: [0, 1, 2, 3, 4, 7], 7: [1, 2, 3, 5, 6, 8], 8: [1, 2, 3, 4, 7],
    9: [1, 10, 14, 16, 17, 22], 10: [9, 11, 12, 15, 16, 17],
    11: [10, 12, 13, 14, 16, 17, 24], 12: [10, 11, 13, 14, 15, 16, 17],
    13: [11, 12, 14, 15], 14: [9, 11, 12, 13, 15, 16, 17],
    15: [10, 12, 13, 14, 17], 16: [9, 10, 11, 12, 14, 17],
    17: [9, 10, 11, 12, 14, 15, 16], 18: [19, 20, 21, 22, 23, 24, 25],
    19: [18, 20, 21, 22, 23, 24], 20: [18, 19, 22, 23, 24, 25],
    21: [18, 19, 22, 23, 25], 22: [9, 18, 19, 20, 21, 23, 24, 25],
    23: [18, 19, 20, 21, 22, 24], 24: [11, 18, 19, 20, 22, 23, 25],
    25: [18, 20, 21, 22, 24]
}

# Set to store visited nodes
visited = set()

# Count the number of communities
community_count = 0
for node in graph:
    if node not in visited:
        community_count += 1
        dfs(node, visited, graph)

# Output the result
print(community_count)
```