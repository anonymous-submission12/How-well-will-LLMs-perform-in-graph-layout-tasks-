```python
from collections import defaultdict

# Input graph as adjacency list
graph = {
    0: [3, 4, 5, 6, 17], 1: [2, 4, 7], 2: [1, 3, 4, 5, 6, 7], 3: [0, 2, 4, 5, 6, 7],
    4: [0, 1, 2, 3, 5, 6, 7, 17], 5: [0, 2, 3, 4, 6, 7], 6: [0, 2, 3, 4, 5, 7, 19],
    7: [1, 2, 3, 4, 5, 6], 8: [9, 13, 15], 9: [8, 10, 12, 13, 14, 16],
    10: [9, 11, 12, 13, 15], 11: [10, 12, 13, 14, 15], 12: [9, 10, 11, 13, 14],
    13: [8, 9, 10, 11, 12, 14, 15], 14: [9, 11, 12, 13, 15], 15: [8, 10, 11, 13, 14],
    16: [9, 17, 18, 19, 20, 21, 22], 17: [0, 4, 16, 19, 20, 21, 22],
    18: [16, 19, 22], 19: [6, 16, 17, 18, 20], 20: [16, 17, 19, 21],
    21: [16, 17, 20], 22: [16, 17, 18]
}

# Function to perform DFS and find connected components
def dfs(node, visited, graph):
    visited.add(node)
    for neighbor in graph[node]:
        if neighbor not in visited:
            dfs(neighbor, visited, graph)

# Count the number of connected components (communities)
def count_communities(graph):
    visited = set()
    communities = 0
    for node in graph:
        if node not in visited:
            dfs(node, visited, graph)
            communities += 1
    return communities

# Output the number of communities
print(count_communities(graph))
```