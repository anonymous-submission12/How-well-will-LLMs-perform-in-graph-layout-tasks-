```python
from collections import defaultdict

# Parse the graph adjacency list
graph = {
    0: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 1: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 
    2: [0, 1, 3, 4, 5, 6, 8, 9, 10], 3: [0, 1, 2, 5, 6, 9, 10], 
    4: [0, 1, 2, 5, 6, 7, 9], 5: [0, 1, 2, 3, 4, 6, 7, 9, 11], 
    6: [0, 1, 2, 3, 4, 5, 7, 9, 11], 7: [0, 1, 4, 5, 6, 9, 11], 
    8: [0, 1, 2, 9, 11], 9: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11], 
    10: [0, 1, 2, 3, 9, 11, 12], 11: [0, 1, 5, 6, 7, 8, 9, 10], 
    12: [0, 10, 13, 14, 15, 16, 17, 18, 19, 20, 22], 13: [12, 14, 15, 16, 17, 18, 20, 21], 
    14: [12, 13, 15, 17, 18, 19, 20, 22], 15: [12, 13, 14, 17, 18, 19, 20, 21, 22], 
    16: [12, 13, 18, 20, 21, 22], 17: [12, 13, 14, 15, 18, 19, 22], 
    18: [12, 13, 14, 15, 16, 17, 19, 20, 21, 22], 19: [12, 14, 15, 17, 18, 22], 
    20: [12, 13, 14, 15, 16, 18, 22], 21: [13, 15, 16, 18, 22], 
    22: [12, 14, 15, 16, 17, 18, 19, 20, 21]
}

# Function to perform a DFS and mark nodes in same community
def dfs(node, visited, graph):
    stack = [node]
    while stack:
        current = stack.pop()
        visited.add(current)
        for neighbor in graph[current]:
            if neighbor not in visited:
                stack.append(neighbor)

# Count connected components (communities)
def count_communities(graph):
    visited = set()
    community_count = 0
    for node in graph:
        if node not in visited:
            dfs(node, visited, graph)
            community_count += 1
    return community_count

# Output the result
print(count_communities(graph))
```