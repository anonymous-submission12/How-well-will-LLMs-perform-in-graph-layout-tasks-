```python
from collections import defaultdict

def dfs(node, community, visited, graph):
    visited.add(node)
    community.add(node)
    for neighbor in graph[node]:
        if neighbor not in visited:
            dfs(neighbor, community, visited, graph)

def find_communities(graph):
    visited = set()
    communities = []
    for node in graph:
        if node not in visited:
            community = set()
            dfs(node, community, visited, graph)
            communities.append(community)
    return len(communities)

graph = {
    0: [1, 2, 3, 4, 5, 6, 11, 13, 14],
    1: [0, 2, 4, 5, 6, 19],
    2: [0, 1, 3, 6],
    3: [0, 2, 4, 5, 6],
    4: [0, 1, 3, 5, 6, 18],
    5: [0, 1, 3, 4, 6, 9],
    6: [0, 1, 2, 3, 4, 5],
    7: [8, 9, 10, 11, 12, 13],
    8: [7, 9, 11, 12, 13],
    9: [5, 7, 8, 10, 11, 12],
    10: [7, 9, 11, 12, 13, 14],
    11: [0, 7, 8, 9, 10, 12, 13],
    12: [7, 8, 9, 10, 11, 13],
    13: [0, 7, 8, 10, 11, 12],
    14: [0, 10, 15, 17, 18, 19, 20],
    15: [14, 16, 17, 18, 20],
    16: [15, 17, 18, 19, 20],
    17: [14, 15, 16, 18, 19, 20],
    18: [4, 14, 15, 16, 17, 19, 20],
    19: [1, 14, 16, 17, 18],
    20: [14, 15, 16, 17, 18]
}

print(find_communities(graph))
```