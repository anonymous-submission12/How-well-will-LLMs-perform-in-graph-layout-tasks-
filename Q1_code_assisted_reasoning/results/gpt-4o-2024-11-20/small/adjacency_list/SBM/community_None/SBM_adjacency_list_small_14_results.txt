```python
from collections import defaultdict

# BFS to find all nodes in a connected component
def bfs(node, visited, adjacency_list):
    queue = [node]
    visited.add(node)
    while queue:
        current = queue.pop(0)
        for neighbor in adjacency_list[current]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)

# Count communities in the graph
def count_communities(adjacency_list):
    visited = set()
    communities = 0
    
    for node in adjacency_list:
        if node not in visited:
            bfs(node, visited, adjacency_list)
            communities += 1
            
    return communities

# Adjacency list
graph = {0: [2, 5, 6, 7], 1: [2, 3, 5, 6, 7, 8, 19, 20], 2: [0, 1, 3, 4, 6, 7], 3: [1, 2, 4, 5, 6], 4: [2, 3, 6, 7, 22], 5: [0, 1, 3, 6, 7], 6: [0, 1, 2, 3, 4, 5, 7], 7: [0, 1, 2, 4, 5, 6], 8: [1, 9, 10, 11, 12, 13, 14], 9: [8, 11, 12, 13, 14, 15], 10: [8, 12, 13, 15], 11: [8, 9, 13, 14, 15], 12: [8, 9, 10, 13, 14, 15], 13: [8, 9, 10, 11, 12], 14: [8, 9, 11, 12, 15], 15: [9, 10, 11, 12, 14], 16: [17, 18, 19, 20, 21, 23], 17: [16, 18, 19, 20, 21, 22, 23], 18: [16, 17, 19], 19: [1, 16, 17, 18, 20, 21, 22, 23], 20: [1, 16, 17, 19, 21], 21: [16, 17, 19, 20, 23], 22: [4, 17, 19, 23], 23: [16, 17, 19, 21, 22]}

# Calculate and print the number of communities
print(count_communities(graph))
```