```python
from collections import defaultdict

def dfs(node, visited, graph):
    stack = [node]
    while stack:
        current = stack.pop()
        for neighbor in graph[current]:
            if neighbor not in visited:
                visited.add(neighbor)
                stack.append(neighbor)

def count_communities(graph):
    visited = set()
    communities = 0
    for node in graph:
        if node not in visited:
            visited.add(node)
            dfs(node, visited, graph)
            communities += 1
    return communities

graph = {0: [1, 3], 1: [0, 2], 2: [1, 5], 3: [0, 4, 5], 4: [3, 5], 5: [2, 3, 4, 11], 
         6: [8, 9, 10, 11, 13], 7: [10, 11], 8: [6, 9, 10, 11], 9: [6, 8, 10, 11], 
         10: [6, 7, 8, 9, 11], 11: [5, 6, 7, 8, 9, 10], 12: [13, 15, 16, 17], 
         13: [6, 12, 15, 17, 25], 14: [15, 17], 15: [12, 13, 14, 16, 17, 22], 
         16: [12, 15, 17], 17: [12, 13, 14, 15, 16], 18: [19, 21, 22], 
         19: [18, 20, 21], 20: [19, 22], 21: [18, 19], 22: [15, 18, 20], 
         23: [24, 25, 26, 27], 24: [23, 25, 26, 27], 25: [13, 23, 24, 26, 27], 
         26: [23, 24, 25, 27], 27: [23, 24, 25, 26]}

print(count_communities(graph))
```