```python
def determine_graph_pattern(adj_list):
    n = len(adj_list)
    degrees = {node: len(neighbors) for node, neighbors in adj_list.items()}
    max_degree = max(degrees.values())
    min_degree = min(degrees.values())
    
    # Check for Star pattern
    if max_degree == n - 1 and min_degree == 1:
        return "Star"
    
    # Check for Cycle pattern
    if all(degree == 2 for degree in degrees.values()):
        return "Cycle"
    
    # Check for Path pattern
    if max_degree == 2 and min_degree == 1 and list(degrees.values()).count(1) == 2:
        return "Path"
    
    # Check for Complete graph
    if all(len(neighbors) == n - 1 for neighbors in adj_list.values()):
        return "Complete"
    
    # Check for Grid pattern (approximation)
    sqrt_n = int(n**0.5)
    if sqrt_n * sqrt_n == n and all(degree <= 4 for degree in degrees.values()):
        return "Grid"
    
    # Check for Clustered graph (approximation)
    clusters = []
    visited = set()
    for node in adj_list:
        if node not in visited:
            cluster = set()
            stack = [node]
            while stack:
                current = stack.pop()
                if current not in visited:
                    visited.add(current)
                    cluster.add(current)
                    stack.extend(adj_list[current])
            clusters.append(cluster)
    if len(clusters) > 1 and all(len(cluster) > 1 for cluster in clusters):
        return "Clustered"
    
    # Default to Random graph
    return "Random"

adj_list = {0: [3, 4, 5, 8, 9, 10, 15], 1: [2, 3, 4, 5, 6, 7, 8, 9, 10], 2: [1, 3, 4, 5, 6, 8, 9, 10], 3: [0, 1, 2, 4, 5, 8, 9, 10, 11], 4: [0, 1, 2, 3, 5, 9, 11], 5: [0, 1, 2, 3, 4, 7, 9, 10], 6: [1, 2, 7, 8, 9, 11], 7: [1, 5, 6, 8, 9, 10, 23], 8: [0, 1, 2, 3, 6, 7, 9, 10], 9: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11], 10: [0, 1, 2, 3, 5, 7, 8, 9, 11], 11: [3, 4, 6, 9, 10], 12: [14, 16, 18, 19, 21, 22, 23], 13: [14, 15, 16, 17, 18, 19, 20, 23], 14: [12, 13, 15, 16, 17, 18, 19, 20, 22, 23], 15: [0, 13, 14, 18, 19, 20, 21, 23], 16: [12, 13, 14, 18, 19, 20, 22], 17: [13, 14, 18, 19, 20, 21, 22, 23], 18: [12, 13, 14, 15, 16, 17, 19, 20, 22], 19: [12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23], 20: [13, 14, 15, 16, 17, 18, 19, 21, 22, 23], 21: [12, 15, 17, 19, 20, 23], 22: [12, 14, 16, 17, 18, 19, 20, 23], 23: [7, 12, 13, 14, 15, 17, 19, 20, 21, 22]}
print(determine_graph_pattern(adj_list))
```