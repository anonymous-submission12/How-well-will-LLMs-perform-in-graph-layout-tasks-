```python
def determine_graph_pattern(adj_list):
    n = len(adj_list)
    edges = sum(len(neighbors) for neighbors in adj_list.values()) // 2

    # Check for Star pattern
    if any(len(neighbors) == n - 1 for neighbors in adj_list.values()):
        return "Star"

    # Check for Cycle pattern
    if all(len(neighbors) == 2 for neighbors in adj_list.values()) and edges == n:
        return "Cycle"

    # Check for Path pattern
    if sum(len(neighbors) == 1 for neighbors in adj_list.values()) == 2 and all(len(neighbors) <= 2 for neighbors in adj_list.values()):
        return "Path"

    # Check for Grid pattern (approximation based on degree)
    sqrt_n = int(n**0.5)
    if sqrt_n * sqrt_n == n and all(len(neighbors) <= 4 for neighbors in adj_list.values()):
        return "Grid"

    # Check for Complete graph
    if edges == n * (n - 1) // 2:
        return "Complete"

    # Check for Clustered graph (approximation based on dense subgraphs)
    clusters = []
    visited = set()
    for node in adj_list:
        if node not in visited:
            cluster = set()
            stack = [node]
            while stack:
                current = stack.pop()
                if current not in visited:
                    visited.add(current)
                    cluster.add(current)
                    stack.extend(adj_list[current])
            clusters.append(cluster)
    if len(clusters) > 1 and all(len(cluster) > 1 for cluster in clusters):
        return "Clustered"

    # Default to Random graph
    return "Random"

# Input adjacency list
adj_list = {0: [2, 3, 4, 12], 1: [3, 4, 5, 6, 12, 16], 2: [0, 3, 4, 5, 6], 3: [0, 1, 2, 4, 5, 13, 18], 4: [0, 1, 2, 3, 5, 6], 5: [1, 2, 3, 4, 9], 6: [1, 2, 4, 7], 7: [6, 8, 9, 10, 11, 13], 8: [7, 9, 10, 12, 13], 9: [5, 7, 8, 10, 11, 13], 10: [7, 8, 9, 11, 12], 11: [7, 9, 10, 12, 13, 18], 12: [0, 1, 8, 10, 11], 13: [3, 7, 8, 9, 11], 14: [15, 16, 17, 18, 19, 20], 15: [14, 16, 17, 18, 19, 20], 16: [1, 14, 15, 17, 18, 19], 17: [14, 15, 16, 18, 19, 20], 18: [3, 11, 14, 15, 16, 17, 19, 20], 19: [14, 15, 16, 17, 18, 20], 20: [14, 15, 17, 18, 19]}

# Determine the graph pattern
print(determine_graph_pattern(adj_list))
```