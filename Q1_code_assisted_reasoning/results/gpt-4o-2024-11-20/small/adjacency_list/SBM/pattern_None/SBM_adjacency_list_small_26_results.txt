```python
def determine_graph_pattern(adj_list):
    # Helper functions
    def is_star(adj_list):
        center_count = sum(len(neighbors) == len(adj_list) - 1 for neighbors in adj_list.values())
        return center_count == 1

    def is_cycle(adj_list):
        return all(len(neighbors) == 2 for neighbors in adj_list.values())

    def is_path(adj_list):
        end_points = sum(len(neighbors) == 1 for neighbors in adj_list.values())
        return end_points == 2 and all(len(neighbors) <= 2 for neighbors in adj_list.values())

    def is_grid(adj_list):
        # Grid graphs are harder to detect; we approximate by checking degree distribution
        degree_counts = [len(neighbors) for neighbors in adj_list.values()]
        return all(degree in {2, 3, 4} for degree in degree_counts)

    def is_complete(adj_list):
        n = len(adj_list)
        return all(len(neighbors) == n - 1 for neighbors in adj_list.values())

    def is_clustered(adj_list):
        # Clustered graphs have dense subgraphs; we approximate by checking for subgroups
        visited = set()
        clusters = 0

        def dfs(node):
            stack = [node]
            while stack:
                current = stack.pop()
                if current not in visited:
                    visited.add(current)
                    stack.extend(adj_list[current])

        for node in adj_list:
            if node not in visited:
                clusters += 1
                dfs(node)
        return clusters > 1

    def is_random(adj_list):
        # Random graphs have no specific structure; we approximate by exclusion
        return not any([is_star(adj_list), is_cycle(adj_list), is_path(adj_list),
                        is_grid(adj_list), is_complete(adj_list), is_clustered(adj_list)])

    # Determine the pattern
    if is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_grid(adj_list):
        return "Grid"
    elif is_complete(adj_list):
        return "Complete"
    elif is_clustered(adj_list):
        return "Clustered"
    elif is_random(adj_list):
        return "Random"
    else:
        return "Unknown"

# Input graph data
graph_data = {0: [1, 2, 3, 4, 5, 6, 11, 13, 14], 1: [0, 2, 4, 5, 6, 19], 2: [0, 1, 3, 6], 3: [0, 2, 4, 5, 6], 4: [0, 1, 3, 5, 6, 18], 5: [0, 1, 3, 4, 6, 9], 6: [0, 1, 2, 3, 4, 5], 7: [8, 9, 10, 11, 12, 13], 8: [7, 9, 11, 12, 13], 9: [5, 7, 8, 10, 11, 12], 10: [7, 9, 11, 12, 13, 14], 11: [0, 7, 8, 9, 10, 12, 13], 12: [7, 8, 9, 10, 11, 13], 13: [0, 7, 8, 10, 11, 12], 14: [0, 10, 15, 17, 18, 19, 20], 15: [14, 16, 17, 18, 20], 16: [15, 17, 18, 19, 20], 17: [14, 15, 16, 18, 19, 20], 18: [4, 14, 15, 16, 17, 19, 20], 19: [1, 14, 16, 17, 18], 20: [14, 15, 16, 17, 18]}

# Output the result
print(determine_graph_pattern(graph_data))
```