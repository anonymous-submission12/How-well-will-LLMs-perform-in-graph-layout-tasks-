```python
def determine_graph_pattern(adj_list):
    def is_star(adj_list):
        center_count = sum(len(neighbors) == len(adj_list) - 1 for node, neighbors in adj_list.items())
        return center_count == 1

    def is_cycle(adj_list):
        return all(len(neighbors) == 2 for neighbors in adj_list.values())

    def is_path(adj_list):
        end_count = sum(len(neighbors) == 1 for neighbors in adj_list.values())
        middle_count = sum(len(neighbors) == 2 for neighbors in adj_list.values())
        return end_count == 2 and middle_count == len(adj_list) - 2

    def is_grid(adj_list):
        # Grid graphs are harder to detect without coordinates, so we approximate by checking
        # if most nodes have 2-4 neighbors (common in grids).
        neighbor_counts = [len(neighbors) for neighbors in adj_list.values()]
        return all(2 <= count <= 4 for count in neighbor_counts)

    def is_complete(adj_list):
        n = len(adj_list)
        return all(len(neighbors) == n - 1 for neighbors in adj_list.values())

    def is_clustered(adj_list):
        # Clustered graphs often have groups of nodes with high internal connectivity.
        # We approximate by checking if there are subsets of nodes with high connectivity.
        clusters = []
        visited = set()
        for node in adj_list:
            if node not in visited:
                cluster = set()
                stack = [node]
                while stack:
                    current = stack.pop()
                    if current not in visited:
                        visited.add(current)
                        cluster.add(current)
                        stack.extend(adj_list[current])
                clusters.append(cluster)
        return len(clusters) > 1

    def is_random(adj_list):
        # Random graphs typically have no discernible pattern.
        # We approximate by checking if the graph doesn't fit other patterns.
        return not (is_star(adj_list) or is_cycle(adj_list) or is_path(adj_list) or is_grid(adj_list) or is_complete(adj_list) or is_clustered(adj_list))

    if is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_grid(adj_list):
        return "Grid"
    elif is_complete(adj_list):
        return "Complete"
    elif is_clustered(adj_list):
        return "Clustered Graph"
    elif is_random(adj_list):
        return "Random Graph"
    else:
        return "Unknown"

adj_list = {0: [1, 2, 3, 4, 5, 6], 1: [0, 2, 3, 4, 5, 6], 2: [0, 1, 3, 4, 5, 6], 3: [0, 1, 2, 4, 5, 6], 4: [0, 1, 2, 3, 6, 24], 5: [0, 1, 2, 3, 6], 6: [0, 1, 2, 3, 4, 5], 7: [8, 9, 10, 11, 12], 8: [7, 12], 9: [7, 10, 11], 10: [7, 9, 11, 12], 11: [7, 9, 10, 12], 12: [7, 8, 10, 11, 24], 13: [16, 17], 14: [15, 16, 17, 18], 15: [14, 16], 16: [13, 14, 15, 17], 17: [13, 14, 16, 18], 18: [14, 17, 23], 19: [21, 22, 23], 20: [21, 22, 24], 21: [19, 20, 22, 23, 24], 22: [19, 20, 21, 23, 24], 23: [18, 19, 21, 22, 24], 24: [4, 12, 20, 21, 22, 23]}
print(determine_graph_pattern(adj_list))
```