```python
def determine_graph_pattern(adj_list):
    # Helper function to check if the graph is a star
    def is_star(adj_list):
        center_count = 0
        for node, neighbors in adj_list.items():
            if len(neighbors) == len(adj_list) - 1:
                center_count += 1
            elif len(neighbors) != 1:
                return False
        return center_count == 1

    # Helper function to check if the graph is a cycle
    def is_cycle(adj_list):
        for neighbors in adj_list.values():
            if len(neighbors) != 2:
                return False
        return True

    # Helper function to check if the graph is a path
    def is_path(adj_list):
        end_count = 0
        for neighbors in adj_list.values():
            if len(neighbors) == 1:
                end_count += 1
            elif len(neighbors) != 2:
                return False
        return end_count == 2

    # Helper function to check if the graph is complete
    def is_complete(adj_list):
        n = len(adj_list)
        for neighbors in adj_list.values():
            if len(neighbors) != n - 1:
                return False
        return True

    # Helper function to check if the graph is a grid
    def is_grid(adj_list):
        # Grid graphs are harder to identify without additional information.
        # For simplicity, we assume it's not a grid.
        return False

    # Helper function to check if the graph is clustered
    def is_clustered(adj_list):
        # Clustered graphs are harder to identify without additional information.
        # For simplicity, we assume it's not clustered.
        return False

    # Helper function to check if the graph is random
    def is_random(adj_list):
        # If none of the above patterns match, we assume it's random.
        return True

    # Check each pattern
    if is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_complete(adj_list):
        return "Complete"
    elif is_grid(adj_list):
        return "Grid"
    elif is_clustered(adj_list):
        return "Clustered"
    elif is_random(adj_list):
        return "Random"

# Input adjacency list
adj_list = {0: [2, 3, 4, 5], 1: [2, 3, 4], 2: [0, 1, 3, 4, 5], 3: [0, 1, 2, 4], 4: [0, 1, 2, 3, 5], 5: [0, 2, 4, 6], 6: [5, 7, 8, 10, 11], 7: [6, 8, 9, 10, 11, 14], 8: [6, 7, 9, 10, 11], 9: [7, 8, 10, 11], 10: [6, 7, 8, 9, 11], 11: [6, 7, 8, 9, 10], 12: [13, 14, 17], 13: [12, 15, 16, 17, 23], 14: [7, 12, 15, 17], 15: [13, 14, 16, 17], 16: [13, 15, 17, 22], 17: [12, 13, 14, 15, 16], 18: [19, 21, 22, 23], 19: [18, 20, 21, 22], 20: [19, 21, 22, 23], 21: [18, 19, 20, 22, 23], 22: [16, 18, 19, 20, 21, 23], 23: [13, 18, 20, 21, 22]}

# Determine the graph pattern
print(determine_graph_pattern(adj_list))
```