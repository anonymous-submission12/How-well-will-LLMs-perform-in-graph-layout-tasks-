```python
def graph_pattern(adj_list):
    # Helper function to count edges
    def count_edges(adj_list):
        edge_count = 0
        for node, neighbors in adj_list.items():
            edge_count += len(neighbors)
        return edge_count // 2  # Each edge is counted twice

    # Check for Star pattern
    def is_star(adj_list):
        center_count = sum(len(neighbors) == len(adj_list) - 1 for neighbors in adj_list.values())
        return center_count == 1

    # Check for Cycle pattern
    def is_cycle(adj_list):
        edge_count = count_edges(adj_list)
        return edge_count == len(adj_list) and all(len(neighbors) == 2 for neighbors in adj_list.values())

    # Check for Path pattern
    def is_path(adj_list):
        edge_count = count_edges(adj_list)
        return edge_count == len(adj_list) - 1 and sum(len(neighbors) == 1 for neighbors in adj_list.values()) == 2

    # Check for Grid pattern
    def is_grid(adj_list):
        # A grid graph has nodes with degree 2, 3, or 4, and the number of edges is less than complete graph
        edge_count = count_edges(adj_list)
        max_edges = len(adj_list) * (len(adj_list) - 1) // 2
        return all(2 <= len(neighbors) <= 4 for neighbors in adj_list.values()) and edge_count < max_edges

    # Check for Complete pattern
    def is_complete(adj_list):
        edge_count = count_edges(adj_list)
        max_edges = len(adj_list) * (len(adj_list) - 1) // 2
        return edge_count == max_edges

    # Check for Clustered graph
    def is_clustered(adj_list):
        # A clustered graph has groups of nodes with high connectivity within groups
        # Here we check if there are subsets of nodes with high connectivity
        for node, neighbors in adj_list.items():
            if len(neighbors) > len(adj_list) // 2:
                return True
        return False

    # Check for Random graph
    def is_random(adj_list):
        # A random graph has no specific pattern
        return True

    # Determine the pattern
    if is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_grid(adj_list):
        return "Grid"
    elif is_complete(adj_list):
        return "Complete"
    elif is_clustered(adj_list):
        return "Clustered graph"
    else:
        return "Random graph"

# Input adjacency list
adj_list = {0: [3, 4, 6, 7], 1: [2, 3, 4, 5, 6, 7, 17, 18], 2: [1, 3, 5, 6], 3: [0, 1, 2, 4, 5, 6, 9, 20], 4: [0, 1, 3, 5, 6, 7], 5: [1, 2, 3, 4, 6, 7], 6: [0, 1, 2, 3, 4, 5], 7: [0, 1, 4, 5], 8: [11, 13], 9: [3, 10, 11, 12, 13, 14], 10: [9, 11, 12, 13, 14], 11: [8, 9, 10, 12, 13, 14, 15], 12: [9, 10, 11, 13, 14], 13: [8, 9, 10, 11, 12, 23], 14: [9, 10, 11, 12], 15: [11, 16, 17, 18, 19, 20, 21], 16: [15, 18, 20], 17: [1, 15, 18, 19, 20], 18: [1, 15, 16, 17, 19, 20, 21], 19: [15, 17, 18, 20, 21], 20: [3, 15, 16, 17, 18, 19, 21, 26], 21: [15, 18, 19, 20], 22: [23, 25, 26, 27, 28], 23: [13, 22, 24, 25, 28], 24: [23, 26, 27, 28], 25: [22, 23, 26, 28], 26: [20, 22, 24, 25, 27], 27: [22, 24, 26, 28], 28: [22, 23, 24, 25, 27]}

# Output the result
print(graph_pattern(adj_list))
```