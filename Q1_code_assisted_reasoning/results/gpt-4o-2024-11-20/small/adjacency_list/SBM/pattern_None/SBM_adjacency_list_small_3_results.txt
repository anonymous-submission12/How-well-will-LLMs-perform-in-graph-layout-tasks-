```python
from collections import defaultdict

def is_star(graph):
    center_count = 0
    for node, neighbors in graph.items():
        if len(neighbors) == len(graph) - 1:
            center_count += 1
        elif len(neighbors) != 1:
            return False
    return center_count == 1

def is_cycle(graph):
    for node, neighbors in graph.items():
        if len(neighbors) != 2:
            return False
    return True

def is_path(graph):
    end_nodes = 0
    for node, neighbors in graph.items():
        if len(neighbors) == 1:
            end_nodes += 1
        elif len(neighbors) != 2:
            return False
    return end_nodes == 2

def is_grid(graph):
    degrees = [len(neighbors) for neighbors in graph.values()]
    return all(degree in {2, 3, 4} for degree in degrees)

def is_complete(graph):
    n = len(graph)
    for neighbors in graph.values():
        if len(neighbors) != n - 1:
            return False
    return True

def is_clustered(graph):
    # A clustered graph has dense subgraphs with sparse connections between them.
    # We'll check if the graph can be divided into clusters with high internal density.
    visited = set()
    clusters = []

    def dfs(node, cluster):
        visited.add(node)
        cluster.append(node)
        for neighbor in graph[node]:
            if neighbor not in visited:
                dfs(neighbor, cluster)

    for node in graph:
        if node not in visited:
            cluster = []
            dfs(node, cluster)
            clusters.append(cluster)

    for cluster in clusters:
        internal_edges = 0
        possible_edges = len(cluster) * (len(cluster) - 1) // 2
        for node in cluster:
            for neighbor in graph[node]:
                if neighbor in cluster:
                    internal_edges += 1
        internal_edges //= 2
        if possible_edges > 0 and internal_edges / possible_edges < 0.5:
            return False
    return True

def is_random(graph):
    # A random graph doesn't fit any of the above patterns.
    return not (is_star(graph) or is_cycle(graph) or is_path(graph) or is_grid(graph) or is_complete(graph) or is_clustered(graph))

graph = {0: [1, 2, 4, 5, 6], 1: [0, 2, 3, 4, 5, 6, 7, 8, 9], 2: [0, 1, 4, 6, 7, 8], 3: [1, 5, 6, 7, 8], 4: [0, 1, 2, 5, 6, 8], 5: [0, 1, 3, 4, 7], 6: [0, 1, 2, 3, 4, 7], 7: [1, 2, 3, 5, 6, 8], 8: [1, 2, 3, 4, 7], 9: [1, 10, 14, 16, 17, 22], 10: [9, 11, 12, 15, 16, 17], 11: [10, 12, 13, 14, 16, 17, 24], 12: [10, 11, 13, 14, 15, 16, 17], 13: [11, 12, 14, 15], 14: [9, 11, 12, 13, 15, 16, 17], 15: [10, 12, 13, 14, 17], 16: [9, 10, 11, 12, 14, 17], 17: [9, 10, 11, 12, 14, 15, 16], 18: [19, 20, 21, 22, 23, 24, 25], 19: [18, 20, 21, 22, 23, 24], 20: [18, 19, 22, 23, 24, 25], 21: [18, 19, 22, 23, 25], 22: [9, 18, 19, 20, 21, 23, 24, 25], 23: [18, 19, 20, 21, 22, 24], 24: [11, 18, 19, 20, 22, 23, 25], 25: [18, 20, 21, 22, 24]}

if is_star(graph):
    print("Star")
elif is_cycle(graph):
    print("Cycle")
elif is_path(graph):
    print("Path")
elif is_grid(graph):
    print("Grid")
elif is_complete(graph):
    print("Complete")
elif is_clustered(graph):
    print("Clustered Graph")
elif is_random(graph):
    print("Random Graph")
```