```python
def determine_graph_pattern(adj_list):
    n = len(adj_list)
    degrees = {node: len(neighbors) for node, neighbors in adj_list.items()}
    max_degree = max(degrees.values())
    min_degree = min(degrees.values())

    # Check for Complete Graph
    if all(len(neighbors) == n - 1 for neighbors in adj_list.values()):
        return "Complete"

    # Check for Star Graph
    if max_degree == n - 1 and min_degree == 1:
        return "Star"

    # Check for Cycle Graph
    if all(len(neighbors) == 2 for neighbors in adj_list.values()):
        return "Cycle"

    # Check for Path Graph
    if max_degree == 2 and (list(degrees.values()).count(1) == 2):
        return "Path"

    # Check for Grid Graph
    # A grid graph is harder to identify directly from adjacency list without coordinates.
    # For simplicity, we skip this check.

    # Check for Clustered Graph
    # A clustered graph typically has groups of nodes with high connectivity within groups.
    # We approximate this by checking if there are subsets of nodes with higher connectivity.
    clusters = []
    visited = set()
    for node in adj_list:
        if node not in visited:
            cluster = set()
            stack = [node]
            while stack:
                current = stack.pop()
                if current not in visited:
                    visited.add(current)
                    cluster.add(current)
                    stack.extend(adj_list[current])
            clusters.append(cluster)
    if len(clusters) > 1:
        return "Clustered"

    # Default to Random Graph
    return "Random"

adj_list = {0: [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12], 1: [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13], 2: [0, 1, 4, 7, 8, 10, 11, 12], 3: [0, 1, 4, 6, 8, 9, 10], 4: [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 20], 5: [1, 4, 6, 7, 8, 11], 6: [0, 1, 3, 4, 5, 8, 9, 10, 11, 12], 7: [0, 1, 2, 4, 5, 8, 9, 11, 12], 8: [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12], 9: [0, 1, 3, 6, 7, 8, 10, 11, 12], 10: [0, 1, 2, 3, 4, 6, 8, 9, 11, 12], 11: [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12], 12: [0, 1, 2, 4, 6, 7, 8, 9, 10, 11], 13: [1, 14, 15, 16, 18, 20, 21, 22, 23, 24], 14: [13, 15, 17, 18, 20, 21, 22, 23, 24], 15: [13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25], 16: [13, 15, 17, 18, 19, 20, 22, 25], 17: [14, 15, 16, 18, 20, 22, 25], 18: [13, 14, 15, 16, 17, 19, 20, 22, 24, 25], 19: [15, 16, 18, 20, 22, 24, 25], 20: [4, 13, 14, 16, 17, 18, 19, 21, 23, 24], 21: [13, 14, 15, 20, 22, 23, 24, 25], 22: [13, 14, 15, 16, 17, 18, 19, 21, 23, 25], 23: [13, 14, 15, 20, 21, 22, 24, 25], 24: [13, 14, 15, 18, 19, 20, 21, 23, 25], 25: [15, 16, 17, 18, 19, 21, 22, 23, 24]}
print(determine_graph_pattern(adj_list))
```