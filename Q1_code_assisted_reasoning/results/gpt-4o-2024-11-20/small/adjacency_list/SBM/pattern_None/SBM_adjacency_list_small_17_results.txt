```python
def determine_graph_pattern(adj_list):
    n = len(adj_list)
    degrees = {node: len(neighbors) for node, neighbors in adj_list.items()}
    max_degree = max(degrees.values())
    min_degree = min(degrees.values())
    
    # Check for Complete Graph
    if all(len(neighbors) == n - 1 for neighbors in adj_list.values()):
        return "Complete"
    
    # Check for Star Graph
    if max_degree == n - 1 and min_degree == 1:
        return "Star"
    
    # Check for Cycle Graph
    if all(len(neighbors) == 2 for neighbors in adj_list.values()):
        return "Cycle"
    
    # Check for Path Graph
    if max_degree == 2 and (list(degrees.values()).count(1) == 2):
        return "Path"
    
    # Check for Grid Graph (approximation based on degree)
    if all(degree in [2, 3, 4] for degree in degrees.values()):
        return "Grid"
    
    # Check for Clustered Graph (multiple dense subgraphs)
    clusters = []
    visited = set()
    for node in adj_list:
        if node not in visited:
            cluster = set()
            stack = [node]
            while stack:
                current = stack.pop()
                if current not in visited:
                    visited.add(current)
                    cluster.add(current)
                    stack.extend(adj_list[current])
            clusters.append(cluster)
    if len(clusters) > 1:
        return "Clustered"
    
    # Default to Random Graph
    return "Random"

adj_list = {0: [1, 3, 5, 6, 7, 9, 22], 1: [0, 2, 3, 4, 5, 7, 8, 9, 19], 2: [1, 3, 4, 6, 7, 8, 9, 24], 3: [0, 1, 2, 5, 7, 9], 4: [1, 2, 5, 6, 8, 9, 15], 5: [0, 1, 3, 4, 6, 7, 9], 6: [0, 2, 4, 5, 7, 8, 9], 7: [0, 1, 2, 3, 5, 6, 9], 8: [1, 2, 4, 6, 9], 9: [0, 1, 2, 3, 4, 5, 6, 7, 8], 10: [11, 12, 13, 14, 15, 16, 17], 11: [10, 12, 13, 14, 15, 16, 17, 18], 12: [10, 11, 13, 14, 16, 17, 18], 13: [10, 11, 12, 14, 15, 16, 18], 14: [10, 11, 12, 13, 16, 18], 15: [4, 10, 11, 13, 18], 16: [10, 11, 12, 13, 14, 17, 18], 17: [10, 11, 12, 16], 18: [11, 12, 13, 14, 15, 16], 19: [1, 20, 21, 22, 23, 24, 25, 26], 20: [19, 21, 22, 23, 24, 25, 27], 21: [19, 20, 22, 23, 24, 25, 27], 22: [0, 19, 20, 21, 24, 25, 26], 23: [19, 20, 21, 24, 25, 26], 24: [2, 19, 20, 21, 22, 23, 25, 26, 27], 25: [19, 20, 21, 22, 23, 24, 26, 27], 26: [19, 22, 23, 24, 25, 27], 27: [20, 21, 24, 25, 26]}
print(determine_graph_pattern(adj_list))
```