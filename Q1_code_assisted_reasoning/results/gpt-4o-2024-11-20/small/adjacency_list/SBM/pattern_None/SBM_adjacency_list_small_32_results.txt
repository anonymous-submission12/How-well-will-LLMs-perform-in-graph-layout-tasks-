```python
def determine_graph_pattern(adj_list):
    # Helper functions
    def is_star(adj_list):
        center_count = sum(len(neighbors) == len(adj_list) - 1 for neighbors in adj_list.values())
        return center_count == 1

    def is_cycle(adj_list):
        return all(len(neighbors) == 2 for neighbors in adj_list.values())

    def is_path(adj_list):
        endpoints = sum(len(neighbors) == 1 for neighbors in adj_list.values())
        return endpoints == 2 and all(len(neighbors) <= 2 for neighbors in adj_list.values())

    def is_grid(adj_list):
        # Grid graphs are hard to detect without coordinates, so we approximate
        node_degrees = [len(neighbors) for neighbors in adj_list.values()]
        return all(degree in {2, 3, 4} for degree in node_degrees)

    def is_complete(adj_list):
        n = len(adj_list)
        return all(len(neighbors) == n - 1 for neighbors in adj_list.values())

    def is_clustered(adj_list):
        # Clustered graphs have dense subgraphs with sparse connections between them
        # Approximation: Check for subgraphs with high internal connectivity
        visited = set()
        clusters = []

        def dfs(node, cluster):
            if node in visited:
                return
            visited.add(node)
            cluster.append(node)
            for neighbor in adj_list[node]:
                dfs(neighbor, cluster)

        for node in adj_list:
            if node not in visited:
                cluster = []
                dfs(node, cluster)
                clusters.append(cluster)

        # Check if clusters are dense
        for cluster in clusters:
            cluster_size = len(cluster)
            edges = sum(len(adj_list[node]) for node in cluster) // 2
            if edges < cluster_size * (cluster_size - 1) // 4:  # Approximation
                return False
        return True

    def is_random(adj_list):
        # Random graphs have no discernible pattern
        return True

    # Determine the pattern
    if is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_grid(adj_list):
        return "Grid"
    elif is_complete(adj_list):
        return "Complete"
    elif is_clustered(adj_list):
        return "Clustered"
    else:
        return "Random"

# Input graph data
adj_list = {0: [1, 2, 4, 5, 21], 1: [0, 2, 3, 4], 2: [0, 1, 3, 4, 15], 3: [1, 2, 4, 24], 4: [0, 1, 2, 3, 5], 5: [0, 4], 6: [7, 8, 9, 10], 7: [6, 8, 9, 10], 8: [6, 7, 9, 10], 9: [6, 7, 8, 10, 21], 10: [6, 7, 8, 9, 11], 11: [10], 12: [14, 15, 16], 13: [15, 16], 14: [12, 26], 15: [2, 12, 13, 16, 18], 16: [12, 13, 15], 17: [18, 19, 21], 18: [15, 17, 20, 21], 19: [17, 20, 21], 20: [18, 19, 21], 21: [0, 9, 17, 18, 19, 20], 22: [24, 25, 26], 23: [24, 25, 26], 24: [3, 22, 23, 25, 26], 25: [22, 23, 24, 26], 26: [14, 22, 23, 24, 25]}

# Output the result
print(determine_graph_pattern(adj_list))
```