```python
from collections import defaultdict

def graph_pattern(adjacency_list):
    n = len(adjacency_list)

    # Complete graph
    if all(len(neighbors) == n - 1 for neighbors in adjacency_list.values()):
        return "Complete"

    # Star graph
    center_count = sum(len(neighbors) == n - 1 for node, neighbors in adjacency_list.items())
    leaf_count = sum(len(neighbors) == 1 for neighbors in adjacency_list.values())
    if center_count == 1 and leaf_count == n - 1:
        return "Star"

    # Cycle graph
    if all(len(neighbors) == 2 for neighbors in adjacency_list.values()):
        return "Cycle"

    # Path graph
    endpoints = sum(len(neighbors) == 1 for neighbors in adjacency_list.values())
    regular_nodes = sum(len(neighbors) == 2 for neighbors in adjacency_list.values())
    if endpoints == 2 and regular_nodes == n - 2:
        return "Path"

    # Check for Grid
    min_degree = min(len(neighbors) for neighbors in adjacency_list.values())
    max_degree = max(len(neighbors) for neighbors in adjacency_list.values())
    if min_degree >= 2 and max_degree <= 4:
        return "Grid"

    # Check for clustered graph
    def is_clustered(adj_list):
        clusters = defaultdict(list)
        for node, neighbors in adj_list.items():
            cluster = tuple(sorted(neighbors))
            clusters[cluster].append(node)
        return any(len(nodes) > 1 for nodes in clusters.values())
    if is_clustered(adjacency_list):
        return "Clustered"
    
    # Default to random graph
    return "Random"

adjacency_list = {0: [1, 2, 3, 4, 5, 7, 9, 10, 11, 12], 1: [0, 3, 5, 6, 7, 8, 10, 12], 2: [0, 4, 5, 6, 7, 9, 10, 11], 3: [0, 1, 4, 5, 6, 7, 8, 10, 11, 12, 13], 4: [0, 2, 3, 6, 7, 8, 10, 11, 12], 5: [0, 1, 2, 3, 6, 7, 9, 10, 12, 21], 6: [1, 2, 3, 4, 5, 7, 9, 10, 11], 7: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11], 8: [1, 3, 4, 7, 10, 11, 12], 9: [0, 2, 5, 6, 7, 10, 12, 16], 10: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 23], 11: [0, 2, 3, 4, 6, 7, 8], 12: [0, 1, 3, 4, 5, 8, 9, 10], 13: [3, 14, 15, 17, 18, 20, 21, 22, 25], 14: [13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25], 15: [13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 25], 16: [9, 14, 15, 17, 18, 19, 20, 21, 22, 25], 17: [13, 14, 15, 16, 19, 20, 23, 24], 18: [13, 14, 15, 16, 19, 21, 22, 23, 25], 19: [14, 16, 17, 18, 21, 22, 23, 25], 20: [13, 15, 16, 17, 22, 23, 24, 25], 21: [5, 13, 14, 15, 16, 18, 19, 22, 24, 25], 22: [13, 14, 15, 16, 18, 19, 20, 21, 23, 25], 23: [10, 14, 15, 17, 18, 19, 20, 22, 24, 25], 24: [14, 15, 17, 20, 21, 23, 25], 25: [13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24]}

print(graph_pattern(adjacency_list))
```