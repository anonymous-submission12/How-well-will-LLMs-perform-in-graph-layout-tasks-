```python
def determine_graph_pattern(adj_list):
    # Helper function to check if the graph is a star
    def is_star():
        center_count = 0
        leaf_count = 0
        for node, neighbors in adj_list.items():
            if len(neighbors) == len(adj_list) - 1:
                center_count += 1
            elif len(neighbors) == 1:
                leaf_count += 1
        return center_count == 1 and leaf_count == len(adj_list) - 1

    # Helper function to check if the graph is a cycle
    def is_cycle():
        for node, neighbors in adj_list.items():
            if len(neighbors) != 2:
                return False
        return True

    # Helper function to check if the graph is a path
    def is_path():
        end_nodes = 0
        for node, neighbors in adj_list.items():
            if len(neighbors) == 1:
                end_nodes += 1
            elif len(neighbors) > 2:
                return False
        return end_nodes == 2

    # Helper function to check if the graph is complete
    def is_complete():
        n = len(adj_list)
        for node, neighbors in adj_list.items():
            if len(neighbors) != n - 1:
                return False
        return True

    # Helper function to check if the graph is a grid
    def is_grid():
        # A grid graph has nodes with degree 2, 3, or 4
        for node, neighbors in adj_list.items():
            if len(neighbors) not in {2, 3, 4}:
                return False
        return True

    # Helper function to check if the graph is clustered
    def is_clustered():
        # A clustered graph has dense subgraphs with sparse connections between them
        # Check for subgraphs with high internal degree and low external degree
        visited = set()
        clusters = []

        def dfs(node, cluster):
            visited.add(node)
            cluster.append(node)
            for neighbor in adj_list[node]:
                if neighbor not in visited:
                    dfs(neighbor, cluster)

        for node in adj_list:
            if node not in visited:
                cluster = []
                dfs(node, cluster)
                clusters.append(cluster)

        for cluster in clusters:
            internal_edges = 0
            external_edges = 0
            for node in cluster:
                for neighbor in adj_list[node]:
                    if neighbor in cluster:
                        internal_edges += 1
                    else:
                        external_edges += 1
            if internal_edges < external_edges:
                return False
        return True

    # Helper function to check if the graph is random
    def is_random():
        # A random graph does not fit any of the above patterns
        return True

    # Check each pattern
    if is_star():
        return "Star"
    elif is_cycle():
        return "Cycle"
    elif is_path():
        return "Path"
    elif is_complete():
        return "Complete"
    elif is_grid():
        return "Grid"
    elif is_clustered():
        return "Clustered"
    else:
        return "Random"

# Input adjacency list
adj_list = {0: [1, 2, 3, 6], 1: [0, 4, 5, 6, 11], 2: [0, 4, 5, 6], 3: [0, 4, 5], 4: [1, 2, 3, 5, 6, 10, 12, 15], 5: [1, 2, 3, 4, 6], 6: [0, 1, 2, 4, 5, 17], 7: [8, 9, 10, 11, 12], 8: [7, 9, 10, 11, 12, 13, 17], 9: [7, 8, 10, 11, 12, 13], 10: [4, 7, 8, 9, 12, 13], 11: [1, 7, 8, 9, 12, 13], 12: [4, 7, 8, 9, 10, 11, 13], 13: [8, 9, 10, 11, 12, 18], 14: [16, 17, 19, 20], 15: [4, 16, 17, 18, 19, 20], 16: [14, 15, 18, 19, 20], 17: [6, 8, 14, 15, 19, 20, 26], 18: [13, 15, 16, 19, 20], 19: [14, 15, 16, 17, 18, 20], 20: [14, 15, 16, 17, 18, 19], 21: [22, 23, 24, 25], 22: [21, 23, 24, 25, 26], 23: [21, 22, 25, 26], 24: [21, 22, 25, 26], 25: [21, 22, 23, 24, 26], 26: [17, 22, 23, 24, 25]}

# Determine the graph pattern
print(determine_graph_pattern(adj_list))
```