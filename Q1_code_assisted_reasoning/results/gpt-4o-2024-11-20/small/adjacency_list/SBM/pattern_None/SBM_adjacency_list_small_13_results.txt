```python
def determine_graph_pattern(adj_list):
    def is_star(adj_list):
        center_count = sum(len(neighbors) == len(adj_list) - 1 for neighbors in adj_list.values())
        return center_count == 1

    def is_cycle(adj_list):
        return all(len(neighbors) == 2 for neighbors in adj_list.values())

    def is_path(adj_list):
        end_points = sum(len(neighbors) == 1 for neighbors in adj_list.values())
        return end_points == 2 and all(len(neighbors) <= 2 for neighbors in adj_list.values())

    def is_grid(adj_list):
        # Grid graphs are harder to detect directly; we approximate by checking degree distribution
        degree_counts = [len(neighbors) for neighbors in adj_list.values()]
        return all(degree in {2, 3, 4} for degree in degree_counts)

    def is_complete(adj_list):
        n = len(adj_list)
        return all(len(neighbors) == n - 1 for neighbors in adj_list.values())

    def is_clustered(adj_list):
        # Clustered graphs have dense subgraphs; we approximate by checking for subgraph density
        clusters = []
        visited = set()

        def dfs(node, cluster):
            if node in visited:
                return
            visited.add(node)
            cluster.append(node)
            for neighbor in adj_list[node]:
                if neighbor not in visited:
                    dfs(neighbor, cluster)

        for node in adj_list:
            if node not in visited:
                cluster = []
                dfs(node, cluster)
                clusters.append(cluster)

        return all(len(cluster) > 1 for cluster in clusters)

    def is_random(adj_list):
        # Random graphs have no specific structure; we approximate by exclusion
        return not any([is_star(adj_list), is_cycle(adj_list), is_path(adj_list),
                        is_grid(adj_list), is_complete(adj_list), is_clustered(adj_list)])

    if is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_grid(adj_list):
        return "Grid"
    elif is_complete(adj_list):
        return "Complete"
    elif is_clustered(adj_list):
        return "Clustered"
    elif is_random(adj_list):
        return "Random"
    else:
        return "Unknown"

adj_list = {0: [2, 3, 4, 5, 6, 9], 1: [2, 5, 6, 7, 8, 9], 2: [0, 1, 4, 5, 7, 8, 9, 21], 3: [0, 4, 5, 6, 7, 8, 9], 4: [0, 2, 3, 5, 6, 7, 8, 9], 5: [0, 1, 2, 3, 4, 6, 7, 8], 6: [0, 1, 3, 4, 5, 7, 8, 9, 18], 7: [1, 2, 3, 4, 5, 6, 9], 8: [1, 2, 3, 4, 5, 6], 9: [0, 1, 2, 3, 4, 6, 7], 10: [11, 12, 13, 14, 15, 16, 17, 18, 19], 11: [10, 12, 13, 14, 15, 16, 17, 18, 19, 28], 12: [10, 11, 13, 15, 16, 17, 27], 13: [10, 11, 12, 15, 16, 17, 18, 19], 14: [10, 11, 15, 16, 17, 18, 19], 15: [10, 11, 12, 13, 14, 16, 17, 19], 16: [10, 11, 12, 13, 14, 15, 17, 19], 17: [10, 11, 12, 13, 14, 15, 16, 18, 19], 18: [6, 10, 11, 13, 14, 17, 19, 22], 19: [10, 11, 13, 14, 15, 16, 17, 18], 20: [21, 23, 26, 27, 29], 21: [2, 20, 22, 24, 25, 27, 28, 29], 22: [18, 21, 23, 24, 26, 27, 28], 23: [20, 22, 24, 25, 26, 28, 29], 24: [21, 22, 23, 27, 29], 25: [21, 23, 27, 28, 29], 26: [20, 22, 23, 27, 28, 29], 27: [12, 20, 21, 22, 24, 25, 26, 28], 28: [11, 21, 22, 23, 25, 26, 27, 29], 29: [20, 21, 23, 24, 25, 26, 28]}
print(determine_graph_pattern(adj_list))
```