```python
def detect_graph_pattern(adj_list):
    node_count = len(adj_list)
    edge_count = sum(len(neighbors) for neighbors in adj_list.values()) // 2

    max_degree = max(len(neighbors) for neighbors in adj_list.values())
    min_degree = min(len(neighbors) for neighbors in adj_list.values())

    # Check for Complete Graph
    if edge_count == node_count * (node_count - 1) // 2:
        return "Complete"

    # Check for Star Graph
    if max_degree == node_count - 1 and min_degree == 1:
        return "Star"

    # Check for Path Graph
    if max_degree == 2 and min_degree == 1 and len([node for node in adj_list if len(adj_list[node]) == 1]) == 2:
        return "Path"

    # Check for Cycle Graph
    if max_degree == 2 and min_degree == 2:
        return "Cycle"

    # Check for Grid Graph (approximation: nodes have degree 2, 3, or 4, and mostly uniform)
    if all(2 <= len(neighbors) <= 4 for neighbors in adj_list.values()):
        degrees = [len(neighbors) for neighbors in adj_list.values()]
        if degrees.count(2) + degrees.count(3) + degrees.count(4) == len(degrees):
            return "Grid"

    # Check for Clustered Graph
    if any(len(neighbors) > 1 and set(neighbors).intersection(adj_list[neighbor]) for node, neighbors in adj_list.items() for neighbor in neighbors):
        return "Clustered Graph"

    # Default to Random Graph
    return "Random Graph"


adj_list = {
    0: [3, 4, 5, 6, 17], 1: [2, 4, 7], 2: [1, 3, 4, 5, 6, 7], 3: [0, 2, 4, 5, 6, 7], 4: [0, 1, 2, 3, 5, 6, 7, 17],
    5: [0, 2, 3, 4, 6, 7], 6: [0, 2, 3, 4, 5, 7, 19], 7: [1, 2, 3, 4, 5, 6], 8: [9, 13, 15],
    9: [8, 10, 12, 13, 14, 16], 10: [9, 11, 12, 13, 15], 11: [10, 12, 13, 14, 15], 12: [9, 10, 11, 13, 14],
    13: [8, 9, 10, 11, 12, 14, 15], 14: [9, 11, 12, 13, 15], 15: [8, 10, 11, 13, 14],
    16: [9, 17, 18, 19, 20, 21, 22], 17: [0, 4, 16, 19, 20, 21, 22], 18: [16, 19, 22],
    19: [6, 16, 17, 18, 20], 20: [16, 17, 19, 21], 21: [16, 17, 20], 22: [16, 17, 18]
}

print(detect_graph_pattern(adj_list))
```