```python
def determine_graph_pattern(adj_list):
    def is_star(adj_list):
        center_count = sum(len(neighbors) == len(adj_list) - 1 for node, neighbors in adj_list.items())
        return center_count == 1

    def is_cycle(adj_list):
        return all(len(neighbors) == 2 for neighbors in adj_list.values())

    def is_path(adj_list):
        end_count = sum(len(neighbors) == 1 for neighbors in adj_list.values())
        middle_count = sum(len(neighbors) == 2 for neighbors in adj_list.values())
        return end_count == 2 and middle_count == len(adj_list) - 2

    def is_grid(adj_list):
        # Grid detection is complex; we simplify by checking degree patterns
        degree_counts = [len(neighbors) for neighbors in adj_list.values()]
        return all(degree in {2, 3, 4} for degree in degree_counts)

    def is_complete(adj_list):
        n = len(adj_list)
        return all(len(neighbors) == n - 1 for neighbors in adj_list.values())

    def is_clustered(adj_list):
        # Clustered graph detection is simplified; we check for subgroups
        visited = set()
        clusters = 0

        def dfs(node):
            stack = [node]
            while stack:
                current = stack.pop()
                if current not in visited:
                    visited.add(current)
                    stack.extend(adj_list[current])

        for node in adj_list:
            if node not in visited:
                clusters += 1
                dfs(node)

        return clusters > 1

    def is_random(adj_list):
        # Random graph detection is simplified; we check for irregular degree patterns
        degree_counts = [len(neighbors) for neighbors in adj_list.values()]
        return len(set(degree_counts)) > 3

    if is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_grid(adj_list):
        return "Grid"
    elif is_complete(adj_list):
        return "Complete"
    elif is_clustered(adj_list):
        return "Clustered Graph"
    elif is_random(adj_list):
        return "Random Graph"
    else:
        return "Unknown"

adj_list = {0: [2, 3, 4, 5, 6], 1: [3, 4, 6], 2: [0, 3, 5, 6], 3: [0, 1, 2, 5, 6], 4: [0, 1, 5], 5: [0, 2, 3, 4, 6, 11], 6: [0, 1, 2, 3, 5, 17], 7: [8, 9, 10, 11, 12, 13], 8: [7, 9, 10, 11, 13], 9: [7, 8, 10, 11, 12, 13], 10: [7, 8, 9, 11, 13], 11: [5, 7, 8, 9, 10, 12, 13, 18], 12: [7, 9, 11, 13], 13: [7, 8, 9, 10, 11, 12], 14: [16, 17, 18, 19, 20], 15: [16, 17, 18, 19, 20], 16: [14, 15, 17, 18, 19], 17: [6, 14, 15, 16, 18, 19, 20], 18: [11, 14, 15, 16, 17, 19, 20], 19: [14, 15, 16, 17, 18, 20], 20: [14, 15, 17, 18, 19]}
print(determine_graph_pattern(adj_list))
```