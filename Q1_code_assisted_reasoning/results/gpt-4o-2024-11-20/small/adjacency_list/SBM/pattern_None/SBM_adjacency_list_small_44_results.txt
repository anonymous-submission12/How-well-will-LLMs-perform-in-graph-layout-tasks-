```python
from collections import defaultdict

def determine_graph_pattern(adj_list):
    # Helper function to check if the graph is a star
    def is_star():
        center_count = 0
        leaf_count = 0
        for node, neighbors in adj_list.items():
            if len(neighbors) == len(adj_list) - 1:
                center_count += 1
            elif len(neighbors) == 1:
                leaf_count += 1
        return center_count == 1 and leaf_count == len(adj_list) - 1

    # Helper function to check if the graph is a cycle
    def is_cycle():
        for node, neighbors in adj_list.items():
            if len(neighbors) != 2:
                return False
        return True

    # Helper function to check if the graph is a path
    def is_path():
        end_nodes = 0
        for node, neighbors in adj_list.items():
            if len(neighbors) == 1:
                end_nodes += 1
            elif len(neighbors) > 2:
                return False
        return end_nodes == 2

    # Helper function to check if the graph is complete
    def is_complete():
        n = len(adj_list)
        for node, neighbors in adj_list.items():
            if len(neighbors) != n - 1:
                return False
        return True

    # Helper function to check if the graph is a grid
    def is_grid():
        # A grid graph has nodes with degree 2, 3, or 4
        for node, neighbors in adj_list.items():
            if len(neighbors) not in {2, 3, 4}:
                return False
        return True

    # Helper function to check if the graph is clustered
    def is_clustered():
        # A clustered graph has dense subgraphs with sparse connections between them
        visited = set()
        clusters = []

        def dfs(node, cluster):
            visited.add(node)
            cluster.append(node)
            for neighbor in adj_list[node]:
                if neighbor not in visited:
                    dfs(neighbor, cluster)

        for node in adj_list:
            if node not in visited:
                cluster = []
                dfs(node, cluster)
                clusters.append(cluster)

        # Check if each cluster is dense
        for cluster in clusters:
            cluster_size = len(cluster)
            edge_count = 0
            for node in cluster:
                for neighbor in adj_list[node]:
                    if neighbor in cluster:
                        edge_count += 1
            edge_count //= 2  # Each edge is counted twice
            if edge_count < (cluster_size * (cluster_size - 1)) // 4:  # Arbitrary density threshold
                return False
        return True

    # Helper function to check if the graph is random
    def is_random():
        # A random graph does not fit any of the above patterns
        return True

    # Check patterns in order
    if is_star():
        return "Star"
    elif is_cycle():
        return "Cycle"
    elif is_path():
        return "Path"
    elif is_complete():
        return "Complete"
    elif is_grid():
        return "Grid"
    elif is_clustered():
        return "Clustered"
    else:
        return "Random"

# Input graph data
adjacency_list = {
    0: [1, 2, 4, 5], 1: [0, 3, 5, 6, 7], 2: [0, 5, 6, 13, 19, 23], 3: [1, 4, 5, 6, 7, 13],
    4: [0, 3, 5, 6, 7], 5: [0, 1, 2, 3, 4, 6, 13, 21], 6: [1, 2, 3, 4, 5, 7], 7: [1, 3, 4, 6],
    8: [9, 10, 11, 12], 9: [8, 11, 12, 13, 14], 10: [8, 11, 12, 13, 14, 20], 11: [8, 9, 10, 12, 13, 14],
    12: [8, 9, 10, 11, 13, 14], 13: [2, 3, 5, 9, 10, 11, 12, 14, 20], 14: [9, 10, 11, 12, 13],
    15: [16, 18, 19, 20, 21], 16: [15, 18, 20, 21], 17: [18, 20, 21], 18: [15, 16, 17, 19, 21],
    19: [2, 15, 18, 20, 21], 20: [10, 13, 15, 16, 17, 19, 21], 21: [5, 15, 16, 17, 18, 19, 20],
    22: [23, 24, 26, 27, 28], 23: [2, 22, 24, 25, 27, 28], 24: [22, 23, 25, 27, 28], 25: [23, 24, 27],
    26: [22], 27: [22, 23, 24, 25, 28], 28: [22, 23, 24, 27]
}

# Determine the graph pattern
print(determine_graph_pattern(adjacency_list))
```