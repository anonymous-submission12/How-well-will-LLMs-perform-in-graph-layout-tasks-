```python
def determine_graph_pattern(adj_list):
    def is_star(adj_list):
        center_count = sum(len(neighbors) > 1 for neighbors in adj_list.values())
        leaf_count = sum(len(neighbors) == 1 for neighbors in adj_list.values())
        return center_count == 1 and leaf_count == len(adj_list) - 1

    def is_cycle(adj_list):
        return all(len(neighbors) == 2 for neighbors in adj_list.values())

    def is_path(adj_list):
        endpoints = sum(len(neighbors) == 1 for neighbors in adj_list.values())
        return endpoints == 2 and all(len(neighbors) <= 2 for neighbors in adj_list.values())

    def is_grid(adj_list):
        # Check if the graph resembles a grid structure
        # This is a simplified check and may not cover all grid cases
        degree_counts = [len(neighbors) for neighbors in adj_list.values()]
        return all(degree in {2, 3, 4} for degree in degree_counts)

    def is_complete(adj_list):
        n = len(adj_list)
        return all(len(neighbors) == n - 1 for neighbors in adj_list.values())

    def is_clustered(adj_list):
        # Check for clusters by identifying groups of nodes with high connectivity
        # This is a simplified check and may not cover all clustered cases
        cluster_sizes = [len(neighbors) for neighbors in adj_list.values()]
        return max(cluster_sizes) > len(adj_list) // 2

    def is_random(adj_list):
        # If none of the above patterns match, assume it's random
        return True

    if is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_grid(adj_list):
        return "Grid"
    elif is_complete(adj_list):
        return "Complete"
    elif is_clustered(adj_list):
        return "Clustered Graph"
    else:
        return "Random Graph"

adj_list = {0: [1, 3], 1: [0, 2], 2: [1, 5], 3: [0, 4, 5], 4: [3, 5], 5: [2, 3, 4, 11], 6: [8, 9, 10, 11, 13], 7: [10, 11], 8: [6, 9, 10, 11], 9: [6, 8, 10, 11], 10: [6, 7, 8, 9, 11], 11: [5, 6, 7, 8, 9, 10], 12: [13, 15, 16, 17], 13: [6, 12, 15, 17, 25], 14: [15, 17], 15: [12, 13, 14, 16, 17, 22], 16: [12, 15, 17], 17: [12, 13, 14, 15, 16], 18: [19, 21, 22], 19: [18, 20, 21], 20: [19, 22], 21: [18, 19], 22: [15, 18, 20], 23: [24, 25, 26, 27], 24: [23, 25, 26, 27], 25: [13, 23, 24, 26, 27], 26: [23, 24, 25, 27], 27: [23, 24, 25, 26]}
print(determine_graph_pattern(adj_list))
```