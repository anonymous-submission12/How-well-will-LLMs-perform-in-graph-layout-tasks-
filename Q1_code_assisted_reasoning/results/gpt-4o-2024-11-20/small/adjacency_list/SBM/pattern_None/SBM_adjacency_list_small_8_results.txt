```python
def graph_pattern(graph):
    def is_star(graph):
        center_count = sum(len(edges) == len(graph) - 1 for edges in graph.values())
        leaf_count = sum(len(edges) == 1 for edges in graph.values())
        return center_count == 1 and leaf_count == len(graph) - 1

    def is_cycle(graph):
        return all(len(edges) == 2 for edges in graph.values())

    def is_path(graph):
        end_points = sum(len(edges) == 1 for edges in graph.values())
        return end_points == 2 and all(1 <= len(edges) <= 2 for edges in graph.values())

    def is_grid(graph):
        edge_counts = [len(edges) for edges in graph.values()]
        return sorted(edge_counts)[0] >= 2 and sorted(edge_counts)[-1] <= 4

    def is_complete(graph):
        nodes = len(graph)
        return all(len(edges) == nodes - 1 for edges in graph.values())

    def is_clustered(graph):
        clusters = []
        visited = set()

        def dfs(node, cluster):
            visited.add(node)
            cluster.append(node)
            for neighbor in graph[node]:
                if neighbor not in visited:
                    dfs(neighbor, cluster)

        for node in graph:
            if node not in visited:
                cluster = []
                dfs(node, cluster)
                clusters.append(cluster)
        return len(clusters) > 1

    if is_star(graph):
        return "Star"
    elif is_cycle(graph):
        return "Cycle"
    elif is_path(graph):
        return "Path"
    elif is_grid(graph):
        return "Grid"
    elif is_complete(graph):
        return "Complete"
    elif is_clustered(graph):
        return "Clustered graph"
    else:
        return "Random graph"


adjacency_list = {0: [1, 2, 4, 5, 6, 7, 8, 9, 26], 1: [0, 2, 3, 4, 6, 7, 8, 9], 2: [0, 1, 3, 4, 5, 6, 9, 18], 3: [1, 2, 4, 5, 7, 8, 9, 23], 4: [0, 1, 2, 3, 5, 6, 7, 8, 9, 24], 5: [0, 2, 3, 4, 6, 7, 8], 6: [0, 1, 2, 4, 5, 7, 8], 7: [0, 1, 3, 4, 5, 6, 8, 9], 8: [0, 1, 3, 4, 5, 6, 7, 9], 9: [0, 1, 2, 3, 4, 7, 8], 10: [11, 12, 13, 14, 15, 16, 17, 18, 19], 11: [10, 12, 13, 14, 18], 12: [10, 11, 13, 15, 16, 17, 18, 19], 13: [10, 11, 12, 15, 17, 18], 14: [10, 11, 15, 17, 18, 19], 15: [10, 12, 13, 14, 16, 17, 19], 16: [10, 12, 15, 17, 18], 17: [10, 12, 13, 14, 15, 16, 18, 19], 18: [2, 10, 11, 12, 13, 14, 16, 17, 20], 19: [10, 12, 14, 15, 17], 20: [18, 22, 24, 25, 27, 28], 21: [22, 23, 24, 26, 27], 22: [20, 21, 23, 24, 25, 26, 27, 28], 23: [3, 21, 22, 25, 27], 24: [4, 20, 21, 22, 26, 27], 25: [20, 22, 23, 28], 26: [0, 21, 22, 24, 28], 27: [20, 21, 22, 23, 24], 28: [20, 22, 25, 26]}

print(graph_pattern(adjacency_list))
```