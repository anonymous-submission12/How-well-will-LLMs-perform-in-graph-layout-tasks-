```python
def determine_graph_pattern(adj_list):
    def is_star(adj_list):
        center_count = sum(len(neighbors) == len(adj_list) - 1 for node, neighbors in adj_list.items())
        return center_count == 1

    def is_cycle(adj_list):
        return all(len(neighbors) == 2 for neighbors in adj_list.values())

    def is_path(adj_list):
        end_count = sum(len(neighbors) == 1 for neighbors in adj_list.values())
        middle_count = sum(len(neighbors) == 2 for neighbors in adj_list.values())
        return end_count == 2 and middle_count == len(adj_list) - 2

    def is_grid(adj_list):
        # Grid graphs are harder to detect without coordinates, so we approximate by checking degree patterns
        degree_counts = [len(neighbors) for neighbors in adj_list.values()]
        return all(degree in {2, 3, 4} for degree in degree_counts)

    def is_complete(adj_list):
        n = len(adj_list)
        return all(len(neighbors) == n - 1 for neighbors in adj_list.values())

    def is_clustered(adj_list):
        # Clustered graphs have dense subgraphs; we approximate by checking for subgroups with high connectivity
        clusters = []
        visited = set()
        for node in adj_list:
            if node not in visited:
                cluster = set()
                stack = [node]
                while stack:
                    current = stack.pop()
                    if current not in visited:
                        visited.add(current)
                        cluster.add(current)
                        stack.extend(adj_list[current])
                clusters.append(cluster)
        return len(clusters) > 1

    def is_random(adj_list):
        # Random graphs are the fallback if no other pattern matches
        return True

    if is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_grid(adj_list):
        return "Grid"
    elif is_complete(adj_list):
        return "Complete"
    elif is_clustered(adj_list):
        return "Clustered"
    else:
        return "Random"

adj_list = {0: [1, 3, 4, 5], 1: [0, 3, 4, 5], 2: [4, 5], 3: [0, 1, 4, 5], 4: [0, 1, 2, 3, 5, 14], 5: [0, 1, 2, 3, 4], 6: [7, 8, 9, 10], 7: [6, 8, 9, 10], 8: [6, 7, 9, 10, 11], 9: [6, 7, 8, 10], 10: [6, 7, 8, 9], 11: [8, 12, 13, 14, 15], 12: [11, 13, 14, 15], 13: [11, 12, 15], 14: [4, 11, 12, 15], 15: [11, 12, 13, 14, 17], 16: [18, 19, 20], 17: [15, 18, 19, 20], 18: [16, 17, 19, 20], 19: [16, 17, 18, 20], 20: [16, 17, 18, 19]}
print(determine_graph_pattern(adj_list))
```