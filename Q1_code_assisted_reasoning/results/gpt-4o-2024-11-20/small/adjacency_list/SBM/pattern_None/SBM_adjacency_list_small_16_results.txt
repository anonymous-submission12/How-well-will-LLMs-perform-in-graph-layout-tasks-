```python
def determine_graph_pattern(adj_list):
    n = len(adj_list)
    degrees = {node: len(neighbors) for node, neighbors in adj_list.items()}
    max_degree = max(degrees.values())
    min_degree = min(degrees.values())
    edges = sum(len(neighbors) for neighbors in adj_list.values()) // 2

    # Check for Star pattern
    if max_degree == n - 1 and min_degree == 1:
        return "Star"

    # Check for Cycle pattern
    if all(degree == 2 for degree in degrees.values()) and edges == n:
        return "Cycle"

    # Check for Path pattern
    if max_degree == 2 and min_degree == 1 and edges == n - 1:
        return "Path"

    # Check for Grid pattern
    sqrt_n = int(n**0.5)
    if sqrt_n * sqrt_n == n and all(degree <= 4 for degree in degrees.values()):
        return "Grid"

    # Check for Complete pattern
    if edges == n * (n - 1) // 2:
        return "Complete"

    # Check for Clustered graph
    clusters = []
    visited = set()

    def dfs(node, cluster):
        visited.add(node)
        cluster.append(node)
        for neighbor in adj_list[node]:
            if neighbor not in visited:
                dfs(neighbor, cluster)

    for node in adj_list:
        if node not in visited:
            cluster = []
            dfs(node, cluster)
            clusters.append(cluster)

    if len(clusters) > 1:
        return "Clustered graph"

    # Default to Random graph
    return "Random graph"


adj_list = {
    0: [1, 3, 5, 6], 1: [0, 2, 4, 6, 12], 2: [1, 3, 4, 5, 6, 7], 3: [0, 2, 4, 6],
    4: [1, 2, 3, 5, 6], 5: [0, 2, 4, 6], 6: [0, 1, 2, 3, 4, 5, 15], 7: [2, 11, 13],
    8: [11, 13, 24], 9: [10, 11, 12, 13], 10: [9, 11], 11: [7, 8, 9, 10, 12, 13],
    12: [1, 9, 11], 13: [7, 8, 9, 11, 17], 14: [16, 17, 18, 19], 15: [6, 16, 17, 18],
    16: [14, 15, 18, 19], 17: [13, 14, 15, 18], 18: [14, 15, 16, 17, 19],
    19: [14, 16, 18, 21], 20: [21, 22, 23, 24], 21: [19, 20, 22, 25],
    22: [20, 21, 23, 24, 25], 23: [20, 22, 24, 25], 24: [8, 20, 22, 23, 25],
    25: [21, 22, 23, 24]
}

print(determine_graph_pattern(adj_list))
```