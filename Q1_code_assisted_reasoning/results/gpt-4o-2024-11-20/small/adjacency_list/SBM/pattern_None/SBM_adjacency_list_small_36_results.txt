```python
def identify_graph_pattern(adj_list):
    def is_star(graph):
        center_nodes = [node for node, neighbors in graph.items() if len(neighbors) == len(graph) - 1]
        return len(center_nodes) == 1 and all(len(neighbors) == 1 for node, neighbors in graph.items() if node not in center_nodes)

    def is_cycle(graph):
        num_edges = sum(len(neighbors) for neighbors in graph.values()) // 2
        return all(len(neighbors) == 2 for neighbors in graph.values()) and num_edges == len(graph)

    def is_path(graph):
        endpoints = [node for node, neighbors in graph.items() if len(neighbors) == 1]
        return len(endpoints) == 2 and all(len(neighbors) <= 2 for neighbors in graph.values())

    def is_grid(graph):
        for node, neighbors in graph.items():
            if len(neighbors) > 4:
                return False
        return True

    def is_complete(graph):
        num_nodes = len(graph)
        return all(len(neighbors) == num_nodes - 1 for neighbors in graph.values())

    def is_clustered(graph):
        cluster_sizes = []
        visited = set()

        def dfs(node, cluster):
            if node in visited:
                return
            visited.add(node)
            cluster.add(node)
            for neighbor in graph[node]:
                dfs(neighbor, cluster)

        for node in graph:
            if node not in visited:
                cluster = set()
                dfs(node, cluster)
                cluster_sizes.append(len(cluster))

        return len(cluster_sizes) > 1

    def is_random(graph):
        return True

    if is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_grid(adj_list):
        return "Grid"
    elif is_complete(adj_list):
        return "Complete"
    elif is_clustered(adj_list):
        return "Clustered graph"
    elif is_random(adj_list):
        return "Random graph"

# Input graph data
graph_data = {0: [1, 3, 5, 6, 7, 19], 1: [0, 2, 5, 6, 7, 21], 2: [1, 3, 4, 6, 7, 15], 3: [0, 2, 4, 5, 6, 7, 9], 4: [2, 3, 5, 6, 7], 5: [0, 1, 3, 4, 7], 6: [0, 1, 2, 3, 4, 7], 7: [0, 1, 2, 3, 4, 5, 6], 8: [11, 12, 13, 14, 15], 9: [3, 10, 11, 12, 13, 14], 10: [9, 11, 12, 13, 14, 15], 11: [8, 9, 10, 12, 13, 15], 12: [8, 9, 10, 11, 13, 15], 13: [8, 9, 10, 11, 12, 14], 14: [8, 9, 10, 13, 21], 15: [2, 8, 10, 11, 12], 16: [17, 19, 20, 21, 22], 17: [16, 21, 22], 18: [20, 22], 19: [0, 16, 21, 22], 20: [16, 18, 21, 22], 21: [1, 14, 16, 17, 19, 20, 22], 22: [16, 17, 18, 19, 20, 21]}

# Print result of graph classification
print(identify_graph_pattern(graph_data))
```