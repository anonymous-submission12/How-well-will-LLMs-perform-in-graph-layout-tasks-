```python
def determine_graph_pattern(adj_list):
    n = len(adj_list)
    edges = sum(len(neighbors) for neighbors in adj_list.values()) // 2

    # Check for Complete Graph
    if edges == n * (n - 1) // 2:
        return "Complete"

    # Check for Star Graph
    center_count = sum(len(neighbors) == n - 1 for neighbors in adj_list.values())
    if center_count == 1 and edges == n - 1:
        return "Star"

    # Check for Cycle Graph
    if edges == n and all(len(neighbors) == 2 for neighbors in adj_list.values()):
        return "Cycle"

    # Check for Path Graph
    if edges == n - 1 and sum(len(neighbors) == 1 for neighbors in adj_list.values()) == 2 and \
       sum(len(neighbors) == 2 for neighbors in adj_list.values()) == n - 2:
        return "Path"

    # Check for Grid Graph
    sqrt_n = int(n**0.5)
    if sqrt_n * sqrt_n == n and edges == 2 * n - 2 * sqrt_n:
        return "Grid"

    # Check for Clustered Graph
    clusters = []
    visited = set()
    for node in adj_list:
        if node not in visited:
            cluster = set()
            stack = [node]
            while stack:
                current = stack.pop()
                if current not in visited:
                    visited.add(current)
                    cluster.add(current)
                    stack.extend(adj_list[current])
            clusters.append(cluster)
    if len(clusters) > 1:
        return "Clustered"

    # Default to Random Graph
    return "Random"

adj_list = {0: [1, 2, 3, 4, 8, 10, 11, 12, 16], 1: [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12], 2: [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11], 3: [0, 1, 2, 4, 6, 8, 9, 12], 4: [0, 2, 3, 5, 6, 7, 8, 11, 12, 23], 5: [1, 2, 4, 6, 8, 9, 10, 11], 6: [1, 2, 3, 4, 5, 7, 9, 11, 12], 7: [1, 2, 4, 6, 8, 10, 12], 8: [0, 1, 2, 3, 4, 5, 7, 9, 10, 12], 9: [1, 2, 3, 5, 6, 8, 10, 11], 10: [0, 1, 2, 5, 7, 8, 9, 11, 12, 25], 11: [0, 1, 2, 4, 5, 6, 9, 10, 12], 12: [0, 1, 3, 4, 6, 7, 8, 10, 11], 13: [14, 15, 16, 17, 18, 20, 24, 25], 14: [13, 15, 17, 19, 22, 23, 24, 25], 15: [13, 14, 18, 19, 20, 21, 22, 23, 24], 16: [0, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25], 17: [13, 14, 16, 18, 20, 21, 23, 25], 18: [13, 15, 16, 17, 19, 21, 22], 19: [14, 15, 16, 18, 21, 22, 23, 24], 20: [13, 15, 16, 17, 22, 23, 25], 21: [15, 16, 17, 18, 19, 22, 23, 24, 25], 22: [14, 15, 16, 18, 19, 20, 21, 23, 25], 23: [4, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25], 24: [13, 14, 15, 16, 19, 21, 23, 25], 25: [10, 13, 14, 16, 17, 20, 21, 22, 23, 24]}
print(determine_graph_pattern(adj_list))
```