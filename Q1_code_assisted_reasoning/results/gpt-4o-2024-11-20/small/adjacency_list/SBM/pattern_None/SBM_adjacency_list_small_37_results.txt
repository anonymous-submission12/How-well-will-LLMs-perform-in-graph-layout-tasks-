```python
def graph_pattern(graph):
    node_count = len(graph)
    edge_count = sum(len(adj) for adj in graph.values()) // 2
    
    # Utility function for degree analysis
    degrees = {node: len(neighbors) for node, neighbors in graph.items()}
    
    # Check for star pattern
    if sum(1 for d in degrees.values() if d == node_count - 1) == 1 and sum(1 for d in degrees.values() if d == 1) == node_count - 1:
        return "Star"
    
    # Check for cycle pattern
    if all(value == 2 for value in degrees.values()) and edge_count == node_count:
        return "Cycle"
    
    # Check for path pattern
    if sum(1 for degree in degrees.values() if degree == 1) == 2 and sum(1 for degree in degrees.values() if degree == 2) == node_count - 2:
        return "Path"
    
    # Check for grid pattern
    import math
    sqrt_nodes = int(math.sqrt(node_count))
    if sqrt_nodes * sqrt_nodes == node_count:
        row_length = sqrt_nodes
        expected_edges = 2 * node_count - 2 * row_length
        if edge_count == expected_edges:
            return "Grid"
    
    # Check for complete graph
    if edge_count == node_count * (node_count - 1) // 2:
        return "Complete"
    
    # Check for clustered pattern (cliques within groups)
    from itertools import combinations
    visited = set()
    clusters = []
    
    def dfs(node, cluster):
        visited.add(node)
        cluster.append(node)
        for neighbor in graph[node]:
            if neighbor not in visited:
                dfs(neighbor, cluster)
    
    for node in graph:
        if node not in visited:
            cluster = []
            dfs(node, cluster)
            clusters.append(cluster)
    
    nodes_in_clusters = sum(len(c) for c in clusters)
    if all(len(c) * (len(c) - 1) // 2 == sum(1 for u, v in combinations(c, 2) if v in graph[u]) for c in clusters) and nodes_in_clusters == node_count:
        return "Clustered"
    
    # Default to random graph
    return "Random"

# Graph data
graph = {
    0: [1, 4, 5, 6, 7, 8, 10, 20], 1: [0, 2, 3, 4, 5, 8, 9, 10, 11, 12], 
    2: [1, 3, 4, 6, 7, 8, 9, 10, 12], 3: [1, 2, 5, 6, 7, 8, 9, 10], 
    4: [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12], 5: [0, 1, 3, 4, 6, 7, 8, 9, 10, 12], 
    6: [0, 2, 3, 4, 5, 10, 11], 7: [0, 2, 3, 4, 5, 8, 9, 11, 12], 
    8: [0, 1, 2, 3, 4, 5, 7, 9, 10, 14], 9: [1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 14], 
    10: [0, 1, 2, 3, 4, 5, 6, 8, 9], 11: [1, 4, 6, 7, 9, 12], 
    12: [1, 2, 4, 5, 7, 9, 11], 13: [14, 15, 16, 17, 18, 19, 20, 21, 22, 24], 
    14: [8, 9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], 
    15: [13, 14, 16, 17, 18, 19, 21, 22, 24], 
    16: [13, 14, 15, 17, 20, 22, 24], 
    17: [13, 14, 15, 16, 19, 20, 21, 22, 24], 
    18: [13, 14, 15, 20, 24], 19: [13, 14, 15, 17, 20, 22, 23, 24], 
    20: [0, 13, 14, 16, 17, 18, 19, 22, 23, 24], 
    21: [13, 14, 15, 17, 22, 23, 24], 
    22: [13, 14, 15, 16, 17, 19, 20, 21, 23], 
    23: [14, 19, 20, 21, 22, 24], 
    24: [13, 14, 15, 16, 17, 18, 19, 20, 21, 23]
}

# Determine graph pattern
print(graph_pattern(graph))
```