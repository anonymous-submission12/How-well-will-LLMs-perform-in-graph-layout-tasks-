```python
def determine_graph_pattern(adj_list):
    def is_star(adj_list):
        center_count = sum(len(neighbors) == len(adj_list) - 1 for node, neighbors in adj_list.items())
        return center_count == 1

    def is_cycle(adj_list):
        return all(len(neighbors) == 2 for neighbors in adj_list.values())

    def is_path(adj_list):
        end_points = sum(len(neighbors) == 1 for neighbors in adj_list.values())
        return end_points == 2 and all(len(neighbors) <= 2 for neighbors in adj_list.values())

    def is_grid(adj_list):
        # Grid graphs are harder to detect without additional information.
        # For simplicity, we check if most nodes have degree 4 (internal nodes in a grid).
        degree_counts = [len(neighbors) for neighbors in adj_list.values()]
        return degree_counts.count(4) > len(adj_list) // 2

    def is_complete(adj_list):
        n = len(adj_list)
        return all(len(neighbors) == n - 1 for neighbors in adj_list.values())

    def is_clustered(adj_list):
        # Clustered graphs often have groups of nodes with high internal connectivity.
        # We check for subgroups with high connectivity.
        clusters = []
        visited = set()
        for node in adj_list:
            if node not in visited:
                cluster = set()
                stack = [node]
                while stack:
                    current = stack.pop()
                    if current not in visited:
                        visited.add(current)
                        cluster.add(current)
                        stack.extend(adj_list[current])
                clusters.append(cluster)
        return len(clusters) > 1

    def is_random(adj_list):
        # Random graphs typically have no discernible pattern.
        # If none of the above patterns match, we assume it's random.
        return True

    if is_star(adj_list):
        return "Star"
    elif is_cycle(adj_list):
        return "Cycle"
    elif is_path(adj_list):
        return "Path"
    elif is_grid(adj_list):
        return "Grid"
    elif is_complete(adj_list):
        return "Complete"
    elif is_clustered(adj_list):
        return "Clustered"
    else:
        return "Random"

adj_list = {0: [4, 5, 7], 1: [2, 3, 5, 7], 2: [1, 3, 4, 5, 6], 3: [1, 2, 5, 6, 7, 22], 4: [0, 2, 5, 6, 7], 5: [0, 1, 2, 3, 4, 6, 7], 6: [2, 3, 4, 5, 7], 7: [0, 1, 3, 4, 5, 6], 8: [10, 11, 12, 13, 14, 15], 9: [11, 12, 13, 14, 15], 10: [8, 11, 12, 13, 14, 15], 11: [8, 9, 10, 12, 13], 12: [8, 9, 10, 11, 13, 14, 15], 13: [8, 9, 10, 11, 12, 14, 15], 14: [8, 9, 10, 12, 13, 18], 15: [8, 9, 10, 12, 13], 16: [17, 18, 20, 21, 22], 17: [16, 19, 20, 21, 22], 18: [14, 16, 19, 20, 21, 22], 19: [17, 18, 20, 21, 22], 20: [16, 17, 18, 19, 21], 21: [16, 17, 18, 19, 20], 22: [3, 16, 17, 18, 19]}
print(determine_graph_pattern(adj_list))
```