```python
from collections import defaultdict

def determine_graph_pattern(adj_list):
    # Helper functions
    def is_star():
        center_count = sum(1 for node, neighbors in adj_list.items() if len(neighbors) == len(adj_list) - 1)
        leaf_count = sum(1 for node, neighbors in adj_list.items() if len(neighbors) == 1)
        return center_count == 1 and leaf_count == len(adj_list) - 1

    def is_cycle():
        return all(len(neighbors) == 2 for neighbors in adj_list.values()) and len(adj_list) > 2

    def is_path():
        endpoints = sum(1 for neighbors in adj_list.values() if len(neighbors) == 1)
        return endpoints == 2 and all(len(neighbors) <= 2 for neighbors in adj_list.values())

    def is_grid():
        # Check if the graph forms a 2D grid
        rows = defaultdict(list)
        cols = defaultdict(list)
        for node, neighbors in adj_list.items():
            for neighbor in neighbors:
                rows[node].append(neighbor)
                cols[neighbor].append(node)
        return all(len(neighbors) <= 4 for neighbors in adj_list.values())

    def is_complete():
        n = len(adj_list)
        return all(len(neighbors) == n - 1 for neighbors in adj_list.values())

    def is_clustered():
        # Check for clusters (subgraphs with high internal connectivity)
        visited = set()
        clusters = []
        def dfs(node, cluster):
            visited.add(node)
            cluster.append(node)
            for neighbor in adj_list[node]:
                if neighbor not in visited:
                    dfs(neighbor, cluster)
        for node in adj_list:
            if node not in visited:
                cluster = []
                dfs(node, cluster)
                clusters.append(cluster)
        return len(clusters) > 1

    def is_random():
        # If none of the above patterns match, assume it's random
        return True

    # Determine the pattern
    if is_star():
        return "Star"
    elif is_cycle():
        return "Cycle"
    elif is_path():
        return "Path"
    elif is_grid():
        return "Grid"
    elif is_complete():
        return "Complete"
    elif is_clustered():
        return "Clustered Graph"
    else:
        return "Random Graph"

# Input graph data
adj_list = {0: [1, 3, 4, 5], 1: [0, 2, 4, 5], 2: [1, 3, 4, 17], 3: [0, 2, 5], 4: [0, 1, 2, 26], 5: [0, 1, 3, 9], 6: [7, 8, 9, 10, 24], 7: [6, 8, 9, 10, 11], 8: [6, 7, 9, 10, 11, 12], 9: [5, 6, 7, 8, 10, 11], 10: [6, 7, 8, 9, 11], 11: [7, 8, 9, 10, 12], 12: [8, 11, 13, 14, 15, 16], 13: [12, 16], 14: [12, 15, 16], 15: [12, 14], 16: [12, 13, 14], 17: [2, 18, 19, 20, 21], 18: [17, 19, 21], 19: [17, 18, 21], 20: [17, 21], 21: [17, 18, 19, 20], 22: [24, 25, 26], 23: [25, 26], 24: [6, 22, 25], 25: [22, 23, 24, 26], 26: [4, 22, 23, 25]}

# Output the result
print(determine_graph_pattern(adj_list))
```