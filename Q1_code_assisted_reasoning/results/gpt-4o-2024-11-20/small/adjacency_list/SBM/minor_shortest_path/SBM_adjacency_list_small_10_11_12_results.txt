```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current_node, current_distance = queue.popleft()
        
        if current_node == end:
            return current_distance
        
        if current_node not in visited:
            visited.add(current_node)
            for neighbor in graph[current_node]:
                if neighbor not in visited:
                    queue.append((neighbor, current_distance + 1))
    return -1  # If no path exists

graph = {0: [1, 2, 5, 6, 8, 9, 10, 11], 1: [0, 2, 3, 4, 7, 9, 10, 11, 21], 2: [0, 1, 4, 6, 7, 8, 9, 10, 11], 3: [1, 5, 6, 8, 9, 10, 11], 4: [1, 2, 5, 6, 7, 8, 9, 10], 5: [0, 3, 4, 6, 7, 8, 10, 11], 6: [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 19], 7: [1, 2, 4, 5, 6, 8, 9, 10, 11], 8: [0, 2, 3, 4, 5, 6, 7, 9, 11], 9: [0, 1, 2, 3, 4, 6, 7, 8, 10, 12], 10: [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12], 11: [0, 1, 2, 3, 5, 6, 7, 8, 10], 12: [9, 10, 13, 14, 15, 17, 19, 20, 21], 13: [12, 14, 16, 17, 18, 19, 20, 21], 14: [12, 13, 16, 18, 19, 20, 21, 22], 15: [12, 16, 18, 20, 21], 16: [13, 14, 15, 17, 18, 21, 22], 17: [12, 13, 16, 18, 19, 20, 21, 22], 18: [13, 14, 15, 16, 17, 20, 22], 19: [6, 12, 13, 14, 17, 20, 21, 22], 20: [12, 13, 14, 15, 17, 18, 19, 22], 21: [1, 12, 13, 14, 15, 16, 17, 19, 22], 22: [14, 16, 17, 18, 19, 20, 21]}

print(shortest_path_length(graph, 11, 12))
```