```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # If no path exists

graph = {0: [4, 5, 7], 1: [2, 3, 5, 7], 2: [1, 3, 4, 5, 6], 3: [1, 2, 5, 6, 7, 22], 4: [0, 2, 5, 6, 7], 5: [0, 1, 2, 3, 4, 6, 7], 6: [2, 3, 4, 5, 7], 7: [0, 1, 3, 4, 5, 6], 8: [10, 11, 12, 13, 14, 15], 9: [11, 12, 13, 14, 15], 10: [8, 11, 12, 13, 14, 15], 11: [8, 9, 10, 12, 13], 12: [8, 9, 10, 11, 13, 14, 15], 13: [8, 9, 10, 11, 12, 14, 15], 14: [8, 9, 10, 12, 13, 18], 15: [8, 9, 10, 12, 13], 16: [17, 18, 20, 21, 22], 17: [16, 19, 20, 21, 22], 18: [14, 16, 19, 20, 21, 22], 19: [17, 18, 20, 21, 22], 20: [16, 17, 18, 19, 21], 21: [16, 17, 18, 19, 20], 22: [3, 16, 17, 18, 19]}
start_node = 2
end_node = 12

print(shortest_path_length(graph, start_node, end_node))
```