```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # If no path exists

graph = {0: [1, 2, 3, 4, 7, 9, 10, 11, 12, 13], 1: [0, 2, 5, 6, 8, 9, 10, 11, 12, 13], 2: [0, 1, 3, 6, 7, 9, 11, 12, 13], 3: [0, 2, 4, 6, 7, 8, 11, 13], 4: [0, 3, 5, 6, 8, 9, 10, 11], 5: [1, 4, 6, 7, 9, 10, 11, 12, 13], 6: [1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13], 7: [0, 2, 3, 5, 6, 8, 9, 11, 12], 8: [1, 3, 4, 6, 7, 9, 10, 11, 12, 13], 9: [0, 1, 2, 4, 5, 7, 8, 10, 12, 13], 10: [0, 1, 4, 5, 6, 8, 9, 11, 12, 13], 11: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 13, 22], 12: [0, 1, 2, 5, 6, 7, 8, 9, 10, 13], 13: [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12], 14: [16, 17, 18, 19, 20, 21, 25, 26], 15: [16, 19, 21, 23, 25, 26], 16: [14, 15, 17, 18, 19, 20, 21, 23, 25, 26], 17: [14, 16, 18, 19, 20, 21, 25, 26], 18: [14, 16, 17, 19, 21, 22, 23, 25, 26], 19: [14, 15, 16, 17, 18, 20, 22, 24, 25, 26], 20: [14, 16, 17, 19, 22, 23, 26], 21: [14, 15, 16, 17, 18, 22, 23, 25, 26], 22: [11, 18, 19, 20, 21, 23, 25, 26], 23: [15, 16, 18, 20, 21, 22, 24, 25, 26], 24: [19, 23, 25], 25: [14, 15, 16, 17, 18, 19, 21, 22, 23, 24], 26: [14, 15, 16, 17, 18, 19, 20, 21, 22, 23]}
start_node = 3
end_node = 11

print(shortest_path_length(graph, start_node, end_node))
```