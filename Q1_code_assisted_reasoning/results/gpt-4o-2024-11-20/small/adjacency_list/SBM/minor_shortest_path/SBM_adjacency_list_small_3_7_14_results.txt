```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # If no path exists

graph = {0: [1, 2, 4, 5, 6], 1: [0, 2, 3, 4, 5, 6, 7, 8, 9], 2: [0, 1, 4, 6, 7, 8], 3: [1, 5, 6, 7, 8], 4: [0, 1, 2, 5, 6, 8], 5: [0, 1, 3, 4, 7], 6: [0, 1, 2, 3, 4, 7], 7: [1, 2, 3, 5, 6, 8], 8: [1, 2, 3, 4, 7], 9: [1, 10, 14, 16, 17, 22], 10: [9, 11, 12, 15, 16, 17], 11: [10, 12, 13, 14, 16, 17, 24], 12: [10, 11, 13, 14, 15, 16, 17], 13: [11, 12, 14, 15], 14: [9, 11, 12, 13, 15, 16, 17], 15: [10, 12, 13, 14, 17], 16: [9, 10, 11, 12, 14, 17], 17: [9, 10, 11, 12, 14, 15, 16], 18: [19, 20, 21, 22, 23, 24, 25], 19: [18, 20, 21, 22, 23, 24], 20: [18, 19, 22, 23, 24, 25], 21: [18, 19, 22, 23, 25], 22: [9, 18, 19, 20, 21, 23, 24, 25], 23: [18, 19, 20, 21, 22, 24], 24: [11, 18, 19, 20, 22, 23, 25], 25: [18, 20, 21, 22, 24]}
start_node = 7
end_node = 14

print(shortest_path_length(graph, start_node, end_node))
```