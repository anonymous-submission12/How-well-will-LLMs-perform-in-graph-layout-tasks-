```python
from collections import deque

def shortest_path_length(graph, start, end):
    queue = deque([(start, 0)])  # (current_node, current_distance)
    visited = set()
    
    while queue:
        current_node, current_distance = queue.popleft()
        
        if current_node == end:
            return current_distance
        
        if current_node not in visited:
            visited.add(current_node)
            for neighbor in graph[current_node]:
                if neighbor not in visited:
                    queue.append((neighbor, current_distance + 1))
    
    return -1  # If no path exists

graph = {0: [1, 2, 4, 5, 6, 7, 8, 9, 26], 1: [0, 2, 3, 4, 6, 7, 8, 9], 2: [0, 1, 3, 4, 5, 6, 9, 18], 3: [1, 2, 4, 5, 7, 8, 9, 23], 4: [0, 1, 2, 3, 5, 6, 7, 8, 9, 24], 5: [0, 2, 3, 4, 6, 7, 8], 6: [0, 1, 2, 4, 5, 7, 8], 7: [0, 1, 3, 4, 5, 6, 8, 9], 8: [0, 1, 3, 4, 5, 6, 7, 9], 9: [0, 1, 2, 3, 4, 7, 8], 10: [11, 12, 13, 14, 15, 16, 17, 18, 19], 11: [10, 12, 13, 14, 18], 12: [10, 11, 13, 15, 16, 17, 18, 19], 13: [10, 11, 12, 15, 17, 18], 14: [10, 11, 15, 17, 18, 19], 15: [10, 12, 13, 14, 16, 17, 19], 16: [10, 12, 15, 17, 18], 17: [10, 12, 13, 14, 15, 16, 18, 19], 18: [2, 10, 11, 12, 13, 14, 16, 17, 20], 19: [10, 12, 14, 15, 17], 20: [18, 22, 24, 25, 27, 28], 21: [22, 23, 24, 26, 27], 22: [20, 21, 23, 24, 25, 26, 27, 28], 23: [3, 21, 22, 25, 27], 24: [4, 20, 21, 22, 26, 27], 25: [20, 22, 23, 28], 26: [0, 21, 22, 24, 28], 27: [20, 21, 22, 23, 24], 28: [20, 22, 25, 26]}
start_node = 11
end_node = 1

print(shortest_path_length(graph, start_node, end_node))
```