```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # If no path exists

graph = {0: [2, 3, 4, 5], 1: [2, 3, 4], 2: [0, 1, 3, 4, 5], 3: [0, 1, 2, 4], 4: [0, 1, 2, 3, 5], 5: [0, 2, 4, 6], 6: [5, 7, 8, 10, 11], 7: [6, 8, 9, 10, 11, 14], 8: [6, 7, 9, 10, 11], 9: [7, 8, 10, 11], 10: [6, 7, 8, 9, 11], 11: [6, 7, 8, 9, 10], 12: [13, 14, 17], 13: [12, 15, 16, 17, 23], 14: [7, 12, 15, 17], 15: [13, 14, 16, 17], 16: [13, 15, 17, 22], 17: [12, 13, 14, 15, 16], 18: [19, 21, 22, 23], 19: [18, 20, 21, 22], 20: [19, 21, 22, 23], 21: [18, 19, 20, 22, 23], 22: [16, 18, 19, 20, 21, 23], 23: [13, 18, 20, 21, 22]}
start_node = 5
end_node = 9

print(shortest_path_length(graph, start_node, end_node))
```