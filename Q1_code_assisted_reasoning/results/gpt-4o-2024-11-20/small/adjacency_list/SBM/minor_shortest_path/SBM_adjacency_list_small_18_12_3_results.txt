```python
from collections import deque

def shortest_path_length(graph, start, end):
    queue = deque([(start, 0)])
    visited = set()
    
    while queue:
        node, distance = queue.popleft()
        if node == end:
            return distance
        if node not in visited:
            visited.add(node)
            for neighbor in graph[node]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # If no path exists

graph = {0: [1, 2, 4, 5, 6, 7, 9], 1: [0, 2, 4, 5, 6, 8, 9], 2: [0, 1, 6, 7, 8, 9, 10], 3: [4, 5, 6, 8], 4: [0, 1, 3, 6, 7, 9], 5: [0, 1, 3, 7, 8, 9, 23], 6: [0, 1, 2, 3, 4, 7, 9, 23], 7: [0, 2, 4, 5, 6, 8, 9], 8: [1, 2, 3, 5, 7, 9], 9: [0, 1, 2, 4, 5, 6, 7, 8], 10: [2, 11, 12, 14, 15, 17], 11: [10, 12, 13, 14, 15, 17, 18, 19], 12: [10, 11, 13, 18, 19], 13: [11, 12, 14, 15, 16, 17, 18, 19, 22, 23], 14: [10, 11, 13, 15, 17, 18, 19], 15: [10, 11, 13, 14, 17, 19], 16: [13, 17, 18, 19], 17: [10, 11, 13, 14, 15, 16, 18], 18: [11, 12, 13, 14, 16, 17, 19], 19: [11, 12, 13, 14, 15, 16, 18], 20: [21, 22, 23, 24, 25, 26, 28], 21: [20, 22, 23, 24, 26, 27], 22: [13, 20, 21, 23, 24, 25, 26, 27, 28], 23: [5, 6, 13, 20, 21, 22, 24, 26, 27, 28], 24: [20, 21, 22, 23, 25, 28], 25: [20, 22, 24, 26, 28], 26: [20, 21, 22, 23, 25, 27, 28], 27: [21, 22, 23, 26, 28], 28: [20, 22, 23, 24, 25, 26, 27]}
print(shortest_path_length(graph, 12, 3))
```