```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # If no path exists

graph = {0: [2, 3, 4, 5], 1: [2, 3, 4, 5, 16], 2: [0, 1, 3, 5, 8], 3: [0, 1, 2, 5, 10], 4: [0, 1, 5], 5: [0, 1, 2, 3, 4], 6: [9, 10], 7: [8, 10], 8: [2, 7, 10], 9: [6, 10], 10: [3, 6, 7, 8, 9], 11: [12, 14], 12: [11, 14, 15, 20], 13: [14, 15], 14: [11, 12, 13, 20], 15: [12, 13], 16: [1, 17, 18, 19, 20], 17: [16, 18], 18: [16, 17, 19, 20], 19: [16, 18, 20], 20: [12, 14, 16, 18, 19]}
print(shortest_path_length(graph, 2, 11))
```