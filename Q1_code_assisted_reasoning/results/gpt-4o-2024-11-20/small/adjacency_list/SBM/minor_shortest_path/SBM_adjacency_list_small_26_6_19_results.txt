```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current_node, current_distance = queue.popleft()
        
        if current_node == end:
            return current_distance
        
        if current_node not in visited:
            visited.add(current_node)
            for neighbor in graph[current_node]:
                if neighbor not in visited:
                    queue.append((neighbor, current_distance + 1))
    return -1  # If no path exists

graph = {0: [1, 2, 3, 4, 5, 6, 11, 13, 14], 1: [0, 2, 4, 5, 6, 19], 2: [0, 1, 3, 6], 3: [0, 2, 4, 5, 6], 4: [0, 1, 3, 5, 6, 18], 5: [0, 1, 3, 4, 6, 9], 6: [0, 1, 2, 3, 4, 5], 7: [8, 9, 10, 11, 12, 13], 8: [7, 9, 11, 12, 13], 9: [5, 7, 8, 10, 11, 12], 10: [7, 9, 11, 12, 13, 14], 11: [0, 7, 8, 9, 10, 12, 13], 12: [7, 8, 9, 10, 11, 13], 13: [0, 7, 8, 10, 11, 12], 14: [0, 10, 15, 17, 18, 19, 20], 15: [14, 16, 17, 18, 20], 16: [15, 17, 18, 19, 20], 17: [14, 15, 16, 18, 19, 20], 18: [4, 14, 15, 16, 17, 19, 20], 19: [1, 14, 16, 17, 18], 20: [14, 15, 16, 17, 18]}
start_node = 6
end_node = 19

print(shortest_path_length(graph, start_node, end_node))
```