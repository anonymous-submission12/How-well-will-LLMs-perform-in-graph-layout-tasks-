```python
from collections import deque

def shortest_path_length(graph, start, end):
    visited = set()
    queue = deque([(start, 0)])  # (current_node, current_distance)
    
    while queue:
        current, distance = queue.popleft()
        if current == end:
            return distance
        if current not in visited:
            visited.add(current)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))
    return -1  # If no path exists

graph = {0: [1, 2, 4, 5, 21], 1: [0, 2, 3, 4], 2: [0, 1, 3, 4, 15], 3: [1, 2, 4, 24], 4: [0, 1, 2, 3, 5], 5: [0, 4], 6: [7, 8, 9, 10], 7: [6, 8, 9, 10], 8: [6, 7, 9, 10], 9: [6, 7, 8, 10, 21], 10: [6, 7, 8, 9, 11], 11: [10], 12: [14, 15, 16], 13: [15, 16], 14: [12, 26], 15: [2, 12, 13, 16, 18], 16: [12, 13, 15], 17: [18, 19, 21], 18: [15, 17, 20, 21], 19: [17, 20, 21], 20: [18, 19, 21], 21: [0, 9, 17, 18, 19, 20], 22: [24, 25, 26], 23: [24, 25, 26], 24: [3, 22, 23, 25, 26], 25: [22, 23, 24, 26], 26: [14, 22, 23, 24, 25]}

print(shortest_path_length(graph, 22, 19))
```