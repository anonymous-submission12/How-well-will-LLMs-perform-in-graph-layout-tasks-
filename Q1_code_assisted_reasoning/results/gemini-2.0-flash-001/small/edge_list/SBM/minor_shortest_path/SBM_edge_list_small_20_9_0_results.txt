```python
import collections

def shortest_path(graph, start, end):
    """
    Calculates the length of the shortest path between two nodes in a graph.

    Args:
        graph: A list of tuples representing the edges of the graph.
        start: The starting node.
        end: The ending node.

    Returns:
        The length of the shortest path, or -1 if no path exists.
    """

    # Build the adjacency list representation of the graph.
    adj_list = collections.defaultdict(list)
    for u, v in graph:
        adj_list[u].append(v)
        adj_list[v].append(u)

    # Use Breadth-First Search (BFS) to find the shortest path.
    queue = collections.deque([(start, 0)])  # (node, distance)
    visited = {start}

    while queue:
        node, distance = queue.popleft()

        if node == end:
            return distance

        for neighbor in adj_list[node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, distance + 1))

    return -1  # No path found


graph_data = [(0, 1), (0, 3), (0, 9), (1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 5), (3, 5), (4, 5), (5, 19), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (7, 8), (7, 9), (7, 10), (7, 11), (8, 9), (8, 10), (10, 11), (11, 15), (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (13, 14), (13, 15), (13, 16), (13, 21), (14, 15), (14, 16), (16, 17), (18, 19), (18, 20), (18, 21), (18, 22), (19, 20), (19, 21), (20, 21), (20, 22), (21, 22), (22, 26), (23, 24), (23, 25), (23, 26), (24, 25), (24, 27), (25, 26), (25, 27), (26, 27)]

shortest_path_length = shortest_path(graph_data, 9, 0)
print(shortest_path_length)
```