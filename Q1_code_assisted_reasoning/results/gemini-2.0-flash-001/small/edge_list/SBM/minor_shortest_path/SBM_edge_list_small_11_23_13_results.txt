```python
graph = [(0, 3), (0, 4), (0, 5), (0, 8), (0, 9), (0, 10), (0, 15), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (2, 3), (2, 4), (2, 5), (2, 6), (2, 8), (2, 9), (2, 10), (3, 4), (3, 5), (3, 8), (3, 9), (3, 10), (3, 11), (4, 5), (4, 9), (4, 11), (5, 7), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 11), (7, 8), (7, 9), (7, 10), (7, 23), (8, 9), (8, 10), (9, 10), (9, 11), (10, 11), (12, 14), (12, 16), (12, 18), (12, 19), (12, 21), (12, 22), (12, 23), (13, 14), (13, 15), (13, 16), (13, 17), (13, 18), (13, 19), (13, 20), (13, 23), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (14, 20), (14, 22), (14, 23), (15, 18), (15, 19), (15, 20), (15, 21), (15, 23), (16, 18), (16, 19), (16, 20), (16, 22), (17, 18), (17, 19), (17, 20), (17, 21), (17, 22), (17, 23), (18, 19), (18, 20), (18, 22), (19, 20), (19, 21), (19, 22), (19, 23), (20, 21), (20, 22), (20, 23), (21, 23), (22, 23)]

def build_adjacency_list(edges):
    adj_list = {}
    for u, v in edges:
        if u not in adj_list:
            adj_list[u] = []
        if v not in adj_list:
            adj_list[v] = []
        adj_list[u].append(v)
        adj_list[v].append(u)
    return adj_list

def shortest_path_length(adj_list, start_node, end_node):
    if start_node not in adj_list or end_node not in adj_list:
        return float('inf')

    queue = [(start_node, 0)]
    visited = {start_node}

    while queue:
        node, distance = queue.pop(0)
        if node == end_node:
            return distance

        for neighbor in adj_list[node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, distance + 1))

    return float('inf')

adj = build_adjacency_list(graph)
shortest_path = shortest_path_length(adj, 23, 13)

print(shortest_path)
```