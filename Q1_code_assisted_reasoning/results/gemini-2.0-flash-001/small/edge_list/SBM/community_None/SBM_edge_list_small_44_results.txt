```python
def count_communities(edge_list):
    """
    Counts the number of communities in a graph represented as an edge list.

    Args:
        edge_list: A list of tuples, where each tuple represents an edge in the graph.

    Returns:
        The number of communities in the graph.
    """

    # Build the graph as an adjacency list.
    graph = {}
    for u, v in edge_list:
        if u not in graph:
            graph[u] = []
        if v not in graph:
            graph[v] = []
        graph[u].append(v)
        graph[v].append(u)

    # Find the connected components (communities).
    visited = set()
    communities = 0

    def dfs(node, component):
        visited.add(node)
        component.add(node)
        for neighbor in graph.get(node, []):
            if neighbor not in visited:
                dfs(neighbor, component)

    all_nodes = set()
    for u, v in edge_list:
        all_nodes.add(u)
        all_nodes.add(v)

    for node in all_nodes:
        if node not in visited:
            communities += 1
            component = set()
            dfs(node, component)

    return communities


edge_list = [(0, 1), (0, 2), (0, 4), (0, 5), (1, 3), (1, 5), (1, 6), (1, 7), (2, 5), (2, 6), (2, 13), (2, 19), (2, 23), (3, 4), (3, 5), (3, 6), (3, 7), (3, 13), (4, 5), (4, 6), (4, 7), (5, 6), (5, 13), (5, 21), (6, 7), (8, 9), (8, 10), (8, 11), (8, 12), (9, 11), (9, 12), (9, 13), (9, 14), (10, 11), (10, 12), (10, 13), (10, 14), (10, 20), (11, 12), (11, 13), (11, 14), (12, 13), (12, 14), (13, 14), (13, 20), (15, 16), (15, 18), (15, 19), (15, 20), (15, 21), (16, 18), (16, 20), (16, 21), (17, 18), (17, 20), (17, 21), (18, 19), (18, 21), (19, 20), (19, 21), (20, 21), (22, 23), (22, 24), (22, 26), (22, 27), (22, 28), (23, 24), (23, 25), (23, 27), (23, 28), (24, 25), (24, 27), (24, 28), (25, 27), (27, 28)]
print(count_communities(edge_list))
```