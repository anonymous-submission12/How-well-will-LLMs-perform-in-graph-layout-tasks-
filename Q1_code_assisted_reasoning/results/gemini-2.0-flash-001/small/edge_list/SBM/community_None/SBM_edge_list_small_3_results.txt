```python
def count_communities(edge_list):
    """
    Counts the number of communities in a graph represented by an edge list.

    Args:
        edge_list: A list of tuples, where each tuple represents an edge in the graph.

    Returns:
        The number of communities in the graph.
    """

    # Build the graph as an adjacency list.
    graph = {}
    for u, v in edge_list:
        if u not in graph:
            graph[u] = []
        if v not in graph:
            graph[v] = []
        graph[u].append(v)
        graph[v].append(u)

    # Find all connected components using depth-first search.
    visited = set()
    communities = 0

    def dfs(node, component):
        visited.add(node)
        component.add(node)
        for neighbor in graph.get(node, []):
            if neighbor not in visited:
                dfs(neighbor, component)

    all_nodes = set()
    for u, v in edge_list:
        all_nodes.add(u)
        all_nodes.add(v)
        
    for node in all_nodes:
        if node not in visited:
            communities += 1
            component = set()
            dfs(node, component)

    return communities

edge_list = [(0, 1), (0, 2), (0, 4), (0, 5), (0, 6), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 4), (2, 6), (2, 7), (2, 8), (3, 5), (3, 6), (3, 7), (3, 8), (4, 5), (4, 6), (4, 8), (5, 7), (6, 7), (7, 8), (9, 10), (9, 14), (9, 16), (9, 17), (9, 22), (10, 11), (10, 12), (10, 15), (10, 16), (10, 17), (11, 12), (11, 13), (11, 14), (11, 16), (11, 17), (11, 24), (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (13, 14), (13, 15), (14, 15), (14, 16), (14, 17), (15, 17), (16, 17), (18, 19), (18, 20), (18, 21), (18, 22), (18, 23), (18, 24), (18, 25), (19, 20), (19, 21), (19, 22), (19, 23), (19, 24), (20, 22), (20, 23), (20, 24), (20, 25), (21, 22), (21, 23), (21, 25), (22, 23), (22, 24), (22, 25), (23, 24), (24, 25)]
print(count_communities(edge_list))
```