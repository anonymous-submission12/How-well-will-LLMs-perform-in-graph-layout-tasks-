```python
def count_communities(edge_list):
    """
    Counts the number of communities in a graph represented as an edge list.

    Args:
        edge_list: A list of tuples, where each tuple represents an edge in the graph.

    Returns:
        The number of communities in the graph.
    """

    # Create a dictionary to store the graph as an adjacency list.
    graph = {}
    for u, v in edge_list:
        if u not in graph:
            graph[u] = []
        if v not in graph:
            graph[v] = []
        graph[u].append(v)
        graph[v].append(u)

    # Find all connected components in the graph.
    visited = set()
    components = []

    def dfs(node, component):
        visited.add(node)
        component.append(node)
        for neighbor in graph.get(node, []):
            if neighbor not in visited:
                dfs(neighbor, component)

    all_nodes = set()
    for u, v in edge_list:
      all_nodes.add(u)
      all_nodes.add(v)

    for node in all_nodes:
        if node not in visited:
            component = []
            dfs(node, component)
            components.append(component)

    return len(components)


edge_list = [(0, 3), (0, 4), (0, 5), (0, 8), (0, 9), (0, 10), (0, 15), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (2, 3), (2, 4), (2, 5), (2, 6), (2, 8), (2, 9), (2, 10), (3, 4), (3, 5), (3, 8), (3, 9), (3, 10), (3, 11), (4, 5), (4, 9), (4, 11), (5, 7), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 11), (7, 8), (7, 9), (7, 10), (7, 23), (8, 9), (8, 10), (9, 10), (9, 11), (10, 11), (12, 14), (12, 16), (12, 18), (12, 19), (12, 21), (12, 22), (12, 23), (13, 14), (13, 15), (13, 16), (13, 17), (13, 18), (13, 19), (13, 20), (13, 23), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (14, 20), (14, 22), (14, 23), (15, 18), (15, 19), (15, 20), (15, 21), (15, 23), (16, 18), (16, 19), (16, 20), (16, 22), (17, 18), (17, 19), (17, 20), (17, 21), (17, 22), (17, 23), (18, 19), (18, 20), (18, 22), (19, 20), (19, 21), (19, 22), (19, 23), (20, 21), (20, 22), (20, 23), (21, 23), (22, 23)]
print(count_communities(edge_list))
```