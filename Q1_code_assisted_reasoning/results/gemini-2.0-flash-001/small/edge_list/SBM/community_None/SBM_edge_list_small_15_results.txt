```python
def count_communities(edge_list):
    """
    Counts the number of communities in a graph represented as an edge list.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        The number of communities in the graph.
    """

    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])

    num_nodes = len(nodes)
    parent = list(range(num_nodes))

    def find(i):
        if parent[i] == i:
            return i
        parent[i] = find(parent[i])
        return parent[i]

    def union(i, j):
        root_i = find(i)
        root_j = find(j)
        if root_i != root_j:
            parent[root_i] = root_j

    node_to_index = {node: i for i, node in enumerate(sorted(list(nodes)))}
    index_to_node = {i: node for i, node in enumerate(sorted(list(nodes)))}
    
    for edge in edge_list:
        node1, node2 = edge
        index1 = node_to_index[node1]
        index2 = node_to_index[node2]
        union(index1, index2)

    num_communities = len(set(find(i) for i in range(num_nodes)))
    return num_communities

edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 8), (0, 10), (0, 11), (0, 12), (0, 16), (1, 2), (1, 3), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (2, 11), (3, 4), (3, 6), (3, 8), (3, 9), (3, 12), (4, 5), (4, 6), (4, 7), (4, 8), (4, 11), (4, 12), (4, 23), (5, 6), (5, 8), (5, 9), (5, 10), (5, 11), (6, 7), (6, 9), (6, 11), (6, 12), (7, 8), (7, 10), (7, 12), (8, 9), (8, 10), (8, 12), (9, 10), (9, 11), (10, 11), (10, 12), (10, 25), (11, 12), (13, 14), (13, 15), (13, 16), (13, 17), (13, 18), (13, 20), (13, 24), (13, 25), (14, 15), (14, 17), (14, 19), (14, 22), (14, 23), (14, 24), (14, 25), (15, 18), (15, 19), (15, 20), (15, 21), (15, 22), (15, 23), (15, 24), (16, 17), (16, 18), (16, 19), (16, 20), (16, 21), (16, 22), (16, 23), (16, 24), (16, 25), (17, 18), (17, 20), (17, 21), (17, 23), (17, 25), (18, 19), (18, 21), (18, 22), (19, 21), (19, 22), (19, 23), (19, 24), (20, 22), (20, 23), (20, 25), (21, 22), (21, 23), (21, 24), (21, 25), (22, 23), (22, 25), (23, 24), (23, 25), (24, 25)]
print(count_communities(edge_list))
```