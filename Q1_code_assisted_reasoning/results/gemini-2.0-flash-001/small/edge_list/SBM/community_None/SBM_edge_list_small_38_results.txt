```python
def count_communities(edge_list):
    """
    Counts the number of communities in a graph represented by an edge list.

    Args:
        edge_list: A list of tuples, where each tuple represents an edge in the graph.

    Returns:
        The number of communities in the graph.
    """

    # Build the graph as an adjacency list.
    graph = {}
    for u, v in edge_list:
        if u not in graph:
            graph[u] = []
        if v not in graph:
            graph[v] = []
        graph[u].append(v)
        graph[v].append(u)

    # Find the connected components using depth-first search.
    visited = set()
    communities = 0

    def dfs(node, component):
        visited.add(node)
        component.add(node)
        for neighbor in graph.get(node, []):
            if neighbor not in visited:
                dfs(neighbor, component)

    all_nodes = set()
    for u, v in edge_list:
        all_nodes.add(u)
        all_nodes.add(v)

    for node in all_nodes:
        if node not in visited:
            component = set()
            dfs(node, component)
            communities += 1

    return communities

edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 6), (1, 2), (1, 3), (1, 24), (2, 3), (2, 4), (3, 4), (5, 6), (5, 7), (5, 8), (5, 9), (6, 7), (6, 8), (6, 9), (6, 29), (7, 8), (7, 9), (7, 23), (8, 9), (10, 11), (10, 13), (10, 14), (11, 12), (11, 14), (11, 28), (12, 13), (12, 26), (15, 16), (15, 17), (15, 18), (15, 19), (16, 17), (16, 19), (16, 26), (17, 18), (20, 21), (20, 22), (20, 23), (20, 24), (21, 22), (21, 23), (22, 23), (22, 24), (25, 26), (25, 27), (25, 28), (25, 29), (26, 27), (26, 28), (26, 29), (27, 28), (28, 29)]
print(count_communities(edge_list))
```