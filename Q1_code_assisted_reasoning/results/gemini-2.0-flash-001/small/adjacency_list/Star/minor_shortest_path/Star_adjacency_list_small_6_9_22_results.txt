```python
graph = {0: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], 1: [0], 2: [0], 3: [0], 4: [0], 5: [0], 6: [0], 7: [0], 8: [0], 9: [0], 10: [0], 11: [0], 12: [0], 13: [0], 14: [0], 15: [0], 16: [0], 17: [0], 18: [0], 19: [0], 20: [0], 21: [0], 22: [0], 23: [0], 24: [0], 25: [0]}

def shortest_path_length(graph, start, target):
    """
    Calculates the length of the shortest path between two nodes in a graph.

    Args:
        graph: A dictionary representing the graph as an adjacency list.
        start: The starting node.
        target: The target node.

    Returns:
        The length of the shortest path between the start and target nodes,
        or -1 if no path exists.
    """

    if start not in graph or target not in graph:
        return -1

    queue = [(start, 0)]  # (node, distance)
    visited = {start}

    while queue:
        node, distance = queue.pop(0)

        if node == target:
            return distance

        for neighbor in graph[node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, distance + 1))

    return -1

print(shortest_path_length(graph, 9, 22))
```