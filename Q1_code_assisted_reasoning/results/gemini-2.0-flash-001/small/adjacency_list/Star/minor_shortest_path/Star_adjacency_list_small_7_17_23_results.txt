```python
graph = {0: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], 1: [0], 2: [0], 3: [0], 4: [0], 5: [0], 6: [0], 7: [0], 8: [0], 9: [0], 10: [0], 11: [0], 12: [0], 13: [0], 14: [0], 15: [0], 16: [0], 17: [0], 18: [0], 19: [0], 20: [0], 21: [0], 22: [0], 23: [0], 24: [0], 25: [0], 26: [0]}

def shortest_path_length(graph, start, end):
    """
    Calculates the length of the shortest path between two nodes in a graph.

    Args:
        graph: A dictionary representing the graph in adjacency list format.
        start: The starting node.
        end: The ending node.

    Returns:
        The length of the shortest path, or -1 if no path exists.
    """

    if start == end:
        return 0

    queue = [(start, 0)]  # (node, distance)
    visited = {start}

    while queue:
        node, distance = queue.pop(0)

        for neighbor in graph[node]:
            if neighbor == end:
                return distance + 1
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, distance + 1))

    return -1

result = shortest_path_length(graph, 17, 23)
print(result)
```