```python
graph = {0: [1, 2, 3, 6], 1: [0, 4, 5, 6, 11], 2: [0, 4, 5, 6], 3: [0, 4, 5], 4: [1, 2, 3, 5, 6, 10, 12, 15], 5: [1, 2, 3, 4, 6], 6: [0, 1, 2, 4, 5, 17], 7: [8, 9, 10, 11, 12], 8: [7, 9, 10, 11, 12, 13, 17], 9: [7, 8, 10, 11, 12, 13], 10: [4, 7, 8, 9, 12, 13], 11: [1, 7, 8, 9, 12, 13], 12: [4, 7, 8, 9, 10, 11, 13], 13: [8, 9, 10, 11, 12, 18], 14: [16, 17, 19, 20], 15: [4, 16, 17, 18, 19, 20], 16: [14, 15, 18, 19, 20], 17: [6, 8, 14, 15, 19, 20, 26], 18: [13, 15, 16, 19, 20], 19: [14, 15, 16, 17, 18, 20], 20: [14, 15, 16, 17, 18, 19], 21: [22, 23, 24, 25], 22: [21, 23, 24, 25, 26], 23: [21, 22, 25, 26], 24: [21, 22, 25, 26], 25: [21, 22, 23, 24, 26], 26: [17, 22, 23, 24, 25]}

def shortest_path_length(graph, start, target):
    queue = [(start, 0)]
    visited = {start}

    while queue:
        node, distance = queue.pop(0)

        if node == target:
            return distance

        for neighbor in graph[node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, distance + 1))

    return float('inf')

result = shortest_path_length(graph, 22, 3)
print(result)
```