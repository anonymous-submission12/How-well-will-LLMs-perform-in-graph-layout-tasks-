```python
graph = {0: [1, 3, 4, 5], 1: [0, 2, 4, 5], 2: [1, 3, 4, 17], 3: [0, 2, 5], 4: [0, 1, 2, 26], 5: [0, 1, 3, 9], 6: [7, 8, 9, 10, 24], 7: [6, 8, 9, 10, 11], 8: [6, 7, 9, 10, 11, 12], 9: [5, 6, 7, 8, 10, 11], 10: [6, 7, 8, 9, 11], 11: [7, 8, 9, 10, 12], 12: [8, 11, 13, 14, 15, 16], 13: [12, 16], 14: [12, 15, 16], 15: [12, 14], 16: [12, 13, 14], 17: [2, 18, 19, 20, 21], 18: [17, 19, 21], 19: [17, 18, 21], 20: [17, 21], 21: [17, 18, 19, 20], 22: [24, 25, 26], 23: [25, 26], 24: [6, 22, 25], 25: [22, 23, 24, 26], 26: [4, 22, 23, 25]}

def shortest_path(graph, start, end):
    queue = [(start, [start])]
    visited = set()

    while queue:
        (node, path) = queue.pop(0)
        if node == end:
            return len(path) - 1
        if node not in visited:
            visited.add(node)
            for neighbor in graph[node]:
                queue.append((neighbor, path + [neighbor]))
    return -1

print(shortest_path(graph, 7, 25))
```