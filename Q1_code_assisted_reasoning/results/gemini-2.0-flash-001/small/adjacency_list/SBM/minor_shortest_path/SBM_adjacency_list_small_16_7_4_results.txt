```python
graph = {0: [1, 3, 5, 6], 1: [0, 2, 4, 6, 12], 2: [1, 3, 4, 5, 6, 7], 3: [0, 2, 4, 6], 4: [1, 2, 3, 5, 6], 5: [0, 2, 4, 6], 6: [0, 1, 2, 3, 4, 5, 15], 7: [2, 11, 13], 8: [11, 13, 24], 9: [10, 11, 12, 13], 10: [9, 11], 11: [7, 8, 9, 10, 12, 13], 12: [1, 9, 11], 13: [7, 8, 9, 11, 17], 14: [16, 17, 18, 19], 15: [6, 16, 17, 18], 16: [14, 15, 18, 19], 17: [13, 14, 15, 18], 18: [14, 15, 16, 17, 19], 19: [14, 16, 18, 21], 20: [21, 22, 23, 24], 21: [19, 20, 22, 25], 22: [20, 21, 23, 24, 25], 23: [20, 22, 24, 25], 24: [8, 20, 22, 23, 25], 25: [21, 22, 23, 24]}

def shortest_path(graph, start, end):
    queue = [(start, [start])]
    visited = set()

    while queue:
        (node, path) = queue.pop(0)
        if node == end:
            return len(path) - 1
        if node not in visited:
            visited.add(node)
            for neighbor in graph[node]:
                queue.append((neighbor, path + [neighbor]))
    return -1

print(shortest_path(graph, 7, 4))
```