```python
graph = {0: [1, 2, 3, 4, 5, 6, 7], 1: [0, 2, 3, 4, 5, 6, 7], 2: [0, 1, 4, 5, 7, 14], 3: [0, 1, 4, 5, 7], 4: [0, 1, 2, 3, 6, 7], 5: [0, 1, 2, 3, 6, 7], 6: [0, 1, 4, 5, 7], 7: [0, 1, 2, 3, 4, 5, 6], 8: [9, 10, 11, 12, 13, 14, 18], 9: [8, 10, 11, 12, 14], 10: [8, 9, 11, 13, 14], 11: [8, 9, 10, 12, 13, 14], 12: [8, 9, 11, 14], 13: [8, 10, 11, 14], 14: [2, 8, 9, 10, 11, 12, 13], 15: [16, 17, 18, 19, 20, 21, 25], 16: [15, 17, 18, 19, 20, 21], 17: [15, 16, 18, 19, 20, 21], 18: [8, 15, 16, 17, 19, 20, 21], 19: [15, 16, 17, 18, 21], 20: [15, 16, 17, 18, 21], 21: [15, 16, 17, 18, 19, 20], 22: [23, 24, 26, 27], 23: [22, 24, 25, 28], 24: [22, 23, 25, 26, 27, 28], 25: [15, 23, 24, 26, 27, 28], 26: [22, 24, 25, 27], 27: [22, 24, 25, 26], 28: [23, 24, 25]}

def count_connected_components(graph):
    visited = set()
    count = 0

    def dfs(node, visited, graph):
        visited.add(node)
        for neighbor in graph[node]:
            if neighbor not in visited:
                dfs(neighbor, visited, graph)

    for node in graph:
        if node not in visited:
            dfs(node, visited, graph)
            count += 1
    return count

print(count_connected_components(graph))
```