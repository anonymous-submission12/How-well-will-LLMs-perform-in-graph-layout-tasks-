```python
def count_connected_components(graph):
    """
    Counts the number of connected components in a graph represented as an adjacency list.

    Args:
        graph: A dictionary representing the graph where keys are nodes and values are lists of neighbors.

    Returns:
        The number of connected components in the graph.
    """

    visited = set()
    count = 0

    def dfs(node):
        visited.add(node)
        for neighbor in graph[node]:
            if neighbor not in visited:
                dfs(neighbor)

    for node in graph:
        if node not in visited:
            dfs(node)
            count += 1

    return count

graph_data = {0: [1, 2, 3, 4, 5, 7, 9, 10, 11, 12], 1: [0, 3, 5, 6, 7, 8, 10, 12], 2: [0, 4, 5, 6, 7, 9, 10, 11], 3: [0, 1, 4, 5, 6, 7, 8, 10, 11, 12, 13], 4: [0, 2, 3, 6, 7, 8, 10, 11, 12], 5: [0, 1, 2, 3, 6, 7, 9, 10, 12, 21], 6: [1, 2, 3, 4, 5, 7, 9, 10, 11], 7: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11], 8: [1, 3, 4, 7, 10, 11, 12], 9: [0, 2, 5, 6, 7, 10, 12, 16], 10: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 23], 11: [0, 2, 3, 4, 6, 7, 8], 12: [0, 1, 3, 4, 5, 8, 9, 10], 13: [3, 14, 15, 17, 18, 20, 21, 22, 25], 14: [13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25], 15: [13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 25], 16: [9, 14, 15, 17, 18, 19, 20, 21, 22, 25], 17: [13, 14, 15, 16, 19, 20, 23, 24], 18: [13, 14, 15, 16, 19, 21, 22, 23, 25], 19: [14, 16, 17, 18, 21, 22, 23, 25], 20: [13, 15, 16, 17, 22, 23, 24, 25], 21: [5, 13, 14, 15, 16, 18, 19, 22, 24, 25], 22: [13, 14, 15, 16, 18, 19, 20, 21, 23, 25], 23: [10, 14, 15, 17, 18, 19, 20, 22, 24, 25], 24: [14, 15, 17, 20, 21, 23, 25], 25: [13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24]}
num_communities = count_connected_components(graph_data)
print(num_communities)
```