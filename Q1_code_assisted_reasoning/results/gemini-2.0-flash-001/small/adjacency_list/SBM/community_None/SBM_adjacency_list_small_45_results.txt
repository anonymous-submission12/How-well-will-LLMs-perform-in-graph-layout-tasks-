```python
graph = {0: [2, 3, 4, 5], 1: [2, 3, 4], 2: [0, 1, 3, 4, 5], 3: [0, 1, 2, 4], 4: [0, 1, 2, 3, 5], 5: [0, 2, 4, 6], 6: [5, 7, 8, 10, 11], 7: [6, 8, 9, 10, 11, 14], 8: [6, 7, 9, 10, 11], 9: [7, 8, 10, 11], 10: [6, 7, 8, 9, 11], 11: [6, 7, 8, 9, 10], 12: [13, 14, 17], 13: [12, 15, 16, 17, 23], 14: [7, 12, 15, 17], 15: [13, 14, 16, 17], 16: [13, 15, 17, 22], 17: [12, 13, 14, 15, 16], 18: [19, 21, 22, 23], 19: [18, 20, 21, 22], 20: [19, 21, 22, 23], 21: [18, 19, 20, 22, 23], 22: [16, 18, 19, 20, 21, 23], 23: [13, 18, 20, 21, 22]}

def count_connected_components(graph):
  """Counts the number of connected components in a graph.

  Args:
    graph: A dictionary representing the graph in adjacency list format.

  Returns:
    The number of connected components in the graph.
  """

  visited = set()
  count = 0

  def dfs(node):
    """Performs a depth-first search to explore a connected component."""
    visited.add(node)
    for neighbor in graph[node]:
      if neighbor not in visited:
        dfs(neighbor)

  for node in graph:
    if node not in visited:
      dfs(node)
      count += 1

  return count

print(count_connected_components(graph))
```