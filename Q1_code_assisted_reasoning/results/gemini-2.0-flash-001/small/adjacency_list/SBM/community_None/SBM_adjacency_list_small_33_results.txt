```python
graph = {0: [2, 3, 4, 6, 7, 8, 9, 10], 1: [5, 6, 8, 9, 10], 2: [0, 3, 6], 3: [0, 2, 4, 7, 9], 4: [0, 3, 5, 7, 14, 19], 5: [1, 4, 6, 7, 8, 10], 6: [0, 1, 2, 5, 7, 8, 9, 10], 7: [0, 3, 4, 5, 6, 8], 8: [0, 1, 5, 6, 7, 10], 9: [0, 1, 3, 6], 10: [0, 1, 5, 6, 8], 11: [13, 16, 18, 19, 20], 12: [13, 14, 15, 16, 19], 13: [11, 12, 15, 16, 18, 19, 20], 14: [4, 12, 15, 17, 18, 19, 20], 15: [12, 13, 14, 17, 18, 19, 20], 16: [11, 12, 13, 19], 17: [14, 15, 18, 20], 18: [11, 13, 14, 15, 17, 19, 20], 19: [4, 11, 12, 13, 14, 15, 16, 18], 20: [11, 13, 14, 15, 17, 18]}

def count_connected_components(graph):
    visited = set()
    count = 0

    def dfs(node, visited, graph):
        visited.add(node)
        for neighbor in graph[node]:
            if neighbor not in visited:
                dfs(neighbor, visited, graph)

    for node in graph:
        if node not in visited:
            dfs(node, visited, graph)
            count += 1
    return count

print(count_connected_components(graph))
```