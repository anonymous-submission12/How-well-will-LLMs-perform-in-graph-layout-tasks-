```python
def count_communities(graph):
  """
  Counts the number of communities in a graph represented as an adjacency list.

  Args:
    graph: A dictionary representing the graph as an adjacency list.
           Keys are nodes, and values are lists of their neighbors.

  Returns:
    The number of communities in the graph.
  """

  def bfs(graph, start_node, visited):
    """
    Performs a Breadth-First Search (BFS) to explore a connected component.

    Args:
      graph: The graph represented as an adjacency list.
      start_node: The node to start the BFS from.
      visited: A set to keep track of visited nodes.
    """

    queue = [start_node]
    visited.add(start_node)

    while queue:
      node = queue.pop(0)
      for neighbor in graph[node]:
        if neighbor not in visited:
          visited.add(neighbor)
          queue.append(neighbor)

  num_communities = 0
  visited = set()

  for node in graph:
    if node not in visited:
      bfs(graph, node, visited)
      num_communities += 1

  return num_communities

graph = {0: [1, 2, 4, 5, 6], 1: [0, 2, 3, 4, 5, 6, 7, 8, 9], 2: [0, 1, 4, 6, 7, 8], 3: [1, 5, 6, 7, 8], 4: [0, 1, 2, 5, 6, 8], 5: [0, 1, 3, 4, 7], 6: [0, 1, 2, 3, 4, 7], 7: [1, 2, 3, 5, 6, 8], 8: [1, 2, 3, 4, 7], 9: [1, 10, 14, 16, 17, 22], 10: [9, 11, 12, 15, 16, 17], 11: [10, 12, 13, 14, 16, 17, 24], 12: [10, 11, 13, 14, 15, 16, 17], 13: [11, 12, 14, 15], 14: [9, 11, 12, 13, 15, 16, 17], 15: [10, 12, 13, 14, 17], 16: [9, 10, 11, 12, 14, 17], 17: [9, 10, 11, 12, 14, 15, 16], 18: [19, 20, 21, 22, 23, 24, 25], 19: [18, 20, 21, 22, 23, 24], 20: [18, 19, 22, 23, 24, 25], 21: [18, 19, 22, 23, 25], 22: [9, 18, 19, 20, 21, 23, 24, 25], 23: [18, 19, 20, 21, 22, 24], 24: [11, 18, 19, 20, 22, 23, 25], 25: [18, 20, 21, 22, 24]}
print(count_communities(graph))
```