```python
from collections import deque

def shortest_path_length(graph, start_node, end_node):
    """
    Calculates the length of the shortest path between two nodes in a graph.

    Args:
        graph: A dictionary representing the graph as an adjacency list.
        start_node: The starting node.
        end_node: The destination node.

    Returns:
        The length of the shortest path, or -1 if no path exists.
    """

    if start_node not in graph or end_node not in graph:
        return -1

    queue = deque([(start_node, 0)])  # (node, distance)
    visited = {start_node}

    while queue:
        node, distance = queue.popleft()

        if node == end_node:
            return distance

        for neighbor in graph[node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, distance + 1))

    return -1  # No path found


graph = {0: [1, 4, 8, 13], 1: [0, 4, 5, 9, 12, 15], 2: [3, 4, 6, 11, 12, 13, 14, 15], 3: [2, 5, 6, 7, 13, 29], 4: [0, 1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15], 5: [1, 3, 6, 7, 8, 9, 11, 14, 15], 6: [2, 3, 5, 8, 14], 7: [3, 4, 5, 8, 9, 12, 13, 14], 8: [0, 4, 5, 6, 7, 11, 12, 14, 49], 9: [1, 4, 5, 7, 13, 15], 10: [4, 12, 13], 11: [2, 4, 5, 8, 12, 13, 15], 12: [1, 2, 4, 7, 8, 10, 11], 13: [0, 2, 3, 4, 7, 9, 10, 11, 14], 14: [2, 4, 5, 6, 7, 8, 13], 15: [1, 2, 4, 5, 9, 11, 31], 16: [17, 19, 20, 22, 23, 31], 17: [16, 18, 20, 21, 23, 28, 30], 18: [17, 24, 25, 29, 31], 19: [16, 25, 27, 28, 29], 20: [16, 17, 21, 22, 25, 26, 27, 28, 29, 30], 21: [17, 20, 24, 26, 27, 28, 29, 31], 22: [16, 20, 23, 24, 25, 26, 28, 29], 23: [16, 17, 22, 26], 24: [18, 21, 22], 25: [18, 19, 20, 22, 28, 30, 31], 26: [20, 21, 22, 23, 27, 28], 27: [19, 20, 21, 26, 29, 30, 31], 28: [17, 19, 20, 21, 22, 25, 26, 29, 31, 40], 29: [3, 18, 19, 20, 21, 22, 27, 28], 30: [17, 20, 25, 27, 31], 31: [15, 16, 18, 21, 25, 27, 28, 30], 32: [33, 34, 35, 36, 40, 42, 46], 33: [32, 38, 40, 41, 43], 34: [32, 37, 38, 40, 42, 45, 46], 35: [32, 39, 40, 41, 45, 46, 47, 50, 76], 36: [32, 37, 39, 41, 45], 37: [34, 36, 40, 41, 42], 38: [33, 34, 39, 43, 46], 39: [35, 36, 38, 40, 43], 40: [28, 32, 33, 34, 35, 37, 39, 41, 43, 44], 41: [33, 35, 36, 37, 40, 42, 44, 45, 46, 47, 53], 42: [32, 34, 37, 41, 43, 45, 46], 43: [33, 38, 39, 40, 42], 44: [40, 41, 46, 76], 45: [34, 35, 36, 41, 42], 46: [32, 34, 35, 38, 41, 42, 44], 47: [35, 41], 48: [51, 53, 54, 55, 58], 49: [8, 50, 51, 52, 54, 56, 57, 58], 50: [35, 49, 51, 52], 51: [48, 49, 50, 54, 56, 58, 76], 52: [49, 50, 56, 57, 58, 59, 62], 53: [41, 48, 54, 55, 58, 59, 62], 54: [48, 49, 51, 53, 56, 58, 61], 55: [48, 53, 56, 57, 61], 56: [49, 51, 52, 54, 55], 57: [49, 52, 55, 58, 61], 58: [48, 49, 51, 52, 53, 54, 57, 60, 62], 59: [52, 53, 60, 61, 62], 60: [58, 59, 61, 75], 61: [54, 55, 57, 59, 60, 62], 62: [52, 53, 58, 59, 61], 64: [63, 65, 67, 70, 72, 74, 75, 77], 65: [64, 66, 68, 72, 75], 66: [63, 65, 67, 68, 70, 72, 75, 76], 67: [64, 66, 68, 69, 71, 72, 74, 75, 77], 68: [65, 66, 67, 71, 72, 73, 74], 69: [63, 67, 70, 71, 76], 70: [64, 66, 69, 72], 71: [67, 68, 69, 75, 76, 77], 72: [63, 64, 65, 66, 67, 68, 70, 76, 77], 73: [63, 68], 74: [63, 64, 67, 68], 75: [60, 64, 65, 66, 67, 71], 76: [35, 44, 51, 66, 69, 71, 72, 77], 77: [64, 67, 71, 72, 76], 63: [64, 66, 69, 72, 73, 74]}

start_node = 32
end_node = 25

shortest_path = shortest_path_length(graph, start_node, end_node)
print(shortest_path)
```