```python
import networkx as nx

def count_communities(graph_data):
    """
    Counts the number of connected components (communities) in a graph.

    Args:
        graph_data: A dictionary representing the graph in adjacency list format.

    Returns:
        The number of connected components in the graph.
    """
    graph = nx.Graph(graph_data)
    return nx.number_connected_components(graph)

graph_data = {0: [2, 4, 5, 7, 10, 11, 12, 13, 16, 17, 20, 31, 36], 1: [5, 6, 7, 8, 10, 14, 16, 18, 21, 23, 24, 25, 49], 2: [0, 4, 5, 8, 10, 12, 14, 16, 17, 18, 19, 21], 3: [4, 7, 8, 9, 10, 11, 13, 14, 17, 19, 23, 24], 4: [0, 2, 3, 7, 8, 10, 11, 12, 13, 14, 16, 19, 22, 24], 5: [0, 1, 2, 13, 18, 19, 20, 21, 25], 6: [1, 9, 11, 15, 16, 17, 19, 20], 7: [0, 1, 3, 4, 10, 12, 15, 17, 21, 22, 74], 8: [1, 2, 3, 4, 9, 17, 18, 20], 9: [3, 6, 8, 15, 16, 21, 22, 24], 10: [0, 1, 2, 3, 4, 7, 11, 12, 13, 14, 15, 17, 21, 23], 11: [0, 3, 4, 6, 10, 13, 14, 17, 21], 12: [0, 2, 4, 7, 10, 16, 19, 20, 22, 24, 65], 13: [0, 3, 4, 5, 10, 11, 16, 18, 20, 21, 22, 58, 61], 14: [1, 2, 3, 4, 10, 11, 16, 23, 24, 25], 15: [6, 7, 9, 10, 16, 18, 23], 16: [0, 1, 2, 4, 6, 9, 12, 13, 14, 15, 18, 24], 17: [0, 2, 3, 6, 7, 8, 10, 11, 18, 21, 22], 18: [1, 2, 5, 8, 13, 15, 16, 17, 20, 22, 23], 19: [2, 3, 4, 5, 6, 12, 21, 22, 25, 29], 20: [0, 5, 6, 8, 12, 13, 18, 24], 21: [1, 2, 5, 7, 9, 10, 11, 13, 17, 19], 22: [4, 7, 9, 12, 13, 17, 18, 19, 25], 23: [1, 3, 10, 14, 15, 18, 43], 24: [1, 3, 4, 9, 12, 14, 16, 20, 25], 25: [1, 5, 14, 19, 22, 24], 26: [27, 30, 33, 34, 38, 43, 46, 47], 27: [26, 28, 31, 36, 37, 39, 41, 42, 45, 47, 49, 50], 28: [27, 30, 31, 32, 33, 34, 38, 39, 42, 47, 50], 29: [19, 30, 31, 32, 33, 37, 40, 45, 48], 30: [26, 28, 29, 31, 35, 36, 43, 48], 31: [0, 27, 28, 29, 30, 33, 35, 36, 37, 39, 40, 41, 46, 47, 48, 49, 50], 32: [28, 29, 34, 35, 36, 39, 42, 46, 47, 48, 50], 33: [26, 28, 29, 31, 35, 36, 38, 44, 45, 47, 48], 34: [26, 28, 32, 36, 37, 39, 40, 49], 35: [30, 31, 32, 33, 37, 38, 42, 44, 45, 46, 50], 36: [0, 27, 30, 31, 32, 33, 34, 38, 39, 40, 44, 45], 37: [27, 29, 31, 34, 35, 40, 41, 45, 46, 50], 38: [26, 28, 33, 35, 36, 39, 40, 41, 47], 39: [27, 28, 31, 32, 34, 36, 38, 40, 43, 44], 40: [29, 31, 34, 36, 37, 38, 39, 43, 46], 41: [27, 31, 37, 38, 44, 45, 49], 42: [27, 28, 32, 35, 45, 46, 48], 43: [23, 26, 30, 39, 40, 49], 44: [33, 35, 36, 39, 41, 47], 45: [27, 29, 33, 35, 36, 37, 41, 42, 48, 49, 50], 46: [26, 31, 32, 35, 37, 40, 42, 49], 47: [26, 27, 28, 31, 32, 33, 38, 44, 49, 50], 48: [29, 30, 31, 32, 33, 42, 45, 49, 50], 49: [1, 27, 31, 34, 41, 43, 45, 46, 47, 48], 50: [27, 28, 31, 32, 35, 37, 45, 47, 48], 51: [56, 57, 58, 60, 61, 68, 72, 73, 74], 52: [53, 54, 56, 58, 59, 63, 69], 53: [52, 58, 60, 63, 64, 66, 68, 71, 74, 75], 54: [52, 57, 60, 62, 66, 68, 69, 72], 55: [60, 62, 63, 68, 69, 70, 71, 73, 74], 56: [51, 52, 60, 62, 64, 65, 66, 67, 71, 73, 74, 75], 57: [51, 54, 58, 62, 65, 66, 68, 69, 73], 58: [13, 51, 52, 53, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68], 59: [52, 60, 63, 66, 67, 68, 75], 60: [51, 53, 54, 55, 56, 58, 59, 62, 63, 69, 74], 61: [13, 51, 58, 67, 70, 71, 72], 62: [54, 55, 56, 57, 58, 60, 63, 71, 73, 74, 75], 63: [52, 53, 55, 58, 59, 60, 62, 66, 69, 71, 72], 64: [53, 56, 58, 69, 70, 71, 73, 75], 65: [12, 56, 57, 58, 66, 71], 66: [53, 54, 56, 57, 58, 59, 63, 65, 67, 71, 74], 67: [56, 58, 59, 61, 66, 69, 70, 71, 72, 73], 68: [51, 53, 54, 55, 57, 58, 59, 69, 75], 69: [52, 54, 55, 57, 60, 63, 64, 67, 68, 72, 75], 70: [55, 61, 64, 67, 71], 71: [53, 55, 56, 61, 62, 63, 64, 65, 66, 67, 70, 74, 75], 72: [51, 54, 61, 63, 67, 69], 73: [51, 55, 56, 57, 62, 64, 67, 74, 75], 74: [7, 51, 53, 55, 56, 60, 62, 66, 71, 73], 75: [53, 56, 59, 62, 64, 68, 69, 71, 73]}

print(count_communities(graph_data))
```