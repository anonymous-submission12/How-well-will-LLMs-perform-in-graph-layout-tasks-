```python
graph = {0: [1, 4, 12], 1: [0, 5, 6, 8, 9, 10, 11, 12], 2: [7, 11], 3: [6, 10, 11], 4: [0, 5, 7, 9], 5: [1, 4, 6, 7, 8, 10, 11], 6: [1, 3, 5], 7: [2, 4, 5, 10, 12], 8: [1, 5, 59], 9: [1, 4, 11], 10: [1, 3, 5, 7, 11, 17], 11: [1, 2, 3, 5, 9, 10], 12: [0, 1, 7, 49], 13: [15, 16, 17, 20, 22, 23, 24], 14: [17, 18, 22, 24], 15: [13, 22, 24, 34], 16: [13, 17, 19, 22, 25], 17: [10, 13, 14, 16, 25, 50], 18: [14, 23, 24, 25], 19: [16, 20, 22, 35], 20: [13, 19, 22, 23, 24, 25], 21: [23, 24, 50], 22: [13, 14, 15, 16, 19, 20, 23], 23: [13, 18, 20, 21, 22], 24: [13, 14, 15, 18, 20, 21], 25: [16, 17, 18, 20], 32: [27, 28, 29, 30, 31], 33: [27, 28, 31, 34, 35, 36], 34: [15, 27, 30, 33, 35, 36, 37, 38, 74], 35: [19, 29, 33, 34, 36, 37], 36: [26, 27, 33, 34, 35, 38, 51], 37: [27, 29, 34, 35], 38: [27, 28, 31, 34, 36, 62], 26: [27, 30, 31, 36], 27: [26, 29, 30, 31, 32, 33, 34, 36, 37, 38], 28: [30, 31, 32, 33, 38], 29: [27, 30, 32, 35, 37], 30: [26, 27, 28, 29, 31, 32, 34], 31: [26, 27, 28, 30, 32, 33, 38], 39: [41, 43, 45, 51], 40: [42, 43, 44, 45, 48], 41: [39, 43, 46], 42: [40, 45, 54], 43: [39, 40, 41, 44, 60], 44: [40, 43, 46, 49, 51], 45: [39, 40, 42, 47, 48], 46: [41, 44, 48, 49, 50], 47: [45, 49], 48: [40, 45, 46], 49: [12, 44, 46, 47], 50: [17, 21, 46], 51: [36, 39, 44], 52: [55, 56, 59, 60, 61, 62, 63], 53: [56, 61, 62], 54: [42, 56, 63], 55: [52], 56: [52, 53, 54], 57: [58, 59], 58: [57, 61, 62, 63], 59: [8, 52, 57, 61], 60: [43, 52, 61], 61: [52, 53, 58, 59, 60, 63], 62: [38, 52, 53, 58, 63], 63: [52, 54, 58, 61, 62], 64: [65, 66, 67, 68, 72, 75], 65: [64, 66, 67, 68, 69, 74, 75], 66: [64, 65, 68], 67: [64, 65, 68, 75], 68: [64, 65, 66, 67, 69, 72, 74], 69: [65, 68, 70, 71], 70: [69, 75], 71: [69, 72, 73, 74, 75], 72: [64, 68, 71, 73, 75], 73: [71, 72], 74: [34, 65, 68, 71], 75: [64, 65, 67, 70, 71, 72]}

def count_connected_components(graph):
    visited = set()
    count = 0

    def dfs(node, visited, graph):
        visited.add(node)
        for neighbor in graph[node]:
            if neighbor not in visited:
                dfs(neighbor, visited, graph)

    for node in graph:
        if node not in visited:
            dfs(node, visited, graph)
            count += 1

    return count

print(count_connected_components(graph))
```