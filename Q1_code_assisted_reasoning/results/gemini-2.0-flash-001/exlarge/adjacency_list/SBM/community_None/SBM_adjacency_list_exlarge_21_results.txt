```python
def count_connected_components(graph):
    """
    Counts the number of connected components (communities) in a graph represented as an adjacency list.

    Args:
        graph: A dictionary representing the graph where keys are nodes and values are lists of neighbors.

    Returns:
        The number of connected components in the graph.
    """

    visited = set()
    count = 0

    def dfs(node):
        visited.add(node)
        for neighbor in graph[node]:
            if neighbor not in visited:
                dfs(neighbor)

    for node in graph:
        if node not in visited:
            dfs(node)
            count += 1

    return count

graph_data = {0: [1, 5, 6, 7, 9, 12, 16, 17, 21, 22, 23], 1: [0, 3, 6, 7, 8, 9, 14, 16, 19, 21, 22, 23], 2: [8, 12, 13, 18, 23, 24], 3: [1, 6, 7, 9, 15, 18, 19, 20, 21], 4: [6, 11, 14, 16, 18, 20], 5: [0, 7, 11, 12, 13, 14, 17, 19, 20, 24], 6: [0, 1, 3, 4, 7, 8, 12, 16, 17, 18, 21], 7: [0, 1, 3, 5, 6, 9, 10, 12, 19, 20, 23], 8: [1, 2, 6, 12, 16, 20, 21, 23, 24], 9: [0, 1, 3, 7, 12, 15, 16, 18, 20, 21, 22, 24, 36], 10: [7, 13, 15, 17, 20, 23], 11: [4, 5, 12, 14, 16, 17, 24], 12: [0, 2, 5, 6, 7, 8, 9, 11, 14, 15, 16, 20, 23], 13: [2, 5, 10, 14, 24], 14: [1, 4, 5, 11, 12, 13, 15, 17, 20, 23, 24], 15: [3, 9, 10, 12, 14, 18, 20, 21, 23], 16: [0, 1, 4, 6, 8, 9, 11, 12, 17, 21, 22, 23], 17: [0, 5, 6, 10, 11, 14, 16, 23, 24], 18: [2, 3, 4, 6, 9, 15, 22], 19: [1, 3, 5, 7, 21, 24], 20: [3, 4, 5, 7, 8, 9, 10, 12, 14, 15, 21, 22], 21: [0, 1, 3, 6, 8, 9, 15, 16, 19, 20, 24, 69], 22: [0, 1, 9, 16, 18, 20], 23: [0, 1, 2, 7, 8, 10, 12, 14, 15, 16, 17, 24], 24: [2, 5, 8, 9, 11, 13, 14, 17, 19, 21, 23, 59], 25: [26, 28, 29, 30, 31, 34, 36, 37, 43, 46, 48, 50], 26: [25, 28, 29, 32, 33, 37, 43, 45, 46, 47], 27: [28, 29, 31, 32, 37, 39, 40, 41, 42, 44, 48], 28: [25, 26, 27, 29, 30, 32, 34, 35, 40, 47], 29: [25, 26, 27, 28, 30, 32, 34, 36, 38, 43, 47], 30: [25, 28, 29, 32, 35, 36, 38, 39, 45, 46, 47, 48], 31: [25, 27, 32, 33, 35, 37, 40, 45, 46], 32: [26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 39, 40, 44, 45, 46, 48], 33: [26, 31, 32, 35, 36, 38, 40, 41, 44], 34: [25, 28, 29, 32, 35, 38, 40, 42, 44], 35: [28, 30, 31, 33, 34, 39, 41, 45, 48], 36: [9, 25, 29, 30, 32, 33, 37, 39, 41, 42, 46, 48], 37: [25, 26, 27, 31, 32, 36, 38, 39, 40, 41, 42, 43], 38: [29, 30, 33, 34, 37, 43, 44, 52, 64], 39: [27, 30, 32, 35, 36, 37, 41, 45, 47], 40: [27, 28, 31, 32, 33, 34, 37, 42, 43], 41: [27, 33, 35, 36, 37, 39, 42, 43, 47, 48], 42: [27, 34, 36, 37, 40, 41, 44, 48], 43: [25, 26, 29, 37, 38, 40, 41, 46, 47], 44: [27, 32, 33, 34, 38, 42, 46, 48], 45: [26, 30, 31, 32, 35, 39, 46, 47], 46: [25, 26, 30, 31, 32, 36, 43, 44, 45], 47: [26, 28, 29, 30, 39, 41, 43, 45], 48: [25, 27, 30, 32, 35, 36, 41, 42, 44], 49: [50, 52, 57, 60, 61, 63, 69], 50: [25, 49, 52, 53, 55, 56, 60, 61, 63, 64, 66, 67, 69, 71], 51: [53, 55, 56, 57, 58, 59, 61, 62, 66, 67, 69], 52: [38, 49, 50, 53, 55, 56, 59, 60, 62, 69, 70], 53: [50, 51, 52, 56, 62, 63, 65, 68, 70, 71, 72], 54: [60, 61, 62, 65, 66, 67, 68, 70, 72], 55: [50, 51, 52, 56, 57, 65, 66, 71], 56: [50, 51, 52, 53, 55, 59, 62, 63, 65, 70], 57: [49, 51, 55, 58, 61, 62, 63, 65, 66, 70, 72], 58: [51, 57, 59, 60, 65, 66, 70, 71, 72], 59: [24, 51, 52, 56, 58, 63, 66, 67, 68], 60: [49, 50, 52, 54, 58, 64, 67, 70, 72], 61: [49, 50, 51, 54, 57, 62, 63, 65, 72], 62: [51, 52, 53, 54, 56, 57, 61, 68], 63: [49, 50, 53, 56, 57, 59, 61, 64, 66, 68, 69, 71, 72], 64: [38, 50, 60, 63], 65: [53, 54, 55, 56, 57, 58, 61, 66, 68, 70, 71], 66: [50, 51, 54, 55, 57, 58, 59, 63, 65, 68], 67: [50, 51, 54, 59, 60, 68, 70, 72], 68: [53, 54, 59, 62, 63, 65, 66, 67, 71], 69: [21, 49, 50, 51, 52, 63, 70, 72], 70: [52, 53, 54, 56, 57, 58, 60, 65, 67, 69], 71: [50, 53, 55, 58, 63, 65, 68], 72: [53, 54, 57, 58, 60, 61, 63, 67, 69]}

print(count_connected_components(graph_data))
```