```python
graph = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74), (74, 75), (75, 76), (76, 77)]

def find_shortest_path_length(graph, start_node, end_node):
    """
    Calculates the length of the shortest path between two nodes in a graph.

    Args:
        graph: A list of tuples representing the edges of the graph.
        start_node: The starting node.
        end_node: The ending node.

    Returns:
        The length of the shortest path, or None if no path exists.
    """

    nodes = set()
    for edge in graph:
        nodes.add(edge[0])
        nodes.add(edge[1])

    adj_list = {node: [] for node in nodes}
    for edge in graph:
        adj_list[edge[0]].append(edge[1])
        adj_list[edge[1]].append(edge[0])

    queue = [(start_node, 0)]  # (node, distance)
    visited = {start_node}

    while queue:
        node, distance = queue.pop(0)

        if node == end_node:
            return distance

        for neighbor in adj_list[node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, distance + 1))

    return None

shortest_path_length = find_shortest_path_length(graph, 55, 23)
print(shortest_path_length)
```