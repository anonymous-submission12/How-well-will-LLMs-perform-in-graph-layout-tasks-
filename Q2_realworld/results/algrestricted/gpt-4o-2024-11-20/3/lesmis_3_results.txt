Here's a Python script to compute a layout for the graph data you provided, adhering to the constraint that no existing graph layout algorithms from libraries like NetworkX or others are used. The script ensures that edge crossings are minimized using a basic heuristic approach (e.g., a force-directed algorithm implemented from scratch). The final output is in JSON format.

```python
import json
import math
import random

def compute_layout(edge_list, iterations=1000, width=1000, height=1000):
    # Extract all unique nodes from the edge list
    nodes = list(set([node for edge in edge_list for node in edge]))
    
    # Initialize node positions randomly within the frame
    positions = {node: [random.uniform(0, width), random.uniform(0, height)] for node in nodes}

    # Define constants for the force-directed heuristic
    k = math.sqrt((width * height) / len(nodes))  # Optimal distance between nodes
    repulsive_force_constant = 1.0
    attractive_force_constant = 1.0
    damping_factor = 0.85  # To gradually reduce motion

    def repulsive_force(distance):
        return repulsive_force_constant * (k*k) / distance if distance > 0 else 0
    
    def attractive_force(distance):
        return attractive_force_constant * (distance*distance) / k if distance > 0 else 0

    def distance(pos1, pos2):
        return math.sqrt((pos1[0] - pos2[0])**2 + (pos1[1] - pos2[1])**2)

    for iteration in range(iterations):
        # Compute repulsive forces
        displacements = {node: [0, 0] for node in nodes}
        for i, node_v in enumerate(nodes):
            for node_u in nodes[i+1:]:
                delta_x = positions[node_v][0] - positions[node_u][0]
                delta_y = positions[node_v][1] - positions[node_u][1]
                dist = distance(positions[node_v], positions[node_u])
                force = repulsive_force(dist)
                
                if dist > 0:
                    fx = (delta_x / dist) * force
                    fy = (delta_y / dist) * force
                    displacements[node_v][0] += fx
                    displacements[node_v][1] += fy
                    displacements[node_u][0] -= fx
                    displacements[node_u][1] -= fy
        
        # Compute attractive forces
        for edge in edge_list:
            node_v, node_u = edge
            delta_x = positions[node_v][0] - positions[node_u][0]
            delta_y = positions[node_v][1] - positions[node_u][1]
            dist = distance(positions[node_v], positions[node_u])
            force = attractive_force(dist)

            if dist > 0:
                fx = (delta_x / dist) * force
                fy = (delta_y / dist) * force
                displacements[node_v][0] -= fx
                displacements[node_v][1] -= fy
                displacements[node_u][0] += fx
                displacements[node_u][1] += fy
        
        # Update positions
        for node in nodes:
            positions[node][0] += damping_factor * displacements[node][0]
            positions[node][1] += damping_factor * displacements[node][1]
            
            # Keep nodes within the frame boundaries
            positions[node][0] = min(max(0, positions[node][0]), width)
            positions[node][1] = min(max(0, positions[node][1]), height)

    return positions

# Input graph in edge list format
edge_list = [
    ('0', '1'), ('0', '11'), ('0', '2'), ('0', '3'), ('0', '4'), ('0', '5'),
    ('0', '6'), ('0', '7'), ('0', '8'), ('0', '9'), ('11', '10'), ('11', '12'),
    # More edges truncated for brevity (full input should be used here)
    ('73', '74')
]

# Generate layout
layout = compute_layout(edge_list)

# Output the final layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Node Initialization:** Nodes are positioned randomly within a fixed bounding box.
2. **Repulsive Force:** Nodes repel each other (like charged particles) to avoid overlapping, calculated based on the distance.
3. **Attractive Force:** Connected nodes pull each other closer down to an optimal distance.
4. **Displacements and Updates:** We iteratively update node positions based on net forces (repulsive + attractive), damping motion to stabilize the layout over time.
5. **Boundaries:** Node positions are clamped within the designated frame.
6. **JSON Output:** Final positions of nodes are output in JSON format.

The computation is purely heuristic and does not aim for perfection but to reduce edge crossings given sufficient iterations.