```python
import networkx as nx
import community as community_louvain
import json
import random

def calculate_graph_layout(edge_list):
    # Create the graph
    G = nx.Graph()
    G.add_edges_from(edge_list)

    # Detect communities using the Louvain method
    community_ids = community_louvain.best_partition(G)

    # Organize nodes by community
    communities = {}
    for node, com_id in community_ids.items():
        if com_id not in communities:
            communities[com_id] = []
        communities[com_id].append(node)

    # Assign positions to nodes manually based on their communities
    positions = {}
    radius = 10
    angle_step = 2 * 3.14159 / len(communities)
    for i, (com_id, nodes) in enumerate(communities.items()):
        # Calculate the central position of the community
        angle = i * angle_step
        community_center = (radius * random.uniform(0, 1)+!)