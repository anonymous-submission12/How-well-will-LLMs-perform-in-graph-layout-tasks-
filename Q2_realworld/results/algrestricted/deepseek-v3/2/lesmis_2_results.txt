Here's a Python script that generates a graph layout while attempting to maintain consistency between Euclidean distance and graph-theoretic distance. The approach uses multidimensional scaling (MDS) based on shortest path distances:

```python
import json
import numpy as np
from collections import defaultdict

def compute_shortest_paths(edge_list):
    nodes = set()
    for u, v in edge_list:
        nodes.add(u)
        nodes.add(v)
    nodes = sorted(nodes)
    node_index = {node: i for i, node in enumerate(nodes)}
    
    # Initialize distance matrix
    n = len(nodes)
    dist = np.full((n, n), np.inf)
    np.fill_diagonal(dist, 0)
    
    # Add direct edges
    for u, v in edge_list:
        i, j = node_index[u], node_index[v]
        dist[i][j] = 1
        dist[j][i] = 1
    
    # Floyd-Warshall algorithm for all-pairs shortest paths
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    
    return nodes, node_index, dist

def mds_layout(shortest_path_dist, dim=2):
    n = shortest_path_dist.shape[0]
    
    # Double centering
    J = np.eye(n) - np.ones((n, n)) / n
    B = -0.5 * J @ (shortest_path_dist ** 2) @ J
    
    # Eigen decomposition
    eigenvalues, eigenvectors = np.linalg.eigh(B)
    
    # Sort eigenvalues and eigenvectors in descending order
    idx = np.argsort(eigenvalues)[::-1]
    eigenvalues = eigenvalues[idx]
    eigenvectors = eigenvectors[:, idx]
    
    # Take top 'dim' eigenvectors
    pos = eigenvectors[:, :dim] * np.sqrt(eigenvalues[:dim])
    
    return pos

def generate_layout(edge_list):
    # Compute shortest paths
    nodes, node_index, shortest_path_dist = compute_shortest_paths(edge_list)
    
    # Handle disconnected components (set large finite distance)
    max_dist = np.max(shortest_path_dist[shortest_path_dist != np.inf])
    shortest_path_dist[shortest_path_dist == np.inf] = max_dist * 10
    
    # Compute MDS layout
    positions = mds_layout(shortest_path_dist)
    
    # Normalize positions to [0, 100] range
    min_pos = np.min(positions, axis=0)
    max_pos = np.max(positions, axis=0)
    positions = (positions - min_pos) / (max_pos - min_pos) * 100
    
    # Create layout dictionary
    layout = {node: pos.tolist() for node, pos in zip(nodes, positions)}
    
    return layout

if __name__ == "__main__":
    edge_list = [('0', '1'), ('0', '11'), ('0', '2'), ('0', '3'), ('0', '4'), ('0', '5'), ('0', '6'), ('0', '7'), ('0', '8'), ('0', '9'), ('11', '10'), ('11', '12'), ('11', '13'), ('11', '14'), ('11', '15'), ('11', '23'), ('11', '24'), ('11', '25'), ('11', '26'), ('11', '27'), ('11', '28'), ('11', '29'), ('11', '31'), ('11', '32'), ('11', '33'), ('11', '34'), ('11', '35'), ('11', '36'), ('11', '37'), ('11', '38'), ('11', '43'), ('11', '44'), ('11', '48'), ('11', '49'), ('11', '51'), ('11', '55'), ('11', '58'), ('11', '64'), ('11', '68'), ('11', '69'), ('11', '70'), ('11', '71'), ('11', '72'), ('12', '23'), ('16', '17'), ('16', '18'), ('16', '19'), ('16', '20'), ('16', '21'), ('16', '22'), ('17', '18'), ('17', '19'), ('17', '20'), ('17', '21'), ('17', '22'), ('18', '19'), ('18', '20'), ('18', '21'), ('18', '22'), ('19', '20'), ('19', '21'), ('19', '22'), ('2', '11'), ('2', '3'), ('20', '21'), ('20', '22'), ('21', '22'), ('23', '16'), ('23', '17'), ('23', '18'), ('23', '19'), ('23', '20'), ('23', '21'), ('23', '22'), ('23', '24'), ('23', '25'), ('23', '27'), ('23', '29'), ('23', '30'), ('23', '31'), ('24', '25'), ('24', '26'), ('24', '27'), ('24', '41'), ('24', '42'), ('24', '50'), ('24', '68'), ('24', '69'), ('24', '70'), ('25', '26'), ('25', '27'), ('25', '39'), ('25', '40'), ('25', '41'), ('25', '42'), ('25', '48'), ('25', '55'), ('25', '68'), ('25', '69'), ('25', '70'), ('25', '71'), ('25', '75'), ('26', '16'), ('26', '27'), ('26', '43'), ('26', '49'), ('26', '51'), ('26', '54'), ('26', '55'), ('26', '72'), ('27', '28'), ('27', '29'), ('27', '31'), ('27', '33'), ('27', '43'), ('27', '48'), ('27', '58'), ('27', '68'), ('27', '69'), ('27', '70'), ('27', '71'), ('27', '72'), ('28', '44'), ('28', '45'), ('29', '34'), ('29', '35'), ('29', '36'), ('29', '37'), ('29', '38'), ('3', '11'), ('31', '30'), ('34', '35'), ('34', '36'), ('34', '37'), ('34', '38'), ('35', '36'), ('35', '37'), ('35', '38'), ('36', '37'), ('36', '38'), ('37', '38'), ('39', '52'), ('41', '42'), ('41', '57'), ('41', '62'), ('41', '75'), ('46', '47'), ('48', '47'), ('48', '55'), ('48', '57'), ('48', '58'), ('48', '59'), ('48', '60'), ('48', '61'), ('48', '62'), ('48', '63'), ('48', '64'), ('48', '65'), ('48', '66'), ('48', '68'), ('48', '69'), ('48', '71'), ('48', '73'), ('48', '74'), ('48', '75'), ('48', '76'), ('49', '50'), ('49', '51'), ('49', '54'), ('49', '55'), ('49', '56'), ('51', '52'), ('51', '53'), ('51', '54'), ('51', '55'), ('55', '16'), ('55', '39'), ('55', '41'), ('55', '54'), ('55', '56'), ('55', '57'), ('55', '58'), ('55', '59'), ('55', '61'), ('55', '62'), ('55', '63'), ('55', '64'), ('55', '65'), ('57', '59'), ('57', '61'), ('57', '62'), ('57', '63'), ('57', '65'), ('57', '67'), ('58', '57'), ('58', '59'), ('58', '60'), ('58', '61'), ('58', '62'), ('58', '63'), ('58', '64'), ('58', '65'), ('58', '66'), ('58', '70'), ('58', '76'), ('59', '60'), ('59', '61'), ('59', '63'), ('59', '65'), ('59', '66'), ('60', '61'), ('60', '63'), ('60', '65'), ('60', '66'), ('61', '63'), ('61', '65'), ('61', '66'), ('62', '59'), ('62', '60'), ('62', '61'), ('62', '63'), ('62', '65'), ('62', '66'), ('62', '76'), ('63', '65'), ('63', '66'), ('63', '76'), ('64', '57'), ('64', '59'), ('64', '60'), ('64', '61'), ('64', '62'), ('64', '63'), ('64', '65'), ('64', '66'), ('64', '76'), ('65', '66'), ('65', '76'), ('66', '76'), ('68', '41'), ('68', '69'), ('68', '70'), ('68', '71'), ('68', '75'), ('69', '41'), ('69', '70'), ('69', '71'), ('69', '75'), ('70', '41'), ('70', '71'), ('70', '75'), ('71', '41'), ('71', '75'), ('73', '74')]
    
    layout = generate_layout(edge_list)
    
    # Output the layout in JSON format
    print(json.dumps(layout, indent=2))
```

This script:

1. Computes all-pairs shortest path distances using the Floyd-Warshall algorithm
2. Uses Multidimensional Scaling (MDS) to find node positions that approximate these distances in 2D space
3. Handles disconnected components by assigning them large finite distances
4. Normalizes the positions to a [0, 100] range
5. Outputs the layout in JSON format

The MDS approach tries to position nodes so that their Euclidean distances in the layout match their graph-theoretic distances as closely as possible. Nodes that are close in the graph will be positioned near each other, while distant nodes will be positioned far apart.

The output is a JSON dictionary where keys are node IDs and values are [x, y] coordinate pairs.