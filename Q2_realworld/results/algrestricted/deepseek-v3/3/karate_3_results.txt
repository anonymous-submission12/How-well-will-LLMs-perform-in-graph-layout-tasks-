Here's a Python script that generates a graph layout by attempting to minimize edge crossings. The approach uses a force-directed layout algorithm (which is implemented from scratch as per your requirements) to position nodes in a way that minimizes edge crossings and keeps connected nodes close together.

```python
import json
import random
import math

def calculate_repulsive_force(pos1, pos2, k):
    dx = pos1[0] - pos2[0]
    dy = pos1[1] - pos2[1]
    distance = max(math.sqrt(dx*dx + dy*dy), 0.1)
    force = k * k / distance
    return (force * dx / distance, force * dy / distance)

def calculate_attractive_force(pos1, pos2, k):
    dx = pos1[0] - pos2[0]
    dy = pos1[1] - pos2[1]
    distance = max(math.sqrt(dx*dx + dy*dy), 0.1)
    force = distance * distance / k
    return (force * dx / distance, force * dy / distance)

def layout_graph(edge_list, iterations=100, temperature=1.0, cooling_factor=0.95):
    nodes = list(set(node for edge in edge_list for node in edge))
    positions = {node: (random.random(), random.random()) for node in nodes}
    k = math.sqrt(1.0 / len(nodes))  # Optimal distance between nodes
    
    for _ in range(iterations):
        forces = {node: (0, 0) for node in nodes}
        
        # Calculate repulsive forces (between all pairs)
        for i, node1 in enumerate(nodes):
            for node2 in nodes[i+1:]:
                fx, fy = calculate_repulsive_force(positions[node1], positions[node2], k)
                forces[node1] = (forces[node1][0] + fx, forces[node1][1] + fy)
                forces[node2] = (forces[node2][0] - fx, forces[node2][1] - fy)
        
        # Calculate attractive forces (between connected nodes)
        for u, v in edge_list:
            fx, fy = calculate_attractive_force(positions[u], positions[v], k)
            forces[u] = (forces[u][0] - fx, forces[u][1] - fy)
            forces[v] = (forces[v][0] + fx, forces[v][1] + fy)
        
        # Update positions
        for node in nodes:
            dx, dy = forces[node]
            dx *= temperature
            dy *= temperature
            positions[node] = (positions[node][0] + dx, positions[node][1] + dy)
        
        # Cool down temperature
        temperature *= cooling_factor
    
    return positions

def positions_to_json(positions):
    return json.dumps({k: {"x": v[0], "y": v[1]} for k, v in positions.items()}, indent=2)

# Example usage
edge_list = [('0', '1'), ('0', '10'), ('0', '11'), ('0', '12'), ('0', '13'), ('0', '17'), ('0', '19'), ('0', '2'), ('0', '21'), ('0', '3'), ('0', '31'), ('0', '4'), ('0', '5'), ('0', '6'), ('0', '7'), ('0', '8'), ('1', '13'), ('1', '17'), ('1', '19'), ('1', '2'), ('1', '21'), ('1', '3'), ('1', '30'), ('1', '7'), ('13', '33'), ('19', '33'), ('2', '13'), ('2', '27'), ('2', '28'), ('2', '3'), ('2', '32'), ('2', '7'), ('2', '8'), ('2', '9'), ('23', '25'), ('23', '29'), ('25', '24'), ('27', '23'), ('27', '24'), ('27', '33'), ('28', '33'), ('29', '26'), ('3', '12'), ('3', '13'), ('3', '7'), ('30', '32'), ('30', '33'), ('31', '24'), ('31', '25'), ('31', '28'), ('31', '32'), ('31', '33'), ('32', '14'), ('32', '15'), ('32', '18'), ('32', '20'), ('32', '22'), ('32', '23'), ('32', '29'), ('32', '33'), ('33', '14'), ('33', '15'), ('33', '18'), ('33', '20'), ('33', '22'), ('33', '23'), ('33', '26'), ('33', '29'), ('4', '10'), ('4', '6'), ('5', '10'), ('5', '16'), ('5', '6'), ('6', '16'), ('8', '30'), ('8', '32'), ('8', '33'), ('9', '33')]

positions = layout_graph(edge_list)
json_output = positions_to_json(positions)
print(json_output)
```

This script implements a basic force-directed layout algorithm from scratch. The algorithm works by:
1. Treating nodes as charged particles that repel each other
2. Treating edges as springs that pull connected nodes together
3. Iteratively adjusting node positions based on these forces
4. Gradually reducing the movement (simulated annealing) to allow the layout to stabilize

The output is a JSON representation of the node positions, which you can use for visualization or other purposes. The algorithm attempts to minimize edge crossings by keeping connected nodes close together while pushing unconnected nodes apart.

You can adjust the parameters (iterations, initial temperature, cooling factor) to get different layouts. More iterations will generally produce better results but take longer to compute.