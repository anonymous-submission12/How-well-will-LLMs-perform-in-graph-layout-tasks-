Below is the Python script to generate a graph layout based on the input edge list using the Kamada-Kawai layout algorithm, which maintains consistency between Euclidean distance and graph-theoretic distance. The final output is the graph layout in JSON format.

```python
import json
import networkx as nx

def generate_graph_layout(edge_list):
    # Create a NetworkX graph from the edge list
    G = nx.Graph()
    G.add_edges_from(edge_list)
    
    # Generate the layout using the Kamada-Kawai algorithm
    layout = nx.kamada_kawai_layout(G)
    
    # Convert the layout dictionary to a JSON-compatible format
    layout_json = {node: [float(coord) for coord in pos] for node, pos in layout.items()}
    
    return json.dumps(layout_json, indent=4)

# Input edge list
edge_list = [
    ('0', '1'), ('0', '10'), ('0', '11'), ('0', '12'), ('0', '13'), ('0', '17'),
    ('0', '19'), ('0', '2'), ('0', '21'), ('0', '3'), ('0', '31'), ('0', '4'),
    ('0', '5'), ('0', '6'), ('0', '7'), ('0', '8'), ('1', '13'), ('1', '17'),
    ('1', '19'), ('1', '2'), ('1', '21'), ('1', '3'), ('1', '30'), ('1', '7'),
    ('13', '33'), ('19', '33'), ('2', '13'), ('2', '27'), ('2', '28'), ('2', '3'),
    ('2', '32'), ('2', '7'), ('2', '8'), ('2', '9'), ('23', '25'), ('23', '29'),
    ('25', '24'), ('27', '23'), ('27', '24'), ('27', '33'), ('28', '33'), ('29', '26'),
    ('3', '12'), ('3', '13'), ('3', '7'), ('30', '32'), ('30', '33'), ('31', '24'),
    ('31', '25'), ('31', '28'), ('31', '32'), ('31', '33'), ('32', '14'), ('32', '15'),
    ('32', '18'), ('32', '20'), ('32', '22'), ('32', '23'), ('32', '29'), ('32', '33'),
    ('33', '14'), ('33', '15'), ('33', '18'), ('33', '20'), ('33', '22'), ('33', '23'),
    ('33', '26'), ('33', '29'), ('4', '10'), ('4', '6'), ('5', '10'), ('5', '16'),
    ('5', '6'), ('6', '16'), ('8', '30'), ('8', '32'), ('8', '33'), ('9', '33')
]

# Generate and print the graph layout in JSON format
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Graph Creation**: The `networkx` library is used to create a graph object `G` from the provided edge list.
2. **Kamada-Kawai Layout**: The `nx.kamada_kawai_layout` function calculates positions of nodes based on graph-theoretic distances while maintaining a relationship with Euclidean distances.
3. **JSON Formatting**: The positions are formatted into a dictionary where node keys map to position coordinates (a list of x, y values).
4. **JSON Output**: The `json.dumps` method is used to create a human-readable string representation of the layout in JSON format. Each position is converted to a `float` for compatibility.

You simply run the script, and it will output the layout in JSON format as required.