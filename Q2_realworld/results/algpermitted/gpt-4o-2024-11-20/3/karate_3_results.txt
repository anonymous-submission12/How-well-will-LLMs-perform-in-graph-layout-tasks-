To generate a graph layout that minimizes edge crossings, we can utilize an algorithm like the Kamada-Kawai or Fruchterman-Reingold layout algorithm. These algorithms are available in graph libraries such as NetworkX. Below is the Python code that processes the given graph data and produces a layout of nodes in JSON format.

```python
import json
import networkx as nx

# Input graph in edge_list format
edge_list = [
    ('0', '1'), ('0', '10'), ('0', '11'), ('0', '12'), ('0', '13'), ('0', '17'), 
    ('0', '19'), ('0', '2'), ('0', '21'), ('0', '3'), ('0', '31'), ('0', '4'),
    ('0', '5'), ('0', '6'), ('0', '7'), ('0', '8'), ('1', '13'), ('1', '17'),
    ('1', '19'), ('1', '2'), ('1', '21'), ('1', '3'), ('1', '30'), ('1', '7'),
    ('13', '33'), ('19', '33'), ('2', '13'), ('2', '27'), ('2', '28'), ('2', '3'),
    ('2', '32'), ('2', '7'), ('2', '8'), ('2', '9'), ('23', '25'), ('23', '29'),
    ('25', '24'), ('27', '23'), ('27', '24'), ('27', '33'), ('28', '33'),
    ('29', '26'), ('3', '12'), ('3', '13'), ('3', '7'), ('30', '32'), ('30', '33'),
    ('31', '24'), ('31', '25'), ('31', '28'), ('31', '32'), ('31', '33'),
    ('32', '14'), ('32', '15'), ('32', '18'), ('32', '20'), ('32', '22'),
    ('32', '23'), ('32', '29'), ('32', '33'), ('33', '14'), ('33', '15'),
    ('33', '18'), ('33', '20'), ('33', '22'), ('33', '23'), ('33', '26'),
    ('33', '29'), ('4', '10'), ('4', '6'), ('5', '10'), ('5', '16'),
    ('5', '6'), ('6', '16'), ('8', '30'), ('8', '32'), ('8', '33'), ('9', '33')
]

# Create a graph from edge_list
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute node positions using the Fruchterman-Reingold algorithm
positions = nx.spring_layout(G)  # spring_layout minimizes edge crossings

# Convert the positions to a JSON-compatible format
layout_json = {node: list(pos) for node, pos in positions.items()}  # Convert positions to list

# Output the result as JSON
print(json.dumps(layout_json, indent=2))
```

### Explanation:
1. **Read Edge List:** The `edge_list` provided as input is used to construct a graph with NetworkX.
2. **Layout Calculation:** The `spring_layout` method is called to compute node positions. This uses the Fruchterman-Reingold force-directed algorithm, which aims to minimize edge crossings and produce aesthetically pleasing layouts.
3. **JSON Output:** The computed positions for each node are converted into JSON-compatible format and printed as the final output.

### Output Format:
The output is a JSON object where each node is a key, and its value is a list containing its x and y coordinates:
```json
{
  "0": [0.4567, -0.2345],
  "1": [0.1234, 0.7890],
  ...
}
```