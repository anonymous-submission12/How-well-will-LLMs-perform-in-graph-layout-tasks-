Below is the Python script that generates a graph layout in JSON format. The script uses the `networkx` library for graph manipulation and the `community` library for community detection. The layout is generated using the `spring_layout` algorithm, which is suitable for visualizing community structures.

```python
import networkx as nx
import community as community_louvain
import json

# Input graph data
edge_list = [
    ('0', '1'), ('0', '10'), ('0', '11'), ('0', '12'), ('0', '13'), ('0', '17'), ('0', '19'), ('0', '2'), ('0', '21'), 
    ('0', '3'), ('0', '31'), ('0', '4'), ('0', '5'), ('0', '6'), ('0', '7'), ('0', '8'), ('1', '13'), ('1', '17'), 
    ('1', '19'), ('1', '2'), ('1', '21'), ('1', '3'), ('1', '30'), ('1', '7'), ('13', '33'), ('19', '33'), ('2', '13'), 
    ('2', '27'), ('2', '28'), ('2', '3'), ('2', '32'), ('2', '7'), ('2', '8'), ('2', '9'), ('23', '25'), ('23', '29'), 
    ('25', '24'), ('27', '23'), ('27', '24'), ('27', '33'), ('28', '33'), ('29', '26'), ('3', '12'), ('3', '13'), 
    ('3', '7'), ('30', '32'), ('30', '33'), ('31', '24'), ('31', '25'), ('31', '28'), ('31', '32'), ('31', '33'), 
    ('32', '14'), ('32', '15'), ('32', '18'), ('32', '20'), ('32', '22'), ('32', '23'), ('32', '29'), ('32', '33'), 
    ('33', '14'), ('33', '15'), ('33', '18'), ('33', '20'), ('33', '22'), ('33', '23'), ('33', '26'), ('33', '29'), 
    ('4', '10'), ('4', '6'), ('5', '10'), ('5', '16'), ('5', '6'), ('6', '16'), ('8', '30'), ('8', '32'), ('8', '33'), 
    ('9', '33')
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Detect communities using the Louvain method
partition = community_louvain.best_partition(G)

# Generate a layout for the graph
# Use spring_layout to keep the community structure clear
pos = nx.spring_layout(G)

# Combine positions and community information into a JSON-compatible format
layout = {
    "nodes": [
        {"id": node, "x": pos[node][0], "y": pos[node][1], "community": partition[node]}
        for node in G.nodes()
    ]
}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: The script creates a graph `G` using the `networkx` library and populates it with the provided edge list.
2. **Community Detection**: The `community_louvain.best_partition` function is used to detect communities in the graph. Each node is assigned a community label.
3. **Layout Generation**: The `spring_layout` algorithm is used to generate positions for the nodes. This algorithm is suitable for visualizing community structures as it places nodes in a way that minimizes edge crossings and keeps related nodes closer.
4. **JSON Output**: The positions and community labels are combined into a JSON-compatible format, where each node has an `id`, `x` and `y` coordinates, and a `community` label.

### Output:
The script outputs the graph layout in JSON format, which can be used for further processing or visualization in external tools.