Here's a Python script that uses the `networkx` library to compute a graph layout with minimized edge crossings (using the spring layout algorithm) and outputs the positions in JSON format:

```python
import networkx as nx
import json

# Input edge list
edge_list = [
    ('0', '1'), ('0', '10'), ('0', '11'), ('0', '12'), ('0', '13'), ('0', '17'), ('0', '19'), ('0', '2'), ('0', '21'), ('0', '3'), ('0', '31'), ('0', '4'), ('0', '5'), ('0', '6'), ('0', '7'), ('0', '8'), 
    ('1', '13'), ('1', '17'), ('1', '19'), ('1', '2'), ('1', '21'), ('1', '3'), ('1', '30'), ('1', '7'), 
    ('13', '33'), ('19', '33'), 
    ('2', '13'), ('2', '27'), ('2', '28'), ('2', '3'), ('2', '32'), ('2', '7'), ('2', '8'), ('2', '9'), 
    ('23', '25'), ('23', '29'), 
    ('25', '24'), 
    ('27', '23'), ('27', '24'), ('27', '33'), 
    ('28', '33'), 
    ('29', '26'), 
    ('3', '12'), ('3', '13'), ('3', '7'), 
    ('30', '32'), ('30', '33'), 
    ('31', '24'), ('31', '25'), ('31', '28'), ('31', '32'), ('31', '33'), 
    ('32', '14'), ('32', '15'), ('32', '18'), ('32', '20'), ('32', '22'), ('32', '23'), ('32', '29'), ('32', '33'), 
    ('33', '14'), ('33', '15'), ('33', '18'), ('33', '20'), ('33', '22'), ('33', '23'), ('33', '26'), ('33', '29'), 
    ('4', '10'), ('4', '6'), 
    ('5', '10'), ('5', '16'), ('5', '6'), 
    ('6', '16'), 
    ('8', '30'), ('8', '32'), ('8', '33'), 
    ('9', '33')
]

# Create graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute layout (using spring layout which minimizes edge crossings)
pos = nx.spring_layout(G, k=0.3, iterations=50)

# Convert positions to JSON-serializable format
layout = {str(node): [float(pos[node][0]), float(pos[node][1])] for node in G.nodes()}

# Output JSON
print(json.dumps(layout, indent=2))
```

This script:
1. Creates a graph from the edge list
2. Uses the spring layout algorithm (Fruchterman-Reingold force-directed algorithm) to compute node positions that minimize edge crossings
3. Converts the positions to a JSON format where each node is mapped to its [x, y] coordinates
4. Prints the JSON output

The spring layout parameters (`k` and `iterations`) can be adjusted to change the spacing and quality of the layout. The `k` parameter controls the optimal distance between nodes, and `iterations` controls how long the algorithm runs to optimize the layout.

The output will be a JSON object with node IDs as keys and 2D coordinate arrays as values.