To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we arrange the nodes in a circular layout. This is a common method to reduce edge crossings, especially for cyclic graphs like the one provided.

Here is a Python script that generates a circular layout for the given graph and outputs the layout in JSON format:

```python
import json
import math

def generate_circular_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = sorted(set([node for edge in edge_list for node in edge]))
    num_nodes = len(nodes)
    
    # Calculate the angle between each node
    angle_increment = (2 * math.pi) / num_nodes
    
    # Generate positions for each node in a circular layout
    layout = {}
    radius = 100  # Radius of the circle
    for i, node in enumerate(nodes):
        angle = i * angle_increment
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        layout[node] = {"x": x, "y": y}
    
    return layout

# Example usage
edge_list = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21)]
layout = generate_circular_layout(edge_list)

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Extract Unique Nodes**: We first extract all unique nodes from the edge list.
2. **Calculate Angles**: We calculate the angle increment between each node to evenly distribute them around a circle.
3. **Generate Positions**: Using the calculated angles, we generate the `(x, y)` positions for each node on the circumference of a circle with a given radius.
4. **Output JSON**: Finally, we output the layout in JSON format.

### Output Example:
The output will be a JSON object where each key is a node, and the value is a dictionary containing the `x` and `y` coordinates of that node.

```json
{
    "0": {
        "x": 100.0,
        "y": 0.0
    },
    "1": {
        "x": 95.10565162951536,
        "y": 30.901699437494745
    },
    "2": {
        "x": 80.90169943749473,
        "y": 58.77852522924732
    },
    ...
    "21": {
        "x": 95.10565162951536,
        "y": -30.901699437494738
    }
}
```

This layout will minimize edge crossings for the given graph, especially since the graph is a simple linear chain that can be easily represented in a circular layout.