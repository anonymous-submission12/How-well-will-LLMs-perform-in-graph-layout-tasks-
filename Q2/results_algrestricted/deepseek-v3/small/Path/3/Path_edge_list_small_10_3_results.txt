To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we place the nodes in a circular layout. This is a common method to reduce edge crossings, especially for cyclic graphs like the one provided.

Here is the Python code to generate the layout:

```python
import math
import json

def generate_circular_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = sorted(set([node for edge in edge_list for node in edge]))
    
    # Calculate the positions for each node in a circular layout
    num_nodes = len(nodes)
    radius = 1.0  # Radius of the circle
    angle = 2 * math.pi / num_nodes  # Angle between nodes
    
    layout = {}
    for i, node in enumerate(nodes):
        x = radius * math.cos(i * angle)
        y = radius * math.sin(i * angle)
        layout[node] = (x, y)
    
    return layout

# Provided edge list
edge_list = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), 
             (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), 
             (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), 
             (26, 27), (27, 28), (28, 29)]

# Generate the layout
layout = generate_circular_layout(edge_list)

# Convert the layout to JSON format
layout_json = json.dumps(layout, indent=4)

# Output the layout in JSON format
print(layout_json)
```

### Explanation:
1. **Extract Unique Nodes**: We first extract all unique nodes from the edge list.
2. **Circular Layout Calculation**: We calculate the positions of the nodes in a circular layout. The nodes are evenly spaced around a circle with a given radius.
3. **JSON Output**: The layout is then converted to JSON format for easy readability and further use.

### Output:
The output will be a JSON object where each key is a node, and the value is a tuple representing the `(x, y)` coordinates of the node in the layout.

```json
{
    "0": [1.0, 0.0],
    "1": [0.8090169943749475, 0.5877852522924731],
    "2": [0.30901699437494745, 0.9510565162951535],
    "3": [-0.30901699437494734, 0.9510565162951536],
    "4": [-0.8090169943749473, 0.5877852522924732],
    "5": [-1.0, 1.2246467991473532e-16],
    "6": [-0.8090169943749475, -0.587785252292473],
    "7": [-0.30901699437494756, -0.9510565162951535],
    "8": [0.30901699437494723, -0.9510565162951536],
    "9": [0.8090169943749473, -0.5877852522924732],
    "10": [1.0, -2.4492935982947064e-16],
    "11": [0.8090169943749475, 0.587785252292473],
    "12": [0.30901699437494756, 0.9510565162951535],
    "13": [-0.30901699437494723, 0.9510565162951536],
    "14": [-0.8090169943749473, 0.5877852522924732],
    "15": [-1.0, 3.6739403974420594e-16],
    "16": [-0.8090169943749475, -0.587785252292473],
    "17": [-0.30901699437494756, -0.9510565162951535],
    "18": [0.30901699437494723, -0.9510565162951536],
    "19": [0.8090169943749473, -0.5877852522924732],
    "20": [1.0, -4.898587196589413e-16],
    "21": [0.8090169943749475, 0.587785252292473],
    "22": [0.30901699437494756, 0.9510565162951535],
    "23": [-0.30901699437494723, 0.9510565162951536],
    "24": [-0.8090169943749473, 0.5877852522924732],
    "25": [-1.0, 6.123233995736766e-16],
    "26": [-0.8090169943749475, -0.587785252292473],
    "27": [-0.30901699437494756, -0.9510565162951535],
    "28": [0.30901699437494723, -0.9510565162951536],
    "29": [0.8090169943749473, -0.5877852522924732]
}
```

This layout places the nodes in a circular arrangement, which should minimize edge crossings for the given graph.