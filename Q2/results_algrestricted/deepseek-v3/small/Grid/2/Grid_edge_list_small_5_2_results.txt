To generate a layout for the graph that maintains consistency between Euclidean distance and graph-theoretic distance, we can use a force-directed layout approach. This approach simulates physical forces between nodes and edges to position the nodes in a way that minimizes the energy of the system.

Below is a Python script that implements a simple force-directed layout algorithm. The script will output the graph layout in JSON format.

```python
import json
import random
import math

# Define the graph as an edge list
edge_list = [
    (0, 1), (0, 6), (1, 2), (1, 7), (2, 3), (2, 8), (3, 4), (3, 9), (4, 5), (4, 10),
    (5, 11), (6, 7), (6, 12), (7, 8), (7, 13), (8, 9), (8, 14), (9, 10), (9, 15),
    (10, 11), (10, 16), (11, 17), (12, 13), (12, 18), (13, 14), (13, 19), (14, 15),
    (14, 20), (15, 16), (15, 21), (16, 17), (16, 22), (17, 23), (18, 19), (18, 24),
    (19, 20), (19, 25), (20, 21), (20, 26), (21, 22), (21, 27), (22, 23), (22, 28),
    (23, 29), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29)
]

# Initialize node positions randomly
nodes = set()
for edge in edge_list:
    nodes.add(edge[0])
    nodes.add(edge[1])
nodes = list(nodes)
positions = {node: (random.uniform(0, 1), random.uniform(0, 1)) for node in nodes}

# Parameters for the force-directed layout
k = 1.0  # Optimal distance between nodes
iterations = 100
temperature = 1.0
cooling_factor = 0.95

# Force-directed layout algorithm
for iteration in range(iterations):
    # Calculate repulsive forces
    for node1 in nodes:
        for node2 in nodes:
            if node1 != node2:
                dx = positions[node2][0] - positions[node1][0]
                dy = positions[node2][1] - positions[node1][1]
                distance = math.sqrt(dx**2 + dy**2)
                if distance > 0:
                    force = k**2 / distance
                    positions[node1] = (
                        positions[node1][0] - force * dx / distance,
                        positions[node1][1] - force * dy / distance
                    )

    # Calculate attractive forces
    for edge in edge_list:
        node1, node2 = edge
        dx = positions[node2][0] - positions[node1][0]
        dy = positions[node2][1] - positions[node1][1]
        distance = math.sqrt(dx**2 + dy**2)
        if distance > 0:
            force = distance**2 / k
            positions[node1] = (
                positions[node1][0] + force * dx / distance,
                positions[node1][1] + force * dy / distance
            )
            positions[node2] = (
                positions[node2][0] - force * dx / distance,
                positions[node2][1] - force * dy / distance
            )

    # Cool down the temperature
    temperature *= cooling_factor

# Normalize positions to fit within a unit square
min_x = min(pos[0] for pos in positions.values())
max_x = max(pos[0] for pos in positions.values())
min_y = min(pos[1] for pos in positions.values())
max_y = max(pos[1] for pos in positions.values())

for node in positions:
    x, y = positions[node]
    x = (x - min_x) / (max_x - min_x)
    y = (y - min_y) / (max_y - min_y)
    positions[node] = (x, y)

# Output the layout in JSON format
layout_json = json.dumps(positions, indent=4)
print(layout_json)
```

### Explanation:
1. **Initialization**: The nodes are initialized with random positions within a unit square.
2. **Force-Directed Layout**: The algorithm iteratively calculates repulsive forces between all pairs of nodes and attractive forces between connected nodes. The forces are used to update the positions of the nodes.
3. **Cooling**: The temperature is reduced over iterations to allow the system to settle into a stable configuration.
4. **Normalization**: The positions are normalized to fit within a unit square.
5. **Output**: The final positions are output in JSON format.

This script will generate a layout where the Euclidean distance between nodes approximates their graph-theoretic distance. The output is a JSON object where each key is a node ID and the value is a tuple representing the node's position in 2D space.