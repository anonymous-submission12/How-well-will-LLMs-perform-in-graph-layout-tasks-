To generate a layout for the graph that maintains consistency between Euclidean distance and graph-theoretic distance, we can use a force-directed layout approach. This approach simulates physical forces between nodes and edges to position the nodes in a way that minimizes edge crossings and keeps connected nodes close together.

Below is a Python script that implements a simple force-directed layout algorithm. The script will output the graph layout in JSON format.

```python
import json
import random
import math

# Define the graph as an edge list
edge_list = [(0, 1), (0, 5), (1, 2), (1, 6), (2, 3), (2, 7), (3, 4), (3, 8), (4, 9), 
              (5, 6), (5, 10), (6, 7), (6, 11), (7, 8), (7, 12), (8, 9), (8, 13), 
              (9, 14), (10, 11), (10, 15), (11, 12), (11, 16), (12, 13), (12, 17), 
              (13, 14), (13, 18), (14, 19), (15, 16), (15, 20), (16, 17), (16, 21), 
              (17, 18), (17, 22), (18, 19), (18, 23), (19, 24), (20, 21), (21, 22), 
              (22, 23), (23, 24)]

# Initialize node positions randomly
nodes = set()
for edge in edge_list:
    nodes.add(edge[0])
    nodes.add(edge[1])
nodes = list(nodes)

# Initialize positions randomly
positions = {node: (random.uniform(0, 100), random.uniform(0, 100)) for node in nodes}

# Parameters for the force-directed layout
k = 1.0  # Spring constant
repulsion_constant = 100.0  # Repulsion constant
iterations = 1000
cooling_factor = 0.99

# Force-directed layout algorithm
for iteration in range(iterations):
    # Calculate repulsive forces
    for i in range(len(nodes)):
        for j in range(i + 1, len(nodes)):
            node1 = nodes[i]
            node2 = nodes[j]
            x1, y1 = positions[node1]
            x2, y2 = positions[node2]
            dx = x2 - x1
            dy = y2 - y1
            distance = math.sqrt(dx**2 + dy**2)
            if distance > 0:
                force = repulsion_constant / distance**2
                fx = force * dx / distance
                fy = force * dy / distance
                positions[node1] = (x1 - fx, y1 - fy)
                positions[node2] = (x2 + fx, y2 + fy)

    # Calculate attractive forces (spring forces)
    for edge in edge_list:
        node1, node2 = edge
        x1, y1 = positions[node1]
        x2, y2 = positions[node2]
        dx = x2 - x1
        dy = y2 - y1
        distance = math.sqrt(dx**2 + dy**2)
        if distance > 0:
            force = k * distance
            fx = force * dx / distance
            fy = force * dy / distance
            positions[node1] = (x1 + fx, y1 + fy)
            positions[node2] = (x2 - fx, y2 - fy)

    # Cooling down the system
    repulsion_constant *= cooling_factor

# Normalize positions to fit within a unit square
min_x = min(pos[0] for pos in positions.values())
max_x = max(pos[0] for pos in positions.values())
min_y = min(pos[1] for pos in positions.values())
max_y = max(pos[1] for pos in positions.values())

for node in positions:
    x, y = positions[node]
    x = (x - min_x) / (max_x - min_x)
    y = (y - min_y) / (max_y - min_y)
    positions[node] = (x, y)

# Output the layout in JSON format
layout_json = json.dumps(positions, indent=4)
print(layout_json)
```

### Explanation:
1. **Initialization**: The nodes are initialized with random positions within a 100x100 grid.
2. **Force-Directed Layout**:
   - **Repulsive Forces**: Nodes repel each other to avoid overlap.
   - **Attractive Forces**: Connected nodes attract each other to keep edges short.
3. **Cooling Factor**: The repulsion constant is reduced over iterations to allow the system to settle.
4. **Normalization**: The positions are normalized to fit within a unit square (0 to 1 in both x and y dimensions).
5. **Output**: The final positions are output in JSON format.

This script will generate a layout where the Euclidean distance between nodes approximates their graph-theoretic distance, resulting in a visually pleasing and meaningful arrangement of the graph.