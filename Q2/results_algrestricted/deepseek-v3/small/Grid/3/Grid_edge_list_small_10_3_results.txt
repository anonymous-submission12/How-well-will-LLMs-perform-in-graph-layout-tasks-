To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we arrange the nodes in a grid-like structure. This approach is not as sophisticated as force-directed algorithms, but it can help reduce edge crossings by placing connected nodes close to each other.

Hereâ€™s a Python script that generates a layout for the given graph:

```python
import json

def generate_layout(edge_list):
    # Determine the number of nodes
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    num_nodes = len(nodes)
    
    # Arrange nodes in a grid-like structure
    # Assuming a square grid for simplicity
    grid_size = int(num_nodes ** 0.5) + 1
    positions = {}
    for i, node in enumerate(sorted(nodes)):
        row = i // grid_size
        col = i % grid_size
        positions[node] = (col, row)
    
    # Convert positions to JSON format
    layout = {str(node): pos for node, pos in positions.items()}
    return json.dumps(layout, indent=4)

# Example usage
edge_list = [
    (0, 1), (0, 10), (1, 2), (1, 11), (2, 3), (2, 12), (3, 4), (3, 13), 
    (4, 5), (4, 14), (5, 6), (5, 15), (6, 7), (6, 16), (7, 8), (7, 17), 
    (8, 9), (8, 18), (9, 19), (10, 11), (10, 20), (11, 12), (11, 21), 
    (12, 13), (12, 22), (13, 14), (13, 23), (14, 15), (14, 24), (15, 16), 
    (15, 25), (16, 17), (16, 26), (17, 18), (17, 27), (18, 19), (18, 28), 
    (19, 29), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), 
    (26, 27), (27, 28), (28, 29)
]

layout_json = generate_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Node Extraction**: The script first extracts all unique nodes from the edge list.
2. **Grid Layout**: The nodes are then arranged in a grid-like structure. The grid size is determined by the square root of the number of nodes, rounded up.
3. **Position Assignment**: Each node is assigned a position in the grid, with the `(x, y)` coordinates corresponding to the column and row in the grid.
4. **JSON Output**: The positions are then converted to a JSON format, where each node is mapped to its `(x, y)` coordinates.

### Output:
The output will be a JSON object where each key is a node, and the value is a tuple representing the `(x, y)` position of the node in the grid.

```json
{
    "0": [0, 0],
    "1": [1, 0],
    "2": [2, 0],
    "3": [3, 0],
    "4": [4, 0],
    "5": [5, 0],
    "6": [6, 0],
    "7": [7, 0],
    "8": [8, 0],
    "9": [9, 0],
    "10": [0, 1],
    "11": [1, 1],
    "12": [2, 1],
    "13": [3, 1],
    "14": [4, 1],
    "15": [5, 1],
    "16": [6, 1],
    "17": [7, 1],
    "18": [8, 1],
    "19": [9, 1],
    "20": [0, 2],
    "21": [1, 2],
    "22": [2, 2],
    "23": [3, 2],
    "24": [4, 2],
    "25": [5, 2],
    "26": [6, 2],
    "27": [7, 2],
    "28": [8, 2],
    "29": [9, 2]
}
```

This layout arranges the nodes in a grid, which should help minimize edge crossings, especially for graphs with a regular structure.