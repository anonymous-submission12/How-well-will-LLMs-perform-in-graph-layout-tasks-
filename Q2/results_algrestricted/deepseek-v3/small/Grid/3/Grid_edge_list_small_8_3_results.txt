To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we place nodes in a grid-like structure. This approach is not as sophisticated as force-directed algorithms, but it can help reduce edge crossings by organizing nodes in a structured manner.

Hereâ€™s a Python script that generates a layout for the given graph:

```python
import json

def generate_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    nodes = sorted(list(nodes))
    
    # Determine the number of rows and columns for the grid
    num_nodes = len(nodes)
    rows = int(num_nodes ** 0.5)
    cols = (num_nodes + rows - 1) // rows
    
    # Assign positions to nodes in a grid-like structure
    layout = {}
    for i, node in enumerate(nodes):
        row = i // cols
        col = i % cols
        layout[node] = {"x": col, "y": row}
    
    return layout

# Input edge list
edge_list = [
    (0, 1), (0, 14), (1, 2), (1, 15), (2, 3), (2, 16), (3, 4), (3, 17), 
    (4, 5), (4, 18), (5, 6), (5, 19), (6, 7), (6, 20), (7, 8), (7, 21), 
    (8, 9), (8, 22), (9, 10), (9, 23), (10, 11), (10, 24), (11, 12), 
    (11, 25), (12, 13), (12, 26), (13, 27), (14, 15), (15, 16), (16, 17), 
    (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), 
    (24, 25), (25, 26), (26, 27)
]

# Generate the layout
layout = generate_layout(edge_list)

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Node Extraction**: The script first extracts all unique nodes from the edge list.
2. **Grid Layout**: It then calculates the number of rows and columns needed to arrange the nodes in a grid-like structure. The number of rows is determined by the square root of the number of nodes, and the number of columns is calculated accordingly.
3. **Position Assignment**: Each node is assigned a position in the grid, with `x` and `y` coordinates.
4. **Output**: The layout is output in JSON format, where each node is mapped to its position.

### Output Example:
```json
{
    "0": {"x": 0, "y": 0},
    "1": {"x": 1, "y": 0},
    "2": {"x": 2, "y": 0},
    "3": {"x": 3, "y": 0},
    "4": {"x": 4, "y": 0},
    "5": {"x": 5, "y": 0},
    "6": {"x": 0, "y": 1},
    "7": {"x": 1, "y": 1},
    "8": {"x": 2, "y": 1},
    "9": {"x": 3, "y": 1},
    "10": {"x": 4, "y": 1},
    "11": {"x": 5, "y": 1},
    "12": {"x": 0, "y": 2},
    "13": {"x": 1, "y": 2},
    "14": {"x": 2, "y": 2},
    "15": {"x": 3, "y": 2},
    "16": {"x": 4, "y": 2},
    "17": {"x": 5, "y": 2},
    "18": {"x": 0, "y": 3},
    "19": {"x": 1, "y": 3},
    "20": {"x": 2, "y": 3},
    "21": {"x": 3, "y": 3},
    "22": {"x": 4, "y": 3},
    "23": {"x": 5, "y": 3},
    "24": {"x": 0, "y": 4},
    "25": {"x": 1, "y": 4},
    "26": {"x": 2, "y": 4},
    "27": {"x": 3, "y": 4}
}
```

This layout places nodes in a grid, which helps to minimize edge crossings by keeping connected nodes relatively close to each other.