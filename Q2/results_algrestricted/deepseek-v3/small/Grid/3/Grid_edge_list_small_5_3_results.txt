To generate a layout for the graph that minimizes edge crossings, we can use a simple grid-based approach. The idea is to place nodes in a grid-like structure, which often helps in reducing edge crossings, especially for structured graphs like the one provided.

Here is a Python script that generates a layout for the graph and outputs it in JSON format:

```python
import json

def generate_layout(edge_list):
    # Determine the number of nodes
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    num_nodes = len(nodes)
    
    # Determine the grid size
    grid_size = int(num_nodes ** 0.5) + 1
    
    # Assign positions to nodes in a grid
    layout = {}
    for i in range(num_nodes):
        row = i // grid_size
        col = i % grid_size
        layout[i] = {"x": col, "y": row}
    
    return layout

# Provided edge list
edge_list = [
    (0, 1), (0, 6), (1, 2), (1, 7), (2, 3), (2, 8), (3, 4), (3, 9), 
    (4, 5), (4, 10), (5, 11), (6, 7), (6, 12), (7, 8), (7, 13), 
    (8, 9), (8, 14), (9, 10), (9, 15), (10, 11), (10, 16), (11, 17), 
    (12, 13), (12, 18), (13, 14), (13, 19), (14, 15), (14, 20), 
    (15, 16), (15, 21), (16, 17), (16, 22), (17, 23), (18, 19), 
    (18, 24), (19, 20), (19, 25), (20, 21), (20, 26), (21, 22), 
    (21, 27), (22, 23), (22, 28), (23, 29), (24, 25), (25, 26), 
    (26, 27), (27, 28), (28, 29)
]

# Generate the layout
layout = generate_layout(edge_list)

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Node Identification**: The script first identifies all unique nodes in the graph by iterating through the edge list.
2. **Grid Size Calculation**: It calculates the size of the grid needed to place all nodes. The grid size is determined by the square root of the number of nodes, rounded up.
3. **Position Assignment**: Nodes are assigned positions in a grid-like structure. The `x` and `y` coordinates are determined by the node's index in the list of unique nodes.
4. **JSON Output**: The layout is then output in JSON format, where each node is mapped to its `x` and `y` coordinates.

### Output Example:
```json
{
    "0": {"x": 0, "y": 0},
    "1": {"x": 1, "y": 0},
    "2": {"x": 2, "y": 0},
    "3": {"x": 3, "y": 0},
    "4": {"x": 4, "y": 0},
    "5": {"x": 5, "y": 0},
    "6": {"x": 0, "y": 1},
    "7": {"x": 1, "y": 1},
    "8": {"x": 2, "y": 1},
    "9": {"x": 3, "y": 1},
    "10": {"x": 4, "y": 1},
    "11": {"x": 5, "y": 1},
    "12": {"x": 0, "y": 2},
    "13": {"x": 1, "y": 2},
    "14": {"x": 2, "y": 2},
    "15": {"x": 3, "y": 2},
    "16": {"x": 4, "y": 2},
    "17": {"x": 5, "y": 2},
    "18": {"x": 0, "y": 3},
    "19": {"x": 1, "y": 3},
    "20": {"x": 2, "y": 3},
    "21": {"x": 3, "y": 3},
    "22": {"x": 4, "y": 3},
    "23": {"x": 5, "y": 3},
    "24": {"x": 0, "y": 4},
    "25": {"x": 1, "y": 4},
    "26": {"x": 2, "y": 4},
    "27": {"x": 3, "y": 4},
    "28": {"x": 4, "y": 4},
    "29": {"x": 5, "y": 4}
}
```

This layout places nodes in a grid, which should help in minimizing edge crossings for the given graph structure.