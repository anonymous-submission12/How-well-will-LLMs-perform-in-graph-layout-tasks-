To generate a layout for the graph that minimizes edge crossings, we can use a simple grid-based approach. The idea is to place nodes in a grid-like structure, which naturally reduces the number of edge crossings. Here's a Python script that generates a layout for the given graph:

```python
import json

def generate_layout(edge_list):
    # Determine the number of nodes
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    num_nodes = len(nodes)
    
    # Determine the grid size
    grid_size = int(num_nodes ** 0.5) + 1
    
    # Assign positions to nodes in a grid
    layout = {}
    for i, node in enumerate(sorted(nodes)):
        x = i % grid_size
        y = i // grid_size
        layout[node] = {"x": x, "y": y}
    
    return layout

# Input edge list
edge_list = [(0, 1), (0, 8), (1, 2), (1, 9), (2, 3), (2, 10), (3, 4), (3, 11), 
             (4, 5), (4, 12), (5, 6), (5, 13), (6, 7), (6, 14), (7, 15), (8, 9), 
             (8, 16), (9, 10), (9, 17), (10, 11), (10, 18), (11, 12), (11, 19), 
             (12, 13), (12, 20), (13, 14), (13, 21), (14, 15), (14, 22), (15, 23), 
             (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23)]

# Generate layout
layout = generate_layout(edge_list)

# Output layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Node Extraction**: The script first extracts all unique nodes from the edge list.
2. **Grid Size Calculation**: It calculates the size of the grid needed to place all nodes. The grid size is determined by the square root of the number of nodes, rounded up.
3. **Position Assignment**: Nodes are assigned positions in the grid. The `x` coordinate is determined by the node's index modulo the grid size, and the `y` coordinate is determined by the integer division of the node's index by the grid size.
4. **Output**: The layout is output in JSON format, where each node is mapped to its `(x, y)` position.

### Output Example:
```json
{
    "0": {
        "x": 0,
        "y": 0
    },
    "1": {
        "x": 1,
        "y": 0
    },
    "2": {
        "x": 2,
        "y": 0
    },
    "3": {
        "x": 3,
        "y": 0
    },
    "4": {
        "x": 4,
        "y": 0
    },
    "5": {
        "x": 0,
        "y": 1
    },
    "6": {
        "x": 1,
        "y": 1
    },
    "7": {
        "x": 2,
        "y": 1
    },
    "8": {
        "x": 3,
        "y": 1
    },
    "9": {
        "x": 4,
        "y": 1
    },
    "10": {
        "x": 0,
        "y": 2
    },
    "11": {
        "x": 1,
        "y": 2
    },
    "12": {
        "x": 2,
        "y": 2
    },
    "13": {
        "x": 3,
        "y": 2
    },
    "14": {
        "x": 4,
        "y": 2
    },
    "15": {
        "x": 0,
        "y": 3
    },
    "16": {
        "x": 1,
        "y": 3
    },
    "17": {
        "x": 2,
        "y": 3
    },
    "18": {
        "x": 3,
        "y": 3
    },
    "19": {
        "x": 4,
        "y": 3
    },
    "20": {
        "x": 0,
        "y": 4
    },
    "21": {
        "x": 1,
        "y": 4
    },
    "22": {
        "x": 2,
        "y": 4
    },
    "23": {
        "x": 3,
        "y": 4
    }
}
```

This layout places nodes in a grid, which should help minimize edge crossings. However, note that this is a simple heuristic and may not always produce the optimal layout for minimizing edge crossings.