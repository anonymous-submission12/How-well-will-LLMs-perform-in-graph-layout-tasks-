To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we place nodes in a grid-like structure. This approach is not as sophisticated as force-directed algorithms, but it can help reduce edge crossings by organizing nodes in a structured manner.

Here is a Python script that generates a layout for the given graph:

```python
import json

def generate_layout(edge_list):
    # Determine the number of nodes
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    num_nodes = len(nodes)
    
    # Create a grid layout
    grid_size = int(num_nodes ** 0.5) + 1
    layout = {}
    for i, node in enumerate(sorted(nodes)):
        row = i // grid_size
        col = i % grid_size
        layout[node] = {"x": col, "y": row}
    
    return layout

# Input edge list
edge_list = [(0, 1), (0, 12), (1, 2), (1, 13), (2, 3), (2, 14), (3, 4), (3, 15), 
             (4, 5), (4, 16), (5, 6), (5, 17), (6, 7), (6, 18), (7, 8), (7, 19), 
             (8, 9), (8, 20), (9, 10), (9, 21), (10, 11), (10, 22), (11, 23), 
             (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), 
             (19, 20), (20, 21), (21, 22), (22, 23)]

# Generate layout
layout = generate_layout(edge_list)

# Output layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Node Extraction**: The script first extracts all unique nodes from the edge list.
2. **Grid Layout**: It then calculates the size of the grid needed to accommodate all nodes. The grid size is determined by taking the square root of the number of nodes and rounding up.
3. **Position Assignment**: Nodes are assigned positions in the grid, with `x` and `y` coordinates corresponding to their column and row in the grid.
4. **Output**: The layout is output in JSON format, where each node is mapped to its `x` and `y` coordinates.

### Example Output:
```json
{
    "0": {"x": 0, "y": 0},
    "1": {"x": 1, "y": 0},
    "2": {"x": 2, "y": 0},
    "3": {"x": 3, "y": 0},
    "4": {"x": 4, "y": 0},
    "5": {"x": 0, "y": 1},
    "6": {"x": 1, "y": 1},
    "7": {"x": 2, "y": 1},
    "8": {"x": 3, "y": 1},
    "9": {"x": 4, "y": 1},
    "10": {"x": 0, "y": 2},
    "11": {"x": 1, "y": 2},
    "12": {"x": 2, "y": 2},
    "13": {"x": 3, "y": 2},
    "14": {"x": 4, "y": 2},
    "15": {"x": 0, "y": 3},
    "16": {"x": 1, "y": 3},
    "17": {"x": 2, "y": 3},
    "18": {"x": 3, "y": 3},
    "19": {"x": 4, "y": 3},
    "20": {"x": 0, "y": 4},
    "21": {"x": 1, "y": 4},
    "22": {"x": 2, "y": 4},
    "23": {"x": 3, "y": 4}
}
```

This layout places nodes in a grid, which helps in reducing edge crossings by keeping connected nodes relatively close to each other. However, this is a basic approach and may not be optimal for all graphs.