To generate a layout for the graph that minimizes edge crossings, we can use a simple grid-based approach. The idea is to place nodes in a grid-like structure, which often helps in reducing edge crossings, especially for structured graphs like the one provided.

Hereâ€™s a Python script that generates a layout for the graph and outputs it in JSON format:

```python
import json

def generate_layout(edge_list):
    # Determine the number of nodes
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    num_nodes = len(nodes)
    
    # Create a grid layout
    # Assuming a square grid for simplicity
    grid_size = int(num_nodes ** 0.5) + 1
    layout = {}
    
    # Assign positions to nodes in a grid
    for i, node in enumerate(sorted(nodes)):
        row = i // grid_size
        col = i % grid_size
        layout[node] = {"x": col, "y": row}
    
    return layout

# Provided edge list
edge_list = [
    (0, 1), (0, 7), (1, 2), (1, 8), (2, 3), (2, 9), (3, 4), (3, 10), 
    (4, 5), (4, 11), (5, 6), (5, 12), (6, 13), (7, 8), (7, 14), 
    (8, 9), (8, 15), (9, 10), (9, 16), (10, 11), (10, 17), (11, 12), 
    (11, 18), (12, 13), (12, 19), (13, 20), (14, 15), (14, 21), 
    (15, 16), (15, 22), (16, 17), (16, 23), (17, 18), (17, 24), 
    (18, 19), (18, 25), (19, 20), (19, 26), (20, 27), (21, 22), 
    (22, 23), (23, 24), (24, 25), (25, 26), (26, 27)
]

# Generate the layout
layout = generate_layout(edge_list)

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Node Extraction**: The script first extracts all unique nodes from the edge list.
2. **Grid Layout**: It then assigns positions to each node in a grid-like structure. The grid size is determined by the square root of the number of nodes, rounded up.
3. **Position Assignment**: Each node is assigned a position `(x, y)` based on its index in the sorted list of nodes.
4. **JSON Output**: Finally, the layout is output in JSON format.

### Output Example:
```json
{
    "0": {"x": 0, "y": 0},
    "1": {"x": 1, "y": 0},
    "2": {"x": 2, "y": 0},
    "3": {"x": 3, "y": 0},
    "4": {"x": 4, "y": 0},
    "5": {"x": 5, "y": 0},
    "6": {"x": 6, "y": 0},
    "7": {"x": 0, "y": 1},
    "8": {"x": 1, "y": 1},
    "9": {"x": 2, "y": 1},
    "10": {"x": 3, "y": 1},
    "11": {"x": 4, "y": 1},
    "12": {"x": 5, "y": 1},
    "13": {"x": 6, "y": 1},
    "14": {"x": 0, "y": 2},
    "15": {"x": 1, "y": 2},
    "16": {"x": 2, "y": 2},
    "17": {"x": 3, "y": 2},
    "18": {"x": 4, "y": 2},
    "19": {"x": 5, "y": 2},
    "20": {"x": 6, "y": 2},
    "21": {"x": 0, "y": 3},
    "22": {"x": 1, "y": 3},
    "23": {"x": 2, "y": 3},
    "24": {"x": 3, "y": 3},
    "25": {"x": 4, "y": 3},
    "26": {"x": 5, "y": 3},
    "27": {"x": 6, "y": 3}
}
```

This layout places nodes in a grid, which should help in minimizing edge crossings for the given graph structure.