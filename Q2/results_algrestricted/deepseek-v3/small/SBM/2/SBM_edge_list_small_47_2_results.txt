To generate a layout for the graph that maintains consistency between Euclidean distance and graph-theoretic distance, we can use a force-directed layout approach. This approach simulates physical forces between nodes and edges to position the nodes in a way that minimizes edge crossings and keeps connected nodes close together.

Below is a Python script that implements a simple force-directed layout algorithm. The script will output the graph layout in JSON format.

```python
import json
import random
import math

# Define the graph as an edge list
edge_list = [(0, 4), (0, 5), (0, 7), (1, 2), (1, 3), (1, 5), (1, 7), (2, 3), (2, 4), (2, 5), (2, 6), (3, 5), (3, 6), (3, 7), (3, 22), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (6, 7), (8, 10), (8, 11), (8, 12), (8, 13), (8, 14), (8, 15), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (11, 12), (11, 13), (12, 13), (12, 14), (12, 15), (13, 14), (13, 15), (14, 18), (16, 17), (16, 18), (16, 20), (16, 21), (16, 22), (17, 19), (17, 20), (17, 21), (17, 22), (18, 19), (18, 20), (18, 21), (18, 22), (19, 20), (19, 21), (19, 22), (20, 21)]

# Extract unique nodes from the edge list
nodes = list(set([node for edge in edge_list for node in edge]))

# Initialize node positions randomly
positions = {node: (random.uniform(0, 100), random.uniform(0, 100)) for node in nodes}

# Parameters for the force-directed layout
k = 1.0  # Optimal distance between nodes
t = 0.1  # Temperature (controls the movement of nodes)
max_iterations = 1000

# Force-directed layout algorithm
for iteration in range(max_iterations):
    # Calculate repulsive forces (nodes repel each other)
    for i in range(len(nodes)):
        for j in range(i + 1, len(nodes)):
            node1 = nodes[i]
            node2 = nodes[j]
            x1, y1 = positions[node1]
            x2, y2 = positions[node2]
            dx = x2 - x1
            dy = y2 - y1
            distance = math.sqrt(dx**2 + dy**2)
            if distance > 0:
                force = k**2 / distance
                positions[node1] = (x1 - force * dx / distance, y1 - force * dy / distance)
                positions[node2] = (x2 + force * dx / distance, y2 + force * dy / distance)

    # Calculate attractive forces (edges attract connected nodes)
    for edge in edge_list:
        node1, node2 = edge
        x1, y1 = positions[node1]
        x2, y2 = positions[node2]
        dx = x2 - x1
        dy = y2 - y1
        distance = math.sqrt(dx**2 + dy**2)
        if distance > 0:
            force = distance**2 / k
            positions[node1] = (x1 + force * dx / distance, y1 + force * dy / distance)
            positions[node2] = (x2 - force * dx / distance, y2 - force * dy / distance)

    # Reduce temperature to slow down movement
    t *= 0.99

# Normalize positions to fit within a unit square
min_x = min(pos[0] for pos in positions.values())
max_x = max(pos[0] for pos in positions.values())
min_y = min(pos[1] for pos in positions.values())
max_y = max(pos[1] for pos in positions.values())

for node in positions:
    x, y = positions[node]
    x = (x - min_x) / (max_x - min_x)
    y = (y - min_y) / (max_y - min_y)
    positions[node] = (x, y)

# Output the layout in JSON format
layout_json = json.dumps(positions, indent=4)
print(layout_json)
```

### Explanation:
1. **Initialization**: The nodes are initialized with random positions within a 100x100 grid.
2. **Force-Directed Layout**: The algorithm iteratively calculates repulsive forces between all pairs of nodes and attractive forces between connected nodes. The forces are used to update the positions of the nodes.
3. **Temperature**: The temperature `t` is reduced over time to slow down the movement of nodes, allowing the layout to stabilize.
4. **Normalization**: The positions are normalized to fit within a unit square (0 to 1) for consistency.
5. **Output**: The final positions are output in JSON format.

This script provides a basic force-directed layout that should maintain a reasonable consistency between Euclidean distance and graph-theoretic distance.