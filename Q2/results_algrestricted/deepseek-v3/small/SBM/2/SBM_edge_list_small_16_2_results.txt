To generate a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance, we can use a force-directed layout approach. This approach simulates physical forces between nodes and edges to position the nodes in a way that minimizes the energy of the system.

Below is a Python script that implements a simple force-directed layout algorithm. The script will output the graph layout in JSON format.

```python
import json
import random
import math

# Define the graph as an edge list
edge_list = [(0, 1), (0, 3), (0, 5), (0, 6), (1, 2), (1, 4), (1, 6), (1, 12), 
             (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (3, 4), (3, 6), (4, 5), 
             (4, 6), (5, 6), (6, 15), (7, 11), (7, 13), (8, 11), (8, 13), 
             (8, 24), (9, 10), (9, 11), (9, 12), (9, 13), (10, 11), (11, 12), 
             (11, 13), (13, 17), (14, 16), (14, 17), (14, 18), (14, 19), 
             (15, 16), (15, 17), (15, 18), (16, 18), (16, 19), (17, 18), 
             (18, 19), (19, 21), (20, 21), (20, 22), (20, 23), (20, 24), 
             (21, 22), (21, 25), (22, 23), (22, 24), (22, 25), (23, 24), 
             (23, 25), (24, 25)]

# Initialize node positions randomly
nodes = set()
for edge in edge_list:
    nodes.add(edge[0])
    nodes.add(edge[1])
nodes = list(nodes)

# Initialize positions randomly
positions = {node: (random.uniform(0, 1), random.uniform(0, 1)) for node in nodes}

# Parameters for the force-directed layout
k = 1.0  # Optimal distance between nodes
t = 0.1  # Temperature (controls the movement)
max_iterations = 100

# Force-directed layout algorithm
for iteration in range(max_iterations):
    # Calculate repulsive forces
    for i in range(len(nodes)):
        for j in range(i + 1, len(nodes)):
            node1 = nodes[i]
            node2 = nodes[j]
            x1, y1 = positions[node1]
            x2, y2 = positions[node2]
            dx = x2 - x1
            dy = y2 - y1
            distance = math.sqrt(dx**2 + dy**2)
            if distance > 0:
                force = k**2 / distance
                positions[node1] = (x1 - force * dx / distance * t, y1 - force * dy / distance * t)
                positions[node2] = (x2 + force * dx / distance * t, y2 + force * dy / distance * t)

    # Calculate attractive forces
    for edge in edge_list:
        node1 = edge[0]
        node2 = edge[1]
        x1, y1 = positions[node1]
        x2, y2 = positions[node2]
        dx = x2 - x1
        dy = y2 - y1
        distance = math.sqrt(dx**2 + dy**2)
        if distance > 0:
            force = distance**2 / k
            positions[node1] = (x1 + force * dx / distance * t, y1 + force * dy / distance * t)
            positions[node2] = (x2 - force * dx / distance * t, y2 - force * dy / distance * t)

# Normalize positions to fit within a unit square
min_x = min(pos[0] for pos in positions.values())
min_y = min(pos[1] for pos in positions.values())
max_x = max(pos[0] for pos in positions.values())
max_y = max(pos[1] for pos in positions.values())

for node in positions:
    x, y = positions[node]
    x = (x - min_x) / (max_x - min_x)
    y = (y - min_y) / (max_y - min_y)
    positions[node] = (x, y)

# Output the layout in JSON format
layout_json = json.dumps(positions, indent=4)
print(layout_json)
```

### Explanation:
1. **Initialization**: The nodes are initialized with random positions within a unit square.
2. **Force-Directed Layout**: The algorithm iteratively calculates repulsive forces between all pairs of nodes and attractive forces between connected nodes. The forces are used to update the positions of the nodes.
3. **Normalization**: After the iterations, the positions are normalized to fit within a unit square.
4. **Output**: The final positions are output in JSON format.

This script provides a basic force-directed layout that attempts to maintain consistency between Euclidean distance and graph-theoretic distance. You can adjust parameters like `k`, `t`, and `max_iterations` to fine-tune the layout.