To generate a layout for the graph that minimizes edge crossings, we can use a simple heuristic approach. One such approach is to arrange the nodes in a circular layout and then adjust their positions based on their connections to minimize edge crossings. Below is a Python script that implements this approach and outputs the graph layout in JSON format.

```python
import json
import math

def calculate_initial_positions(num_nodes):
    positions = {}
    radius = 100  # Radius of the circle
    center = (0, 0)  # Center of the circle
    angle_step = 2 * math.pi / num_nodes
    
    for i in range(num_nodes):
        angle = i * angle_step
        x = center[0] + radius * math.cos(angle)
        y = center[1] + radius * math.sin(angle)
        positions[i] = (x, y)
    
    return positions

def count_edge_crossings(positions, edges):
    crossings = 0
    edges = list(edges)
    for i in range(len(edges)):
        for j in range(i + 1, len(edges)):
            a, b = edges[i]
            c, d = edges[j]
            if do_edges_cross(positions[a], positions[b], positions[c], positions[d]):
                crossings += 1
    return crossings

def do_edges_cross(p1, p2, p3, p4):
    def ccw(A, B, C):
        return (C[1] - A[1]) * (B[0] - A[0]) - (B[1] - A[1]) * (C[0] - A[0])
    
    A, B, C, D = p1, p2, p3, p4
    return (ccw(A, C, D) != ccw(B, C, D)) and (ccw(A, B, C) != ccw(A, B, D))

def optimize_layout(positions, edges, iterations=100):
    for _ in range(iterations):
        for node in positions:
            best_position = positions[node]
            min_crossings = count_edge_crossings(positions, edges)
            
            # Try small random adjustments
            for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
                new_positions = positions.copy()
                new_positions[node] = (positions[node][0] + dx, positions[node][1] + dy)
                crossings = count_edge_crossings(new_positions, edges)
                if crossings < min_crossings:
                    min_crossings = crossings
                    best_position = new_positions[node]
            
            positions[node] = best_position
    
    return positions

def generate_layout(edge_list):
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    num_nodes = len(nodes)
    
    positions = calculate_initial_positions(num_nodes)
    optimized_positions = optimize_layout(positions, edge_list)
    
    layout = {node: {"x": pos[0], "y": pos[1]} for node, pos in optimized_positions.items()}
    return json.dumps(layout, indent=4)

# Example usage
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 8), (0, 15), (1, 2), (1, 5), (1, 6), (2, 3), (2, 4), (2, 5), (2, 6), (3, 5), (3, 6), (4, 5), (4, 6), (5, 6), (7, 8), (7, 9), (7, 10), (7, 11), (7, 12), (7, 13), (8, 9), (8, 11), (8, 12), (9, 10), (9, 11), (9, 12), (9, 13), (10, 13), (11, 12), (12, 13), (12, 15), (14, 15), (14, 16), (14, 17), (14, 18), (15, 16), (15, 18), (15, 19), (15, 20), (16, 17), (16, 20), (17, 18), (17, 19), (17, 20), (18, 19), (19, 20)]
layout_json = generate_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Initial Positions**: The nodes are initially placed in a circular layout using `calculate_initial_positions`.
2. **Edge Crossing Count**: The `count_edge_crossings` function counts how many edges cross each other.
3. **Optimization**: The `optimize_layout` function tries to minimize edge crossings by making small adjustments to the positions of the nodes.
4. **Output**: The final layout is returned in JSON format, where each node has an `x` and `y` coordinate.

This script provides a basic heuristic approach to minimize edge crossings. For more complex graphs, more sophisticated algorithms would be needed.