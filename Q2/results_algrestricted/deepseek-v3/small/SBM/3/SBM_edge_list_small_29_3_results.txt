To generate a layout for the graph that minimizes edge crossings, we can use a force-directed layout algorithm. This algorithm simulates physical forces between nodes and edges to find a layout that minimizes edge crossings and makes the graph visually appealing.

Below is a Python script that implements a simple force-directed layout algorithm. The script will output the graph layout in JSON format.

```python
import json
import random
import math

# Define the graph as an edge list
edge_list = [(0, 3), (0, 4), (0, 5), (0, 6), (0, 17), (1, 2), (1, 4), (1, 7), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (3, 4), (3, 5), (3, 6), (3, 7), (4, 5), (4, 6), (4, 7), (4, 17), (5, 6), (5, 7), (6, 7), (6, 19), (8, 9), (8, 13), (8, 15), (9, 10), (9, 12), (9, 13), (9, 14), (9, 16), (10, 11), (10, 12), (10, 13), (10, 15), (11, 12), (11, 13), (11, 14), (11, 15), (12, 13), (12, 14), (13, 14), (13, 15), (14, 15), (16, 17), (16, 18), (16, 19), (16, 20), (16, 21), (16, 22), (17, 19), (17, 20), (17, 21), (17, 22), (18, 19), (18, 22), (19, 20), (20, 21)]

# Extract unique nodes from the edge list
nodes = list(set([node for edge in edge_list for node in edge]))

# Initialize node positions randomly
positions = {node: (random.uniform(0, 100), random.uniform(0, 100)) for node in nodes}

# Parameters for the force-directed layout
k = 1.0  # Optimal distance between nodes
iterations = 100
temperature = 100.0
cooling_factor = 0.95

# Force-directed layout algorithm
for iteration in range(iterations):
    for node in nodes:
        force_x, force_y = 0.0, 0.0
        
        # Calculate repulsive forces (between all pairs of nodes)
        for other_node in nodes:
            if node != other_node:
                dx = positions[node][0] - positions[other_node][0]
                dy = positions[node][1] - positions[other_node][1]
                distance = math.sqrt(dx**2 + dy**2)
                if distance > 0:
                    repulsive_force = k**2 / distance
                    force_x += repulsive_force * (dx / distance)
                    force_y += repulsive_force * (dy / distance)
        
        # Calculate attractive forces (between connected nodes)
        for edge in edge_list:
            if node in edge:
                other_node = edge[0] if edge[1] == node else edge[1]
                dx = positions[node][0] - positions[other_node][0]
                dy = positions[node][1] - positions[other_node][1]
                distance = math.sqrt(dx**2 + dy**2)
                if distance > 0:
                    attractive_force = distance**2 / k
                    force_x -= attractive_force * (dx / distance)
                    force_y -= attractive_force * (dy / distance)
        
        # Update node position based on forces
        positions[node] = (
            positions[node][0] + (force_x * temperature),
            positions[node][1] + (force_y * temperature)
        )
    
    # Cool down the temperature
    temperature *= cooling_factor

# Normalize positions to fit within a 0-100 range
min_x = min(pos[0] for pos in positions.values())
max_x = max(pos[0] for pos in positions.values())
min_y = min(pos[1] for pos in positions.values())
max_y = max(pos[1] for pos in positions.values())

for node in positions:
    positions[node] = (
        (positions[node][0] - min_x) / (max_x - min_x) * 100,
        (positions[node][1] - min_y) / (max_y - min_y) * 100
    )

# Output the layout in JSON format
layout_json = json.dumps(positions, indent=4)
print(layout_json)
```

### Explanation:
1. **Initialization**: The nodes are initialized with random positions within a 100x100 grid.
2. **Force Calculation**: 
   - **Repulsive Force**: Nodes repel each other to avoid overlap.
   - **Attractive Force**: Connected nodes attract each other to minimize edge lengths.
3. **Position Update**: The positions of the nodes are updated based on the calculated forces.
4. **Cooling**: The temperature is reduced over iterations to allow the system to settle into a stable configuration.
5. **Normalization**: The positions are normalized to fit within a 0-100 range.
6. **Output**: The final positions are output in JSON format.

This script provides a basic force-directed layout that should minimize edge crossings and produce a visually appealing graph layout.