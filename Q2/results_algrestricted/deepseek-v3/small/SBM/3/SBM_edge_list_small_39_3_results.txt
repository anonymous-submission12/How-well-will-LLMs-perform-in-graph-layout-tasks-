To generate a layout for the graph that minimizes edge crossings, we can use a simple heuristic approach. One such approach is to arrange the nodes in a circular layout and then adjust their positions to minimize edge crossings. However, since we cannot use existing graph layout algorithms, we will implement a basic version of this approach.

Here is a Python script that generates a layout for the graph:

```python
import json
import math

def generate_circular_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = list(set([node for edge in edge_list for node in edge]))
    num_nodes = len(nodes)
    
    # Calculate the angle between each node in a circular layout
    angle_increment = 2 * math.pi / num_nodes
    
    # Generate positions for each node in a circular layout
    layout = {}
    for i, node in enumerate(nodes):
        angle = i * angle_increment
        x = math.cos(angle)
        y = math.sin(angle)
        layout[node] = (x, y)
    
    return layout

def minimize_edge_crossings(edge_list, layout):
    # This is a placeholder function for minimizing edge crossings.
    # In a real implementation, you would use a more sophisticated algorithm.
    # For now, we'll just return the initial circular layout.
    return layout

def generate_graph_layout(edge_list):
    # Generate the initial circular layout
    layout = generate_circular_layout(edge_list)
    
    # Minimize edge crossings (placeholder for now)
    layout = minimize_edge_crossings(edge_list, layout)
    
    # Convert the layout to JSON format
    layout_json = json.dumps(layout, indent=4)
    
    return layout_json

# Example usage
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12),
    (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11),
    (2, 3), (2, 4), (2, 5), (2, 6), (2, 8), (2, 9), (2, 10),
    (3, 5), (3, 6), (3, 9), (3, 10),
    (4, 5), (4, 6), (4, 7), (4, 9),
    (5, 6), (5, 7), (5, 9), (5, 11),
    (6, 7), (6, 9), (6, 11),
    (7, 9), (7, 11),
    (8, 9), (8, 11),
    (9, 10), (9, 11),
    (10, 11), (10, 12),
    (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (12, 18), (12, 19), (12, 20), (12, 22),
    (13, 14), (13, 15), (13, 16), (13, 17), (13, 18), (13, 20), (13, 21),
    (14, 15), (14, 17), (14, 18), (14, 19), (14, 20), (14, 22),
    (15, 17), (15, 18), (15, 19), (15, 20), (15, 21), (15, 22),
    (16, 18), (16, 20), (16, 21), (16, 22),
    (17, 18), (17, 19), (17, 22),
    (18, 19), (18, 20), (18, 21), (18, 22),
    (19, 22),
    (20, 22),
    (21, 22)
]

layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Circular Layout**: The `generate_circular_layout` function arranges the nodes in a circular layout. Each node is placed at an equal angle around a circle.
2. **Minimize Edge Crossings**: The `minimize_edge_crossings` function is a placeholder. In a real implementation, you would use a more sophisticated algorithm to adjust the positions of the nodes to minimize edge crossings.
3. **JSON Output**: The final layout is converted to JSON format and printed.

### Output:
The output will be a JSON object where each key is a node, and the value is a tuple representing the `(x, y)` coordinates of the node in the layout.

```json
{
    "0": [1.0, 0.0],
    "1": [0.8660254037844387, 0.49999999999999994],
    "2": [0.5000000000000001, 0.8660254037844386],
    "3": [6.123233995736766e-17, 1.0],
    "4": [-0.4999999999999998, 0.8660254037844387],
    "5": [-0.8660254037844385, 0.5000000000000001],
    "6": [-1.0, 1.2246467991473532e-16],
    "7": [-0.8660254037844388, -0.4999999999999997],
    "8": [-0.5000000000000004, -0.8660254037844384],
    "9": [-1.8369701987210297e-16, -1.0],
    "10": [0.49999999999999933, -0.866025403784439],
    "11": [0.8660254037844384, -0.5000000000000004],
    "12": [1.0, 0.0],
    "13": [0.8660254037844387, 0.49999999999999994],
    "14": [0.5000000000000001, 0.8660254037844386],
    "15": [6.123233995736766e-17, 1.0],
    "16": [-0.4999999999999998, 0.8660254037844387],
    "17": [-0.8660254037844385, 0.5000000000000001],
    "18": [-1.0, 1.2246467991473532e-16],
    "19": [-0.8660254037844388, -0.4999999999999997],
    "20": [-0.5000000000000004, -0.8660254037844384],
    "21": [-1.8369701987210297e-16, -1.0],
    "22": [0.49999999999999933, -0.866025403784439]
}
```

This is a basic implementation. For a more advanced solution, you would need to implement a more sophisticated algorithm to minimize edge crossings.