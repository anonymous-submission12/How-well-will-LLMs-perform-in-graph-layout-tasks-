To generate a layout for the graph that minimizes edge crossings, we can use a simple heuristic approach. One such approach is to arrange the nodes in a circular layout and then adjust their positions to minimize edge crossings. However, since we cannot use existing graph layout algorithms, we will implement a basic version of this approach.

Here is a Python script that generates a layout for the graph:

```python
import json
import math

def generate_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = list(set([node for edge in edge_list for node in edge]))
    num_nodes = len(nodes)
    
    # Assign positions in a circular layout
    radius = 100  # Radius of the circle
    center = (0, 0)  # Center of the circle
    angle_step = 2 * math.pi / num_nodes
    
    layout = {}
    for i, node in enumerate(nodes):
        angle = i * angle_step
        x = center[0] + radius * math.cos(angle)
        y = center[1] + radius * math.sin(angle)
        layout[node] = (x, y)
    
    # Simple heuristic to minimize edge crossings:
    # Swap positions of nodes if it reduces the number of edge crossings
    def count_crossings(layout, edge_list):
        crossings = 0
        for i in range(len(edge_list)):
            for j in range(i + 1, len(edge_list)):
                a, b = edge_list[i]
                c, d = edge_list[j]
                if (layout[a][0] - layout[b][0]) * (layout[c][1] - layout[d][1]) - \
                   (layout[a][1] - layout[b][1]) * (layout[c][0] - layout[d][0]) != 0:
                    crossings += 1
        return crossings
    
    initial_crossings = count_crossings(layout, edge_list)
    improved = True
    while improved:
        improved = False
        for i in range(num_nodes):
            for j in range(i + 1, num_nodes):
                node1 = nodes[i]
                node2 = nodes[j]
                # Swap positions
                layout[node1], layout[node2] = layout[node2], layout[node1]
                new_crossings = count_crossings(layout, edge_list)
                if new_crossings < initial_crossings:
                    initial_crossings = new_crossings
                    improved = True
                else:
                    # Revert the swap
                    layout[node1], layout[node2] = layout[node2], layout[node1]
    
    return layout

# Example usage
edge_list = [(0, 4), (0, 5), (0, 6), (0, 8), (0, 9), (0, 10), (0, 11), (1, 3), (1, 4), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (2, 3), (2, 4), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 11), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (7, 8), (7, 9), (7, 10), (7, 11), (8, 9), (8, 10), (8, 11), (9, 11), (9, 22), (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (12, 18), (12, 19), (12, 20), (12, 21), (12, 22), (12, 23), (13, 14), (13, 15), (13, 16), (13, 18), (13, 19), (13, 20), (13, 22), (13, 23), (14, 15), (14, 17), (14, 18), (14, 19), (14, 20), (14, 22), (14, 23), (15, 16), (15, 17), (15, 18), (15, 19), (15, 22), (15, 23), (16, 17), (16, 18), (16, 19), (16, 22), (16, 23), (17, 19), (17, 20), (17, 21), (17, 22), (17, 23), (18, 20), (18, 21), (18, 23), (19, 21), (19, 23), (20, 21), (20, 22), (21, 22), (21, 23)]

layout = generate_layout(edge_list)

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Circular Layout**: The nodes are initially placed in a circular layout. This is a simple way to ensure that no edges overlap initially.
2. **Edge Crossing Minimization**: The script then attempts to minimize edge crossings by swapping the positions of nodes and checking if the number of crossings decreases. This is a basic heuristic and may not always find the optimal layout, but it should reduce the number of crossings.
3. **Output**: The final layout is output in JSON format, where each node is mapped to its (x, y) coordinates.

This script provides a basic layout that minimizes edge crossings without using any existing graph layout algorithms.