To generate a layout for the graph that minimizes edge crossings, we can use a simple heuristic approach. One such approach is to arrange the nodes in a grid-like structure, where nodes are placed in rows and columns. This method is not perfect but can help reduce edge crossings.

Here is a Python script that generates a layout for the given graph:

```python
import json
from collections import defaultdict

# Input edge list
edges = [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 9), (1, 2), (1, 3), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 22), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 28), (6, 7), (6, 8), (6, 9), (7, 8), (7, 9), (10, 11), (10, 12), (10, 13), (10, 14), (10, 16), (10, 17), (10, 18), (10, 19), (11, 12), (11, 13), (11, 14), (11, 15), (11, 16), (11, 17), (11, 18), (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (12, 19), (13, 14), (13, 15), (13, 16), (13, 18), (13, 19), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (15, 16), (15, 18), (15, 19), (16, 17), (16, 18), (17, 19), (17, 21), (18, 19), (20, 22), (20, 23), (20, 24), (20, 25), (20, 26), (20, 27), (20, 28), (21, 23), (21, 24), (21, 25), (21, 26), (21, 27), (21, 28), (22, 23), (22, 24), (22, 25), (22, 28), (23, 26), (23, 28), (24, 25), (24, 26), (24, 28), (25, 27), (25, 28), (26, 27), (27, 28)]

# Extract unique nodes
nodes = set()
for edge in edges:
    nodes.add(edge[0])
    nodes.add(edge[1])
nodes = sorted(list(nodes))

# Create adjacency list
adjacency_list = defaultdict(list)
for edge in edges:
    adjacency_list[edge[0]].append(edge[1])
    adjacency_list[edge[1]].append(edge[0])

# Assign positions in a grid-like structure
positions = {}
grid_size = int(len(nodes) ** 0.5) + 1
for i, node in enumerate(nodes):
    row = i // grid_size
    col = i % grid_size
    positions[node] = {"x": col * 100, "y": row * 100}  # Scaling by 100 for better visualization

# Output the layout in JSON format
layout_json = json.dumps(positions, indent=4)
print(layout_json)
```

### Explanation:
1. **Input Edge List**: The edge list is provided as input.
2. **Extract Unique Nodes**: We extract all unique nodes from the edge list.
3. **Adjacency List**: We create an adjacency list to represent the graph.
4. **Grid Layout**: We assign positions to the nodes in a grid-like structure. The grid size is calculated based on the number of nodes.
5. **Output JSON**: The positions are output in JSON format.

### Output:
The output will be a JSON object where each node is mapped to its position in the grid. The positions are scaled by 100 to make the layout more visually appealing.

```json
{
    "0": {
        "x": 0,
        "y": 0
    },
    "1": {
        "x": 100,
        "y": 0
    },
    "2": {
        "x": 200,
        "y": 0
    },
    "3": {
        "x": 300,
        "y": 0
    },
    "4": {
        "x": 400,
        "y": 0
    },
    "5": {
        "x": 0,
        "y": 100
    },
    "6": {
        "x": 100,
        "y": 100
    },
    "7": {
        "x": 200,
        "y": 100
    },
    "8": {
        "x": 300,
        "y": 100
    },
    "9": {
        "x": 400,
        "y": 100
    },
    "10": {
        "x": 0,
        "y": 200
    },
    "11": {
        "x": 100,
        "y": 200
    },
    "12": {
        "x": 200,
        "y": 200
    },
    "13": {
        "x": 300,
        "y": 200
    },
    "14": {
        "x": 400,
        "y": 200
    },
    "15": {
        "x": 0,
        "y": 300
    },
    "16": {
        "x": 100,
        "y": 300
    },
    "17": {
        "x": 200,
        "y": 300
    },
    "18": {
        "x": 300,
        "y": 300
    },
    "19": {
        "x": 400,
        "y": 300
    },
    "20": {
        "x": 0,
        "y": 400
    },
    "21": {
        "x": 100,
        "y": 400
    },
    "22": {
        "x": 200,
        "y": 400
    },
    "23": {
        "x": 300,
        "y": 400
    },
    "24": {
        "x": 400,
        "y": 400
    },
    "25": {
        "x": 0,
        "y": 500
    },
    "26": {
        "x": 100,
        "y": 500
    },
    "27": {
        "x": 200,
        "y": 500
    },
    "28": {
        "x": 300,
        "y": 500
    }
}
```

This JSON object can be used to visualize the graph with the nodes placed in a grid-like structure, which helps in minimizing edge crossings.