To generate a layout for the graph that minimizes edge crossings, we can use a force-directed layout algorithm. This algorithm simulates physical forces between nodes and edges to position the nodes in a way that minimizes edge crossings and makes the graph visually appealing.

Below is a Python script that implements a simple force-directed layout algorithm and outputs the graph layout in JSON format:

```python
import json
import random
import math

# Define the graph as an edge list
edge_list = [(0, 1), (0, 3), (0, 5), (0, 6), (1, 2), (1, 4), (1, 6), (1, 12), 
             (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (3, 4), (3, 6), (4, 5), 
             (4, 6), (5, 6), (6, 15), (7, 11), (7, 13), (8, 11), (8, 13), 
             (8, 24), (9, 10), (9, 11), (9, 12), (9, 13), (10, 11), (11, 12), 
             (11, 13), (13, 17), (14, 16), (14, 17), (14, 18), (14, 19), 
             (15, 16), (15, 17), (15, 18), (16, 18), (16, 19), (17, 18), 
             (18, 19), (19, 21), (20, 21), (20, 22), (20, 23), (20, 24), 
             (21, 22), (21, 25), (22, 23), (22, 24), (22, 25), (23, 24), 
             (23, 25), (24, 25)]

# Initialize node positions randomly
nodes = set()
for edge in edge_list:
    nodes.add(edge[0])
    nodes.add(edge[1])
nodes = list(nodes)

# Initialize positions randomly
positions = {node: (random.uniform(0, 100), random.uniform(0, 100)) for node in nodes}

# Parameters for the force-directed layout
k = 1.0  # Optimal distance between nodes
iterations = 100
temperature = 100.0
cooling_factor = 0.95

# Force-directed layout algorithm
for iteration in range(iterations):
    for node in nodes:
        force_x, force_y = 0.0, 0.0
        
        # Calculate repulsive forces (between all pairs of nodes)
        for other_node in nodes:
            if node != other_node:
                dx = positions[other_node][0] - positions[node][0]
                dy = positions[other_node][1] - positions[node][1]
                distance = math.sqrt(dx * dx + dy * dy)
                if distance > 0:
                    repulsive_force = k * k / distance
                    force_x -= repulsive_force * dx / distance
                    force_y -= repulsive_force * dy / distance
        
        # Calculate attractive forces (between connected nodes)
        for edge in edge_list:
            if node == edge[0]:
                other_node = edge[1]
            elif node == edge[1]:
                other_node = edge[0]
            else:
                continue
            dx = positions[other_node][0] - positions[node][0]
            dy = positions[other_node][1] - positions[node][1]
            distance = math.sqrt(dx * dx + dy * dy)
            if distance > 0:
                attractive_force = distance * distance / k
                force_x += attractive_force * dx / distance
                force_y += attractive_force * dy / distance
        
        # Update node position
        positions[node] = (
            positions[node][0] + force_x * temperature,
            positions[node][1] + force_y * temperature
        )
    
    # Cool down the temperature
    temperature *= cooling_factor

# Normalize positions to fit within a 0-100 range
min_x = min(pos[0] for pos in positions.values())
max_x = max(pos[0] for pos in positions.values())
min_y = min(pos[1] for pos in positions.values())
max_y = max(pos[1] for pos in positions.values())

for node in positions:
    x, y = positions[node]
    x = (x - min_x) / (max_x - min_x) * 100
    y = (y - min_y) / (max_y - min_y) * 100
    positions[node] = (x, y)

# Output the layout in JSON format
layout_json = json.dumps(positions, indent=4)
print(layout_json)
```

### Explanation:
1. **Initialization**: The nodes are initialized with random positions within a 100x100 grid.
2. **Force-Directed Layout**: The algorithm iteratively calculates forces between nodes:
   - **Repulsive Forces**: Nodes repel each other to avoid overlap.
   - **Attractive Forces**: Connected nodes attract each other to minimize edge lengths.
3. **Temperature Cooling**: The temperature decreases over iterations to reduce the magnitude of movements, allowing the layout to stabilize.
4. **Normalization**: The final positions are normalized to fit within a 0-100 range.
5. **Output**: The layout is output in JSON format, where each node is mapped to its (x, y) position.

This script provides a basic force-directed layout that minimizes edge crossings and can be further refined or optimized depending on specific requirements.