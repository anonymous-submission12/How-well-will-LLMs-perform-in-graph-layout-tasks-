To generate a layout for the graph that minimizes edge crossings, we can use a force-directed layout algorithm. This algorithm simulates physical forces between nodes and edges to position the nodes in a way that minimizes edge crossings and makes the graph visually appealing.

Below is a Python script that implements a simple force-directed layout algorithm and outputs the graph layout in JSON format:

```python
import json
import random
import math

# Define the graph as an edge list
edge_list = [(0, 1), (0, 3), (0, 4), (0, 5), (1, 3), (1, 4), (1, 5), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5), (4, 14), (6, 7), (6, 8), (6, 9), (6, 10), (7, 8), (7, 9), (7, 10), (8, 9), (8, 10), (8, 11), (9, 10), (11, 12), (11, 13), (11, 14), (11, 15), (12, 13), (12, 14), (12, 15), (13, 15), (14, 15), (15, 17), (16, 18), (16, 19), (16, 20), (17, 18), (17, 19), (17, 20), (18, 19), (18, 20), (19, 20)]

# Extract unique nodes from the edge list
nodes = list(set([node for edge in edge_list for node in edge]))

# Initialize node positions randomly
positions = {node: (random.uniform(0, 100), random.uniform(0, 100)) for node in nodes}

# Parameters for the force-directed layout
k = 1.0  # Optimal distance between nodes
iterations = 100
temperature = 100.0
cooling_factor = 0.95

# Force-directed layout algorithm
for iteration in range(iterations):
    for node in nodes:
        force_x, force_y = 0.0, 0.0
        
        # Calculate repulsive forces (between all pairs of nodes)
        for other_node in nodes:
            if node != other_node:
                dx = positions[other_node][0] - positions[node][0]
                dy = positions[other_node][1] - positions[node][1]
                distance = math.hypot(dx, dy)
                if distance > 0:
                    repulsive_force = k**2 / distance
                    force_x -= repulsive_force * (dx / distance)
                    force_y -= repulsive_force * (dy / distance)
        
        # Calculate attractive forces (between connected nodes)
        for edge in edge_list:
            if node in edge:
                other_node = edge[0] if edge[1] == node else edge[1]
                dx = positions[other_node][0] - positions[node][0]
                dy = positions[other_node][1] - positions[node][1]
                distance = math.hypot(dx, dy)
                if distance > 0:
                    attractive_force = distance**2 / k
                    force_x += attractive_force * (dx / distance)
                    force_y += attractive_force * (dy / distance)
        
        # Update node position
        positions[node] = (
            positions[node][0] + (force_x * temperature),
            positions[node][1] + (force_y * temperature)
    
    # Cool down the temperature
    temperature *= cooling_factor

# Normalize positions to fit within a 0-100 range
min_x = min(pos[0] for pos in positions.values())
max_x = max(pos[0] for pos in positions.values())
min_y = min(pos[1] for pos in positions.values())
max_y = max(pos[1] for pos in positions.values())

for node in positions:
    positions[node] = (
        (positions[node][0] - min_x) / (max_x - min_x) * 100,
        (positions[node][1] - min_y) / (max_y - min_y) * 100
    )

# Output the layout in JSON format
layout_json = json.dumps(positions, indent=4)
print(layout_json)
```

### Explanation:
1. **Initialization**: The nodes are initialized with random positions within a 100x100 grid.
2. **Force Calculation**: The algorithm calculates two types of forces:
   - **Repulsive forces**: These forces push nodes apart to prevent them from overlapping.
   - **Attractive forces**: These forces pull connected nodes closer together.
3. **Position Update**: The positions of the nodes are updated based on the calculated forces.
4. **Cooling**: The temperature is reduced over time to allow the nodes to settle into their final positions.
5. **Normalization**: The positions are normalized to fit within a 0-100 range.
6. **Output**: The final positions are output in JSON format.

This script provides a basic implementation of a force-directed layout algorithm. You can further refine the parameters (e.g., `k`, `iterations`, `temperature`, `cooling_factor`) to achieve better results for specific graphs.