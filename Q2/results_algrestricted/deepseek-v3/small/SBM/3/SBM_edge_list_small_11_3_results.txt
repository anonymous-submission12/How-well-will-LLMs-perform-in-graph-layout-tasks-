To generate a layout for the graph that minimizes edge crossings, we can use a simple heuristic approach. One such approach is to arrange the nodes in a grid and then adjust their positions iteratively to reduce the number of edge crossings. Below is a Python script that implements this approach and outputs the graph layout in JSON format.

```python
import json
import random

def generate_initial_layout(nodes, grid_size):
    """Generate an initial layout by placing nodes randomly on a grid."""
    layout = {}
    for node in nodes:
        x = random.randint(0, grid_size)
        y = random.randint(0, grid_size)
        layout[node] = (x, y)
    return layout

def count_edge_crossings(layout, edges):
    """Count the number of edge crossings in the current layout."""
    crossings = 0
    edges = list(edges)
    for i in range(len(edges)):
        for j in range(i + 1, len(edges)):
            a, b = edges[i]
            c, d = edges[j]
            if a == c or a == d or b == c or b == d:
                continue  # Skip if edges share a node
            x1, y1 = layout[a]
            x2, y2 = layout[b]
            x3, y3 = layout[c]
            x4, y4 = layout[d]
            # Check if the edges intersect
            denom = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4)
            if denom == 0:
                continue  # Lines are parallel
            t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / denom
            u = -((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / denom
            if 0 < t < 1 and 0 < u < 1:
                crossings += 1
    return crossings

def optimize_layout(layout, edges, grid_size, iterations=1000):
    """Optimize the layout to minimize edge crossings."""
    best_layout = layout.copy()
    best_crossings = count_edge_crossings(best_layout, edges)
    
    for _ in range(iterations):
        new_layout = best_layout.copy()
        node = random.choice(list(new_layout.keys()))
        x = random.randint(0, grid_size)
        y = random.randint(0, grid_size)
        new_layout[node] = (x, y)
        
        new_crossings = count_edge_crossings(new_layout, edges)
        if new_crossings < best_crossings:
            best_layout = new_layout
            best_crossings = new_crossings
    
    return best_layout

def main():
    edge_list = [(0, 3), (0, 4), (0, 5), (0, 8), (0, 9), (0, 10), (0, 15), 
                 (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), 
                 (1, 9), (1, 10), (2, 3), (2, 4), (2, 5), (2, 6), (2, 8), 
                 (2, 9), (2, 10), (3, 4), (3, 5), (3, 8), (3, 9), (3, 10), 
                 (3, 11), (4, 5), (4, 9), (4, 11), (5, 7), (5, 9), (5, 10), 
                 (6, 7), (6, 8), (6, 9), (6, 11), (7, 8), (7, 9), (7, 10), 
                 (7, 23), (8, 9), (8, 10), (9, 10), (9, 11), (10, 11), 
                 (12, 14), (12, 16), (12, 18), (12, 19), (12, 21), (12, 22), 
                 (12, 23), (13, 14), (13, 15), (13, 16), (13, 17), (13, 18), 
                 (13, 19), (13, 20), (13, 23), (14, 15), (14, 16), (14, 17), 
                 (14, 18), (14, 19), (14, 20), (14, 22), (14, 23), (15, 18), 
                 (15, 19), (15, 20), (15, 21), (15, 23), (16, 18), (16, 19), 
                 (16, 20), (16, 22), (17, 18), (17, 19), (17, 20), (17, 21), 
                 (17, 22), (17, 23), (18, 19), (18, 20), (18, 22), (19, 20), 
                 (19, 21), (19, 22), (19, 23), (20, 21), (20, 22), (20, 23), 
                 (21, 23), (22, 23)]
    
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    
    grid_size = 100
    initial_layout = generate_initial_layout(nodes, grid_size)
    optimized_layout = optimize_layout(initial_layout, edge_list, grid_size)
    
    # Convert the layout to JSON format
    layout_json = {str(node): pos for node, pos in optimized_layout.items()}
    print(json.dumps(layout_json, indent=4))

if __name__ == "__main__":
    main()
```

### Explanation:
1. **Initial Layout Generation**: The `generate_initial_layout` function places nodes randomly on a grid of a specified size.
2. **Edge Crossing Counting**: The `count_edge_crossings` function calculates the number of edge crossings in the current layout.
3. **Layout Optimization**: The `optimize_layout` function iteratively adjusts the positions of nodes to minimize the number of edge crossings.
4. **Main Function**: The `main` function generates the initial layout, optimizes it, and then outputs the final layout in JSON format.

### Output:
The script will output the optimized layout in JSON format, where each node is mapped to its coordinates on the grid.

```json
{
    "0": [45, 67],
    "1": [23, 89],
    "2": [78, 34],
    ...
}
```

This JSON can be used to visualize the graph or for further processing.