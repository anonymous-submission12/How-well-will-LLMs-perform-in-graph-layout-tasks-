To generate a layout for the graph that minimizes edge crossings, we can use a force-directed layout algorithm. This algorithm simulates physical forces between nodes and edges to position the nodes in a way that minimizes edge crossings and makes the graph visually appealing.

Below is a Python script that implements a simple force-directed layout algorithm and outputs the graph layout in JSON format:

```python
import json
import random
import math

# Define the graph as an edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 12),
    (1, 2), (1, 5), (1, 6), (1, 7), (1, 9), (1, 11), (1, 12),
    (2, 3), (2, 5), (2, 6), (2, 7), (2, 9), (2, 11), (2, 12),
    (3, 4), (3, 5), (3, 7), (3, 8), (3, 9), (3, 10), (3, 12),
    (4, 5), (4, 6), (4, 8), (4, 11), (4, 12), (4, 24),
    (5, 6), (5, 7), (5, 9), (5, 10), (5, 11), (5, 12), (5, 24),
    (6, 7), (6, 8), (6, 9), (6, 10), (6, 17),
    (7, 8), (7, 9), (7, 11), (7, 12),
    (8, 9), (8, 10), (8, 11), (8, 12),
    (9, 11), (10, 12),
    (13, 14), (13, 15), (13, 16), (13, 20), (13, 21), (13, 22), (13, 23), (13, 25),
    (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (14, 20), (14, 21), (14, 22), (14, 23), (14, 24), (14, 25),
    (15, 16), (15, 17), (15, 18), (15, 19), (15, 20), (15, 21), (15, 22), (15, 24), (15, 25),
    (16, 19), (16, 20), (16, 21), (16, 22), (16, 24), (16, 25),
    (17, 18), (17, 21), (17, 22), (17, 24), (17, 25),
    (18, 19), (18, 21), (18, 22), (18, 24), (18, 25),
    (19, 20), (19, 21), (19, 23), (19, 24), (19, 25),
    (20, 21), (20, 22), (20, 24), (20, 25),
    (21, 22), (21, 23), (21, 24), (21, 25),
    (22, 23), (22, 24), (22, 25),
    (23, 24), (23, 25),
    (24, 25)
]

# Extract unique nodes from the edge list
nodes = list(set([node for edge in edge_list for node in edge]))

# Initialize node positions randomly
positions = {node: (random.uniform(0, 100), random.uniform(0, 100)) for node in nodes}

# Parameters for the force-directed layout
k = 1.0  # Spring constant
repulsion_constant = 100.0  # Repulsion constant
iterations = 100
cooling_factor = 0.95

# Force-directed layout algorithm
for iteration in range(iterations):
    # Calculate repulsive forces
    for node1 in nodes:
        for node2 in nodes:
            if node1 != node2:
                dx = positions[node2][0] - positions[node1][0]
                dy = positions[node2][1] - positions[node1][1]
                distance = math.sqrt(dx**2 + dy**2)
                if distance > 0:
                    force = repulsion_constant / distance**2
                    positions[node1] = (positions[node1][0] - force * dx / distance,
                                        positions[node1][1] - force * dy / distance)

    # Calculate attractive forces (spring forces)
    for edge in edge_list:
        node1, node2 = edge
        dx = positions[node2][0] - positions[node1][0]
        dy = positions[node2][1] - positions[node1][1]
        distance = math.sqrt(dx**2 + dy**2)
        if distance > 0:
            force = k * distance
            positions[node1] = (positions[node1][0] + force * dx / distance,
                                positions[node1][1] + force * dy / distance)
            positions[node2] = (positions[node2][0] - force * dx / distance,
                                positions[node2][1] - force * dy / distance)

    # Cool down the system
    repulsion_constant *= cooling_factor

# Convert positions to JSON format
layout = {str(node): {"x": pos[0], "y": pos[1]} for node, pos in positions.items()}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Initialization**: The nodes are initialized with random positions within a 100x100 grid.
2. **Force Calculation**:
   - **Repulsive Forces**: Nodes repel each other to avoid overlap.
   - **Attractive Forces**: Connected nodes attract each other to minimize edge lengths.
3. **Cooling**: The repulsion constant is reduced over iterations to allow the system to settle.
4. **Output**: The final positions of the nodes are output in JSON format.

This script provides a basic force-directed layout that can be further refined or optimized depending on specific requirements.