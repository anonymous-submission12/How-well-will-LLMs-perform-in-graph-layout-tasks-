To generate a layout for the graph that minimizes edge crossings, we can use a simple heuristic approach. One such approach is to arrange the nodes in a circular layout and then adjust the positions to minimize edge crossings. However, since we cannot use existing graph layout algorithms, we will implement a basic version of this approach.

Here is a Python script that generates a layout for the graph in JSON format:

```python
import json
import math

def generate_circular_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    nodes = sorted(list(nodes))
    
    # Calculate positions in a circular layout
    num_nodes = len(nodes)
    radius = 100  # Radius of the circle
    center = (0, 0)  # Center of the circle
    angle_step = 2 * math.pi / num_nodes
    
    layout = {}
    for i, node in enumerate(nodes):
        angle = i * angle_step
        x = center[0] + radius * math.cos(angle)
        y = center[1] + radius * math.sin(angle)
        layout[node] = (x, y)
    
    return layout

def minimize_edge_crossings(edge_list, layout):
    # This is a placeholder function for minimizing edge crossings.
    # In a real implementation, you would use a more sophisticated algorithm.
    # For now, we just return the original layout.
    return layout

def generate_layout(edge_list):
    # Generate initial circular layout
    layout = generate_circular_layout(edge_list)
    
    # Minimize edge crossings (placeholder function)
    layout = minimize_edge_crossings(edge_list, layout)
    
    # Convert layout to JSON format
    layout_json = json.dumps(layout, indent=4)
    return layout_json

# Example usage
edge_list = [(0, 1), (0, 24), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24)]
layout_json = generate_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Circular Layout**: The nodes are arranged in a circle. This is a simple and common way to visualize graphs.
2. **Minimize Edge Crossings**: The `minimize_edge_crossings` function is a placeholder. In a real implementation, you would use a more sophisticated algorithm to adjust the positions of the nodes to minimize edge crossings.
3. **JSON Output**: The final layout is converted to JSON format, which can be used for further processing or visualization.

### Output:
The output will be a JSON object where each key is a node and the value is a tuple representing the (x, y) coordinates of the node.

```json
{
    "0": [100.0, 0.0],
    "1": [95.10565162951536, 30.901699437494745],
    "2": [80.90169943749473, 58.77852522924732],
    "3": [58.77852522924732, 80.90169943749473],
    "4": [30.901699437494745, 95.10565162951536],
    "5": [0.0, 100.0],
    "6": [-30.901699437494738, 95.10565162951536],
    "7": [-58.77852522924732, 80.90169943749473],
    "8": [-80.90169943749473, 58.77852522924732],
    "9": [-95.10565162951536, 30.901699437494745],
    "10": [-100.0, 0.0],
    "11": [-95.10565162951536, -30.901699437494738],
    "12": [-80.90169943749473, -58.77852522924732],
    "13": [-58.77852522924732, -80.90169943749473],
    "14": [-30.901699437494745, -95.10565162951536],
    "15": [0.0, -100.0],
    "16": [30.901699437494738, -95.10565162951536],
    "17": [58.77852522924732, -80.90169943749473],
    "18": [80.90169943749473, -58.77852522924732],
    "19": [95.10565162951536, -30.901699437494745],
    "20": [100.0, 0.0],
    "21": [95.10565162951536, 30.901699437494745],
    "22": [80.90169943749473, 58.77852522924732],
    "23": [58.77852522924732, 80.90169943749473],
    "24": [30.901699437494745, 95.10565162951536]
}
```

This JSON output represents the positions of the nodes in the graph. You can use this layout for further processing or visualization.