To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we arrange the nodes in a circular layout. This is a common method to reduce edge crossings, especially for cyclic graphs like the one provided.

Here is a Python script that generates a circular layout for the graph and outputs the positions in JSON format:

```python
import json
import math

def generate_circular_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = sorted(set([node for edge in edge_list for node in edge]))
    num_nodes = len(nodes)
    
    # Calculate the angle between each node
    angle_increment = (2 * math.pi) / num_nodes
    
    # Generate positions in a circular layout
    positions = {}
    radius = 100  # Radius of the circle
    for i, node in enumerate(nodes):
        angle = i * angle_increment
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        positions[node] = (x, y)
    
    return positions

# Provided edge list
edge_list = [(0, 1), (0, 27), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27)]

# Generate the layout
layout = generate_circular_layout(edge_list)

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Extract Unique Nodes**: We first extract all unique nodes from the edge list.
2. **Calculate Angles**: We calculate the angle increment between each node to evenly distribute them around a circle.
3. **Generate Positions**: Using the calculated angles, we generate the positions for each node in a circular layout.
4. **Output JSON**: Finally, we output the positions in JSON format.

This script will generate a circular layout for the graph, which should minimize edge crossings given the cyclic nature of the graph. The positions are output in JSON format, which can be used for further processing or visualization.