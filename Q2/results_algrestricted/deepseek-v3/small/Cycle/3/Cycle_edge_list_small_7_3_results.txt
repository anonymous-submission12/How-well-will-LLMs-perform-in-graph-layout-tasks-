To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we arrange the nodes in a circular layout. This is a common method to reduce edge crossings, especially for cyclic graphs like the one provided.

Here is a Python script that generates a circular layout for the graph and outputs the positions in JSON format:

```python
import json
import math

def generate_circular_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    nodes = sorted(list(nodes))
    
    # Calculate positions for each node in a circular layout
    num_nodes = len(nodes)
    radius = 100  # Radius of the circle
    center = (0, 0)  # Center of the circle
    angle_step = 2 * math.pi / num_nodes
    
    layout = {}
    for i, node in enumerate(nodes):
        angle = i * angle_step
        x = center[0] + radius * math.cos(angle)
        y = center[1] + radius * math.sin(angle)
        layout[node] = (x, y)
    
    return layout

# Provided edge list
edge_list = [(0, 1), (0, 26), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26)]

# Generate the layout
layout = generate_circular_layout(edge_list)

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Extract Unique Nodes**: The script first extracts all unique nodes from the edge list.
2. **Circular Layout Calculation**: The nodes are then placed on a circle with a given radius. The angle between each node is calculated as `2 * pi / num_nodes`, where `num_nodes` is the total number of nodes.
3. **Position Calculation**: For each node, its position is calculated using the cosine and sine functions to determine the x and y coordinates on the circle.
4. **Output**: The positions are stored in a dictionary and then converted to JSON format.

### Output Example:
The output will be a JSON object where each key is a node and the value is a tuple representing the (x, y) coordinates of the node on the circle.

```json
{
    "0": [100.0, 0.0],
    "1": [98.48077530122081, 17.364817766693033],
    "2": [93.96926207859083, 34.20201433256689],
    "3": [86.60254037844386, 50.0],
    "4": [76.60444431189781, 64.27876096865393],
    "5": [64.27876096865393, 76.60444431189781],
    "6": [50.0, 86.60254037844386],
    "7": [34.20201433256689, 93.96926207859083],
    "8": [17.364817766693033, 98.48077530122081],
    "9": [6.123233995736766e-15, 100.0],
    "10": [-17.36481776669303, 98.48077530122081],
    "11": [-34.20201433256688, 93.96926207859083],
    "12": [-50.0, 86.60254037844386],
    "13": [-64.27876096865393, 76.60444431189781],
    "14": [-76.60444431189781, 64.27876096865393],
    "15": [-86.60254037844386, 50.0],
    "16": [-93.96926207859083, 34.20201433256689],
    "17": [-98.48077530122081, 17.364817766693033],
    "18": [-100.0, 1.2246467991473532e-14],
    "19": [-98.48077530122081, -17.36481776669303],
    "20": [-93.96926207859083, -34.20201433256688],
    "21": [-86.60254037844386, -50.0],
    "22": [-76.60444431189781, -64.27876096865393],
    "23": [-64.27876096865393, -76.60444431189781],
    "24": [-50.0, -86.60254037844386],
    "25": [-34.20201433256689, -93.96926207859083],
    "26": [-17.364817766693033, -98.48077530122081]
}
```

This layout should minimize edge crossings for the given graph.