To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we arrange the nodes in a circular layout. This is a common method to reduce edge crossings, especially for cyclic graphs like the one provided.

Here is a Python script that generates a circular layout for the graph and outputs the positions in JSON format:

```python
import json
import math

def generate_circular_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    nodes = sorted(list(nodes))
    
    # Calculate positions for each node in a circular layout
    num_nodes = len(nodes)
    radius = 1.0  # Radius of the circle
    center = (0.0, 0.0)  # Center of the circle
    angle_step = 2 * math.pi / num_nodes  # Angle between each node
    
    layout = {}
    for i, node in enumerate(nodes):
        angle = i * angle_step
        x = center[0] + radius * math.cos(angle)
        y = center[1] + radius * math.sin(angle)
        layout[node] = (x, y)
    
    return layout

# Input edge list
edge_list = [(0, 1), (0, 22), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22)]

# Generate layout
layout = generate_circular_layout(edge_list)

# Output layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Extract Unique Nodes**: The script first extracts all unique nodes from the edge list.
2. **Circular Layout Calculation**: The nodes are then placed on a circle with a given radius. The angle between each node is calculated based on the total number of nodes.
3. **Position Calculation**: For each node, its position is calculated using trigonometric functions (`math.cos` and `math.sin`) to place it on the circumference of the circle.
4. **Output**: The positions are stored in a dictionary and then converted to JSON format.

### Output:
The output will be a JSON object where each key is a node, and the value is a tuple representing the `(x, y)` coordinates of that node on the 2D plane.

This approach minimizes edge crossings by arranging the nodes in a circular fashion, which is particularly effective for cyclic graphs like the one provided.