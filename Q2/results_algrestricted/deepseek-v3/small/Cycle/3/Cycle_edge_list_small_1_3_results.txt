To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we place the nodes in a circular layout. This approach is not perfect but can help reduce edge crossings, especially for cyclic graphs like the one provided.

Here is a Python script that generates a circular layout for the graph and outputs the positions in JSON format:

```python
import json
import math

def generate_circular_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = list(set([node for edge in edge_list for node in edge]))
    nodes.sort()  # Sort nodes to ensure consistent ordering
    
    # Calculate positions for each node in a circular layout
    num_nodes = len(nodes)
    radius = 100  # Radius of the circle
    center = (0, 0)  # Center of the circle
    angle_increment = (2 * math.pi) / num_nodes
    
    layout = {}
    for i, node in enumerate(nodes):
        angle = i * angle_increment
        x = center[0] + radius * math.cos(angle)
        y = center[1] + radius * math.sin(angle)
        layout[node] = (x, y)
    
    return layout

# Example usage
edge_list = [(0, 1), (0, 20), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20)]
layout = generate_circular_layout(edge_list)

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Node Extraction**: The script first extracts all unique nodes from the edge list.
2. **Circular Layout**: The nodes are placed in a circular layout. The angle between each node is calculated based on the total number of nodes.
3. **Position Calculation**: The positions of the nodes are calculated using trigonometric functions (`math.cos` and `math.sin`) to place them evenly around a circle.
4. **JSON Output**: The final layout is output in JSON format, where each node is mapped to its (x, y) coordinates.

### Output Example:
```json
{
    "0": [100.0, 0.0],
    "1": [95.10565162951536, 30.901699437494745],
    "2": [80.90169943749473, 58.77852522924732],
    "3": [58.77852522924732, 80.90169943749473],
    "4": [30.901699437494745, 95.10565162951536],
    "5": [0.0, 100.0],
    "6": [-30.901699437494738, 95.10565162951536],
    "7": [-58.77852522924732, 80.90169943749473],
    "8": [-80.90169943749473, 58.77852522924732],
    "9": [-95.10565162951536, 30.901699437494745],
    "10": [-100.0, 0.0],
    "11": [-95.10565162951536, -30.901699437494738],
    "12": [-80.90169943749473, -58.77852522924732],
    "13": [-58.77852522924732, -80.90169943749473],
    "14": [-30.901699437494745, -95.10565162951536],
    "15": [0.0, -100.0],
    "16": [30.901699437494738, -95.10565162951536],
    "17": [58.77852522924732, -80.90169943749473],
    "18": [80.90169943749473, -58.77852522924732],
    "19": [95.10565162951536, -30.901699437494745],
    "20": [100.0, 0.0]
}
```

This script provides a basic circular layout that can be used as a starting point for more advanced layout algorithms if needed.