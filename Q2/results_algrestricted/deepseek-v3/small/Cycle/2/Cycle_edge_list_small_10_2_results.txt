To generate a layout for the graph that maintains consistency between Euclidean distance and graph-theoretic distance, we can use a simple approach where we place the nodes in a circular layout. This ensures that the Euclidean distance between connected nodes is consistent with their graph-theoretic distance.

Here is the Python code to generate the layout:

```python
import math
import json

# Input edge list
edge_list = [(0, 1), (0, 29), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), 
             (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), 
             (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), 
             (25, 26), (26, 27), (27, 28), (28, 29)]

# Number of nodes
num_nodes = 30

# Calculate positions in a circular layout
radius = 100  # Radius of the circle
center = (0, 0)  # Center of the circle
angle_step = 2 * math.pi / num_nodes  # Angle between each node

positions = {}
for i in range(num_nodes):
    angle = i * angle_step
    x = center[0] + radius * math.cos(angle)
    y = center[1] + radius * math.sin(angle)
    positions[i] = (x, y)

# Convert positions to JSON format
layout_json = json.dumps(positions, indent=4)

# Output the layout in JSON format
print(layout_json)
```

### Explanation:
1. **Circular Layout**: The nodes are placed on a circle with a fixed radius. The angle between each node is calculated as `2 * pi / num_nodes`, where `num_nodes` is the total number of nodes in the graph.
2. **Positions Calculation**: For each node, its position is calculated using the polar coordinates `(r, theta)` and then converted to Cartesian coordinates `(x, y)`.
3. **JSON Output**: The positions are stored in a dictionary and then converted to JSON format using `json.dumps()`.

### Output:
The output will be a JSON object where each key is a node ID, and the value is a tuple `(x, y)` representing the position of the node in the 2D plane.

```json
{
    "0": [100.0, 0.0],
    "1": [98.48077530144183, 17.364817766693033],
    "2": [93.96926207859083, 34.20201433256689],
    "3": [86.60254037844386, 50.0],
    "4": [76.60444431189781, 64.27876096865393],
    "5": [64.27876096865393, 76.60444431189781],
    "6": [50.0, 86.60254037844386],
    "7": [34.20201433256689, 93.96926207859083],
    "8": [17.364817766693033, 98.48077530144183],
    "9": [6.123233995736766e-15, 100.0],
    "10": [-17.36481776669303, 98.48077530144183],
    "11": [-34.20201433256688, 93.96926207859083],
    "12": [-50.0, 86.60254037844386],
    "13": [-64.27876096865393, 76.60444431189781],
    "14": [-76.60444431189781, 64.27876096865393],
    "15": [-86.60254037844386, 50.0],
    "16": [-93.96926207859083, 34.20201433256689],
    "17": [-98.48077530144183, 17.364817766693033],
    "18": [-100.0, 1.2246467991473532e-14],
    "19": [-98.48077530144183, -17.36481776669303],
    "20": [-93.96926207859083, -34.20201433256688],
    "21": [-86.60254037844386, -50.0],
    "22": [-76.60444431189781, -64.27876096865393],
    "23": [-64.27876096865393, -76.60444431189781],
    "24": [-50.0, -86.60254037844386],
    "25": [-34.20201433256689, -93.96926207859083],
    "26": [-17.364817766693033, -98.48077530144183],
    "27": [-1.8369701987210297e-14, -100.0],
    "28": [17.36481776669303, -98.48077530144183],
    "29": [34.20201433256688, -93.96926207859083]
}
```

This JSON object represents the positions of the nodes in the graph. The positions are calculated such that the Euclidean distance between connected nodes is consistent with their graph-theoretic distance.