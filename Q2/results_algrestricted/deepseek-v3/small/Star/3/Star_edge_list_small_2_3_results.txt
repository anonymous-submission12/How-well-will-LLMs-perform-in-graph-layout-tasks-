To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we place the central node (node 0) at the center and arrange the other nodes in a circular fashion around it. This approach is straightforward and ensures that the edges do not cross each other.

Here is the Python code to generate the layout:

```python
import math
import json

def generate_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    nodes = list(nodes)
    
    # Determine the central node (node with the most connections)
    central_node = 0  # Assuming node 0 is the central node based on the edge list
    
    # Remove the central node from the list of nodes
    nodes.remove(central_node)
    
    # Calculate positions for the nodes
    layout = {}
    layout[central_node] = (0.0, 0.0)  # Place the central node at the center
    
    # Arrange the other nodes in a circle around the central node
    num_nodes = len(nodes)
    radius = 1.0  # Radius of the circle
    angle_step = 2 * math.pi / num_nodes
    
    for i, node in enumerate(nodes):
        angle = i * angle_step
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        layout[node] = (x, y)
    
    return layout

# Example usage
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
             (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), 
             (0, 20), (0, 21)]

layout = generate_layout(edge_list)

# Convert the layout to JSON format
layout_json = json.dumps(layout, indent=4)
print(layout_json)
```

### Explanation:
1. **Central Node Placement**: The central node (node 0) is placed at the origin `(0.0, 0.0)`.
2. **Circular Arrangement**: The remaining nodes are placed in a circular fashion around the central node. The angle between each node is calculated as `2 * pi / num_nodes`, where `num_nodes` is the number of nodes excluding the central node.
3. **Radius**: The radius of the circle is set to `1.0`, but you can adjust it as needed.
4. **Output**: The layout is returned as a dictionary where the keys are node IDs and the values are tuples representing the `(x, y)` coordinates. The dictionary is then converted to JSON format.

### Output:
The output will be a JSON object representing the positions of the nodes in the graph. For example:

```json
{
    "0": [0.0, 0.0],
    "1": [1.0, 0.0],
    "2": [0.8090169943749475, 0.5877852522924731],
    "3": [0.30901699437494745, 0.9510565162951535],
    "4": [-0.30901699437494734, 0.9510565162951536],
    "5": [-0.8090169943749473, 0.5877852522924732],
    "6": [-1.0, 1.2246467991473532e-16],
    "7": [-0.8090169943749475, -0.587785252292473],
    "8": [-0.30901699437494756, -0.9510565162951535],
    "9": [0.30901699437494723, -0.9510565162951536],
    "10": [0.8090169943749473, -0.5877852522924732],
    "11": [0.9510565162951535, -0.3090169943749475],
    "12": [0.5877852522924731, -0.8090169943749475],
    "13": [1.2246467991473532e-16, -1.0],
    "14": [-0.587785252292473, -0.8090169943749475],
    "15": [-0.9510565162951535, -0.3090169943749477],
    "16": [-0.9510565162951536, 0.30901699437494734],
    "17": [-0.5877852522924732, 0.8090169943749473],
    "18": [-1.8369701987210297e-16, 1.0],
    "19": [0.587785252292473, 0.8090169943749475],
    "20": [0.9510565162951535, 0.30901699437494745],
    "21": [0.9510565162951536, -0.30901699437494723]
}
```

This JSON object can be used to visualize the graph or for further processing.