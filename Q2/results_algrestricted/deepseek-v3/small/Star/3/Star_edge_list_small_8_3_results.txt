To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we place the central node (node 0) at the center and arrange the other nodes in a circular fashion around it. This approach is straightforward and ensures that edges do not cross each other.

Here is the Python code to generate the layout:

```python
import math
import json

# Input edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
             (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), 
             (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27)]

# Number of nodes
num_nodes = max(max(edge) for edge in edge_list) + 1

# Center node position
center_x, center_y = 0.0, 0.0

# Radius of the circle
radius = 1.0

# Calculate positions for each node
positions = {}
positions[0] = (center_x, center_y)  # Center node

# Arrange other nodes in a circle around the center
angle_increment = 2 * math.pi / (num_nodes - 1)
for i in range(1, num_nodes):
    angle = i * angle_increment
    x = center_x + radius * math.cos(angle)
    y = center_y + radius * math.sin(angle)
    positions[i] = (x, y)

# Convert positions to JSON format
layout_json = {str(node): {"x": x, "y": y} for node, (x, y) in positions.items()}

# Output the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Center Node**: Node `0` is placed at the center `(0.0, 0.0)`.
2. **Circular Arrangement**: The remaining nodes are placed in a circular fashion around the center node. The angle between each node is calculated as `2 * pi / (num_nodes - 1)`.
3. **Radius**: The radius of the circle is set to `1.0`, but you can adjust it as needed.
4. **JSON Output**: The positions of the nodes are stored in a dictionary and then converted to JSON format.

### Output:
The output will be a JSON object where each key is a node ID, and the value is a dictionary containing the `x` and `y` coordinates of the node.

Example output:
```json
{
    "0": {
        "x": 0.0,
        "y": 0.0
    },
    "1": {
        "x": 1.0,
        "y": 0.0
    },
    "2": {
        "x": 0.8090169943749475,
        "y": 0.5877852522924731
    },
    "3": {
        "x": 0.30901699437494745,
        "y": 0.9510565162951535
    },
    ...
}
```

This layout ensures that edges do not cross each other, as all nodes are arranged in a circle around the central node.