To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we place the central node (node 0) at the center and arrange the other nodes in a circular fashion around it. This approach is straightforward and ensures that the edges do not cross each other.

Here is the Python code to generate the layout:

```python
import math
import json

# Input edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
             (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), 
             (0, 20), (0, 21), (0, 22)]

# Extract unique nodes
nodes = set()
for edge in edge_list:
    nodes.add(edge[0])
    nodes.add(edge[1])
nodes = list(nodes)

# Center node (node 0)
center_node = 0

# Radius of the circle
radius = 100

# Calculate positions
positions = {}
positions[center_node] = (0, 0)  # Center node at (0, 0)

# Arrange other nodes in a circle around the center node
num_nodes = len(nodes) - 1  # Exclude the center node
angle_increment = (2 * math.pi) / num_nodes

for i, node in enumerate(nodes):
    if node == center_node:
        continue
    angle = i * angle_increment
    x = radius * math.cos(angle)
    y = radius * math.sin(angle)
    positions[node] = (x, y)

# Convert positions to JSON format
layout_json = json.dumps(positions, indent=4)

# Output the layout in JSON format
print(layout_json)
```

### Explanation:
1. **Input Edge List**: The edge list is provided as input.
2. **Extract Unique Nodes**: We extract all unique nodes from the edge list.
3. **Center Node**: Node 0 is considered the center node and is placed at the origin `(0, 0)`.
4. **Circular Arrangement**: The remaining nodes are arranged in a circle around the center node. The angle between each node is calculated based on the number of nodes.
5. **Positions Calculation**: The positions of the nodes are calculated using trigonometric functions (`math.cos` and `math.sin`).
6. **JSON Output**: The positions are converted to JSON format and printed.

### Output:
The output will be a JSON object where each key is a node, and the value is a tuple representing the `(x, y)` coordinates of the node.

```json
{
    "0": [
        0,
        0
    ],
    "1": [
        100.0,
        0.0
    ],
    "2": [
        80.90169943749476,
        58.77852522924732
    ],
    "3": [
        30.90169943749476,
        95.10565162951536
    ],
    "4": [
        -30.90169943749474,
        95.10565162951536
    ],
    "5": [
        -80.90169943749474,
        58.77852522924733
    ],
    "6": [
        -100.0,
        1.2246467991473532e-14
    ],
    "7": [
        -80.90169943749475,
        -58.77852522924731
    ],
    "8": [
        -30.90169943749476,
        -95.10565162951536
    ],
    "9": [
        30.90169943749473,
        -95.10565162951536
    ],
    "10": [
        80.90169943749473,
        -58.77852522924734
    ],
    "11": [
        100.0,
        -2.4492935982947064e-14
    ],
    "12": [
        80.90169943749476,
        58.77852522924732
    ],
    "13": [
        30.90169943749476,
        95.10565162951536
    ],
    "14": [
        -30.90169943749474,
        95.10565162951536
    ],
    "15": [
        -80.90169943749474,
        58.77852522924733
    ],
    "16": [
        -100.0,
        1.2246467991473532e-14
    ],
    "17": [
        -80.90169943749475,
        -58.77852522924731
    ],
    "18": [
        -30.90169943749476,
        -95.10565162951536
    ],
    "19": [
        30.90169943749473,
        -95.10565162951536
    ],
    "20": [
        80.90169943749473,
        -58.77852522924734
    ],
    "21": [
        100.0,
        -2.4492935982947064e-14
    ],
    "22": [
        80.90169943749476,
        58.77852522924732
    ]
}
```

This layout ensures that the edges do not cross each other, as all nodes are arranged in a circular fashion around the central node.