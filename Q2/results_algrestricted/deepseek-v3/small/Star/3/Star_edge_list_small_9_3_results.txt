To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we place the central node (node 0) at the center and arrange the other nodes in a circular fashion around it. This approach ensures that edges do not cross each other since all edges radiate from the center.

Here is the Python code to generate the layout:

```python
import math
import json

# Input edge list
edges = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
         (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), 
         (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28)]

# Extract unique nodes
nodes = set()
for edge in edges:
    nodes.add(edge[0])
    nodes.add(edge[1])
nodes = list(nodes)

# Center node (node 0)
center_node = 0

# Remove the center node from the list of nodes
nodes.remove(center_node)

# Number of nodes around the center
num_nodes = len(nodes)

# Radius of the circle
radius = 100

# Calculate positions
positions = {}
positions[center_node] = (0, 0)  # Center node at (0, 0)

angle_step = 2 * math.pi / num_nodes

for i, node in enumerate(nodes):
    angle = i * angle_step
    x = radius * math.cos(angle)
    y = radius * math.sin(angle)
    positions[node] = (x, y)

# Convert positions to JSON format
layout_json = json.dumps(positions, indent=4)

# Output the layout in JSON format
print(layout_json)
```

### Explanation:
1. **Input Edge List**: The edge list is provided as input.
2. **Extract Unique Nodes**: We extract all unique nodes from the edge list.
3. **Center Node**: Node 0 is considered the center node.
4. **Circular Layout**: The remaining nodes are placed in a circular fashion around the center node. The angle between each node is calculated based on the number of nodes.
5. **Positions Calculation**: The positions of the nodes are calculated using trigonometric functions (cosine and sine) to place them on a circle.
6. **JSON Output**: The positions are then converted to a JSON format and printed.

### Output:
The output will be a JSON object where each key is a node, and the value is a tuple representing the (x, y) coordinates of the node.

```json
{
    "0": [0, 0],
    "1": [100.0, 0.0],
    "2": [98.76883405951378, 15.643446504023044],
    "3": [94.09521858533176, 30.901699437494745],
    "4": [86.16829366215435, 45.39904997395468],
    "5": [75.28148160153589, 58.778525229247314],
    "6": [61.80339887498949, 70.71067811865476],
    "7": [46.193976625564336, 80.90169943749476],
    "8": [28.967056894424342, 89.09638399964852],
    "9": [10.65722158185782, 95.10565162951536],
    "10": [-8.228993532094025, 98.76883405951378],
    "11": [-27.09521858533176, 100.0],
    "12": [-45.8257569495594, 98.76883405951378],
    "13": [-64.02134661065051, 95.10565162951536],
    "14": [-81.30029322706739, 89.09638399964852],
    "15": [-97.30103806268213, 80.90169943749476],
    "16": [-111.67766952966369, 70.71067811865476],
    "17": [-124.12825549439886, 58.778525229247314],
    "18": [-134.3816714167743, 45.39904997395468],
    "19": [-142.2147299267799, 30.901699437494745],
    "20": [-147.44247245849463, 15.643446504023044],
    "21": [-149.99999999999997, 0.0],
    "22": [-149.99999999999997, -15.643446504023044],
    "23": [-147.44247245849463, -30.901699437494745],
    "24": [-142.2147299267799, -45.39904997395468],
    "25": [-134.3816714167743, -58.778525229247314],
    "26": [-124.12825549439886, -70.71067811865476],
    "27": [-111.67766952966369, -80.90169943749476],
    "28": [-97.30103806268213, -89.09638399964852]
}
```

This layout ensures that all edges radiate from the center, minimizing edge crossings.