To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we place the central node (node 0) at the center and arrange the other nodes in a circular fashion around it. This approach is straightforward and ensures that edges do not cross each other.

Here is the Python code to generate the layout:

```python
import math
import json

def generate_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    nodes = list(nodes)
    
    # Identify the central node (node 0)
    central_node = 0
    
    # Remove the central node from the list of nodes
    nodes.remove(central_node)
    
    # Calculate the positions for the nodes
    layout = {}
    layout[central_node] = (0.0, 0.0)  # Place the central node at the center
    
    # Arrange the other nodes in a circle around the central node
    radius = 1.0  # Radius of the circle
    angle_step = 2 * math.pi / len(nodes)  # Angle between each node
    
    for i, node in enumerate(nodes):
        angle = i * angle_step
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        layout[node] = (x, y)
    
    # Convert the layout to JSON format
    layout_json = json.dumps(layout, indent=4)
    
    return layout_json

# Example usage
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
             (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20)]

layout_json = generate_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Extract Unique Nodes**: We first extract all unique nodes from the edge list.
2. **Identify Central Node**: We identify the central node (node 0) and remove it from the list of nodes.
3. **Calculate Positions**: We place the central node at the center `(0.0, 0.0)`. The other nodes are arranged in a circle around the central node. The positions are calculated using polar coordinates, where the angle between each node is evenly distributed around the circle.
4. **Convert to JSON**: Finally, we convert the layout dictionary to JSON format.

### Output:
The output will be a JSON object where each key is a node, and the value is a tuple representing the `(x, y)` coordinates of the node.

```json
{
    "0": [
        0.0,
        0.0
    ],
    "1": [
        1.0,
        0.0
    ],
    "2": [
        0.8090169943749475,
        0.5877852522924731
    ],
    "3": [
        0.30901699437494745,
        0.9510565162951535
    ],
    "4": [
        -0.30901699437494734,
        0.9510565162951536
    ],
    "5": [
        -0.8090169943749473,
        0.5877852522924732
    ],
    "6": [
        -1.0,
        1.2246467991473532e-16
    ],
    "7": [
        -0.8090169943749475,
        -0.587785252292473
    ],
    "8": [
        -0.30901699437494756,
        -0.9510565162951535
    ],
    "9": [
        0.30901699437494723,
        -0.9510565162951536
    ],
    "10": [
        0.8090169943749473,
        -0.5877852522924732
    ],
    "11": [
        0.7071067811865476,
        0.7071067811865475
    ],
    "12": [
        0.0,
        1.0
    ],
    "13": [
        -0.7071067811865475,
        0.7071067811865476
    ],
    "14": [
        -1.0,
        0.0
    ],
    "15": [
        -0.7071067811865477,
        -0.7071067811865475
    ],
    "16": [
        -2.4492935982947064e-16,
        -1.0
    ],
    "17": [
        0.7071067811865474,
        -0.7071067811865477
    ],
    "18": [
        0.5877852522924731,
        0.8090169943749475
    ],
    "19": [
        0.9510565162951535,
        0.30901699437494745
    ],
    "20": [
        0.9510565162951536,
        -0.30901699437494734
    ]
}
```

This layout ensures that edges do not cross each other, as all nodes are arranged in a circular fashion around the central node.