To generate a layout for the given graph that maintains consistency between Euclidean distance and graph-theoretic distance, we can use a simple approach where we place the central node (node 0) at the origin and place the other nodes at equal distances from the center. This will ensure that the Euclidean distance between the central node and any other node is consistent with the graph-theoretic distance (which is 1 for all edges).

Here is the Python code to generate the layout:

```python
import json
import math

# Input edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
             (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20)]

# Number of nodes
num_nodes = 21

# Initialize positions
positions = {}

# Place the central node (node 0) at the origin
positions[0] = (0.0, 0.0)

# Calculate the positions of the other nodes
radius = 1.0  # Distance from the center
angle_step = 2 * math.pi / (num_nodes - 1)  # Angle between nodes

for i in range(1, num_nodes):
    angle = (i - 1) * angle_step
    x = radius * math.cos(angle)
    y = radius * math.sin(angle)
    positions[i] = (x, y)

# Convert positions to JSON format
layout_json = json.dumps(positions, indent=4)

# Output the layout in JSON format
print(layout_json)
```

### Explanation:
1. **Central Node Placement**: Node 0 is placed at the origin `(0.0, 0.0)`.
2. **Other Nodes Placement**: The other nodes are placed at equal distances from the center, forming a circle around the central node. The distance from the center is set to `1.0`, and the angle between nodes is calculated to ensure they are evenly spaced.
3. **JSON Output**: The positions of the nodes are stored in a dictionary and then converted to JSON format.

### Output:
The output will be a JSON object where each key is a node ID, and the value is a tuple representing the `(x, y)` coordinates of the node.

```json
{
    "0": [
        0.0,
        0.0
    ],
    "1": [
        1.0,
        0.0
    ],
    "2": [
        0.8090169943749475,
        0.5877852522924731
    ],
    "3": [
        0.30901699437494745,
        0.9510565162951535
    ],
    "4": [
        -0.30901699437494734,
        0.9510565162951536
    ],
    "5": [
        -0.8090169943749473,
        0.5877852522924732
    ],
    "6": [
        -1.0,
        1.2246467991473532e-16
    ],
    "7": [
        -0.8090169943749475,
        -0.587785252292473
    ],
    "8": [
        -0.30901699437494756,
        -0.9510565162951535
    ],
    "9": [
        0.30901699437494723,
        -0.9510565162951536
    ],
    "10": [
        0.8090169943749473,
        -0.5877852522924732
    ],
    "11": [
        0.9510565162951535,
        -0.3090169943749475
    ],
    "12": [
        0.5877852522924732,
        -0.8090169943749473
    ],
    "13": [
        1.2246467991473532e-16,
        -1.0
    ],
    "14": [
        -0.587785252292473,
        -0.8090169943749475
    ],
    "15": [
        -0.9510565162951535,
        -0.3090169943749477
    ],
    "16": [
        -0.9510565162951536,
        0.3090169943749473
    ],
    "17": [
        -0.5877852522924734,
        0.8090169943749473
    ],
    "18": [
        -2.4492935982947064e-16,
        1.0
    ],
    "19": [
        0.5877852522924731,
        0.8090169943749475
    ],
    "20": [
        0.9510565162951535,
        0.30901699437494745
    ]
}
```

This layout ensures that the Euclidean distance between the central node and any other node is consistent with the graph-theoretic distance.