To generate a layout for the graph that maintains consistency between Euclidean distance and graph-theoretic distance, we can use a simple approach where we place the central node (node 0) at the origin and arrange the other nodes in a circular pattern around it. The radius of the circle can be determined based on the number of nodes.

Here is the Python code to generate the layout:

```python
import math
import json

# Input edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
             (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), 
             (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), 
             (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37), 
             (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), 
             (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), 
             (0, 56), (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), 
             (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71), (0, 72), (0, 73), 
             (0, 74), (0, 75)]

# Extract unique nodes
nodes = set()
for edge in edge_list:
    nodes.add(edge[0])
    nodes.add(edge[1])
nodes = sorted(list(nodes))

# Number of nodes
num_nodes = len(nodes)

# Center node (node 0) at the origin
layout = {0: (0.0, 0.0)}

# Arrange other nodes in a circle around the center
radius = 1.0  # Radius of the circle
angle_increment = (2 * math.pi) / (num_nodes - 1)  # Angle between nodes

for i, node in enumerate(nodes[1:]):  # Skip the center node
    angle = i * angle_increment
    x = radius * math.cos(angle)
    y = radius * math.sin(angle)
    layout[node] = (x, y)

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Input Edge List**: The edge list is provided as input.
2. **Extract Unique Nodes**: We extract all unique nodes from the edge list.
3. **Center Node**: Node 0 is placed at the origin `(0.0, 0.0)`.
4. **Circular Arrangement**: The remaining nodes are arranged in a circle around the center node. The radius of the circle is set to 1.0, and the angle between nodes is calculated based on the number of nodes.
5. **Output**: The layout is output in JSON format, where each node is mapped to its `(x, y)` coordinates.

### Output Example:
```json
{
    "0": [0.0, 0.0],
    "1": [1.0, 0.0],
    "2": [0.8090169943749475, 0.5877852522924731],
    "3": [0.30901699437494745, 0.9510565162951535],
    "4": [-0.30901699437494734, 0.9510565162951536],
    "5": [-0.8090169943749473, 0.5877852522924732],
    "6": [-1.0, 1.2246467991473532e-16],
    "7": [-0.8090169943749475, -0.587785252292473],
    "8": [-0.30901699437494756, -0.9510565162951535],
    "9": [0.30901699437494723, -0.9510565162951536],
    "10": [0.8090169943749473, -0.5877852522924732],
    ...
}
```

This layout ensures that the Euclidean distance between the center node and any other node is consistent with the graph-theoretic distance (which is 1 for all edges in this case).