To generate a layout for the given graph that maintains consistency between Euclidean distance and graph-theoretic distance, we can use a simple approach where we place the central node (node 0) at the origin and arrange the other nodes in a circular pattern around it. The radius of the circle can be determined by the number of nodes.

Here is the Python code to generate the layout:

```python
import math
import json

# Input edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
             (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), 
             (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), 
             (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37), 
             (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), 
             (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), 
             (0, 56), (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), 
             (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71), (0, 72), (0, 73), 
             (0, 74), (0, 75), (0, 76), (0, 77)]

# Extract unique nodes
nodes = set()
for edge in edge_list:
    nodes.add(edge[0])
    nodes.add(edge[1])
nodes = sorted(list(nodes))

# Number of nodes
num_nodes = len(nodes)

# Calculate positions
positions = {}
center = (0.0, 0.0)  # Center node (node 0)
positions[0] = center

# Radius of the circle
radius = 1.0

# Angle between nodes
angle_increment = (2 * math.pi) / (num_nodes - 1)

# Assign positions to the other nodes
for i, node in enumerate(nodes[1:]):
    angle = i * angle_increment
    x = radius * math.cos(angle)
    y = radius * math.sin(angle)
    positions[node] = (x, y)

# Convert positions to JSON format
layout_json = {str(node): pos for node, pos in positions.items()}

# Output the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Input Edge List**: The edge list is provided as input.
2. **Extract Unique Nodes**: We extract all unique nodes from the edge list.
3. **Calculate Positions**:
   - The central node (node 0) is placed at the origin `(0.0, 0.0)`.
   - The other nodes are placed in a circular pattern around the center. The radius of the circle is set to `1.0`.
   - The angle between each node is calculated as `(2 * pi) / (num_nodes - 1)`.
4. **Assign Positions**: The positions of the nodes are calculated using polar coordinates and then converted to Cartesian coordinates.
5. **Output JSON**: The positions are converted to a JSON format and printed.

This layout ensures that the Euclidean distance between the central node and any other node is consistent with the graph-theoretic distance (which is 1 for all edges in this case).