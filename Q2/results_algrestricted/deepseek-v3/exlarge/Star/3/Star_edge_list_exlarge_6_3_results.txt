To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we place the central node (node 0) at the center and arrange the other nodes in a circular fashion around it. This approach is straightforward and ensures that edges do not cross each other.

Here is the Python code to generate the layout:

```python
import math
import json

# Input edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
             (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), 
             (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), 
             (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37), 
             (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), 
             (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), 
             (0, 56), (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), 
             (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71), (0, 72), (0, 73), 
             (0, 74), (0, 75)]

# Number of nodes
num_nodes = max(max(edge) for edge in edge_list) + 1

# Center node (node 0) position
center_x, center_y = 0.0, 0.0

# Radius of the circle
radius = 1.0

# Calculate positions for each node
positions = {}
positions[0] = (center_x, center_y)

# Calculate the angle between each node
angle_increment = (2 * math.pi) / (num_nodes - 1)

for i in range(1, num_nodes):
    angle = angle_increment * (i - 1)
    x = center_x + radius * math.cos(angle)
    y = center_y + radius * math.sin(angle)
    positions[i] = (x, y)

# Convert positions to JSON format
layout_json = json.dumps(positions, indent=4)

# Output the layout in JSON format
print(layout_json)
```

### Explanation:
1. **Center Node**: Node 0 is placed at the center `(0.0, 0.0)`.
2. **Circular Arrangement**: The remaining nodes are placed on a circle around the center node. The angle between each node is calculated as `(2 * pi) / (num_nodes - 1)`.
3. **Positions Calculation**: The positions of the nodes are calculated using the polar coordinates `(r * cos(theta), r * sin(theta))`, where `r` is the radius of the circle and `theta` is the angle.
4. **JSON Output**: The positions are stored in a dictionary and then converted to JSON format.

### Output:
The output will be a JSON object where each key is a node ID, and the value is a tuple representing the `(x, y)` coordinates of the node.

```json
{
    "0": [
        0.0,
        0.0
    ],
    "1": [
        1.0,
        0.0
    ],
    "2": [
        0.8090169943749475,
        0.5877852522924731
    ],
    "3": [
        0.30901699437494745,
        0.9510565162951535
    ],
    "4": [
        -0.30901699437494734,
        0.9510565162951536
    ],
    "5": [
        -0.8090169943749473,
        0.5877852522924732
    ],
    "6": [
        -1.0,
        1.2246467991473532e-16
    ],
    "7": [
        -0.8090169943749475,
        -0.587785252292473
    ],
    "8": [
        -0.30901699437494756,
        -0.9510565162951535
    ],
    "9": [
        0.30901699437494723,
        -0.9510565162951536
    ],
    "10": [
        0.8090169943749473,
        -0.5877852522924732
    ],
    "11": [
        1.0,
        -2.4492935982947064e-16
    ],
    "12": [
        0.8090169943749475,
        0.587785252292473
    ],
    "13": [
        0.30901699437494756,
        0.9510565162951535
    ],
    "14": [
        -0.30901699437494723,
        0.9510565162951536
    ],
    "15": [
        -0.8090169943749473,
        0.5877852522924732
    ],
    "16": [
        -1.0,
        3.6739403974420594e-16
    ],
    "17": [
        -0.8090169943749475,
        -0.587785252292473
    ],
    "18": [
        -0.30901699437494756,
        -0.9510565162951535
    ],
    "19": [
        0.30901699437494723,
        -0.9510565162951536
    ],
    "20": [
        0.8090169943749473,
        -0.5877852522924732
    ],
    "21": [
        1.0,
        -4.898587196589413e-16
    ],
    "22": [
        0.8090169943749475,
        0.587785252292473
    ],
    "23": [
        0.30901699437494756,
        0.9510565162951535
    ],
    "24": [
        -0.30901699437494723,
        0.9510565162951536
    ],
    "25": [
        -0.8090169943749473,
        0.5877852522924732
    ],
    "26": [
        -1.0,
        6.123233995736766e-16
    ],
    "27": [
        -0.8090169943749475,
        -0.587785252292473
    ],
    "28": [
        -0.30901699437494756,
        -0.9510565162951535
    ],
    "29": [
        0.30901699437494723,
        -0.9510565162951536
    ],
    "30": [
        0.8090169943749473,
        -0.5877852522924732
    ],
    "31": [
        1.0,
        -7.347880794884119e-16
    ],
    "32": [
        0.8090169943749475,
        0.587785252292473
    ],
    "33": [
        0.30901699437494756,
        0.9510565162951535
    ],
    "34": [
        -0.30901699437494723,
        0.9510565162951536
    ],
    "35": [
        -0.8090169943749473,
        0.5877852522924732
    ],
    "36": [
        -1.0,
        8.572527594031472e-16
    ],
    "37": [
        -0.8090169943749475,
        -0.587785252292473
    ],
    "38": [
        -0.30901699437494756,
        -0.9510565162951535
    ],
    "39": [
        0.30901699437494723,
        -0.9510565162951536
    ],
    "40": [
        0.8090169943749473,
        -0.5877852522924732
    ],
    "41": [
        1.0,
        -9.797174393178826e-16
    ],
    "42": [
        0.8090169943749475,
        0.587785252292473
    ],
    "43": [
        0.30901699437494756,
        0.9510565162951535
    ],
    "44": [
        -0.30901699437494723,
        0.9510565162951536
    ],
    "45": [
        -0.8090169943749473,
        0.5877852522924732
    ],
    "46": [
        -1.0,
        1.102182119232618e-15
    ],
    "47": [
        -0.8090169943749475,
        -0.587785252292473
    ],
    "48": [
        -0.30901699437494756,
        -0.9510565162951535
    ],
    "49": [
        0.30901699437494723,
        -0.9510565162951536
    ],
    "50": [
        0.8090169943749473,
        -0.5877852522924732
    ],
    "51": [
        1.0,
        -1.2246467991473533e-15
    ],
    "52": [
        0.8090169943749475,
        0.587785252292473
    ],
    "53": [
        0.30901699437494756,
        0.9510565162951535
    ],
    "54": [
        -0.30901699437494723,
        0.9510565162951536
    ],
    "55": [
        -0.8090169943749473,
        0.5877852522924732
    ],
    "56": [
        -1.0,
        1.3471114790620887e-15
    ],
    "57": [
        -0.8090169943749475,
        -0.587785252292473
    ],
    "58": [
        -0.30901699437494756,
        -0.9510565162951535
    ],
    "59": [
        0.30901699437494723,
        -0.9510565162951536
    ],
    "60": [
        0.8090169943749473,
        -0.5877852522924732
    ],
    "61": [
        1.0,
        -1.4695761589768238e-15
    ],
    "62": [
        0.8090169943749475,
        0.587785252292473
    ],
    "63": [
        0.30901699437494756,
        0.9510565162951535
    ],
    "64": [
        -0.30901699437494723,
        0.9510565162951536
    ],
    "65": [
        -0.8090169943749473,
        0.5877852522924732
    ],
    "66": [
        -1.0,
        1.591988259969635e-15
    ],
    "67": [
        -0.8090169943749475,
        -0.587785252292473
    ],
    "68": [
        -0.30901699437494756,
        -0.9510565162951535
    ],
    "69": [
        0.30901699437494723,
        -0.9510565162951536
    ],
    "70": [
        0.8090169943749473,
        -0.5877852522924732
    ],
    "71": [
        1.0,
        -1.7145055188062944e-15
    ],
    "72": [
        0.8090169943749475,
        0.587785252292473
    ],
    "73": [
        0.30901699437494756,
        0.9510565162951535
    ],
    "74": [
        -0.30901699437494723,
        0.9510565162951536
    ],
    "75": [
        -0.8090169943749473,
        0.5877852522924732
    ]
}
```

This layout ensures that all edges radiate from the center node without crossing each other.