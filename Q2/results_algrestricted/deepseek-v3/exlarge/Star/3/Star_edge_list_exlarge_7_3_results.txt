To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we place the central node (node 0) at the center and arrange the other nodes in a circular fashion around it. This approach is straightforward and ensures that edges do not cross each other.

Here is the Python code to generate the layout:

```python
import math
import json

# Input edge list
edges = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
         (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), 
         (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), 
         (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37), 
         (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), 
         (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), 
         (0, 56), (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), 
         (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71), (0, 72), (0, 73), 
         (0, 74), (0, 75), (0, 76)]

# Extract unique nodes
nodes = set()
for edge in edges:
    nodes.add(edge[0])
    nodes.add(edge[1])
nodes = list(nodes)

# Center node (node 0) position
center_x, center_y = 0.0, 0.0

# Radius of the circle
radius = 1.0

# Calculate positions for the other nodes
layout = {}
layout[0] = (center_x, center_y)

num_nodes = len(nodes) - 1  # Exclude the center node
angle_increment = (2 * math.pi) / num_nodes

for i, node in enumerate(nodes):
    if node == 0:
        continue
    angle = i * angle_increment
    x = center_x + radius * math.cos(angle)
    y = center_y + radius * math.sin(angle)
    layout[node] = (x, y)

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Input Edge List**: The edge list is provided as input.
2. **Extract Unique Nodes**: We extract all unique nodes from the edge list.
3. **Center Node Position**: The central node (node 0) is placed at the center `(0.0, 0.0)`.
4. **Circular Layout**: The other nodes are placed in a circular fashion around the center node. The angle between each node is calculated as `(2 * pi) / num_nodes`, where `num_nodes` is the number of nodes excluding the center node.
5. **Output**: The layout is output in JSON format, where each node is mapped to its `(x, y)` coordinates.

This approach ensures that edges do not cross each other, as all edges radiate from the center node to the nodes on the circumference.