To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we place the central node (node 0) at the center and arrange the other nodes in a circular fashion around it. This approach ensures that edges radiate outward from the center, minimizing crossings.

Here is the Python code to generate the layout:

```python
import math
import json

# Input edge list
edges = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
         (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), 
         (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), 
         (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37), 
         (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), 
         (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), 
         (0, 56), (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), 
         (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70)]

# Extract unique nodes
nodes = set()
for edge in edges:
    nodes.add(edge[0])
    nodes.add(edge[1])
nodes = list(nodes)

# Center node (node 0)
center_node = 0

# Remove the center node from the list of nodes
nodes.remove(center_node)

# Number of nodes (excluding the center node)
num_nodes = len(nodes)

# Radius of the circle
radius = 100

# Calculate positions
layout = {}
layout[center_node] = (0, 0)  # Center node at (0, 0)

for i, node in enumerate(nodes):
    angle = 2 * math.pi * i / num_nodes
    x = radius * math.cos(angle)
    y = radius * math.sin(angle)
    layout[node] = (x, y)

# Convert layout to JSON format
layout_json = json.dumps(layout, indent=4)

# Output the layout in JSON format
print(layout_json)
```

### Explanation:
1. **Input Edge List**: The edge list is provided as input.
2. **Extract Unique Nodes**: We extract all unique nodes from the edge list.
3. **Center Node**: Node `0` is identified as the center node.
4. **Circular Layout**: The remaining nodes are arranged in a circular fashion around the center node. The angle between each node is calculated to ensure they are evenly spaced.
5. **Radius**: The radius of the circle is set to `100` (you can adjust this value as needed).
6. **JSON Output**: The layout is converted to JSON format and printed.

### Output:
The output will be a JSON object where each key is a node, and the value is a tuple representing the `(x, y)` coordinates of that node. The center node `0` will be at `(0, 0)`, and the other nodes will be arranged in a circle around it.

This approach minimizes edge crossings because all edges radiate outward from the center node, and no edges cross each other.