To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we arrange the nodes in a circular layout. This is a common method to reduce edge crossings, especially for star-like graphs where one central node is connected to many others.

Hereâ€™s a Python script that generates a circular layout for the given graph and outputs the layout in JSON format:

```python
import json
import math

def generate_circular_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    nodes = list(nodes)
    
    # Determine the central node (the one with the most connections)
    central_node = max(nodes, key=lambda x: sum(1 for edge in edge_list if edge[0] == x or edge[1] == x))
    
    # Remove the central node from the list of nodes
    nodes.remove(central_node)
    
    # Arrange the remaining nodes in a circle around the central node
    radius = 100  # Radius of the circle
    center = (0, 0)  # Center of the circle
    num_nodes = len(nodes)
    angle_step = 2 * math.pi / num_nodes
    
    layout = {}
    layout[central_node] = center
    
    for i, node in enumerate(nodes):
        angle = i * angle_step
        x = center[0] + radius * math.cos(angle)
        y = center[1] + radius * math.sin(angle)
        layout[node] = (x, y)
    
    return layout

# Example usage
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
             (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), 
             (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), 
             (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37), 
             (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), 
             (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), 
             (0, 56), (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), 
             (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71), (0, 72), (0, 73)]

layout = generate_circular_layout(edge_list)

# Convert the layout to JSON format
layout_json = json.dumps(layout, indent=4)
print(layout_json)
```

### Explanation:
1. **Node Extraction**: The script first extracts all unique nodes from the edge list.
2. **Central Node Identification**: The central node is identified as the node with the most connections (in this case, node `0`).
3. **Circular Layout**: The remaining nodes are arranged in a circle around the central node. The positions are calculated using trigonometric functions to ensure equal spacing.
4. **JSON Output**: The layout is then converted to JSON format and printed.

This approach minimizes edge crossings by placing the central node at the center and arranging the other nodes evenly around it. The resulting JSON output can be used to visualize the graph or for further processing.