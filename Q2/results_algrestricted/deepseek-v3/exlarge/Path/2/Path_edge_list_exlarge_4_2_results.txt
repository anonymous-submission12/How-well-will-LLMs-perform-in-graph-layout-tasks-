To generate a layout for the given graph that maintains consistency between Euclidean distance and graph-theoretic distance, we can use a simple approach where we place the nodes in a straight line. This is because the graph is a simple path (a chain of nodes), and the Euclidean distance between nodes will directly correspond to their graph-theoretic distance.

Here is the Python code to generate the layout:

```python
import json

# Input edge list
edge_list = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), 
             (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), 
             (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), 
             (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), 
             (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), 
             (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), 
             (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), 
             (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), 
             (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73)]

# Create a dictionary to store node positions
node_positions = {}

# Assign positions in a straight line
for i in range(len(edge_list) + 1):
    node_positions[i] = [i * 10, 0]  # x-coordinate increases by 10 units, y-coordinate is 0

# Convert the positions to JSON format
layout_json = json.dumps(node_positions, indent=4)

# Output the JSON
print(layout_json)
```

### Explanation:
- **Node Positions**: Each node is placed along the x-axis, with the x-coordinate increasing by 10 units for each subsequent node. The y-coordinate is set to 0 for all nodes, creating a straight line.
- **Graph-Theoretic Distance**: The Euclidean distance between nodes corresponds directly to their graph-theoretic distance since the graph is a simple path.
- **JSON Output**: The node positions are stored in a dictionary and then converted to JSON format.

### Output:
The output will be a JSON object where each key is a node ID, and the value is a list containing the x and y coordinates of the node. For example:

```json
{
    "0": [0, 0],
    "1": [10, 0],
    "2": [20, 0],
    "3": [30, 0],
    ...
    "73": [730, 0]
}
```

This layout ensures that the Euclidean distance between nodes matches their graph-theoretic distance, as required.