To generate a layout for the given graph that maintains consistency between Euclidean distance and graph-theoretic distance, we can use a simple approach where we place the nodes in a straight line. This approach ensures that the Euclidean distance between adjacent nodes is consistent with the graph-theoretic distance (which is 1 for adjacent nodes).

Here is the Python code to generate the layout:

```python
import json

# Input edge list
edge_list = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), 
             (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), 
             (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), 
             (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), 
             (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), 
             (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), 
             (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), 
             (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), 
             (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74), 
             (74, 75)]

# Determine the number of nodes
num_nodes = max(max(edge) for edge in edge_list) + 1

# Generate positions in a straight line
positions = {i: (i, 0) for i in range(num_nodes)}

# Output the layout in JSON format
layout_json = json.dumps(positions, indent=4)
print(layout_json)
```

### Explanation:
1. **Edge List**: The input edge list represents a linear graph where each node is connected to the next one in sequence.
2. **Number of Nodes**: The number of nodes is determined by finding the maximum node index in the edge list and adding 1.
3. **Positions**: The nodes are placed in a straight line along the x-axis, with the y-coordinate set to 0. The x-coordinate of each node is equal to its index.
4. **JSON Output**: The positions are output in JSON format, which can be used for further processing or visualization.

### Output Example:
The output will be a JSON object where each key is a node index, and the value is a tuple representing the (x, y) coordinates of the node. For example:

```json
{
    "0": [0, 0],
    "1": [1, 0],
    "2": [2, 0],
    "3": [3, 0],
    ...
    "75": [75, 0]
}
```

This layout ensures that the Euclidean distance between adjacent nodes is 1, which matches the graph-theoretic distance.