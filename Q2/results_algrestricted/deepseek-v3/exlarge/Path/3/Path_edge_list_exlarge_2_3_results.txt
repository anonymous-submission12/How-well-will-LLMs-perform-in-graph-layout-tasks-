To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we arrange the nodes in a circular layout. This layout naturally minimizes edge crossings for linear chains or cycles, which is the case with the provided graph data.

Here is the Python code to generate the layout:

```python
import math
import json

def generate_circular_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = sorted(set([node for edge in edge_list for node in edge]))
    num_nodes = len(nodes)
    
    # Calculate positions for each node in a circular layout
    radius = 1.0  # Radius of the circle
    center = (0.0, 0.0)  # Center of the circle
    angle_increment = (2 * math.pi) / num_nodes
    
    layout = {}
    for i, node in enumerate(nodes):
        angle = i * angle_increment
        x = center[0] + radius * math.cos(angle)
        y = center[1] + radius * math.sin(angle)
        layout[node] = (x, y)
    
    return layout

# Provided edge list
edge_list = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), 
             (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), 
             (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), 
             (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), 
             (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), 
             (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), 
             (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), 
             (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), 
             (66, 67), (67, 68), (68, 69), (69, 70), (70, 71)]

# Generate the layout
layout = generate_circular_layout(edge_list)

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Circular Layout**: The nodes are placed on the circumference of a circle. This layout is particularly effective for minimizing edge crossings in linear chains or cycles.
2. **Angle Calculation**: The angle between each node is calculated as `(2 * pi) / num_nodes`, ensuring that nodes are evenly spaced around the circle.
3. **Position Calculation**: The position of each node is calculated using the cosine and sine functions to determine the x and y coordinates on the circle.

### Output:
The output will be a JSON object where each key is a node, and the value is a tuple representing the (x, y) coordinates of that node in the layout.

```json
{
    "0": [1.0, 0.0],
    "1": [0.9998476951563913, 0.01745240643728351],
    "2": [0.9993908270190958, 0.03489949670250097],
    ...
    "71": [0.9998476951563913, -0.01745240643728351]
}
```

This layout should minimize edge crossings for the given graph.