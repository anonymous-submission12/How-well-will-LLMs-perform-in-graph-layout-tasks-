To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we arrange the nodes in a circular layout. This is a common method to reduce edge crossings in linear graphs like the one provided. The nodes will be placed on a circle, and the edges will be straight lines connecting the nodes.

Here is the Python code to generate the layout:

```python
import math
import json

def generate_circular_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = sorted(set([node for edge in edge_list for node in edge]))
    num_nodes = len(nodes)
    
    # Calculate the positions for each node on a circle
    radius = 1.0  # Radius of the circle
    center = (0.0, 0.0)  # Center of the circle
    angle_increment = (2 * math.pi) / num_nodes
    
    layout = {}
    for i, node in enumerate(nodes):
        angle = i * angle_increment
        x = center[0] + radius * math.cos(angle)
        y = center[1] + radius * math.sin(angle)
        layout[node] = (x, y)
    
    return layout

# Input edge list
edge_list = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), 
             (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), 
             (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), 
             (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), 
             (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), 
             (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), 
             (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), 
             (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), 
             (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74), 
             (74, 75)]

# Generate the layout
layout = generate_circular_layout(edge_list)

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Node Extraction**: The code first extracts all unique nodes from the edge list.
2. **Circular Layout Calculation**: The nodes are placed on a circle with a given radius. The angle between each node is calculated based on the total number of nodes.
3. **Position Calculation**: The x and y coordinates for each node are calculated using trigonometric functions (`math.cos` and `math.sin`).
4. **Output**: The layout is output in JSON format, where each node is mapped to its corresponding (x, y) position.

### Output Example:
```json
{
    "0": [1.0, 0.0],
    "1": [0.8090169943749475, 0.5877852522924731],
    "2": [0.30901699437494745, 0.9510565162951535],
    "3": [-0.30901699437494734, 0.9510565162951536],
    "4": [-0.8090169943749473, 0.5877852522924732],
    "5": [-1.0, 1.2246467991473532e-16],
    ...
}
```

This layout will minimize edge crossings for the given linear graph.