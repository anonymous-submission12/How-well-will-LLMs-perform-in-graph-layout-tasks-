To generate a layout for the graph that maintains consistency between Euclidean distance and graph-theoretic distance, we can use a force-directed layout approach. This approach simulates physical forces between nodes and edges to position the nodes in a way that minimizes edge crossings and keeps connected nodes close together.

Below is a Python script that implements a simple force-directed layout algorithm. The script will output the graph layout in JSON format.

```python
import json
import random
import math

# Define the graph as an edge list
edge_list = [(0, 2), (0, 7), (0, 8), (0, 35), (1, 2), (1, 3), (1, 7), (1, 8), (1, 9), (2, 6), (2, 7), (2, 8), (3, 5), (3, 8), (3, 10), (4, 5), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 10), (6, 7), (6, 8), (6, 10), (7, 10), (7, 19), (8, 9), (8, 10), (8, 73), (9, 10), (9, 43), (11, 12), (11, 16), (11, 18), (11, 20), (11, 21), (11, 25), (12, 14), (12, 16), (12, 17), (12, 18), (12, 19), (12, 21), (13, 19), (13, 21), (14, 17), (15, 17), (15, 18), (15, 20), (16, 19), (17, 20), (18, 21), (18, 69), (19, 20), (19, 21), (20, 21), (22, 26), (22, 28), (23, 25), (23, 27), (24, 30), (25, 27), (25, 28), (25, 29), (25, 30), (26, 27), (26, 31), (27, 28), (27, 30), (27, 57), (29, 30), (30, 47), (32, 23), (32, 24), (32, 25), (32, 69), (33, 34), (33, 37), (33, 38), (33, 41), (33, 42), (33, 51), (34, 36), (34, 37), (34, 38), (34, 42), (35, 40), (35, 43), (36, 39), (36, 41), (36, 42), (37, 38), (37, 39), (37, 41), (37, 43), (39, 41), (40, 43), (44, 46), (44, 48), (44, 53), (45, 48), (45, 49), (45, 52), (46, 50), (46, 52), (46, 53), (47, 48), (47, 49), (47, 51), (47, 52), (48, 49), (48, 51), (48, 53), (50, 51), (50, 52), (50, 56), (54, 56), (54, 59), (54, 60), (54, 62), (55, 57), (55, 58), (55, 60), (55, 61), (55, 62), (55, 63), (56, 58), (56, 60), (56, 63), (57, 60), (57, 63), (58, 59), (58, 61), (58, 62), (59, 61), (59, 62), (60, 61), (60, 63), (61, 63), (64, 66), (64, 67), (64, 70), (64, 72), (64, 73), (65, 66), (65, 67), (65, 69), (66, 72), (66, 73), (67, 68), (67, 71), (68, 69), (68, 70), (70, 72), (70, 73), (71, 73), (72, 73)]

# Create a list of unique nodes
nodes = list(set([node for edge in edge_list for node in edge]))

# Initialize node positions randomly
positions = {node: (random.uniform(0, 100), random.uniform(0, 100)) for node in nodes}

# Parameters for the force-directed layout
k = 1.0  # Optimal distance between nodes
t = 0.1  # Temperature (controls the movement)
iterations = 100

# Function to calculate the Euclidean distance between two points
def distance(p1, p2):
    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

# Force-directed layout algorithm
for _ in range(iterations):
    # Calculate repulsive forces (between all pairs of nodes)
    for i in range(len(nodes)):
        for j in range(i + 1, len(nodes)):
            node1 = nodes[i]
            node2 = nodes[j]
            pos1 = positions[node1]
            pos2 = positions[node2]
            dist = distance(pos1, pos2)
            if dist > 0:
                force = k**2 / dist
                dx = pos1[0] - pos2[0]
                dy = pos1[1] - pos2[1]
                positions[node1] = (pos1[0] + force * dx / dist * t, pos1[1] + force * dy / dist * t)
                positions[node2] = (pos2[0] - force * dx / dist * t, pos2[1] - force * dy / dist * t)

    # Calculate attractive forces (between connected nodes)
    for edge in edge_list:
        node1, node2 = edge
        pos1 = positions[node1]
        pos2 = positions[node2]
        dist = distance(pos1, pos2)
        if dist > 0:
            force = dist**2 / k
            dx = pos1[0] - pos2[0]
            dy = pos1[1] - pos2[1]
            positions[node1] = (pos1[0] - force * dx / dist * t, pos1[1] - force * dy / dist * t)
            positions[node2] = (pos2[0] + force * dx / dist * t, pos2[1] + force * dy / dist * t)

# Normalize positions to fit within a [0, 100] x [0, 100] box
min_x = min(pos[0] for pos in positions.values())
max_x = max(pos[0] for pos in positions.values())
min_y = min(pos[1] for pos in positions.values())
max_y = max(pos[1] for pos in positions.values())

for node in positions:
    x, y = positions[node]
    x = (x - min_x) / (max_x - min_x) * 100
    y = (y - min_y) / (max_y - min_y) * 100
    positions[node] = (x, y)

# Output the layout in JSON format
layout_json = json.dumps(positions, indent=4)
print(layout_json)
```

### Explanation:
1. **Initialization**: The nodes are initialized with random positions within a 100x100 box.
2. **Force-Directed Layout**: The algorithm iteratively calculates repulsive forces between all pairs of nodes and attractive forces between connected nodes. The positions are updated based on these forces.
3. **Normalization**: After the iterations, the positions are normalized to fit within the [0, 100] x [0, 100] box.
4. **Output**: The final positions are output in JSON format.

This script provides a basic force-directed layout that should give you a reasonable starting point for visualizing the graph. You can adjust the parameters (`k`, `t`, and `iterations`) to fine-tune the layout.