To generate a layout for the graph that minimizes edge crossings, we can use a heuristic approach. One such approach is to use a force-directed layout algorithm, which simulates physical forces between nodes to position them in a way that minimizes edge crossings. However, since we cannot use existing graph layout algorithms, we will implement a simplified version of this approach.

Here is a Python script that generates a layout for the graph using a basic force-directed approach:

```python
import json
import random
import math

# Define the graph as an edge list
edge_list = [
    (0, 2), (0, 3), (0, 4), (0, 7), (0, 9), (0, 10), (0, 11), (0, 13), (1, 3), (1, 4), (1, 7), (1, 8), (1, 9), (1, 12), 
    (2, 4), (2, 6), (2, 7), (2, 8), (3, 4), (3, 8), (3, 9), (3, 11), (3, 12), (4, 6), (4, 7), (4, 10), (5, 7), (5, 8), 
    (5, 10), (5, 12), (5, 13), (6, 7), (6, 8), (6, 11), (6, 13), (7, 9), (7, 10), (8, 11), (8, 12), (9, 11), (9, 13), 
    (10, 56), (11, 12), (11, 13), (11, 72), (12, 13), (12, 22), (14, 16), (14, 18), (14, 23), (14, 25), (14, 56), 
    (15, 16), (15, 17), (15, 18), (15, 21), (15, 24), (15, 26), (16, 19), (16, 21), (16, 22), (16, 25), (16, 26), 
    (17, 19), (17, 21), (17, 22), (17, 23), (17, 26), (18, 21), (18, 24), (18, 26), (19, 21), (19, 23), (20, 21), 
    (20, 22), (20, 23), (21, 24), (21, 26), (23, 24), (23, 25), (23, 26), (24, 25), (27, 31), (28, 29), (28, 30), 
    (29, 31), (30, 31), (32, 30), (32, 35), (32, 38), (32, 45), (33, 27), (33, 28), (33, 38), (33, 39), (33, 74), 
    (34, 27), (34, 28), (34, 38), (34, 41), (35, 29), (35, 30), (35, 36), (35, 63), (36, 29), (36, 31), (36, 37), 
    (37, 27), (37, 29), (37, 31), (37, 38), (38, 39), (38, 69), (38, 72), (40, 43), (40, 46), (40, 48), (40, 49), 
    (40, 51), (41, 48), (41, 50), (41, 67), (42, 43), (42, 45), (42, 46), (42, 47), (42, 50), (43, 44), (43, 45), 
    (43, 48), (43, 49), (43, 52), (43, 59), (44, 45), (44, 50), (44, 52), (45, 46), (45, 47), (45, 48), (45, 49), 
    (45, 52), (46, 49), (47, 48), (47, 51), (47, 52), (48, 49), (52, 76), (53, 58), (53, 61), (53, 62), (54, 56), 
    (54, 62), (54, 63), (54, 76), (55, 56), (55, 58), (55, 61), (56, 57), (56, 63), (57, 58), (58, 60), (58, 61), 
    (58, 62), (59, 61), (60, 61), (60, 63), (61, 62), (61, 63), (64, 54), (64, 57), (64, 62), (64, 63), (65, 53), 
    (65, 57), (65, 60), (65, 63), (66, 71), (66, 73), (66, 75), (66, 76), (66, 78), (67, 68), (67, 70), (67, 74), 
    (67, 78), (68, 70), (68, 71), (68, 75), (68, 76), (68, 78), (69, 71), (69, 73), (69, 74), (69, 76), (70, 71), 
    (70, 72), (70, 77), (70, 78), (71, 74), (71, 77), (71, 78), (72, 74), (73, 74), (73, 78), (74, 77), (75, 78), 
    (76, 77)
]

# Extract unique nodes from the edge list
nodes = list(set([node for edge in edge_list for node in edge]))

# Initialize node positions randomly
positions = {node: (random.uniform(0, 100), random.uniform(0, 100)) for node in nodes}

# Parameters for the force-directed layout
k = 1.0  # Spring constant
repulsion_constant = 100.0  # Repulsion constant
iterations = 100
dt = 0.1  # Time step

# Function to calculate the distance between two points
def distance(p1, p2):
    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

# Function to calculate the force between two nodes
def calculate_force(p1, p2, is_edge):
    dx = p2[0] - p1[0]
    dy = p2[1] - p1[1]
    dist = distance(p1, p2)
    if dist == 0:
        return (0, 0)
    if is_edge:
        force = k * (dist - 1.0)  # Attractive force
    else:
        force = -repulsion_constant / (dist**2)  # Repulsive force
    fx = force * (dx / dist)
    fy = force * (dy / dist)
    return (fx, fy)

# Perform the force-directed layout algorithm
for _ in range(iterations):
    new_positions = {}
    for node in nodes:
        fx_total, fy_total = 0.0, 0.0
        for other_node in nodes:
            if node == other_node:
                continue
            is_edge = (node, other_node) in edge_list or (other_node, node) in edge_list
            fx, fy = calculate_force(positions[node], positions[other_node], is_edge)
            fx_total += fx
            fy_total += fy
        new_x = positions[node][0] + fx_total * dt
        new_y = positions[node][1] + fy_total * dt
        new_positions[node] = (new_x, new_y)
    positions = new_positions

# Output the layout in JSON format
layout = {str(node): {"x": pos[0], "y": pos[1]} for node, pos in positions.items()}
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Initialization**: The nodes are initialized with random positions within a 100x100 grid.
2. **Force Calculation**: The forces between nodes are calculated based on whether they are connected by an edge or not. Connected nodes attract each other, while non-connected nodes repel each other.
3. **Position Update**: The positions of the nodes are updated based on the calculated forces over a number of iterations.
4. **Output**: The final positions of the nodes are output in JSON format.

This script provides a basic force-directed layout that aims to minimize edge crossings. The parameters `k`, `repulsion_constant`, `iterations`, and `dt` can be adjusted to fine-tune the layout.