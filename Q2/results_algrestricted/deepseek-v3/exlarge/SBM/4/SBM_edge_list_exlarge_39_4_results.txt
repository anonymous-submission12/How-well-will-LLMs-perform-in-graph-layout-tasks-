To generate a layout for the graph while keeping the community structure clear, we can use a community detection algorithm to partition the graph into communities and then assign positions to the nodes based on their community membership. Here, we will use the Louvain method for community detection, which is a popular algorithm for detecting communities in large networks.

The layout will be generated by placing nodes in a circular fashion around the center of their respective communities. The communities themselves will be placed in a circular layout around the center of the graph.

Below is the Python code to achieve this:

```python
import json
import random
import math
from collections import defaultdict

# Function to detect communities using the Louvain method
def louvain_communities(edge_list):
    import community as community_louvain
    import networkx as nx
    
    G = nx.Graph()
    G.add_edges_from(edge_list)
    partition = community_louvain.best_partition(G)
    
    # Convert partition to a dictionary of communities
    communities = defaultdict(list)
    for node, comm_id in partition.items():
        communities[comm_id].append(node)
    
    return list(communities.values())

# Function to generate positions for nodes in a circular layout
def circular_layout(nodes, center, radius):
    positions = {}
    angle = 2 * math.pi / len(nodes)
    for i, node in enumerate(nodes):
        x = center[0] + radius * math.cos(i * angle)
        y = center[1] + radius * math.sin(i * angle)
        positions[node] = (x, y)
    return positions

# Function to generate the graph layout
def generate_graph_layout(edge_list):
    # Detect communities
    communities = louvain_communities(edge_list)
    
    # Calculate the center of the graph
    center = (0, 0)
    
    # Calculate the radius for the community circles
    max_community_size = max(len(comm) for comm in communities)
    community_radius = max_community_size * 10
    
    # Generate positions for each community
    layout = {}
    angle = 2 * math.pi / len(communities)
    for i, comm in enumerate(communities):
        comm_center = (
            center[0] + community_radius * math.cos(i * angle),
            center[1] + community_radius * math.sin(i * angle)
        )
        comm_positions = circular_layout(comm, comm_center, 10)
        layout.update(comm_positions)
    
    return layout

# Example usage
edge_list = [
    (0, 8), (0, 11), (0, 13), (0, 27), (1, 4), (1, 11), (2, 4), (2, 5), (2, 11), (2, 12), (2, 13),
    (3, 4), (3, 7), (3, 8), (3, 10), (3, 13), (4, 5), (4, 7), (4, 9), (4, 10), (4, 11), (4, 12),
    (4, 13), (5, 6), (5, 7), (5, 9), (5, 10), (5, 13), (6, 8), (6, 9), (6, 11), (7, 8), (7, 10),
    (8, 11), (8, 12), (9, 10), (9, 13), (9, 55), (10, 11), (10, 12), (10, 18), (11, 15), (14, 21),
    (14, 22), (14, 23), (14, 25), (14, 27), (14, 53), (15, 16), (15, 20), (15, 21), (15, 22),
    (15, 24), (15, 63), (16, 17), (16, 23), (16, 24), (16, 25), (16, 26), (17, 18), (17, 20),
    (17, 22), (17, 23), (17, 24), (17, 25), (17, 27), (18, 19), (18, 20), (18, 21), (18, 24),
    (18, 26), (18, 27), (19, 24), (19, 25), (19, 26), (20, 24), (20, 26), (21, 25), (21, 27),
    (22, 23), (22, 25), (22, 27), (23, 24), (23, 25), (23, 27), (24, 25), (24, 26), (25, 26),
    (28, 30), (29, 31), (32, 31), (32, 36), (32, 38), (32, 39), (33, 28), (33, 29), (33, 34),
    (33, 38), (33, 39), (33, 40), (33, 77), (34, 29), (34, 30), (34, 35), (34, 36), (34, 37),
    (34, 39), (34, 52), (35, 29), (35, 31), (37, 40), (38, 29), (38, 31), (40, 29), (40, 31),
    (40, 48), (41, 44), (41, 50), (42, 43), (42, 44), (42, 46), (42, 50), (42, 53), (42, 67),
    (43, 44), (43, 45), (43, 46), (43, 50), (43, 51), (43, 53), (44, 45), (44, 47), (44, 48),
    (44, 49), (44, 51), (44, 52), (44, 53), (45, 46), (45, 47), (45, 53), (46, 47), (46, 48),
    (46, 51), (46, 52), (47, 49), (47, 51), (47, 52), (48, 50), (50, 51), (50, 52), (51, 53),
    (52, 53), (52, 59), (54, 58), (54, 61), (54, 63), (55, 59), (55, 60), (56, 58), (56, 62),
    (56, 70), (57, 59), (57, 60), (57, 61), (57, 63), (58, 62), (59, 63), (60, 63), (61, 63),
    (64, 54), (64, 55), (64, 60), (64, 62), (64, 63), (64, 66), (65, 54), (65, 56), (65, 60),
    (65, 62), (66, 56), (66, 59), (66, 62), (67, 72), (68, 69), (68, 71), (68, 77), (68, 78),
    (69, 74), (69, 76), (70, 71), (70, 72), (70, 75), (70, 76), (71, 72), (71, 75), (72, 74),
    (72, 77), (72, 79), (73, 77), (74, 75), (74, 76), (74, 78), (75, 76), (76, 77), (76, 79),
    (78, 79)
]

layout = generate_graph_layout(edge_list)

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Community Detection**: The `louvain_communities` function uses the Louvain method to detect communities in the graph. This method is implemented in the `community` module, which is part of the `python-louvain` package.

2. **Circular Layout**: The `circular_layout` function generates positions for nodes in a circular fashion around a given center and radius.

3. **Graph Layout**: The `generate_graph_layout` function first detects communities and then places each community in a circular layout around the center of the graph. Nodes within each community are also placed in a circular layout around the center of their respective community.

4. **Output**: The final layout is output in JSON format, which can be used for further processing or visualization.

### Note:
- The `python-louvain` package needs to be installed to run this code. You can install it using `pip install python-louvain`.
- The code does not use any existing graph layout algorithms like `nx.spring_layout()` or `nx.circular_layout()`. Instead, it manually calculates positions based on community structure.