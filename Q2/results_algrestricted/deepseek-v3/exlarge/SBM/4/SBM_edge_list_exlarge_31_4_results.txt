To generate a layout for the graph while keeping the community structure clear, we can use a community detection algorithm to partition the graph into communities and then assign positions to the nodes based on their community membership. Here's a Python script that accomplishes this:

```python
import json
import random
from collections import defaultdict

# Input edge list
edge_list = [(0, 2), (0, 7), (0, 8), (0, 35), (1, 2), (1, 3), (1, 7), (1, 8), (1, 9), (2, 6), (2, 7), (2, 8), (3, 5), (3, 8), (3, 10), (4, 5), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 10), (6, 7), (6, 8), (6, 10), (7, 10), (7, 19), (8, 9), (8, 10), (8, 73), (9, 10), (9, 43), (11, 12), (11, 16), (11, 18), (11, 20), (11, 21), (11, 25), (12, 14), (12, 16), (12, 17), (12, 18), (12, 19), (12, 21), (13, 19), (13, 21), (14, 17), (15, 17), (15, 18), (15, 20), (16, 19), (17, 20), (18, 21), (18, 69), (19, 20), (19, 21), (20, 21), (22, 26), (22, 28), (23, 25), (23, 27), (24, 30), (25, 27), (25, 28), (25, 29), (25, 30), (26, 27), (26, 31), (27, 28), (27, 30), (27, 57), (29, 30), (30, 47), (32, 23), (32, 24), (32, 25), (32, 69), (33, 34), (33, 37), (33, 38), (33, 41), (33, 42), (33, 51), (34, 36), (34, 37), (34, 38), (34, 42), (35, 40), (35, 43), (36, 39), (36, 41), (36, 42), (37, 38), (37, 39), (37, 41), (37, 43), (39, 41), (40, 43), (44, 46), (44, 48), (44, 53), (45, 48), (45, 49), (45, 52), (46, 50), (46, 52), (46, 53), (47, 48), (47, 49), (47, 51), (47, 52), (48, 49), (48, 51), (48, 53), (50, 51), (50, 52), (50, 56), (54, 56), (54, 59), (54, 60), (54, 62), (55, 57), (55, 58), (55, 60), (55, 61), (55, 62), (55, 63), (56, 58), (56, 60), (56, 63), (57, 60), (57, 63), (58, 59), (58, 61), (58, 62), (59, 61), (59, 62), (60, 61), (60, 63), (61, 63), (64, 66), (64, 67), (64, 70), (64, 72), (64, 73), (65, 66), (65, 67), (65, 69), (66, 72), (66, 73), (67, 68), (67, 71), (68, 69), (68, 70), (70, 72), (70, 73), (71, 73), (72, 73)]

# Create a graph from the edge list
graph = defaultdict(list)
for u, v in edge_list:
    graph[u].append(v)
    graph[v].append(u)

# Community detection using a simple greedy algorithm
def detect_communities(graph):
    communities = []
    nodes = set(graph.keys())
    while nodes:
        node = nodes.pop()
        community = {node}
        queue = [node]
        while queue:
            current = queue.pop(0)
            for neighbor in graph[current]:
                if neighbor in nodes:
                    nodes.remove(neighbor)
                    community.add(neighbor)
                    queue.append(neighbor)
        communities.append(community)
    return communities

communities = detect_communities(graph)

# Assign positions based on community membership
def assign_positions(communities):
    layout = {}
    community_positions = {}
    for i, community in enumerate(communities):
        # Assign a central position for the community
        center_x = i * 200  # Spread communities along the x-axis
        center_y = 0
        community_positions[i] = (center_x, center_y)
        
        # Assign positions to nodes within the community
        for j, node in enumerate(community):
            angle = (2 * 3.14159 * j) / len(community)  # Spread nodes in a circle
            radius = 100  # Radius of the circle
            x = center_x + radius * (1 + 0.5 * (j % 2)) * (1 if j % 2 == 0 else -1) * (1 if j < len(community) / 2 else -1)
            y = center_y + radius * (1 + 0.5 * (j % 2)) * (1 if j < len(community) / 2 else -1)
            layout[node] = (x, y)
    return layout

layout = assign_positions(communities)

# Output the layout in JSON format
output = {str(node): {"x": pos[0], "y": pos[1]} for node, pos in layout.items()}
print(json.dumps(output, indent=4))
```

### Explanation:
1. **Graph Construction**: The graph is constructed from the edge list using a dictionary where each key is a node and the value is a list of its neighbors.

2. **Community Detection**: A simple greedy algorithm is used to detect communities. The algorithm starts with an unassigned node, explores all its neighbors, and assigns them to the same community. This process is repeated until all nodes are assigned to a community.

3. **Position Assignment**: Each community is assigned a central position along the x-axis. Nodes within a community are spread out in a circular pattern around the community's center. The radius and angle are adjusted to ensure that nodes are evenly distributed.

4. **Output**: The final layout is output in JSON format, where each node is mapped to its `(x, y)` position.

This script ensures that the community structure is visually clear by grouping nodes from the same community together and spreading them out in a circular pattern.