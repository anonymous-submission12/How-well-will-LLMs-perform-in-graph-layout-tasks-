To generate a layout for the graph that maintains consistency between Euclidean distance and graph-theoretic distance, we can use a force-directed layout approach. This approach simulates physical forces between nodes and edges to position the nodes in a way that minimizes edge crossings and keeps connected nodes close together.

Below is a Python script that implements a simple force-directed layout algorithm. The script will output the graph layout in JSON format.

```python
import json
import random
import math

# Define the edge list
edge_list = [(0, 1), (0, 24), (1, 2), (1, 25), (2, 3), (2, 26), (3, 4), (3, 27), (4, 5), (4, 28), (5, 6), (5, 29), (6, 7), (6, 30), (7, 8), (7, 31), (8, 9), (8, 32), (9, 10), (9, 33), (10, 11), (10, 34), (11, 12), (11, 35), (12, 13), (12, 36), (13, 14), (13, 37), (14, 15), (14, 38), (15, 16), (15, 39), (16, 17), (16, 40), (17, 18), (17, 41), (18, 19), (18, 42), (19, 20), (19, 43), (20, 21), (20, 44), (21, 22), (21, 45), (22, 23), (22, 46), (23, 47), (24, 25), (24, 48), (25, 26), (25, 49), (26, 27), (26, 50), (27, 28), (27, 51), (28, 29), (28, 52), (29, 30), (29, 53), (30, 31), (30, 54), (31, 32), (31, 55), (32, 33), (32, 56), (33, 34), (33, 57), (34, 35), (34, 58), (35, 36), (35, 59), (36, 37), (36, 60), (37, 38), (37, 61), (38, 39), (38, 62), (39, 40), (39, 63), (40, 41), (40, 64), (41, 42), (41, 65), (42, 43), (42, 66), (43, 44), (43, 67), (44, 45), (44, 68), (45, 46), (45, 69), (46, 47), (46, 70), (47, 71), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71)]

# Initialize node positions randomly
nodes = set()
for edge in edge_list:
    nodes.add(edge[0])
    nodes.add(edge[1])
nodes = list(nodes)
positions = {node: (random.uniform(0, 100), random.uniform(0, 100)) for node in nodes}

# Parameters for the force-directed layout
k = 1.0  # Spring constant
repulsion_constant = 100.0  # Repulsion constant
iterations = 100
cooling_factor = 0.95

# Force-directed layout algorithm
for iteration in range(iterations):
    # Calculate repulsive forces
    for i in range(len(nodes)):
        for j in range(i + 1, len(nodes)):
            node1 = nodes[i]
            node2 = nodes[j]
            x1, y1 = positions[node1]
            x2, y2 = positions[node2]
            dx = x2 - x1
            dy = y2 - y1
            distance = math.sqrt(dx**2 + dy**2)
            if distance > 0:
                force = repulsion_constant / distance**2
                fx = force * dx / distance
                fy = force * dy / distance
                positions[node1] = (x1 - fx, y1 - fy)
                positions[node2] = (x2 + fx, y2 + fy)

    # Calculate attractive forces (spring forces)
    for edge in edge_list:
        node1, node2 = edge
        x1, y1 = positions[node1]
        x2, y2 = positions[node2]
        dx = x2 - x1
        dy = y2 - y1
        distance = math.sqrt(dx**2 + dy**2)
        if distance > 0:
            force = k * distance
            fx = force * dx / distance
            fy = force * dy / distance
            positions[node1] = (x1 + fx, y1 + fy)
            positions[node2] = (x2 - fx, y2 - fy)

    # Cooling down the system
    repulsion_constant *= cooling_factor

# Convert positions to JSON format
layout = {str(node): {"x": pos[0], "y": pos[1]} for node, pos in positions.items()}
layout_json = json.dumps(layout, indent=4)

# Output the layout in JSON format
print(layout_json)
```

### Explanation:
1. **Initialization**: The nodes are initialized with random positions within a 100x100 grid.
2. **Force-Directed Layout**:
   - **Repulsive Forces**: Nodes repel each other to avoid overlap.
   - **Attractive Forces**: Connected nodes attract each other to maintain graph-theoretic distance.
3. **Cooling Factor**: The repulsion constant is reduced over iterations to allow the system to settle.
4. **Output**: The final positions of the nodes are output in JSON format.

This script will generate a layout where the Euclidean distance between nodes approximates their graph-theoretic distance. The output is in JSON format, which can be used for further processing or visualization.