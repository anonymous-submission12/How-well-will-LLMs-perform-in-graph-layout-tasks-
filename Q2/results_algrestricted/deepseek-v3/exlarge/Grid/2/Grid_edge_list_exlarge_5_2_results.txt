To generate a layout for the graph that maintains consistency between Euclidean distance and graph-theoretic distance, we can use a force-directed layout approach. This approach simulates physical forces between nodes and edges to position the nodes in a way that minimizes edge crossings and keeps connected nodes close together.

Below is a Python script that implements a simple force-directed layout algorithm. The script will output the graph layout in JSON format.

```python
import json
import random
import math

# Define the edge list
edge_list = [
    (0, 1), (0, 12), (1, 2), (1, 13), (2, 3), (2, 14), (3, 4), (3, 15), (4, 5), (4, 16),
    (5, 6), (5, 17), (6, 7), (6, 18), (7, 8), (7, 19), (8, 9), (8, 20), (9, 10), (9, 21),
    (10, 11), (10, 22), (11, 23), (12, 13), (12, 24), (13, 14), (13, 25), (14, 15), (14, 26),
    (15, 16), (15, 27), (16, 17), (16, 28), (17, 18), (17, 29), (18, 19), (18, 30), (19, 20),
    (19, 31), (20, 21), (20, 32), (21, 22), (21, 33), (22, 23), (22, 34), (23, 35), (24, 25),
    (24, 36), (25, 26), (25, 37), (26, 27), (26, 38), (27, 28), (27, 39), (28, 29), (28, 40),
    (29, 30), (29, 41), (30, 31), (30, 42), (31, 32), (31, 43), (32, 33), (32, 44), (33, 34),
    (33, 45), (34, 35), (34, 46), (35, 47), (36, 37), (36, 48), (37, 38), (37, 49), (38, 39),
    (38, 50), (39, 40), (39, 51), (40, 41), (40, 52), (41, 42), (41, 53), (42, 43), (42, 54),
    (43, 44), (43, 55), (44, 45), (44, 56), (45, 46), (45, 57), (46, 47), (46, 58), (47, 59),
    (48, 49), (48, 60), (49, 50), (49, 61), (50, 51), (50, 62), (51, 52), (51, 63), (52, 53),
    (52, 64), (53, 54), (53, 65), (54, 55), (54, 66), (55, 56), (55, 67), (56, 57), (56, 68),
    (57, 58), (57, 69), (58, 59), (58, 70), (59, 71), (60, 61), (61, 62), (62, 63), (63, 64),
    (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71)
]

# Number of nodes
num_nodes = 72

# Initialize positions randomly
positions = {i: (random.uniform(0, 1), random.uniform(0, 1)) for i in range(num_nodes)}

# Parameters
k = 1.0  # Spring constant
repulsion_constant = 1.0  # Repulsion constant
damping = 0.5  # Damping factor
iterations = 1000

# Force-directed layout algorithm
for iteration in range(iterations):
    # Calculate forces
    forces = {i: (0.0, 0.0) for i in range(num_nodes)}
    
    # Repulsion between all pairs of nodes
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            dx = positions[j][0] - positions[i][0]
            dy = positions[j][1] - positions[i][1]
            distance = math.sqrt(dx * dx + dy * dy)
            if distance > 0:
                force = repulsion_constant / (distance * distance)
                forces[i] = (forces[i][0] - force * dx / distance, forces[i][1] - force * dy / distance)
                forces[j] = (forces[j][0] + force * dx / distance, forces[j][1] + force * dy / distance)
    
    # Attraction between connected nodes
    for u, v in edge_list:
        dx = positions[v][0] - positions[u][0]
        dy = positions[v][1] - positions[u][1]
        distance = math.sqrt(dx * dx + dy * dy)
        if distance > 0:
            force = k * distance
            forces[u] = (forces[u][0] + force * dx / distance, forces[u][1] + force * dy / distance)
            forces[v] = (forces[v][0] - force * dx / distance, forces[v][1] - force * dy / distance)
    
    # Update positions
    for i in range(num_nodes):
        x, y = positions[i]
        fx, fy = forces[i]
        x += fx * damping
        y += fy * damping
        positions[i] = (x, y)

# Normalize positions to fit within [0, 1] range
min_x = min(pos[0] for pos in positions.values())
max_x = max(pos[0] for pos in positions.values())
min_y = min(pos[1] for pos in positions.values())
max_y = max(pos[1] for pos in positions.values())

for i in positions:
    x, y = positions[i]
    x = (x - min_x) / (max_x - min_x)
    y = (y - min_y) / (max_y - min_y)
    positions[i] = (x, y)

# Convert positions to JSON format
layout_json = {str(node): {"x": pos[0], "y": pos[1]} for node, pos in positions.items()}

# Output the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Initialization**: The positions of the nodes are initialized randomly within the range [0, 1].
2. **Force Calculation**: 
   - **Repulsion**: All pairs of nodes repel each other with a force inversely proportional to the square of their distance.
   - **Attraction**: Connected nodes attract each other with a force proportional to their distance.
3. **Position Update**: The positions of the nodes are updated based on the calculated forces, with a damping factor to prevent oscillations.
4. **Normalization**: The positions are normalized to fit within the [0, 1] range.
5. **Output**: The final positions are output in JSON format.

This script will generate a layout that attempts to maintain consistency between Euclidean distance and graph-theoretic distance.