To generate a layout for the graph that maintains consistency between Euclidean distance and graph-theoretic distance, we can use a force-directed layout approach. This approach simulates physical forces between nodes and edges to position the nodes in a way that minimizes edge crossings and keeps connected nodes close together.

Below is a Python script that implements a simple force-directed layout algorithm. The script will output the graph layout in JSON format.

```python
import json
import math
import random

# Define the edge list
edge_list = [
    (0, 1), (0, 26), (1, 2), (1, 27), (2, 3), (2, 28), (3, 4), (3, 29), (4, 5), (4, 30),
    (5, 6), (5, 31), (6, 7), (6, 32), (7, 8), (7, 33), (8, 9), (8, 34), (9, 10), (9, 35),
    (10, 11), (10, 36), (11, 12), (11, 37), (12, 13), (12, 38), (13, 14), (13, 39),
    (14, 15), (14, 40), (15, 16), (15, 41), (16, 17), (16, 42), (17, 18), (17, 43),
    (18, 19), (18, 44), (19, 20), (19, 45), (20, 21), (20, 46), (21, 22), (21, 47),
    (22, 23), (22, 48), (23, 24), (23, 49), (24, 25), (24, 50), (25, 51), (26, 27),
    (26, 52), (27, 28), (27, 53), (28, 29), (28, 54), (29, 30), (29, 55), (30, 31),
    (30, 56), (31, 32), (31, 57), (32, 33), (32, 58), (33, 34), (33, 59), (34, 35),
    (34, 60), (35, 36), (35, 61), (36, 37), (36, 62), (37, 38), (37, 63), (38, 39),
    (38, 64), (39, 40), (39, 65), (40, 41), (40, 66), (41, 42), (41, 67), (42, 43),
    (42, 68), (43, 44), (43, 69), (44, 45), (44, 70), (45, 46), (45, 71), (46, 47),
    (46, 72), (47, 48), (47, 73), (48, 49), (48, 74), (49, 50), (49, 75), (50, 51),
    (50, 76), (51, 77), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58),
    (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66),
    (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74),
    (74, 75), (75, 76), (76, 77)
]

# Initialize node positions randomly
nodes = set()
for edge in edge_list:
    nodes.add(edge[0])
    nodes.add(edge[1])
nodes = list(nodes)
positions = {node: (random.uniform(0, 100), random.uniform(0, 100)) for node in nodes}

# Parameters for the force-directed layout
k = 1.0  # Spring constant
repulsion_constant = 100.0  # Repulsion constant
iterations = 100
temperature = 100.0
cooling_factor = 0.95

# Force-directed layout algorithm
for iteration in range(iterations):
    for node in nodes:
        force_x, force_y = 0.0, 0.0
        
        # Calculate repulsion forces
        for other_node in nodes:
            if node != other_node:
                dx = positions[other_node][0] - positions[node][0]
                dy = positions[other_node][1] - positions[node][1]
                distance = math.sqrt(dx**2 + dy**2)
                if distance > 0:
                    repulsion_force = repulsion_constant / distance**2
                    force_x -= repulsion_force * dx / distance
                    force_y -= repulsion_force * dy / distance
        
        # Calculate attraction forces (spring forces)
        for edge in edge_list:
            if node == edge[0]:
                other_node = edge[1]
            elif node == edge[1]:
                other_node = edge[0]
            else:
                continue
            dx = positions[other_node][0] - positions[node][0]
            dy = positions[other_node][1] - positions[node][1]
            distance = math.sqrt(dx**2 + dy**2)
            if distance > 0:
                attraction_force = k * distance
                force_x += attraction_force * dx / distance
                force_y += attraction_force * dy / distance
        
        # Update positions
        positions[node] = (
            positions[node][0] + force_x * temperature,
            positions[node][1] + force_y * temperature
        )
    
    # Cool down the temperature
    temperature *= cooling_factor

# Output the layout in JSON format
layout = {node: {"x": pos[0], "y": pos[1]} for node, pos in positions.items()}
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Initialization**: The nodes are initialized with random positions within a 100x100 grid.
2. **Force Calculation**: 
   - **Repulsion Force**: Nodes repel each other to avoid overlap.
   - **Attraction Force**: Connected nodes attract each other to maintain graph-theoretic distance.
3. **Position Update**: The positions of the nodes are updated based on the calculated forces.
4. **Cooling**: The temperature is reduced over iterations to allow the system to settle into a stable configuration.
5. **Output**: The final positions of the nodes are output in JSON format.

This script provides a basic force-directed layout that can be further refined by adjusting parameters like `k`, `repulsion_constant`, and `cooling_factor`.