To generate a layout for the graph that maintains consistency between Euclidean distance and graph-theoretic distance, we can use a force-directed layout approach. This approach simulates physical forces between nodes and edges to position the nodes in a way that minimizes edge crossings and keeps connected nodes close together.

Below is a Python script that implements a simple force-directed layout algorithm. The script will output the graph layout in JSON format.

```python
import json
import random
import math

# Define the graph as an edge list
edge_list = [
    (0, 1), (0, 25), (1, 2), (1, 26), (2, 3), (2, 27), (3, 4), (3, 28), (4, 5), (4, 29),
    (5, 6), (5, 30), (6, 7), (6, 31), (7, 8), (7, 32), (8, 9), (8, 33), (9, 10), (9, 34),
    (10, 11), (10, 35), (11, 12), (11, 36), (12, 13), (12, 37), (13, 14), (13, 38), (14, 15),
    (14, 39), (15, 16), (15, 40), (16, 17), (16, 41), (17, 18), (17, 42), (18, 19), (18, 43),
    (19, 20), (19, 44), (20, 21), (20, 45), (21, 22), (21, 46), (22, 23), (22, 47), (23, 24),
    (23, 48), (24, 49), (25, 26), (25, 50), (26, 27), (26, 51), (27, 28), (27, 52), (28, 29),
    (28, 53), (29, 30), (29, 54), (30, 31), (30, 55), (31, 32), (31, 56), (32, 33), (32, 57),
    (33, 34), (33, 58), (34, 35), (34, 59), (35, 36), (35, 60), (36, 37), (36, 61), (37, 38),
    (37, 62), (38, 39), (38, 63), (39, 40), (39, 64), (40, 41), (40, 65), (41, 42), (41, 66),
    (42, 43), (42, 67), (43, 44), (43, 68), (44, 45), (44, 69), (45, 46), (45, 70), (46, 47),
    (46, 71), (47, 48), (47, 72), (48, 49), (48, 73), (49, 74), (50, 51), (51, 52), (52, 53),
    (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62),
    (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71),
    (71, 72), (72, 73), (73, 74)
]

# Initialize node positions randomly
nodes = set()
for edge in edge_list:
    nodes.add(edge[0])
    nodes.add(edge[1])
nodes = list(nodes)
positions = {node: (random.uniform(0, 100), random.uniform(0, 100)) for node in nodes}

# Parameters for the force-directed layout
k = 1.0  # Spring constant
repulsion_constant = 100.0  # Repulsion constant
iterations = 100
dt = 0.1  # Time step

# Force-directed layout algorithm
for _ in range(iterations):
    # Calculate forces
    forces = {node: (0.0, 0.0) for node in nodes}
    
    # Repulsion between all pairs of nodes
    for i in range(len(nodes)):
        for j in range(i + 1, len(nodes)):
            node1 = nodes[i]
            node2 = nodes[j]
            x1, y1 = positions[node1]
            x2, y2 = positions[node2]
            dx = x2 - x1
            dy = y2 - y1
            distance = math.sqrt(dx**2 + dy**2)
            if distance > 0:
                force = repulsion_constant / distance**2
                forces[node1] = (forces[node1][0] - force * dx / distance, forces[node1][1] - force * dy / distance)
                forces[node2] = (forces[node2][0] + force * dx / distance, forces[node2][1] + force * dy / distance)
    
    # Attraction between connected nodes
    for edge in edge_list:
        node1, node2 = edge
        x1, y1 = positions[node1]
        x2, y2 = positions[node2]
        dx = x2 - x1
        dy = y2 - y1
        distance = math.sqrt(dx**2 + dy**2)
        if distance > 0:
            force = k * distance
            forces[node1] = (forces[node1][0] + force * dx / distance, forces[node1][1] + force * dy / distance)
            forces[node2] = (forces[node2][0] - force * dx / distance, forces[node2][1] - force * dy / distance)
    
    # Update positions
    for node in nodes:
        fx, fy = forces[node]
        x, y = positions[node]
        positions[node] = (x + fx * dt, y + fy * dt)

# Output the layout in JSON format
layout = {node: {"x": pos[0], "y": pos[1]} for node, pos in positions.items()}
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Initialization**: The nodes are initialized with random positions within a 100x100 grid.
2. **Force Calculation**:
   - **Repulsion**: All pairs of nodes repel each other with a force inversely proportional to the square of their distance.
   - **Attraction**: Connected nodes attract each other with a force proportional to their distance.
3. **Position Update**: The positions of the nodes are updated based on the calculated forces.
4. **Iteration**: The force calculation and position update steps are repeated for a fixed number of iterations.
5. **Output**: The final positions of the nodes are output in JSON format.

This script provides a basic force-directed layout that should maintain a reasonable consistency between Euclidean distance and graph-theoretic distance. You can adjust the parameters (`k`, `repulsion_constant`, `iterations`, `dt`) to fine-tune the layout.