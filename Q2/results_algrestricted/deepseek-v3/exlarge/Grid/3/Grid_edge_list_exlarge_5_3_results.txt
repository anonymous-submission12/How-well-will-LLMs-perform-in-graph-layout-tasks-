To generate a layout for the graph that minimizes edge crossings, we can use a simple grid-based approach. The idea is to place nodes in a grid and assign positions to them in such a way that edges are as straight as possible, reducing the likelihood of crossings.

Here is a Python script that generates a layout for the given graph:

```python
import json

def generate_layout(edge_list):
    # Determine the number of nodes
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    num_nodes = len(nodes)
    
    # Create a grid layout
    grid_size = int(num_nodes ** 0.5) + 1
    layout = {}
    for i, node in enumerate(sorted(nodes)):
        x = i % grid_size
        y = i // grid_size
        layout[node] = {"x": x, "y": y}
    
    return layout

# Example usage
edge_list = [
    (0, 1), (0, 12), (1, 2), (1, 13), (2, 3), (2, 14), (3, 4), (3, 15), (4, 5), (4, 16),
    (5, 6), (5, 17), (6, 7), (6, 18), (7, 8), (7, 19), (8, 9), (8, 20), (9, 10), (9, 21),
    (10, 11), (10, 22), (11, 23), (12, 13), (12, 24), (13, 14), (13, 25), (14, 15), (14, 26),
    (15, 16), (15, 27), (16, 17), (16, 28), (17, 18), (17, 29), (18, 19), (18, 30), (19, 20),
    (19, 31), (20, 21), (20, 32), (21, 22), (21, 33), (22, 23), (22, 34), (23, 35), (24, 25),
    (24, 36), (25, 26), (25, 37), (26, 27), (26, 38), (27, 28), (27, 39), (28, 29), (28, 40),
    (29, 30), (29, 41), (30, 31), (30, 42), (31, 32), (31, 43), (32, 33), (32, 44), (33, 34),
    (33, 45), (34, 35), (34, 46), (35, 47), (36, 37), (36, 48), (37, 38), (37, 49), (38, 39),
    (38, 50), (39, 40), (39, 51), (40, 41), (40, 52), (41, 42), (41, 53), (42, 43), (42, 54),
    (43, 44), (43, 55), (44, 45), (44, 56), (45, 46), (45, 57), (46, 47), (46, 58), (47, 59),
    (48, 49), (48, 60), (49, 50), (49, 61), (50, 51), (50, 62), (51, 52), (51, 63), (52, 53),
    (52, 64), (53, 54), (53, 65), (54, 55), (54, 66), (55, 56), (55, 67), (56, 57), (56, 68),
    (57, 58), (57, 69), (58, 59), (58, 70), (59, 71), (60, 61), (61, 62), (62, 63), (63, 64),
    (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71)
]

layout = generate_layout(edge_list)

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Node Identification**: The script first identifies all unique nodes in the graph by iterating through the edge list.
2. **Grid Layout**: It then calculates the size of the grid needed to accommodate all nodes. The grid size is determined by taking the square root of the number of nodes and adding 1 to ensure all nodes fit.
3. **Position Assignment**: Nodes are assigned positions in the grid. The `x` coordinate is determined by the node's index modulo the grid size, and the `y` coordinate is determined by the integer division of the node's index by the grid size.
4. **Output**: The layout is output in JSON format, where each node is mapped to its `(x, y)` position.

This approach provides a simple and deterministic way to assign positions to nodes, which helps in minimizing edge crossings by keeping nodes organized in a grid. However, for more complex graphs, more sophisticated algorithms might be needed to further reduce edge crossings.