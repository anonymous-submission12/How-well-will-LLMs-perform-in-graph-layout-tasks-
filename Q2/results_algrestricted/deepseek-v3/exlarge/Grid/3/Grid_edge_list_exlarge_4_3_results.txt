To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we arrange the nodes in a grid-like structure. This approach is not optimal but can help reduce edge crossings by placing connected nodes closer to each other.

Here is a Python script that generates a layout for the graph and outputs it in JSON format:

```python
import json

# Input edge list
edge_list = [
    (0, 1), (0, 26), (1, 2), (1, 27), (2, 3), (2, 28), (3, 4), (3, 29), (4, 5), (4, 30), 
    (5, 6), (5, 31), (6, 7), (6, 32), (7, 8), (7, 33), (8, 9), (8, 34), (9, 10), (9, 35), 
    (10, 11), (10, 36), (11, 12), (11, 37), (12, 13), (12, 38), (13, 14), (13, 39), 
    (14, 15), (14, 40), (15, 16), (15, 41), (16, 17), (16, 42), (17, 18), (17, 43), 
    (18, 19), (18, 44), (19, 20), (19, 45), (20, 21), (20, 46), (21, 22), (21, 47), 
    (22, 23), (22, 48), (23, 24), (23, 49), (24, 25), (24, 50), (25, 51), (26, 27), 
    (26, 52), (27, 28), (27, 53), (28, 29), (28, 54), (29, 30), (29, 55), (30, 31), 
    (30, 56), (31, 32), (31, 57), (32, 33), (32, 58), (33, 34), (33, 59), (34, 35), 
    (34, 60), (35, 36), (35, 61), (36, 37), (36, 62), (37, 38), (37, 63), (38, 39), 
    (38, 64), (39, 40), (39, 65), (40, 41), (40, 66), (41, 42), (41, 67), (42, 43), 
    (42, 68), (43, 44), (43, 69), (44, 45), (44, 70), (45, 46), (45, 71), (46, 47), 
    (46, 72), (47, 48), (47, 73), (48, 49), (48, 74), (49, 50), (49, 75), (50, 51), 
    (50, 76), (51, 77), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), 
    (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), 
    (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74), 
    (74, 75), (75, 76), (76, 77)
]

# Extract unique nodes
nodes = set()
for edge in edge_list:
    nodes.add(edge[0])
    nodes.add(edge[1])
nodes = sorted(list(nodes))

# Assign positions in a grid-like structure
positions = {}
grid_size = int(len(nodes) ** 0.5) + 1

for i, node in enumerate(nodes):
    x = i % grid_size
    y = i // grid_size
    positions[node] = {"x": x, "y": y}

# Output the layout in JSON format
layout_json = json.dumps(positions, indent=4)
print(layout_json)
```

### Explanation:
1. **Edge List**: The input edge list is provided as a list of tuples.
2. **Unique Nodes**: We extract all unique nodes from the edge list.
3. **Grid Layout**: We assign positions to each node in a grid-like structure. The grid size is calculated based on the square root of the number of nodes, ensuring that the nodes are spread out evenly.
4. **JSON Output**: The positions are then output in JSON format.

### Output Example:
```json
{
    "0": {
        "x": 0,
        "y": 0
    },
    "1": {
        "x": 1,
        "y": 0
    },
    "2": {
        "x": 2,
        "y": 0
    },
    ...
    "77": {
        "x": 8,
        "y": 8
    }
}
```

This script generates a simple grid layout that can help reduce edge crossings by placing connected nodes closer to each other. However, for more complex graphs, more sophisticated algorithms would be needed to further minimize edge crossings.