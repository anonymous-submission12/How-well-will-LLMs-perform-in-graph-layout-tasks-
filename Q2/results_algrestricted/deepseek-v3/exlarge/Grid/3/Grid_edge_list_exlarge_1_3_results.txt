To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we place nodes in a grid-like structure. This approach is not optimal but can help reduce edge crossings by organizing nodes in a structured manner.

Here is a Python script that generates a layout for the graph and outputs it in JSON format:

```python
import json

# Input edge list
edge_list = [
    (0, 1), (0, 25), (1, 2), (1, 26), (2, 3), (2, 27), (3, 4), (3, 28), (4, 5), (4, 29),
    (5, 6), (5, 30), (6, 7), (6, 31), (7, 8), (7, 32), (8, 9), (8, 33), (9, 10), (9, 34),
    (10, 11), (10, 35), (11, 12), (11, 36), (12, 13), (12, 37), (13, 14), (13, 38), (14, 15),
    (14, 39), (15, 16), (15, 40), (16, 17), (16, 41), (17, 18), (17, 42), (18, 19), (18, 43),
    (19, 20), (19, 44), (20, 21), (20, 45), (21, 22), (21, 46), (22, 23), (22, 47), (23, 24),
    (23, 48), (24, 49), (25, 26), (25, 50), (26, 27), (26, 51), (27, 28), (27, 52), (28, 29),
    (28, 53), (29, 30), (29, 54), (30, 31), (30, 55), (31, 32), (31, 56), (32, 33), (32, 57),
    (33, 34), (33, 58), (34, 35), (34, 59), (35, 36), (35, 60), (36, 37), (36, 61), (37, 38),
    (37, 62), (38, 39), (38, 63), (39, 40), (39, 64), (40, 41), (40, 65), (41, 42), (41, 66),
    (42, 43), (42, 67), (43, 44), (43, 68), (44, 45), (44, 69), (45, 46), (45, 70), (46, 47),
    (46, 71), (47, 48), (47, 72), (48, 49), (48, 73), (49, 74), (50, 51), (51, 52), (52, 53),
    (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62),
    (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71),
    (71, 72), (72, 73), (73, 74)
]

# Determine the number of nodes
nodes = set()
for edge in edge_list:
    nodes.add(edge[0])
    nodes.add(edge[1])
num_nodes = len(nodes)

# Create a grid layout
grid_size = int(num_nodes ** 0.5) + 1
layout = {}
for i, node in enumerate(sorted(nodes)):
    row = i // grid_size
    col = i % grid_size
    layout[node] = {"x": col, "y": row}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Input Edge List**: The edge list is provided as input.
2. **Determine Nodes**: We extract all unique nodes from the edge list.
3. **Grid Layout**: We calculate the grid size based on the number of nodes. The grid size is the smallest integer greater than or equal to the square root of the number of nodes. We then assign each node to a position in the grid.
4. **Output**: The layout is output in JSON format, where each node is assigned an `(x, y)` position on the grid.

### Output Example:
```json
{
    "0": {
        "x": 0,
        "y": 0
    },
    "1": {
        "x": 1,
        "y": 0
    },
    "2": {
        "x": 2,
        "y": 0
    },
    ...
    "74": {
        "x": 8,
        "y": 8
    }
}
```

This script generates a simple grid layout that can help reduce edge crossings by organizing nodes in a structured manner. However, for more complex graphs, more sophisticated algorithms would be needed to minimize edge crossings effectively.