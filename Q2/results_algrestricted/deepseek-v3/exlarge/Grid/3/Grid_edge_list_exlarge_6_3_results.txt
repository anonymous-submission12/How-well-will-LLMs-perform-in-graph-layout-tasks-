To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we arrange the nodes in a grid-like structure. This approach is not as sophisticated as force-directed algorithms, but it can help reduce edge crossings by placing nodes in a structured manner.

Here's a Python script that generates a layout for the graph and outputs it in JSON format:

```python
import json

def generate_layout(edge_list):
    # Extract unique nodes
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    nodes = sorted(list(nodes))
    
    # Determine the number of rows and columns for the grid
    num_nodes = len(nodes)
    rows = int(num_nodes ** 0.5)
    cols = (num_nodes + rows - 1) // rows
    
    # Assign positions to nodes in a grid-like structure
    layout = {}
    for i, node in enumerate(nodes):
        row = i // cols
        col = i % cols
        layout[node] = {"x": col, "y": row}
    
    return layout

# Input edge list
edge_list = [
    (0, 1), (0, 39), (1, 2), (1, 40), (2, 3), (2, 41), (3, 4), (3, 42), (4, 5), (4, 43), 
    (5, 6), (5, 44), (6, 7), (6, 45), (7, 8), (7, 46), (8, 9), (8, 47), (9, 10), (9, 48), 
    (10, 11), (10, 49), (11, 12), (11, 50), (12, 13), (12, 51), (13, 14), (13, 52), 
    (14, 15), (14, 53), (15, 16), (15, 54), (16, 17), (16, 55), (17, 18), (17, 56), 
    (18, 19), (18, 57), (19, 20), (19, 58), (20, 21), (20, 59), (21, 22), (21, 60), 
    (22, 23), (22, 61), (23, 24), (23, 62), (24, 25), (24, 63), (25, 26), (25, 64), 
    (26, 27), (26, 65), (27, 28), (27, 66), (28, 29), (28, 67), (29, 30), (29, 68), 
    (30, 31), (30, 69), (31, 32), (31, 70), (32, 33), (32, 71), (33, 34), (33, 72), 
    (34, 35), (34, 73), (35, 36), (35, 74), (36, 37), (36, 75), (37, 38), (37, 76), 
    (38, 77), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), 
    (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), 
    (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), 
    (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), 
    (70, 71), (71, 72), (72, 73), (73, 74), (74, 75), (75, 76), (76, 77)
]

# Generate layout
layout = generate_layout(edge_list)

# Output layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Node Extraction**: The script first extracts all unique nodes from the edge list.
2. **Grid Layout**: The nodes are then arranged in a grid-like structure. The number of rows and columns is determined based on the square root of the number of nodes.
3. **Position Assignment**: Each node is assigned a position `(x, y)` in the grid.
4. **JSON Output**: The layout is output in JSON format, where each node is mapped to its position.

### Output Example:
```json
{
    "0": {"x": 0, "y": 0},
    "1": {"x": 1, "y": 0},
    "2": {"x": 2, "y": 0},
    "3": {"x": 3, "y": 0},
    "4": {"x": 4, "y": 0},
    "5": {"x": 5, "y": 0},
    "6": {"x": 6, "y": 0},
    "7": {"x": 7, "y": 0},
    "8": {"x": 8, "y": 0},
    "9": {"x": 9, "y": 0},
    "10": {"x": 0, "y": 1},
    "11": {"x": 1, "y": 1},
    "12": {"x": 2, "y": 1},
    "13": {"x": 3, "y": 1},
    "14": {"x": 4, "y": 1},
    "15": {"x": 5, "y": 1},
    "16": {"x": 6, "y": 1},
    "17": {"x": 7, "y": 1},
    "18": {"x": 8, "y": 1},
    "19": {"x": 9, "y": 1},
    ...
}
```

This layout should help minimize edge crossings by placing nodes in a structured grid. However, for more complex graphs, more sophisticated algorithms would be needed to further reduce edge crossings.