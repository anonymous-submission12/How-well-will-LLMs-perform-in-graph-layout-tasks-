To generate a layout for the graph that minimizes edge crossings, we can use a simple grid-based approach. The idea is to place nodes in a grid-like structure, which naturally reduces the number of edge crossings. Here's a Python script that generates a layout for the given graph and outputs it in JSON format:

```python
import json

def generate_grid_layout(edge_list):
    # Determine the number of nodes
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    num_nodes = len(nodes)
    
    # Determine the grid size
    grid_size = int(num_nodes ** 0.5) + 1
    
    # Assign positions to nodes in a grid
    positions = {}
    for i, node in enumerate(sorted(nodes)):
        x = i % grid_size
        y = i // grid_size
        positions[node] = {"x": x, "y": y}
    
    return positions

# Input edge list
edge_list = [
    (0, 1), (0, 11), (1, 2), (1, 12), (2, 3), (2, 13), (3, 4), (3, 14), (4, 5), (4, 15),
    (5, 6), (5, 16), (6, 7), (6, 17), (7, 8), (7, 18), (8, 9), (8, 19), (9, 10), (9, 20),
    (10, 21), (11, 12), (11, 22), (12, 13), (12, 23), (13, 14), (13, 24), (14, 15), (14, 25),
    (15, 16), (15, 26), (16, 17), (16, 27), (17, 18), (17, 28), (18, 19), (18, 29), (19, 20),
    (19, 30), (20, 21), (20, 31), (21, 32), (22, 23), (22, 33), (23, 24), (23, 34), (24, 25),
    (24, 35), (25, 26), (25, 36), (26, 27), (26, 37), (27, 28), (27, 38), (28, 29), (28, 39),
    (29, 30), (29, 40), (30, 31), (30, 41), (31, 32), (31, 42), (32, 43), (33, 34), (33, 44),
    (34, 35), (34, 45), (35, 36), (35, 46), (36, 37), (36, 47), (37, 38), (37, 48), (38, 39),
    (38, 49), (39, 40), (39, 50), (40, 41), (40, 51), (41, 42), (41, 52), (42, 43), (42, 53),
    (43, 54), (44, 45), (44, 55), (45, 46), (45, 56), (46, 47), (46, 57), (47, 48), (47, 58),
    (48, 49), (48, 59), (49, 50), (49, 60), (50, 51), (50, 61), (51, 52), (51, 62), (52, 53),
    (52, 63), (53, 54), (53, 64), (54, 65), (55, 56), (55, 66), (56, 57), (56, 67), (57, 58),
    (57, 68), (58, 59), (58, 69), (59, 60), (59, 70), (60, 61), (60, 71), (61, 62), (61, 72),
    (62, 63), (62, 73), (63, 64), (63, 74), (64, 65), (64, 75), (65, 76), (66, 67), (67, 68),
    (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74), (74, 75), (75, 76)
]

# Generate the layout
layout = generate_grid_layout(edge_list)

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Node Extraction**: The script first extracts all unique nodes from the edge list.
2. **Grid Size Calculation**: It calculates the size of the grid needed to accommodate all nodes.
3. **Position Assignment**: Nodes are assigned positions in a grid-like structure, where each node is placed at a unique `(x, y)` coordinate.
4. **JSON Output**: The positions are then output in JSON format.

This approach ensures that nodes are spread out in a grid, which helps in minimizing edge crossings. However, this is a basic approach and may not be optimal for all graphs. For more complex graphs, more sophisticated algorithms would be needed.