To generate a layout for the graph that minimizes edge crossings, we can use a simple grid-based approach. The idea is to place nodes in a grid-like structure, which naturally reduces the number of edge crossings. Here's a Python script that generates a layout for the given graph and outputs the positions in JSON format:

```python
import json

# Input edge list
edge_list = [
    (0, 1), (0, 16), (1, 2), (1, 17), (2, 3), (2, 18), (3, 4), (3, 19), (4, 5), (4, 20),
    (5, 6), (5, 21), (6, 7), (6, 22), (7, 8), (7, 23), (8, 9), (8, 24), (9, 10), (9, 25),
    (10, 11), (10, 26), (11, 12), (11, 27), (12, 13), (12, 28), (13, 14), (13, 29),
    (14, 15), (14, 30), (15, 31), (16, 17), (16, 32), (17, 18), (17, 33), (18, 19),
    (18, 34), (19, 20), (19, 35), (20, 21), (20, 36), (21, 22), (21, 37), (22, 23),
    (22, 38), (23, 24), (23, 39), (24, 25), (24, 40), (25, 26), (25, 41), (26, 27),
    (26, 42), (27, 28), (27, 43), (28, 29), (28, 44), (29, 30), (29, 45), (30, 31),
    (30, 46), (31, 47), (32, 33), (32, 48), (33, 34), (33, 49), (34, 35), (34, 50),
    (35, 36), (35, 51), (36, 37), (36, 52), (37, 38), (37, 53), (38, 39), (38, 54),
    (39, 40), (39, 55), (40, 41), (40, 56), (41, 42), (41, 57), (42, 43), (42, 58),
    (43, 44), (43, 59), (44, 45), (44, 60), (45, 46), (45, 61), (46, 47), (46, 62),
    (47, 63), (48, 49), (48, 64), (49, 50), (49, 65), (50, 51), (50, 66), (51, 52),
    (51, 67), (52, 53), (52, 68), (53, 54), (53, 69), (54, 55), (54, 70), (55, 56),
    (55, 71), (56, 57), (56, 72), (57, 58), (57, 73), (58, 59), (58, 74), (59, 60),
    (59, 75), (60, 61), (60, 76), (61, 62), (61, 77), (62, 63), (62, 78), (63, 79),
    (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72),
    (72, 73), (73, 74), (74, 75), (75, 76), (76, 77), (77, 78), (78, 79)
]

# Determine the number of nodes
nodes = set()
for edge in edge_list:
    nodes.add(edge[0])
    nodes.add(edge[1])
num_nodes = len(nodes)

# Create a grid layout
grid_size = int(num_nodes ** 0.5) + 1
layout = {}
for i, node in enumerate(sorted(nodes)):
    row = i // grid_size
    col = i % grid_size
    layout[node] = {"x": col, "y": row}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Input Edge List**: The edge list is provided as input.
2. **Determine Nodes**: We extract all unique nodes from the edge list.
3. **Grid Layout**: We calculate the grid size based on the number of nodes. The grid size is chosen to be the smallest integer greater than or equal to the square root of the number of nodes. This ensures that the nodes are placed in a grid-like structure.
4. **Assign Positions**: Each node is assigned a position in the grid. The `x` coordinate corresponds to the column, and the `y` coordinate corresponds to the row.
5. **Output JSON**: The layout is output in JSON format, where each node is mapped to its position in the grid.

### Output Example:
```json
{
    "0": {"x": 0, "y": 0},
    "1": {"x": 1, "y": 0},
    "2": {"x": 2, "y": 0},
    "3": {"x": 3, "y": 0},
    "4": {"x": 4, "y": 0},
    "5": {"x": 5, "y": 0},
    "6": {"x": 6, "y": 0},
    "7": {"x": 7, "y": 0},
    "8": {"x": 8, "y": 0},
    "9": {"x": 9, "y": 0},
    "10": {"x": 0, "y": 1},
    "11": {"x": 1, "y": 1},
    "12": {"x": 2, "y": 1},
    "13": {"x": 3, "y": 1},
    "14": {"x": 4, "y": 1},
    "15": {"x": 5, "y": 1},
    "16": {"x": 6, "y": 1},
    "17": {"x": 7, "y": 1},
    "18": {"x": 8, "y": 1},
    "19": {"x": 9, "y": 1},
    ...
}
```

This script generates a grid-based layout that minimizes edge crossings by placing nodes in a structured grid. The output is in JSON format, which can be used for further processing or visualization.