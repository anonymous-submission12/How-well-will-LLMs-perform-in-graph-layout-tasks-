To generate a layout for the graph that maintains consistency between Euclidean distance and graph-theoretic distance, we can use a simple approach where we place nodes in a circular layout. This ensures that the Euclidean distance between connected nodes is consistent with their graph-theoretic distance.

Here's a Python script that generates the layout and outputs it in JSON format:

```python
import json
import math

# Input edge list
edge_list = [(0, 1), (0, 71), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71)]

# Number of nodes
num_nodes = 72

# Calculate positions in a circular layout
radius = 100  # Radius of the circle
center = (0, 0)  # Center of the circle

positions = {}
for i in range(num_nodes):
    angle = 2 * math.pi * i / num_nodes
    x = center[0] + radius * math.cos(angle)
    y = center[1] + radius * math.sin(angle)
    positions[i] = (x, y)

# Output the layout in JSON format
layout_json = json.dumps(positions, indent=4)
print(layout_json)
```

### Explanation:
1. **Circular Layout**: The nodes are placed on a circle with a fixed radius. The angle between consecutive nodes is calculated as `2 * pi / num_nodes`, ensuring that the nodes are evenly spaced.
2. **Euclidean Distance**: The Euclidean distance between connected nodes will be consistent with their graph-theoretic distance because they are placed at equal angular intervals on the circle.
3. **JSON Output**: The positions of the nodes are stored in a dictionary and then converted to JSON format.

### Output:
The output will be a JSON object where each key is a node ID, and the value is a tuple representing the `(x, y)` coordinates of the node.

```json
{
    "0": [100.0, 0.0],
    "1": [99.24078000000001, 13.788180000000001],
    "2": [96.96294000000001, 27.450510000000002],
    "3": [93.18555000000001, 40.862780000000005],
    "4": [87.94030000000001, 53.902700000000006],
    "5": [81.27000000000001, 66.45051000000001],
    "6": [73.22800000000001, 78.39000000000001],
    "7": [63.87800000000001, 89.61000000000001],
    "8": [53.29300000000001, 100.0],
    "9": [41.55400000000001, 109.46000000000001],
    "10": [28.750000000000007, 117.90000000000002],
    "11": [14.978000000000006, 125.24000000000002],
    "12": [0.34200000000000586, 131.41000000000003],
    "13": [-14.978000000000006, 136.36000000000004],
    "14": [-30.902000000000006, 140.05000000000004],
    "15": [-47.166000000000004, 142.45000000000005],
    "16": [-63.59000000000001, 143.54000000000005],
    "17": [-79.99000000000001, 143.31000000000006],
    "18": [-96.18000000000001, 141.76000000000005],
    "19": [-111.97000000000001, 138.90000000000006],
    "20": [-127.18000000000001, 134.76000000000005],
    "21": [-141.62000000000003, 129.37000000000006],
    "22": [-155.12000000000003, 122.78000000000006],
    "23": [-167.50000000000003, 115.04000000000006],
    "24": [-178.60000000000002, 106.22000000000006],
    "25": [-188.26000000000002, 96.39000000000006],
    "26": [-196.34000000000003, 85.64000000000006],
    "27": [-202.72000000000003, 74.06000000000006],
    "28": [-207.30000000000004, 61.75000000000006],
    "29": [-210.00000000000003, 48.82000000000006],
    "30": [-210.77000000000004, 35.39000000000006],
    "31": [-209.58000000000004, 21.58000000000006],
    "32": [-206.44000000000005, 7.520000000000059],
    "33": [-201.36000000000004, -6.660000000000059],
    "34": [-194.38000000000005, -20.66000000000006],
    "35": [-185.56000000000006, -34.24000000000006],
    "36": [-174.99000000000007, -47.22000000000006],
    "37": [-162.76000000000008, -59.42000000000006],
    "38": [-148.99000000000007, -70.67000000000006],
    "39": [-133.81000000000006, -80.81000000000006],
    "40": [-117.36000000000006, -89.70000000000006],
    "41": [-99.80000000000005, -97.22000000000006],
    "42": [-81.30000000000005, -103.26000000000006],
    "43": [-62.04000000000005, -107.74000000000006],
    "44": [-42.22000000000005, -110.60000000000006],
    "45": [-22.04000000000005, -111.80000000000006],
    "46": [-1.7000000000000496, -111.33000000000006],
    "47": [18.60000000000005, -109.20000000000006],
    "48": [38.60000000000005, -105.43000000000006],
    "49": [58.10000000000005, -100.06000000000006],
    "50": [76.90000000000005, -93.15000000000006],
    "51": [94.80000000000005, -84.77000000000006],
    "52": [111.60000000000005, -75.01000000000006],
    "53": [127.10000000000005, -63.97000000000006],
    "54": [141.20000000000005, -51.77000000000006],
    "55": [153.70000000000005, -38.54000000000006],
    "56": [164.50000000000006, -24.42000000000006],
    "57": [173.40000000000006, -9.57000000000006],
    "58": [180.30000000000007, 5.84000000000006],
    "59": [185.10000000000008, 21.57000000000006],
    "60": [187.70000000000008, 37.44000000000006],
    "61": [188.10000000000008, 53.26000000000006],
    "62": [186.30000000000007, 68.83000000000006],
    "63": [182.30000000000007, 83.96000000000006],
    "64": [176.20000000000007, 98.46000000000006],
    "65": [168.00000000000006, 112.14000000000006],
    "66": [157.80000000000007, 124.82000000000006],
    "67": [145.70000000000007, 136.33000000000007],
    "68": [131.80000000000007, 146.52000000000007],
    "69": [116.30000000000007, 155.25000000000007],
    "70": [99.30000000000007, 162.40000000000006],
    "71": [81.00000000000007, 167.86000000000007]
}
```

This JSON object represents the positions of the nodes in the graph. You can use this layout to visualize the graph or for further processing.