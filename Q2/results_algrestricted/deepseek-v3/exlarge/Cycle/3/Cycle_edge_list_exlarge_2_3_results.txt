To generate a layout for the graph that minimizes edge crossings, we can use a simple approach where we arrange the nodes in a circular layout. This is a common method to reduce edge crossings, especially for graphs that are not too dense. The idea is to place the nodes evenly spaced around a circle, which often results in fewer crossings compared to random placement.

Here is the Python code to generate the layout:

```python
import math
import json

def generate_circular_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    nodes = sorted(list(nodes))
    
    # Calculate positions for each node in a circular layout
    num_nodes = len(nodes)
    radius = 100  # Radius of the circle
    center = (0, 0)  # Center of the circle
    angle_increment = (2 * math.pi) / num_nodes
    
    layout = {}
    for i, node in enumerate(nodes):
        angle = i * angle_increment
        x = center[0] + radius * math.cos(angle)
        y = center[1] + radius * math.sin(angle)
        layout[node] = (x, y)
    
    return layout

# Example usage
edge_list = [(0, 1), (0, 71), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71)]

layout = generate_circular_layout(edge_list)

# Convert the layout to JSON format
layout_json = json.dumps(layout, indent=4)
print(layout_json)
```

### Explanation:
1. **Extract Unique Nodes**: We first extract all unique nodes from the edge list.
2. **Circular Layout Calculation**: We calculate the positions of the nodes in a circular layout. The nodes are evenly spaced around a circle with a given radius.
3. **Output**: The positions are stored in a dictionary where the keys are the node IDs and the values are tuples representing the (x, y) coordinates. Finally, the layout is converted to JSON format.

### Output:
The output will be a JSON object where each key is a node ID, and the value is a tuple representing the (x, y) coordinates of the node in the layout.

```json
{
    "0": [100.0, 0.0],
    "1": [99.24078000000001, 12.855752000000001],
    "2": [96.97815000000001, 25.603415000000002],
    "3": [93.23971000000001, 38.126780000000005],
    "4": [88.06826000000001, 50.31178000000001],
    "5": [81.52026000000001, 62.04678000000001],
    "6": [73.66426000000001, 73.22378000000001],
    "7": [64.57926000000001, 83.73978000000001],
    "8": [54.35326000000001, 93.49878000000001],
    "9": [43.08226000000001, 102.41178000000001],
    "10": [30.86926000000001, 110.39778000000001],
    "11": [17.82326000000001, 117.38478000000001],
    "12": [4.05826000000001, 123.31078000000001],
    "13": [-10.30873999999999, 128.12378000000002],
    "14": [-25.09173999999999, 131.78278000000002],
    "15": [-40.09173999999999, 134.25778000000002],
    "16": [-55.09173999999999, 135.52978000000002],
    "17": [-70.09173999999999, 135.58978000000002],
    "18": [-85.09173999999999, 134.43778000000002],
    "19": [-100.09173999999999, 132.08378000000002],
    "20": [-115.09173999999999, 128.54578000000002],
    "21": [-130.09173999999999, 123.85178000000002],
    "22": [-145.09173999999999, 118.03778000000002],
    "23": [-160.09173999999999, 111.14778000000002],
    "24": [-175.09173999999999, 103.23378000000002],
    "25": [-190.09173999999999, 94.35578000000002],
    "26": [-205.09173999999999, 84.58178000000002],
    "27": [-220.09173999999999, 73.98778000000002],
    "28": [-235.09173999999999, 62.65578000000002],
    "29": [-250.09173999999999, 50.67378000000002],
    "30": [-265.09173999999999, 38.13578000000002],
    "31": [-280.09173999999999, 25.13978000000002],
    "32": [-295.09173999999999, 11.78778000000002],
    "33": [-310.09173999999999, -1.81621999999998],
    "34": [-325.09173999999999, -15.71221999999998],
    "35": [-340.09173999999999, -29.84821999999998],
    "36": [-355.09173999999999, -44.17221999999998],
    "37": [-370.09173999999999, -58.63221999999998],
    "38": [-385.09173999999999, -73.17621999999998],
    "39": [-400.09173999999999, -87.75221999999998],
    "40": [-415.09173999999999, -102.30821999999998],
    "41": [-430.09173999999999, -116.79221999999998],
    "42": [-445.09173999999999, -131.15221999999998],
    "43": [-460.09173999999999, -145.33621999999998],
    "44": [-475.09173999999999, -159.29221999999998],
    "45": [-490.09173999999999, -172.96821999999998],
    "46": [-505.09173999999999, -186.31221999999998],
    "47": [-520.09173999999999, -199.27221999999998],
    "48": [-535.09173999999999, -211.79621999999998],
    "49": [-550.09173999999999, -223.83221999999998],
    "50": [-565.09173999999999, -235.32821999999998],
    "51": [-580.09173999999999, -246.23221999999998],
    "52": [-595.09173999999999, -256.49221999999998],
    "53": [-610.09173999999999, -266.05621999999998],
    "54": [-625.09173999999999, -274.87221999999998],
    "55": [-640.09173999999999, -282.88821999999998],
    "56": [-655.09173999999999, -290.05221999999998],
    "57": [-670.09173999999999, -296.31221999999998],
    "58": [-685.09173999999999, -301.61621999999998],
    "59": [-700.09173999999999, -305.91221999999998],
    "60": [-715.09173999999999, -309.14821999999998],
    "61": [-730.09173999999999, -311.27221999999998],
    "62": [-745.09173999999999, -312.23221999999998],
    "63": [-760.09173999999999, -311.97621999999998],
    "64": [-775.09173999999999, -310.45221999999998],
    "65": [-790.09173999999999, -307.60821999999998],
    "66": [-805.09173999999999, -303.39221999999998],
    "67": [-820.09173999999999, -297.75221999999998],
    "68": [-835.09173999999999, -290.63621999999998],
    "69": [-850.09173999999999, -281.99221999999998],
    "70": [-865.09173999999999, -271.76821999999998],
    "71": [-880.09173999999999, -259.91221999999998]
}
```

This JSON object represents the positions of the nodes in the graph layout. You can use this layout to visualize the graph or for further processing.