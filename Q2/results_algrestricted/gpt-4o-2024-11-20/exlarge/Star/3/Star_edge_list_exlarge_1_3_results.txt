Below is a Python script that generates a layout for the graph provided in your edge list format. The goal is to minimize edge crossings. The algorithm positions the central node (`0`) at the origin and arranges the other nodes (`1` to `70`) radially around it to form a circular layout, as this approach inherently minimizes edge crossings for star-like graphs.

```python
import json
import math

def create_graph_layout(edge_list):
    # Extract nodes from edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    
    # Create positions for the nodes
    layout = {}
    central_node = 0  # Assume node `0` is the central node
    
    # Place central node at origin
    layout[central_node] = {"x": 0, "y": 0}
    
    # Number of peripheral nodes
    peripheral_nodes = list(nodes - {central_node})
    num_peripheral_nodes = len(peripheral_nodes)
    
    # Arrange nodes radially around the central node
    for i, node in enumerate(peripheral_nodes):
        angle = (2 * math.pi / num_peripheral_nodes) * i  # evenly spaced angles
        x = math.cos(angle)  # x-coordinate
        y = math.sin(angle)  # y-coordinate
        layout[node] = {"x": x, "y": y}

    return json.dumps(layout, indent=2)

# Input graph edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10),
    (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19),
    (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28),
    (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37),
    (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46),
    (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55),
    (0, 56), (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64),
    (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70)
]

# Generate layout
layout_json = create_graph_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Nodes and Edge Logic**: 
    - The `edge_list` is parsed to extract all unique nodes.
    - Node `0` is treated as the "central" node, assuming it is the hub in the graph (as all edges are of the form `(0, x)`).

2. **Circular Layout**:
    - Peripheral nodes (`1` to `70`) are arranged radially, evenly spaced around a circle centered at `(0, 0)`.
    - Nodes are assigned positions via trigonometric functions `cos` (for x-coordinates) and `sin` (for y-coordinates), which evenly distribute nodes in a circular fashion.

3. **Output Format**:
    - The final layout map is exported as a JSON string, where each node has its `x` and `y` coordinates.

The layout reduces edge crossings effectively for star graphs, as all peripheral nodes are evenly distributed around the central node.