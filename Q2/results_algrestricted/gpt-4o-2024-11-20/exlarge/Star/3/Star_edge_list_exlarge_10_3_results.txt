Below is a Python script that generates a layout for the given graph. The layout minimizes edge crossings by arranging the nodes in a circular pattern. The output is in JSON format, where each node is assigned a position in 2D space.

```python
import json
import math

def generate_layout(edge_list):
    # Extract all unique nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = list(nodes)
    
    # Number of nodes
    n = len(nodes)
    
    # Generate positions in a circular layout
    positions = {}
    radius = 10  # Arbitrary radius for the circle
    for i, node in enumerate(nodes):
        angle = 2 * math.pi * i / n  # Angle for each node
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        positions[node] = {"x": x, "y": y}
    
    return positions

# Input edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), 
    (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), 
    (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), 
    (0, 26), (0, 27), (0, 28), (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), 
    (0, 34), (0, 35), (0, 36), (0, 37), (0, 38), (0, 39), (0, 40), (0, 41), 
    (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), (0, 47), (0, 48), (0, 49), 
    (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), (0, 56), (0, 57), 
    (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), (0, 65), 
    (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71), (0, 72), (0, 73), 
    (0, 74), (0, 75), (0, 76), (0, 77), (0, 78), (0, 79)
]

# Generate layout
layout = generate_layout(edge_list)

# Output layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Circular Layout**: The nodes are arranged in a circular pattern to minimize edge crossings. Each node is placed at an angle proportional to its index in the list of nodes.
2. **Radius**: The radius of the circle is set to 10 (arbitrary value). You can adjust this value to scale the layout.
3. **Output**: The positions of the nodes are stored in a dictionary, where each key is a node, and the value is a dictionary containing the `x` and `y` coordinates.
4. **JSON Output**: The final layout is printed in JSON format for easy use.

This approach ensures that the layout is simple and avoids edge crossings as much as possible without using any existing graph layout algorithms.