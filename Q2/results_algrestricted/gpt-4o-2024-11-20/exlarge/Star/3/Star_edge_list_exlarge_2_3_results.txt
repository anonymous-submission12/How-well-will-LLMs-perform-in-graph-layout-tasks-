Below is a Python script that generates a layout for the given graph. The layout minimizes edge crossings by arranging the nodes in a radial pattern, with the central node (node 0) at the center and all other nodes evenly distributed around it in a circular arrangement. The output is in JSON format.

```python
import json
import math

def generate_layout(edge_list):
    # Extract all unique nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    
    # Sort nodes to ensure consistent ordering
    nodes = sorted(nodes)
    
    # Determine the central node (node 0 in this case)
    central_node = 0
    other_nodes = [node for node in nodes if node != central_node]
    
    # Initialize layout dictionary
    layout = {}
    
    # Place the central node at the origin
    layout[central_node] = {"x": 0.0, "y": 0.0}
    
    # Calculate positions for other nodes in a circular layout
    num_other_nodes = len(other_nodes)
    radius = 10  # Arbitrary radius for the circle
    for i, node in enumerate(other_nodes):
        angle = 2 * math.pi * i / num_other_nodes
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        layout[node] = {"x": x, "y": y}
    
    return layout

# Input graph data
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), 
    (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), 
    (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), 
    (0, 26), (0, 27), (0, 28), (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), 
    (0, 34), (0, 35), (0, 36), (0, 37), (0, 38), (0, 39), (0, 40), (0, 41), 
    (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), (0, 47), (0, 48), (0, 49), 
    (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), (0, 56), (0, 57), 
    (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), (0, 65), 
    (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71)
]

# Generate layout
layout = generate_layout(edge_list)

# Output layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Central Node Placement**: The central node (node 0) is placed at the origin `(0, 0)`.
2. **Circular Layout**: All other nodes are placed evenly around a circle centered at the origin. The angle for each node is calculated based on its index in the list of other nodes.
3. **Radius**: The radius of the circle is set to 10 (arbitrary value). You can adjust this value to scale the layout.
4. **Output**: The layout is returned as a dictionary where each key is a node, and the value is a dictionary containing the `x` and `y` coordinates of the node. The layout is printed in JSON format.

This approach ensures minimal edge crossings for a star graph, as all edges radiate from the central node.