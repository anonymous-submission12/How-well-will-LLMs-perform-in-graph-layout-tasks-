Below is the Python script to generate a layout for the given graph, ensuring that edge crossings are minimized without using existing graph layout algorithms. The script calculates a radial layout where the central node (node 0) is placed at the center, and all other nodes are distributed evenly around a circle. The final output is the graph layout in JSON format.

```python
import json
import math

def generate_radial_layout(edge_list):
    # Extract the nodes from the edge_list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    
    # Sort nodes to ensure consistent ordering
    nodes = sorted(nodes)
    center_node = 0  # Node 0 is assumed to be the center
    
    # Determine positions
    layout = {}
    radius = 10  # Distance from center for peripheral nodes
    layout[center_node] = (0, 0)  # Center node at origin
    
    num_peripheral_nodes = len(nodes) - 1
    angle_step = 2 * math.pi / num_peripheral_nodes
    
    for i, node in enumerate(nodes):
        if node == center_node:
            continue
        angle = i * angle_step
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        layout[node] = (x, y)
    
    return layout

# Input edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
    (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19),
    (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28),
    (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37),
    (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46),
    (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55),
    (0, 56), (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64),
    (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71), (0, 72), (0, 73), (0, 74)
]

# Generate layout
layout = generate_radial_layout(edge_list)

# Convert layout to JSON format
layout_json = json.dumps(layout, indent=4)
print(layout_json)
```

### Explanation:
1. **Node Extraction:** The script extracts all nodes from the edge list to compute the layout.
2. **Radial Layout:** It assigns the central node (node 0) a position at the origin `(0, 0)`. All other nodes are then positioned evenly across a circle around the center.
3. **Coordinate Calculation:** Polar coordinates (radius and angle) are used to compute `(x, y)` positions for peripheral nodes.
4. **Output:** The layout is exported as a JSON object for easy consumption.

You can run this script in Python, and the output will display the graph layout in JSON format.