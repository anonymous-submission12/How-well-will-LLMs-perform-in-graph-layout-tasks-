To generate a layout for the graph provided, we need to manually calculate positions of nodes while keeping the edge crossings minimal. Since the graph is star-shaped (with node `0` as the central hub and all other nodes connected to it), a natural layout would be to arrange the peripheral nodes around a circle and place the central node in the middle. Below is the Python code for calculating such a layout.

```python
import math
import json

def generate_layout(edge_list):
    # Identify all unique nodes
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    
    # Assume node `0` is the center of the star graph
    center_node = 0
    leaf_nodes = [node for node in nodes if node != center_node]
    num_leaf_nodes = len(leaf_nodes)
    
    # Initialize the layout dictionary
    layout = {}
    
    # Place the center node at the origin
    layout[center_node] = (0.0, 0.0)
    
    # Place the leaf nodes in a circle around the center node
    radius = 10  # Arbitrary radius for the circle
    for i, leaf_node in enumerate(leaf_nodes):
        angle = 2 * math.pi * i / num_leaf_nodes  # Evenly spaced angles
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        layout[leaf_node] = (x, y)
    
    # Convert layout to JSON format
    layout_json = json.dumps(layout, indent=2)
    return layout_json

# Input graph as edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), 
             (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), 
             (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24),
             (0, 25), (0, 26), (0, 27), (0, 28), (0, 29), (0, 30), (0, 31), (0, 32), 
             (0, 33), (0, 34), (0, 35), (0, 36), (0, 37), (0, 38), (0, 39), (0, 40),
             (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), (0, 47), (0, 48),
             (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), (0, 56),
             (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64),
             (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71), (0, 72),
             (0, 73), (0, 74), (0, 75)]

# Generate and print the layout
print(generate_layout(edge_list))
```

### Explanation:
1. **Input Graph:** The graph is star-shaped with `node 0` being the center and the other 75 nodes as its neighbors.
2. **Layout Approach:** Node `0` is placed at the origin `(0, 0)`. The rest of the nodes are distributed evenly around a circle centered at `(0, 0)` with a specified radius.
3. **Output:** The result is formatted as a JSON string, where each node is associated with its `(x, y)` position.

This layout minimizes edge crossings effectively due to its star structure.