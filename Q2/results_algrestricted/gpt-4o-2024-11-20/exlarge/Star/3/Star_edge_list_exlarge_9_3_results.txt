Below is a Python script that generates a layout for the given graph. The layout minimizes edge crossings by arranging the nodes in a radial pattern, with the central node (node 0) at the center and all other nodes distributed evenly around it. The output is provided in JSON format.

```python
import json
import math

def generate_layout(edge_list):
    # Extract all nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    
    # Sort nodes to ensure consistent ordering
    nodes = sorted(nodes)
    
    # Determine the central node (node 0) and peripheral nodes
    central_node = 0
    peripheral_nodes = [node for node in nodes if node != central_node]
    
    # Initialize positions dictionary
    positions = {}
    
    # Place the central node at the center
    positions[central_node] = {"x": 0.0, "y": 0.0}
    
    # Place peripheral nodes in a circular layout around the central node
    num_peripheral = len(peripheral_nodes)
    radius = 10  # Radius of the circle
    for i, node in enumerate(peripheral_nodes):
        angle = 2 * math.pi * i / num_peripheral  # Angle for each node
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        positions[node] = {"x": x, "y": y}
    
    # Convert positions to JSON format
    return json.dumps(positions, indent=4)

# Input graph data
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9),
    (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17),
    (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25),
    (0, 26), (0, 27), (0, 28), (0, 29), (0, 30), (0, 31), (0, 32), (0, 33),
    (0, 34), (0, 35), (0, 36), (0, 37), (0, 38), (0, 39), (0, 40), (0, 41),
    (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), (0, 47), (0, 48), (0, 49),
    (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), (0, 56), (0, 57),
    (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), (0, 65),
    (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71), (0, 72), (0, 73),
    (0, 74), (0, 75), (0, 76), (0, 77), (0, 78)
]

# Generate layout
layout_json = generate_layout(edge_list)

# Print the layout in JSON format
print(layout_json)
```

### Explanation:
1. **Central Node Placement**: Node `0` is placed at the origin `(0.0, 0.0)`.
2. **Peripheral Node Placement**: All other nodes are distributed evenly in a circular pattern around the central node. The angle for each node is calculated based on its index in the list of peripheral nodes.
3. **Radius**: The radius of the circle is set to `10` units, ensuring sufficient spacing between nodes.
4. **Output**: The positions of all nodes are returned in JSON format, with each node's coordinates specified as `x` and `y`.

This approach minimizes edge crossings by ensuring that all edges radiate outward from the central node without overlapping.