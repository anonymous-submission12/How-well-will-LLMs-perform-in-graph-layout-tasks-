Below is the Python code for generating a layout for the given graph, focusing on minimizing edge crossings. This implementation generates a radial layout since the graph is a star graph (node 0 connected to all other nodes), and a radial arrangement naturally minimizes edge crossings. The final layout is outputted in JSON format.

```python
import json
import math

def generate_layout(edge_list):
    # Extract all nodes from the edges
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = list(nodes)
    
    # Determine the center node (node 0, based on the structure of the graph)
    center_node = 0
    leaf_nodes = [node for node in nodes if node != center_node]
    
    # Initialize positions dictionary
    positions = {}
    
    # Place the center node at the origin (0, 0)
    positions[center_node] = (0.0, 0.0)
    
    # Arrange leaf nodes in a circular layout around the center
    num_leaf_nodes = len(leaf_nodes)
    radius = 10  # Distance from the center to leaf nodes in arbitrary units
    
    for i, node in enumerate(leaf_nodes):
        angle = (2 * math.pi * i) / num_leaf_nodes
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        positions[node] = (x, y)
    
    # Convert positions to JSON format
    layout_json = json.dumps(positions, indent=4)
    return layout_json

# Input graph as edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9),
    (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17),
    (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25),
    (0, 26), (0, 27), (0, 28), (0, 29), (0, 30), (0, 31), (0, 32), (0, 33),
    (0, 34), (0, 35), (0, 36), (0, 37), (0, 38), (0, 39), (0, 40), (0, 41),
    (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), (0, 47), (0, 48), (0, 49),
    (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), (0, 56), (0, 57),
    (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), (0, 65),
    (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71), (0, 72)
]

# Generate and print the layout in JSON format
layout = generate_layout(edge_list)
print(layout)
```

### Explanation:
1. **Node Placement:**
   - The central node (node 0) is placed at the origin (0, 0).
   - The leaf nodes are placed evenly spaced on a circle around the center node.

2. **Parameters:**
   - `radius` controls the distance of the leaf nodes from the center.
   - The angular positions of the leaf nodes are computed such that they are evenly spaced (using `2 * Ï€ * i / num_leaf_nodes`).

3. **Output:**
   - The `positions` dictionary maps each node to its (x, y) coordinates.
   - The layout is outputted as a JSON-formatted string for compatibility and further processing.