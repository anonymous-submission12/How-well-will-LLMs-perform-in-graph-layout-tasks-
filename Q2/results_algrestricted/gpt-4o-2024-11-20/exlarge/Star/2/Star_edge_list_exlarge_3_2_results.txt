Below is the Python script to generate a layout for the graph such that the Euclidean distance between nodes maintains consistency with the graph-theoretic distance. This code calculates a layout from scratch using a custom method.

```python
import json
import math
import random

def generate_layout(edge_list):
    # Map to store adjacency list for the graph
    graph = {}
    for u, v in edge_list:
        graph.setdefault(u, []).append(v)
        graph.setdefault(v, []).append(u)

    # Function to calculate graph-theoretic distances using BFS
    def bfs_distance(graph, start_node):
        queue = [(start_node, 0)]
        visited = set()
        distances = {start_node: 0}

        while queue:
            current_node, current_distance = queue.pop(0)
            visited.add(current_node)
            for neighbor in graph[current_node]:
                if neighbor not in visited:
                    distances[neighbor] = current_distance + 1
                    queue.append((neighbor, current_distance + 1))
                    visited.add(neighbor)
        return distances

    # Get the graph-theoretic distances from node 0 to all other nodes
    distances = bfs_distance(graph, 0)

    # Use polar coordinates for layout (this ensures nodes are spread out)
    layout = {}
    num_nodes = len(graph)
    center = (0.0, 0.0)  # Place node 0 at the center

    layout[0] = center

    max_distance = max(distances.values())
    angle_offset = 2 * math.pi / (len(distances) - 1)

    # Position each node at (r, theta) where r is proportional to graph-theoretic distance
    for i, node in enumerate(graph.keys()):
        if node == 0:
            continue
        
        distance = distances[node]
        radius = distance / max_distance * 10.0
        angle = angle_offset * (i - 1)  # Spread nodes evenly by angle
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        
        # Assign calculated coordinates to the layout
        layout[node] = (x, y)

    # Return the layout as a JSON formatted string
    return json.dumps(layout, indent=4)

# Define the input graph data
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10),
    (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), 
    (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), 
    (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37), 
    (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), 
    (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), 
    (0, 56), (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), 
    (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71), (0, 72)
]

# Generate the graph layout
layout_json = generate_layout(edge_list)

# Output the layout in JSON format
print(layout_json)
```

This script:
- Calculates the graph-theoretic distances for all nodes from the starting node (node 0 in this case).
- Assigns polar coordinates to each node based on these distances, ensuring proportional radii according to graph-theoretic distances.
- Converts the layout into JSON format for output.

Make sure to test and visualize the layout separately in a dedicated plotting tool if you wish to see how nodes are arranged geometrically.