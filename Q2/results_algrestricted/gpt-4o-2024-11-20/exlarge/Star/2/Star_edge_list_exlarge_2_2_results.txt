Here is a Python script that calculates a graph layout maintaining consistency between Euclidean distance and graph-theoretic distance. Euclidean distance is simulated using random node placement while approximate consistency with graph-theoretic distances is ensured by iterative adjustment. The final output is in JSON format.

```python
import json
import random
import math
from collections import defaultdict

def initialize_positions(graph, num_nodes):
    """Initialize node positions to random points in 2D space."""
    positions = {}
    for node in range(num_nodes):
        positions[node] = [random.uniform(-10, 10), random.uniform(-10, 10)]
    return positions

def compute_graph_distances(graph, num_nodes):
    """Calculate shortest path distances between all pairs of nodes using BFS."""
    graph_distance = [[float('inf')] * num_nodes for _ in range(num_nodes)]
    for node in range(num_nodes):
        graph_distance[node][node] = 0  # Distance to itself is 0
        queue = [node]
        visited = set()
        visited.add(node)
        while queue:
            current = queue.pop(0)
            for neighbor in graph[current]:
                if neighbor not in visited:
                    graph_distance[node][neighbor] = graph_distance[node][current] + 1
                    visited.add(neighbor)
                    queue.append(neighbor)
    return graph_distance

def update_positions(positions, graph_distance, num_nodes, learning_rate=0.01, iterations=1000):
    """Adjust positions iteratively to align with the graph-theoretic distances."""
    for _ in range(iterations):
        for i in range(num_nodes):
            for j in range(i + 1, num_nodes):
                if graph_distance[i][j] < float('inf'):  # If nodes are connected
                    dx = positions[j][0] - positions[i][0]
                    dy = positions[j][1] - positions[i][1]
                    euclidean_distance = math.sqrt(dx**2 + dy**2)
                    target_distance = graph_distance[i][j]
                    if euclidean_distance > 0:  # Avoid division by zero
                        # Adjust positions to minimize difference between current Euclidean distance and graph-theoretic distance
                        force = (euclidean_distance - target_distance) / euclidean_distance
                        positions[i][0] += learning_rate * force * dx
                        positions[i][1] += learning_rate * force * dy
                        positions[j][0] -= learning_rate * force * dx
                        positions[j][1] -= learning_rate * force * dy

    return positions

def generate_layout(edge_list, num_nodes):
    """Generate graph layout based on edge list."""
    # Convert edge list to adjacency list
    graph = defaultdict(list)
    for edge in edge_list:
        graph[edge[0]].append(edge[1])
        graph[edge[1]].append(edge[0])

    # Step 1: Initialize positions randomly
    positions = initialize_positions(graph, num_nodes)

    # Step 2: Compute graph-theoretic distances
    graph_distance = compute_graph_distances(graph, num_nodes)

    # Step 3: Iteratively update positions to align with graph-theoretic distances
    positions = update_positions(positions, graph_distance, num_nodes)

    # Convert positions dictionary into JSON serializable format
    positions_json = {node: {"x": pos[0], "y": pos[1]} for node, pos in positions.items()}
    return json.dumps(positions_json, indent=4)

# Input graph
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9),
             (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), 
             (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25),
             (0, 26), (0, 27), (0, 28), (0, 29), (0, 30), (0, 31), (0, 32), (0, 33),
             (0, 34), (0, 35), (0, 36), (0, 37), (0, 38), (0, 39), (0, 40), (0, 41),
             (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), (0, 47), (0, 48), (0, 49),
             (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), (0, 56), (0, 57),
             (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), (0, 65),
             (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71)]
num_nodes = 72

# Generate and print layout
layout = generate_layout(edge_list, num_nodes)
print(layout)
```

This code uses random initialization, computes graph distances using BFS, and adjusts positions iteratively to align Euclidean distances with graph-theoretic distances. The final output is a JSON string containing `x` and `y` coordinates for each node.