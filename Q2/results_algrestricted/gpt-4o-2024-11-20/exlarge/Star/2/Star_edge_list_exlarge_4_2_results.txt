Here is a Python script that computes a layout for the given graph edge list by using the graph-theoretic distances between nodes (shortest paths) as a basis for embedding the graph in a 2D space. The script outputs the layout as a JSON object:

```python
import json
import numpy as np
from scipy.spatial import distance
from scipy.optimize import minimize

def compute_shortest_path_lengths(edge_list, num_nodes):
    # Build adjacency matrix for the graph
    adjacency_matrix = np.full((num_nodes, num_nodes), np.inf)
    np.fill_diagonal(adjacency_matrix, 0)
    for u, v in edge_list:
        adjacency_matrix[u, v] = 1
        adjacency_matrix[v, u] = 1

    # Use the Floyd-Warshall algorithm to compute shortest paths
    for k in range(num_nodes):
        for i in range(num_nodes):
            for j in range(num_nodes):
                adjacency_matrix[i, j] = min(adjacency_matrix[i, j], adjacency_matrix[i, k] + adjacency_matrix[k, j])
    return adjacency_matrix

def stress_function(positions, target_distances, num_nodes):
    # Compute stress, which is the sum of squared differences between Euclidean distances
    # and target graph-theoretic distances
    positions_reshaped = positions.reshape((num_nodes, 2))
    total_stress = 0
    for i in range(num_nodes):
        for j in range(i + 1, num_nodes):
            euclidean_dist = np.linalg.norm(positions_reshaped[i] - positions_reshaped[j])
            target_dist = target_distances[i, j]
            total_stress += (euclidean_dist - target_dist) ** 2
    return total_stress

def generate_graph_layout(edge_list, num_nodes):
    # Compute graph-theoretic distances between nodes
    shortest_path_lengths = compute_shortest_path_lengths(edge_list, num_nodes)
    
    # Initial random positions for nodes in 2D
    initial_positions = np.random.rand(num_nodes * 2)

    # Minimize the stress function to find optimal positions
    result = minimize(
        stress_function,
        initial_positions,
        args=(shortest_path_lengths, num_nodes),
        method='L-BFGS-B',
        options={'maxiter': 1000}
    )
    optimized_positions = result.x.reshape((num_nodes, 2))

    # Convert positions to dictionary format
    layout = {i: optimized_positions[i].tolist() for i in range(num_nodes)}
    return layout

if __name__ == "__main__":
    edge_list = [
        (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), 
        (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), 
        (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), 
        (0, 26), (0, 27), (0, 28), (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), 
        (0, 34), (0, 35), (0, 36), (0, 37), (0, 38), (0, 39), (0, 40), (0, 41), 
        (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), (0, 47), (0, 48), (0, 49), 
        (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), (0, 56), (0, 57), 
        (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), (0, 65), 
        (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71), (0, 72), (0, 73)
    ]
    num_nodes = 74  # Number of nodes in the graph
    layout = generate_graph_layout(edge_list, num_nodes)
    
    # Output the layout as JSON
    print(json.dumps(layout, indent=2))
```

### Explanation:
1. **Shortest Path Computation**: The Floyd-Warshall algorithm is used to compute the shortest path lengths (graph-theoretic distances) between all pairs of nodes in the graph.
2. **Stress Minimization**: A custom layout is computed by minimizing a "stress function" that measures the difference between Euclidean distances in the layout and graph-theoretic distances.
3. **Output**: The computed node positions are returned as a JSON object, with node indices as keys and 2D coordinates as values.