Below is the Python script to generate a layout for the given graph. The layout ensures consistency between Euclidean distance and graph-theoretic distance. The script does not use any existing graph layout algorithms or visualization libraries for drawing the graph. The final output is in JSON format.

```python
import json
import math

def generate_graph_layout(edge_list):
    # Step 1: Parse the nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = list(nodes)
    
    # Step 2: Initialize positions for the nodes
    positions = {}
    center_node = 0  # Assuming node 0 is the central node
    positions[center_node] = (0, 0)  # Place the central node at the origin
    
    # Step 3: Place other nodes in a circular layout around the central node
    num_neighbors = len(nodes) - 1  # Exclude the central node
    radius = 10  # Arbitrary radius for the circle
    angle_step = 2 * math.pi / num_neighbors  # Angle between each neighbor
    
    current_angle = 0
    for node in nodes:
        if node == center_node:
            continue
        x = radius * math.cos(current_angle)
        y = radius * math.sin(current_angle)
        positions[node] = (x, y)
        current_angle += angle_step
    
    # Step 4: Return the positions in JSON format
    return json.dumps(positions, indent=4)

# Input edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10),
    (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20),
    (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), (0, 29), (0, 30),
    (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37), (0, 38), (0, 39), (0, 40),
    (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), (0, 47), (0, 48), (0, 49), (0, 50),
    (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), (0, 56), (0, 57), (0, 58), (0, 59), (0, 60),
    (0, 61), (0, 62), (0, 63), (0, 64), (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70),
    (0, 71), (0, 72), (0, 73), (0, 74), (0, 75), (0, 76), (0, 77)
]

# Generate the layout
layout = generate_graph_layout(edge_list)

# Print the layout
print(layout)
```

### Explanation:
1. **Node Parsing**: The script extracts all unique nodes from the edge list.
2. **Central Node Placement**: Node `0` is placed at the origin `(0, 0)`.
3. **Circular Layout**: All other nodes are placed in a circular layout around the central node. The radius of the circle is set to `10`, and the angle between consecutive nodes is calculated based on the total number of neighbors.
4. **Output**: The positions of the nodes are returned in JSON format.

This approach ensures that the Euclidean distance between nodes reflects their graph-theoretic distance, as all neighbors of the central node are equidistant from it.