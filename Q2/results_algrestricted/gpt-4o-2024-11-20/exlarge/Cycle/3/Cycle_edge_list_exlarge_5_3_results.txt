To create a graph layout without relying on any existing graph layout algorithms and minimize edge crossings, we can attempt a heuristic approach. The most straightforward method in our context will distribute nodes in a grid-like manner or a linear arrangement, starting from the edges provided.

Here is a Python script that computes a layout for the graph and outputs the coordinates of each node in JSON format. The positions are determined based on a heuristic attempt to place nodes with minimal crossings, while avoiding the limitations of predefined algorithms.

```python
import json

def generate_graph_layout(edge_list):
    # Initialize node positions dictionary
    positions = {}
    
    # Create adjacency list from edge list
    adjacency_list = {}
    for u, v in edge_list:
        if u not in adjacency_list:
            adjacency_list[u] = []
        if v not in adjacency_list:
            adjacency_list[v] = []
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)
    
    # Start placing nodes based on a heuristic:
    # Place them along a squarish grid-like dimension to reduce crossings
    nodes = sorted(adjacency_list.keys())  # Sort nodes to handle consistently
    
    grid_size = int(len(nodes)**0.5) + 1  # Determine grid size
    row, col = 0, 0

    for node in nodes:
        positions[node] = (col, row)
        col += 1
        if col >= grid_size:  # Move to next row when grid size is filled
            col = 0
            row += 1
    
    return positions

# Edge list for the graph
edge_list = [(0, 1), (0, 74), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), 
             (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), 
             (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), 
             (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), 
             (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), 
             (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), 
             (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), 
             (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), 
             (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), 
             (72, 73), (73, 74)]

# Generate positions
positions = generate_graph_layout(edge_list)

# Output positions in JSON format
print(json.dumps(positions, indent=4))
```

### Explanation of the Script:
1. **Adjacency List Construction**: We prepare an adjacency list to traverse or analyze node connectivity if needed later.
2. **Grid-Like Node Placement**: Nodes are laid out sequentially into a grid with approximately squarish dimensions. This simple structure helps to reduce direct crossings while avoiding the overhead of graph algorithms.
3. **JSON Output**: The final position dictionary is serialized into JSON format for easier use.

### Output
The output will be the JSON with node positions, like:
```json
{
    "0": [0, 0],
    "1": [1, 0],
    "2": [2, 0],
    ...
}
```