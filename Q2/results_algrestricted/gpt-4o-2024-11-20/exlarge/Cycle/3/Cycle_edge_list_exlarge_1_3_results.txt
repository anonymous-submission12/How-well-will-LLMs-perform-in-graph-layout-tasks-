Here is the Python script to generate a layout for the graph while minimizing edge crossings. Since no existing graph layout algorithms are allowed, we will use a simple heuristic to layout nodes in a somewhat systematic way. This approach manually arranges nodes in a grid structure which is an algorithmic attempt to minimize edge crossings.

```python
import json
import math

def generate_layout(edge_list):
    """
    Generate a layout for the nodes in the graph while attempting to minimize edge crossings.
    This implementation arranges the nodes in an approximate circular layout.
    """
    # Extract unique nodes from edge list
    nodes = set([node for edge in edge_list for node in edge])
    nodes = sorted(nodes) # Ensure consistent ordering of nodes

    # Parameters for layout
    radius = 10  # Radius of the circle for circular placement
    node_count = len(nodes)

    # Compute the layout positions
    node_positions = {}
    for idx, node in enumerate(nodes):
        angle = 2 * math.pi * idx / node_count  # Uniform angle distribution
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        node_positions[node] = {"x": x, "y": y}

    # Return layout as JSON
    return json.dumps(node_positions, indent=2)

# Edge list provided in the problem
edge_list = [
    (0, 1), (0, 70), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), 
    (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), 
    (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), 
    (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), 
    (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), 
    (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), 
    (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), 
    (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), 
    (65, 66), (66, 67), (67, 68), (68, 69), (69, 70)
]

# Generate and print the layout
layout = generate_layout(edge_list)
print(layout)
```

This script performs the following steps:

1. Identifies all unique nodes in the input edge list.
2. Distributes nodes uniformly on a circular layout to roughly minimize edge crossings.
3. Outputs the layout in JSON format, with each node positioned using x and y coordinates.

Note: The chosen layout approach is heuristic-based and ensures that nodes are displayed in a consistent circular layout. This is not a sophisticated layout optimization, as we are avoiding the use of advanced graph layout algorithms.