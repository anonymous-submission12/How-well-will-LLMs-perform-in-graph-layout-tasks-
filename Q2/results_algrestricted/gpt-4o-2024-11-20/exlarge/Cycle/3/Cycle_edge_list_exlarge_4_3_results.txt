To generate a layout for the graph that minimizes edge crossings without using existing graph layout algorithms, we can implement a simple heuristic-based approach. The goal is to assign positions to nodes in a way that reduces edge crossings. Below is the Python script to achieve this:

```python
import json

def generate_graph_layout(edge_list):
    # Step 1: Create adjacency list representation of the graph
    adjacency_list = {}
    for edge in edge_list:
        u, v = edge
        if u not in adjacency_list:
            adjacency_list[u] = []
        if v not in adjacency_list:
            adjacency_list[v] = []
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)

    # Step 2: Assign positions to nodes
    # We'll use a simple heuristic: place nodes in a straight line based on their connectivity
    # This works well for minimizing crossings in linear graphs
    positions = {}
    visited = set()
    current_x = 0

    def dfs(node, current_x):
        if node in visited:
            return
        visited.add(node)
        positions[node] = (current_x, 0)  # Place nodes on a straight line (y=0)
        current_x += 1
        for neighbor in adjacency_list[node]:
            dfs(neighbor, current_x)

    # Start DFS from the first node in the edge list
    start_node = edge_list[0][0]
    dfs(start_node, current_x)

    # Step 3: Return positions in JSON format
    return json.dumps(positions, indent=4)

# Input graph data
edge_list = [
    (0, 1), (0, 73), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9),
    (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17),
    (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25),
    (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33),
    (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41),
    (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49),
    (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57),
    (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65),
    (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73)
]

# Generate layout
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Adjacency List**: The graph is represented as an adjacency list for efficient traversal.
2. **DFS Traversal**: A depth-first search (DFS) is used to assign positions to nodes. Nodes are placed sequentially along the x-axis, ensuring a linear layout.
3. **Output Format**: The positions of nodes are returned in JSON format, where each node is mapped to its `(x, y)` position.

This approach works well for linear graphs like the one provided, as it minimizes edge crossings by arranging nodes in a straight line.