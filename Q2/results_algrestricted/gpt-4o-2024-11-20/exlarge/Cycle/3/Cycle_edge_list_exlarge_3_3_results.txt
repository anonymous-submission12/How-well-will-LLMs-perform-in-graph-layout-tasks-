To generate a layout for the graph that minimizes edge crossings, we need to determine the position of each node. Without using existing layout algorithms, here's a simple custom implementation that attempts to minimize edge crossings heuristically. We'll arrange nodes in a way that tries to respect the "order" of edges and make the graph more linear.

```python
import json

def generate_graph_layout(edge_list):
    # Extract unique nodes from edge list
    nodes = set()
    for u, v in edge_list:
        nodes.add(u)
        nodes.add(v)

    # Nodes will be placed along a straight line in increasing order
    sorted_nodes = sorted(nodes)
    
    # Assign positions to nodes
    node_positions = {}
    for i, node in enumerate(sorted_nodes):
        node_positions[node] = {"x": i * 10, "y": 0}  # Spacing nodes apart on a straight line

    # Minimize edge crossings by using a straight-line strategy
    # For a simple graph like this, sorting nodes minimizes crossings naturally

    return node_positions

# Input graph as edge list
edge_list = [
    (0, 1), (0, 72), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), 
    (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), 
    (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), 
    (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), 
    (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), 
    (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), 
    (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72)
]

# Generate layout
layout = generate_graph_layout(edge_list)

# Output graph layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation of the Code:
- **Node Positioning**:
  Each unique node is placed in a sorted linear order along the x-axis. The x-coordinate is spaced by 10 units for each node, and all nodes share the same y-coordinate (y = 0).

- **Edge Crossings**:
  By positioning nodes in the order they are connected, the linear layout should largely avoid edge crossings for this input graph.

- **Output**:
  The node coordinates are outputted in a JSON-format dictionary, with each node's position represented by its x and y coordinates.

Run this code to generate the layout for your graph. You can tweak the layout algorithm further to explore other strategies if needed.