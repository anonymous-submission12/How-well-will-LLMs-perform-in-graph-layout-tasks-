Below is the Python code to generate a layout for the graph provided in the edge list format. The layout minimizes edge crossings by placing the nodes in approximately linear order while maintaining the connectivity of the edges.

```python
import json

def generate_graph_layout(edge_list):
    # Initialize positions dictionary
    positions = {}

    # Extract all unique nodes from edges
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = list(nodes)
    
    # Assign positions
    # Position nodes in a straight line to minimize crossings
    for i, node in enumerate(sorted(nodes)):
        positions[node] = (i * 10, 0)  # Spread nodes 10 units apart along the x-axis, y=0

    # Return the layout as a JSON object
    return json.dumps(positions, indent=4)

# Input graph edge list
edge_list = [
    (0, 1), (0, 79), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), 
    (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), 
    (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), 
    (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), 
    (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), 
    (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), 
    (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), 
    (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), 
    (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), 
    (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), 
    (72, 73), (73, 74), (74, 75), (75, 76), (76, 77), (77, 78), (78, 79)
]

# Generate and print the graph layout
graph_layout = generate_graph_layout(edge_list)
print(graph_layout)
```

### Explanation:
1. **Nodes Alignment**: To minimize edge crossings, the nodes are arranged in a straight line along the x-axis. By sorting the nodes numerically, the connections naturally align without overlapping.
2. **Spacing**: The nodes are spaced 10 units apart along the x-axis, keeping the y-coordinate at 0.
3. **Output in JSON format**: The layout data is serialized as a JSON object with indentation for readability.

You can run this script in Python, and the resulting JSON layout for node positions will be printed to the console.