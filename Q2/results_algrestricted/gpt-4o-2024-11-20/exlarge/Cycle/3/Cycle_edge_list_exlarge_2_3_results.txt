Below is a Python script that generates a layout for the given graph while attempting to minimize edge crossings. The script uses a simple heuristic approach to assign positions to nodes. The final output is a JSON representation of the graph layout.

```python
import json

def generate_graph_layout(edge_list):
    # Extract all nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = sorted(nodes)

    # Initialize positions dictionary
    positions = {}

    # Heuristic: Place nodes in a straight line to minimize edge crossings
    # Assign x-coordinates incrementally and keep y-coordinates constant
    for i, node in enumerate(nodes):
        positions[node] = (i, 0)  # (x, y) coordinates

    # Convert positions to JSON format
    layout_json = json.dumps(positions, indent=4)
    return layout_json

# Input graph edge list
edge_list = [
    (0, 1), (0, 71), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9),
    (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17),
    (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25),
    (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33),
    (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41),
    (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49),
    (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57),
    (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65),
    (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71)
]

# Generate layout
layout = generate_graph_layout(edge_list)

# Print the layout in JSON format
print(layout)
```

### Explanation:
1. **Node Extraction**: The script extracts all unique nodes from the edge list.
2. **Position Assignment**: Nodes are placed in a straight line along the x-axis, with equal spacing between them. This heuristic minimizes edge crossings for linear graphs.
3. **Output Format**: The positions are converted to JSON format for easy use.

### Output Example:
The output will look like this:
```json
{
    "0": [0, 0],
    "1": [1, 0],
    "2": [2, 0],
    "3": [3, 0],
    "4": [4, 0],
    ...
    "71": [71, 0]
}
```

This layout places all nodes in a straight line, which is suitable for minimizing edge crossings in a linear graph.