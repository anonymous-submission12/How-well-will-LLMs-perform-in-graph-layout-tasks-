Below is Python code that generates a graph layout to minimize edge crossings by implementing a simplified force-directed algorithm. While this is not a fully optimized solution, it serves as a basic illustrative example to calculate graph positions without relying on existing layout algorithms.

```python
import json
import random
from math import sqrt

def generate_graph_layout(edge_list, iterations=1000, cooling=0.99):
    # Step 1: Initialize positions randomly in a 2D plane
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)

    positions = {node: [random.uniform(0, 1), random.uniform(0, 1)] for node in nodes}

    # Step 2: Force-directed layout: simple repulsion-attraction model
    def distance(pos1, pos2):
        return sqrt((pos2[0] - pos1[0]) ** 2 + (pos2[1] - pos1[1]) ** 2)

    def apply_forces():
        # Repulsion: all nodes repel each other
        for node1 in nodes:
            for node2 in nodes:
                if node1 != node2:
                    pos1 = positions[node1]
                    pos2 = positions[node2]
                    dist = distance(pos1, pos2)
                    if dist > 0:
                        # Apply repulsion: move nodes apart
                        repulsion = 0.01 / dist
                        positions[node1][0] += repulsion * (pos1[0] - pos2[0])
                        positions[node1][1] += repulsion * (pos1[1] - pos2[1])

        # Attraction: connected nodes attract each other
        for edge in edge_list:
            node1, node2 = edge
            pos1 = positions[node1]
            pos2 = positions[node2]
            dist = distance(pos1, pos2)
            if dist > 0:
                # Apply attraction: move nodes closer together
                attraction = 0.01 * dist
                positions[node1][0] -= attraction * (pos1[0] - pos2[0])
                positions[node1][1] -= attraction * (pos1[1] - pos2[1])
                positions[node2][0] += attraction * (pos1[0] - pos2[0])
                positions[node2][1] += attraction * (pos1[1] - pos2[1])

    # Apply forces iteratively to stabilize layout
    temperature = 1.0
    for _ in range(iterations):
        apply_forces()
        # Cooling factor reduces movements over time
        for node in nodes:
            positions[node][0] += random.uniform(-temperature, temperature)
            positions[node][1] += random.uniform(-temperature, temperature)
        temperature *= cooling

    # Normalize positions to fit within [0, 1] range
    min_x = min(pos[0] for pos in positions.values())
    max_x = max(pos[0] for pos in positions.values())
    min_y = min(pos[1] for pos in positions.values())
    max_y = max(pos[1] for pos in positions.values())

    for node in nodes:
        positions[node][0] = (positions[node][0] - min_x) / (max_x - min_x)
        positions[node][1] = (positions[node][1] - min_y) / (max_y - min_y)

    return positions

# Edge list of the input graph
edge_list = [(0, 1), (0, 76), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), 
             (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16),
             (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24),
             (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32),
             (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40),
             (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48),
             (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56),
             (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64),
             (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72),
             (72, 73), (73, 74), (74, 75), (75, 76)]

# Generate graph layout
layout = generate_graph_layout(edge_list)

# Print layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation of the Code:
1. **Initialization**: The node positions are initialized randomly in the (0, 1) range for both x and y coordinates.

2. **Force Application**:
   - **Repulsion**: Nodes repel each other inversely proportional to their distance.
   - **Attraction**: Nodes connected by edges attract each other proportional to their distance.

3. **Iterations**: The algorithm iteratively applies the forces, with a cooling factor to reduce movement over time.

4. **Normalization**: After stabilization, positions are normalized to fit within the (0, 1) range.

5. **Output**: The final node positions are presented in JSON format.