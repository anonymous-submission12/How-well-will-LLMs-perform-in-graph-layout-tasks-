To achieve consistency between Euclidean distance and graph-theoretic distance (shortest path), let's assign 2D coordinates to graph nodes using the following approach:
1. Compute a pairwise minimum graph-theoretic distance matrix for all nodes.
2. Use a technique similar to Multidimensional Scaling (MDS) to place nodes in 2D space while preserving graph-theoretic distances as closely as possible.

Hereâ€™s the Python script:

```python
import json
import numpy as np

def compute_shortest_paths(edge_list, num_nodes):
    """Compute the shortest path distances between all nodes using Floyd-Warshall algorithm."""
    inf = float('inf')
    distances = [[inf] * num_nodes for _ in range(num_nodes)]

    # Initialize distances
    for u, v in edge_list:
        distances[u][v] = 1
        distances[v][u] = 1
    for i in range(num_nodes):
        distances[i][i] = 0

    # Floyd-Warshall algorithm
    for k in range(num_nodes):
        for i in range(num_nodes):
            for j in range(num_nodes):
                distances[i][j] = min(distances[i][j], distances[i][k] + distances[k][j])

    return distances

def mds_layout(distance_matrix, dimensions=2):
    """
    Generate a layout using Multidimensional Scaling (MDS) to reduce the distance matrix to a low-dimensional space.
    """
    # Convert the distance matrix into a similarity matrix
    n = len(distance_matrix)
    distance_matrix = np.array(distance_matrix)
    distance_squared = np.square(distance_matrix)
    row_mean = np.mean(distance_squared, axis=1, keepdims=True)
    col_mean = np.mean(distance_squared, axis=0, keepdims=True)
    total_mean = np.mean(distance_squared)
    similarity_matrix = -0.5 * (distance_squared - row_mean - col_mean + total_mean)

    # Compute eigenvalues and eigenvectors
    eigenvalues, eigenvectors = np.linalg.eigh(similarity_matrix)

    # Select the top `dimensions` eigenvalues and corresponding eigenvectors
    indices = np.argsort(eigenvalues)[-dimensions:][::-1]
    selected_eigenvalues = eigenvalues[indices]
    selected_eigenvectors = eigenvectors[:, indices]

    # Compute the coordinates
    coords = selected_eigenvectors * np.sqrt(selected_eigenvalues)
    return coords

def generate_layout(edge_list):
    # Determine number of nodes
    num_nodes = max(max(u, v) for u, v in edge_list) + 1

    # Compute the shortest path distances
    distance_matrix = compute_shortest_paths(edge_list, num_nodes)

    # Perform MDS to determine the layout
    coords = mds_layout(distance_matrix)

    # Create the layout dictionary
    layout = {i: coords[i].tolist() for i in range(len(coords))}
    return layout

# Define the graph as an edge list
edge_list = [
    (0, 1), (0, 74), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8),
    (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16),
    (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24),
    (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32),
    (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40),
    (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48),
    (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56),
    (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64),
    (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72),
    (72, 73), (73, 74)
]

# Generate the graph layout
layout = generate_layout(edge_list)

# Print the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Shortest Path Calculation**: The `compute_shortest_paths` function uses the Floyd-Warshall algorithm to compute all-pairs shortest paths.
2. **Multidimensional Scaling (MDS)**: The MDS-like algorithm converts the distance matrix into a similarity matrix and computes its eigen decomposition to embed the graph into a 2D coordinate space.
3. **Output**: The final positions of the nodes are output as a JSON-formatted dictionary. Each key represents a node, and the value is its 2D coordinates.