Below is the Python code that generates a graph layout while keeping consistency between Euclidean distance and graph-theoretic distance. The positions are saved in JSON format as the output, ensuring the graph is laid out effectively given the constraints.

```python
import json
import math
from collections import defaultdict

def compute_node_positions(edge_list):
    # Create a graph adjacency list
    graph = defaultdict(list)
    for u, v in edge_list:
        graph[u].append(v)
        graph[v].append(u)

    # BFS to calculate graph-theoretic distances from a chosen root (node 0)
    distances = {}
    def bfs(root):
        queue = [(root, 0)]
        distances[root] = 0
        visited = set()
        while queue:
            node, dist = queue.pop(0)
            visited.add(node)
            for neighbor in graph[node]:
                if neighbor not in visited and neighbor not in distances:
                    distances[neighbor] = dist + 1
                    queue.append((neighbor, dist + 1))
    bfs(0)  # Arbitrarily pick node 0 as the root

    # Sort nodes by their distance from the root (to layout concentric structure)
    nodes_by_distance = sorted(distances.keys(), key=lambda x: distances[x])

    # Generate positions for nodes
    positions = {}
    angle_gap = 2 * math.pi / max(len(nodes_by_distance), 1)  # Angular gap between nodes in the same layer
    layer_radii = {}  # Keep a radius for each layer (or distance level)
    for node in nodes_by_distance:
        layer = distances[node]
        if layer not in layer_radii:
            layer_radii[layer] = 5 * layer  # Space out layers radially
        radius = layer_radii[layer]

        # Determine angle and position for the node
        if layer == 0:
            positions[node] = (0.0, 0.0)  # Root is at the center
        else:
            angle = (list(distances.keys()).index(node) % len(graph)) * angle_gap
            x = radius * math.cos(angle)
            y = radius * math.sin(angle)
            positions[node] = (x, y)
    
    return positions

# Input graph edge list
edge_list = [(0, 1), (0, 72), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), 
             (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), 
             (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), 
             (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), 
             (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), 
             (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), 
             (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), 
             (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), 
             (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), 
             (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), 
             (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), 
             (68, 69), (69, 70), (70, 71), (71, 72)]

# Compute positions
positions = compute_node_positions(edge_list)

# Output positions to JSON
print(json.dumps(positions, indent=4))
```

### Key Points of the Code:
1. **BFS and Graph Distances**: The graph-theoretic distance from a designated root (e.g., node 0) is calculated using Breadth-First Search (BFS).
2. **Layered Layout**: Nodes at varying graph-theoretic distances are laid out with increasing radii, forming concentric circles.
3. **JSON Output**: Emits the positions in a JSON-like dictionary with nodes as keys and 2D tuples as values.
4. **Custom Layout Algorithm**: It does not rely on existing layout functions from libraries such as NetworkX or Matplotlib. Instead, it places nodes by distance layers and angular spacing.

