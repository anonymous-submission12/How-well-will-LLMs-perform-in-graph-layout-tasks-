To generate a graph layout that retains consistency between the Euclidean and graph-theoretic distances, we can apply multidimensional scaling (MDS). MDS is a technique that maps nodes such that distances between them in the new space (Euclidean space) best match their graph-theoretic distances.

Here's the Python script:

```python
import numpy as np
import json
from scipy.spatial.distance import squareform
from scipy.sparse.csgraph import shortest_path

def generate_graph_layout(edge_list):
    # Extract all unique node IDs
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = sorted(nodes)
    n = len(nodes)

    # Create a node index mapping
    node_index = {node: i for i, node in enumerate(nodes)}

    # Initialize adjacency matrix
    adjacency_matrix = np.inf * np.ones((n, n))
    for i in range(n):
        adjacency_matrix[i, i] = 0  # Distance to self is zero

    # Populate adjacency matrix with edge weights
    for u, v in edge_list:
        adjacency_matrix[node_index[u], node_index[v]] = 1
        adjacency_matrix[node_index[v], node_index[u]] = 1

    # Compute graph-theoretic distances
    distances = shortest_path(adjacency_matrix, directed=False)
    
    # Multidimensional scaling (MDS)
    # Centering matrix
    J = np.eye(n) - np.ones((n, n)) / n
    
    # Double centering step: B = -0.5 * J * D^2 * J
    D_squared = distances ** 2
    B = -0.5 * J @ D_squared @ J

    # Eigen decomposition
    eigenvalues, eigenvectors = np.linalg.eigh(B)

    # Sort eigenvalues and eigenvectors in descending order
    idx = np.argsort(eigenvalues)[::-1]
    eigenvalues = eigenvalues[idx]
    eigenvectors = eigenvectors[:, idx]

    # Select top 2 dimensions
    L = np.diag(np.sqrt(eigenvalues[:2]))
    V = eigenvectors[:, :2]

    # Compute coordinates
    coords = V @ L

    # Map positions back to nodes
    layout = {nodes[i]: coords[i].tolist() for i in range(n)}

    # Convert layout to JSON format
    return json.dumps(layout, indent=2)

# Define the graph edge list
edge_list = [
    (0, 1), (0, 70), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8),
    (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16),
    (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24),
    (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32),
    (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40),
    (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48),
    (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56),
    (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64),
    (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70)
]

# Generate graph layout
layout_json = generate_graph_layout(edge_list)

# Print the graph layout in JSON format
print(layout_json)
```

### Explanation:
1. **Graph-Theoretic Distance**: We compute the shortest path distances using the adjacency matrix representation of the graph.
2. **Multidimensional Scaling**: Using MDS, the graph is laid out in 2D space such that the Euclidean distances approximate the shortest path distances.
3. **Output**: The script outputs the layout positions (x, y) for each node in JSON format. JSON format is convenient for further integration and testing.