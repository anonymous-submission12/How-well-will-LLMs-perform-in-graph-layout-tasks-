The problem involves creating a graph layout where the Euclidean distance in 2D space maintains consistency with the graph-theoretic distance between nodes. Here's a Python script to compute such a layout without using any pre-existing graph layout algorithms.

We will leverage a force-based model and iterative optimization to achieve this layout. The pairwise graph-theoretic distances (shortest path lengths) will inform the desired Euclidean distances.

```python
import json
import numpy as np

def compute_graph_layout(edge_list, dim=2, iterations=1000, learning_rate=0.01):
    # Create a set of nodes
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = list(nodes)
    
    # Create node-to-index and index-to-node mappings
    node_index = {node: idx for idx, node in enumerate(nodes)}
    index_node = {idx: node for idx, node in enumerate(nodes)}
    
    # Initialize random positions for each node
    positions = np.random.rand(len(nodes), dim)
    
    # Build adjacency matrix and compute shortest path distances
    adjacency_matrix = np.zeros((len(nodes), len(nodes)))
    for u, v in edge_list:
        adjacency_matrix[node_index[u], node_index[v]] = 1
        adjacency_matrix[node_index[v], node_index[u]] = 1
    
    # Compute graph-theoretic distances using Floyd-Warshall algorithm
    graph_distances = np.full_like(adjacency_matrix, np.inf)
    np.fill_diagonal(graph_distances, 0)
    for i in range(len(nodes)):
        for j in range(len(nodes)):
            if adjacency_matrix[i, j] > 0:
                graph_distances[i, j] = 1
    
    for k in range(len(nodes)):
        for i in range(len(nodes)):
            for j in range(len(nodes)):
                if graph_distances[i, j] > graph_distances[i, k] + graph_distances[k, j]:
                    graph_distances[i, j] = graph_distances[i, k] + graph_distances[k, j]
    
    # Normalize graph distances to avoid scaling issues
    max_distance = np.nanmax(graph_distances[np.isfinite(graph_distances)])
    graph_distances = graph_distances / max_distance

    # Gradient descent to adjust positions
    for _ in range(iterations):
        gradients = np.zeros_like(positions)
        for i in range(len(nodes)):
            for j in range(len(nodes)):
                if i != j:
                    # Desired distance
                    desired_distance = graph_distances[i, j]
                    if not np.isfinite(desired_distance):
                        continue
                    
                    # Current distance
                    diff = positions[i] - positions[j]
                    current_distance = np.linalg.norm(diff)
                    if current_distance == 0:
                        continue
                    
                    # Gradient computation
                    force_magnitude = (current_distance - desired_distance)
                    gradients[i] -= (force_magnitude / current_distance) * diff
                    gradients[j] += (force_magnitude / current_distance) * diff
        
        # Update positions with gradients
        positions -= learning_rate * gradients
    
    # Convert positions into JSON format
    layout = {index_node[i]: positions[i].tolist() for i in range(len(nodes))}
    return json.dumps(layout, indent=2)

# Input edge list
edge_list = [(0, 1), (0, 71), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), 
             (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), 
             (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), 
             (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), 
             (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), 
             (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), 
             (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), 
             (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), 
             (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), 
             (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71)]

# Generate layout
layout = compute_graph_layout(edge_list)
print(layout)
```

This script calculates the layout positions using an iterative approach. The output is a JSON-formatted dictionary where each node is associated with its computed position in 2D space. Adjustments to parameters such as `iterations` and `learning_rate` can be made for better convergence.