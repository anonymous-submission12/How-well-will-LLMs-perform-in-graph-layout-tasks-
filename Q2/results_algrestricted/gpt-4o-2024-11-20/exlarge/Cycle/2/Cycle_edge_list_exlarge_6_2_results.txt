To generate a graph layout that maintains consistency between the Euclidean distance and graph-theoretic distance, we need to compute the positions of the nodes such that their pairwise Euclidean distances approximately obey the shortest-path distances in the graph. One heuristic approach to achieving this is by using multidimensional scaling (MDS). Below is a Python implementation of the idea:

```python
import numpy as np
import json

def generate_graph_layout(edge_list):
    # Step 1: Build adjacency list and compute shortest-path distances using BFS
    from collections import defaultdict, deque

    # Create adjacency list
    adjacency_list = defaultdict(list)
    for u, v in edge_list:
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)

    # Compute shortest-path distances using BFS
    def bfs_shortest_paths(start, n_nodes):
        distances = {i: float('inf') for i in range(n_nodes)}
        distances[start] = 0
        queue = deque([start])
        while queue:
            current = queue.popleft()
            current_distance = distances[current]
            for neighbor in adjacency_list[current]:
                if distances[neighbor] == float('inf'):  # Not visited
                    distances[neighbor] = current_distance + 1
                    queue.append(neighbor)
        return distances

    # Determine the number of nodes in the graph
    nodes = set()
    for u, v in edge_list:
        nodes.add(u)
        nodes.add(v)
    n_nodes = len(nodes)
    nodes = list(nodes)

    # Create shortest-path distance matrix
    distance_matrix = np.zeros((n_nodes, n_nodes), dtype=float)
    node_to_idx = {node: idx for idx, node in enumerate(nodes)}
    idx_to_node = {idx: node for idx, node in enumerate(nodes)}
    for node in nodes:
        distances = bfs_shortest_paths(node, n_nodes)
        for target, dist in distances.items():
            distance_matrix[node_to_idx[node], node_to_idx[target]] = dist

    # Step 2: Use classical MDS to generate a 2D layout
    # Double centering the distance matrix
    n = len(distance_matrix)
    H = np.eye(n) - np.ones((n, n)) / n
    B = -0.5 * H @ (distance_matrix ** 2) @ H

    # Compute eigenvalues and eigenvectors
    eigvals, eigvecs = np.linalg.eigh(B)

    # Take the top two eigenvectors corresponding to the largest eigenvalues
    idx = np.argsort(eigvals)[::-1]
    top_eigvals = eigvals[idx[:2]]
    top_eigvecs = eigvecs[:, idx[:2]]

    # Compute the coordinates (scaling by the square root of eigenvalues)
    coords = top_eigvecs * np.sqrt(top_eigvals)

    # Step 3: Map the coordinates back to the original node IDs
    positions = {idx_to_node[i]: [float(coords[i, 0]), float(coords[i, 1])] for i in range(n)}

    # Step 4: Return the positions as JSON
    return json.dumps(positions, indent=2)

# Example usage
edge_list = [
    (0, 1), (0, 75), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7),
    (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14),
    (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20),
    (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26),
    (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32),
    (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38),
    (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44),
    (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50),
    (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56),
    (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62),
    (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68),
    (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74),
    (74, 75)
]

print(generate_graph_layout(edge_list))
```

### Explanation:
1. **Step 1:** Compute the shortest-path distances for all node pairs using BFS. This gives us the distance matrix reflecting the graph-theoretic distance.
2. **Step 2:** Use classical Multidimensional Scaling (MDS) to project the graph distances onto a 2D Euclidean space.
3. **Step 3:** Map the computed coordinates to the original nodes.
4. **Step 4:** Export the computed positions in JSON format.

The output is a JSON object where each key is the node ID, and the value is a list of 2D coordinates `[x, y]`.