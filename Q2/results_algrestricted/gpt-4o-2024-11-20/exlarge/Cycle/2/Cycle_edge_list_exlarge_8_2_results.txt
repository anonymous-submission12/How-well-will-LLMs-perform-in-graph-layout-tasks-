Below is the Python code that calculates a layout for the graph based on the input edge list. The algorithm ensures that the Euclidean distances between nodes correlate with their graph-theoretic distances. It implements the Multidimensional Scaling (MDS)-based approach from scratch to find a layout in 2D space.

```python
import json
import numpy as np
from scipy.sparse.csgraph import shortest_path

def generate_graph_layout(edge_list):
    # Step 1: Create adjacency matrix
    nodes = set()
    for u, v in edge_list:
        nodes.add(u)
        nodes.add(v)
    nodes = sorted(nodes)  # Sorting to ensure consistent node indexing
    num_nodes = len(nodes)
    node_to_index = {node: i for i, node in enumerate(nodes)}
    
    adjacency_matrix = np.full((num_nodes, num_nodes), fill_value=np.inf)
    for i in range(num_nodes):
        adjacency_matrix[i][i] = 0  # Distance to self is 0
    for u, v in edge_list:
        adjacency_matrix[node_to_index[u]][node_to_index[v]] = 1
        adjacency_matrix[node_to_index[v]][node_to_index[u]] = 1

    # Step 2: Compute graph-theoretic shortest path distances
    shortest_distances = shortest_path(adjacency_matrix, directed=False, unweighted=True)

    # Step 3: Use Multidimensional Scaling (MDS) to position nodes in 2D space
    # Centering matrix
    n = shortest_distances.shape[0]
    J = np.eye(n) - (1/n) * np.ones((n, n))
    
    # Double-centered distance matrix
    B = -0.5 * J @ (shortest_distances ** 2) @ J

    # Eigen decomposition
    eigenvalues, eigenvectors = np.linalg.eigh(B)
    
    # Sort eigenvalues and eigenvectors in descending order
    idx = np.argsort(eigenvalues)[::-1]
    eigenvalues = eigenvalues[idx]
    eigenvectors = eigenvectors[:, idx]

    # Take the top two eigenvectors for 2D layout
    top_two = eigenvectors[:, :2] * np.sqrt(eigenvalues[:2])

    # Map positions to the original nodes
    positions = {nodes[i]: (top_two[i, 0], top_two[i, 1]) for i in range(num_nodes)}
    
    return positions

# Input graph data
edge_list = [(0, 1), (0, 77), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8),
             (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), 
             (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), 
             (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), 
             (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36),
             (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), 
             (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), 
             (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), 
             (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), 
             (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), 
             (71, 72), (72, 73), (73, 74), (74, 75), (75, 76), (76, 77)]

# Generate layout
layout = generate_graph_layout(edge_list)

# Output result in JSON format
print(json.dumps(layout, indent=2))
```

### Explanation:
1. **Graph-theoretic Distances**: First, the pairwise shortest path distances between nodes are calculated using an adjacency matrix and the Floyd-Warshall algorithm (via `scipy.sparse.csgraph.shortest_path()`).
2. **MDS (Multidimensional Scaling)**: The goal of MDS is to embed the nodes in a 2D space such that their Euclidean distances reflect the graph-theoretic distances. This is done by eigen-decomposition of the double-centered distance matrix.
3. **2D Positions**: The top two eigenvectors (scaled by the square root of their respective eigenvalues) are used as the 2D coordinates for the nodes.

The output will be a JSON object where keys are node IDs, and values are tuples containing their 2D coordinates.