Here is the Python code to compute a layout for your graph. The code will ensure that the resulting layout maintains consistency between Euclidean distance and graph-theoretic distance. The layout will be outputted in JSON format.

```python
import json
import numpy as np
from scipy.spatial.distance import euclidean
from collections import deque, defaultdict

def compute_graph_layout(edge_list):
    # Step 1: Build adjacency list representation of the graph
    adjacency_list = defaultdict(list)
    for u, v in edge_list:
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)
    
    # Step 2: Floyd-Warshall algorithm to calculate shortest path distances
    nodes = list(adjacency_list.keys())
    n = len(nodes)
    node_index = {node: i for i, node in enumerate(nodes)}
    distance_matrix = np.full((n, n), np.inf)
    
    for i in range(n):
        distance_matrix[i][i] = 0
    for u, v in edge_list:
        ui, vi = node_index[u], node_index[v]
        distance_matrix[ui][vi] = 1
        distance_matrix[vi][ui] = 1

    for k in range(n):
        for i in range(n):
            for j in range(n):
                distance_matrix[i][j] = min(distance_matrix[i][j], distance_matrix[i][k] + distance_matrix[k][j])
    
    # Step 3: Generate initial random positions for nodes
    np.random.seed(42)  # For deterministic results
    positions = {node: np.random.rand(2) for node in nodes}
    
    # Step 4: Gradient descent to adjust positions while preserving distances
    def stress_function(positions):
        stress = 0
        for i, u in enumerate(nodes):
            for j, v in enumerate(nodes):
                if i >= j:  # Avoid double calculation
                    continue
                dij = distance_matrix[node_index[u]][node_index[v]]
                if np.isinf(dij):
                    continue
                eu_dist = euclidean(positions[u], positions[v])
                stress += ((eu_dist - dij) ** 2)
        return stress

    def gradient_descent(positions, learning_rate=0.01, iterations=1000):
        for _ in range(iterations):
            gradients = {node: np.zeros(2) for node in nodes}
            for i, u in enumerate(nodes):
                for j, v in enumerate(nodes):
                    if i >= j:
                        continue
                    dij = distance_matrix[node_index[u]][node_index[v]]
                    if np.isinf(dij):
                        continue
                    vec = positions[u] - positions[v]
                    eu_dist = np.linalg.norm(vec)
                    if eu_dist == 0:
                        continue
                    correction = 2 * (eu_dist - dij) * vec / eu_dist
                    gradients[u] += correction
                    gradients[v] -= correction  # By symmetry
            for node in nodes:
                positions[node] -= learning_rate * gradients[node]
        return positions

    positions = gradient_descent(positions)
    # Convert positions to JSON serializable format
    positions_json = {node: list(map(float, pos)) for node, pos in positions.items()}
    return json.dumps(positions_json, indent=2)

# Example usage
edge_list = [(0, 1), (0, 73), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7),
             (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14),
             (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21),
             (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28),
             (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35),
             (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42),
             (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49),
             (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56),
             (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63),
             (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70),
             (70, 71), (71, 72), (72, 73)]

graph_layout = compute_graph_layout(edge_list)
print(graph_layout)
```

This script implements a position-based graph layout generator using a custom gradient descent optimization approach to minimize the stress (difference between Euclidean and graph-theoretic distances). The final layout is returned in JSON format.