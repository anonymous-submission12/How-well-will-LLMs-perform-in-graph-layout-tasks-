To generate a layout for a given graph without using existing graph layout algorithms, we can employ a simple strategy based on a grid-like placement. A grid layout can be particularly effective in minimizing edge crossings for certain types of graphs such as grid graphs.

Here is a Python script that calculates a simple grid layout for the given edge list. After computing the layout, it outputs the positions in JSON format. This approach assumes that the number of nodes is known and that we want to place them on a grid:

```python
import json
import math

# Define the edge list
edge_list = [
    (0, 1), (0, 12), (1, 2), (1, 13), (2, 3), (2, 14), (3, 4), (3, 15), 
    (4, 5), (4, 16), (5, 6), (5, 17), (6, 7), (6, 18), (7, 8), (7, 19), 
    (8, 9), (8, 20), (9, 10), (9, 21), (10, 11), (10, 22), (11, 23), 
    (12, 13), (12, 24), (13, 14), (13, 25), (14, 15), (14, 26), (15, 16),
    (15, 27), (16, 17), (16, 28), (17, 18), (17, 29), (18, 19), (18, 30),
    (19, 20), (19, 31), (20, 21), (20, 32), (21, 22), (21, 33), (22, 23),
    (22, 34), (23, 35), (24, 25), (24, 36), (25, 26), (25, 37), (26, 27),
    (26, 38), (27, 28), (27, 39), (28, 29), (28, 40), (29, 30), (29, 41),
    (30, 31), (30, 42), (31, 32), (31, 43), (32, 33), (32, 44), (33, 34),
    (33, 45), (34, 35), (34, 46), (35, 47), (36, 37), (36, 48), (37, 38),
    (37, 49), (38, 39), (38, 50), (39, 40), (39, 51), (40, 41), (40, 52),
    (41, 42), (41, 53), (42, 43), (42, 54), (43, 44), (43, 55), (44, 45),
    (44, 56), (45, 46), (45, 57), (46, 47), (46, 58), (47, 59), (48, 49),
    (48, 60), (49, 50), (49, 61), (50, 51), (50, 62), (51, 52), (51, 63),
    (52, 53), (52, 64), (53, 54), (53, 65), (54, 55), (54, 66), (55, 56),
    (55, 67), (56, 57), (56, 68), (57, 58), (57, 69), (58, 59), (58, 70),
    (59, 71), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66),
    (66, 67), (67, 68), (68, 69), (69, 70), (70, 71)
]

# Get all unique nodes
nodes = set()
for edge in edge_list:
    nodes.update(edge)

# Number of nodes
num_nodes = len(nodes)

# Calculate grid size (assuming square grid for simplicity)
grid_size = math.ceil(math.sqrt(num_nodes))

# Assign positions on grid
positions = {}
for idx, node in enumerate(sorted(nodes)):
    x = idx % grid_size
    y = idx // grid_size
    positions[node] = (x, y)

# Convert positions to json format
positions_json = json.dumps(positions, indent=2)

# Output the positions in JSON format
print(positions_json)
```

This script operates under the assumption that we have a nearly square grid. It assigns each node a position in a grid-like structure and then prints the positions in JSON format. The script doesn't attempt to optimize for minimal edge crossings beyond this simple grid approach. For more sophisticated layout tasks, custom heuristics or optimizations would be needed.