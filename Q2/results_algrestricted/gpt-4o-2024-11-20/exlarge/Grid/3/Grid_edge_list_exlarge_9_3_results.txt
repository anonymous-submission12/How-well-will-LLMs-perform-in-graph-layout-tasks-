Below is a Python script that generates a layout for the given graph. The layout minimizes edge crossings by arranging nodes in a grid-like structure. The script does not use any existing graph layout algorithms or visualization libraries for drawing. The final output is the graph layout in JSON format.

```python
import json
import math

def generate_layout(edge_list):
    # Extract all unique nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = sorted(nodes)

    # Determine the number of nodes
    num_nodes = len(nodes)

    # Calculate grid dimensions (rows and columns)
    grid_size = math.ceil(math.sqrt(num_nodes))
    positions = {}

    # Assign positions to nodes in a grid layout
    for idx, node in enumerate(nodes):
        row = idx // grid_size
        col = idx % grid_size
        positions[node] = (col, row)

    return positions

# Input edge list
edge_list = [
    (0, 1), (0, 37), (1, 2), (1, 38), (2, 3), (2, 39), (3, 4), (3, 40), (4, 5), (4, 41),
    (5, 6), (5, 42), (6, 7), (6, 43), (7, 8), (7, 44), (8, 9), (8, 45), (9, 10), (9, 46),
    (10, 11), (10, 47), (11, 12), (11, 48), (12, 13), (12, 49), (13, 14), (13, 50), (14, 15),
    (14, 51), (15, 16), (15, 52), (16, 17), (16, 53), (17, 18), (17, 54), (18, 19), (18, 55),
    (19, 20), (19, 56), (20, 21), (20, 57), (21, 22), (21, 58), (22, 23), (22, 59), (23, 24),
    (23, 60), (24, 25), (24, 61), (25, 26), (25, 62), (26, 27), (26, 63), (27, 28), (27, 64),
    (28, 29), (28, 65), (29, 30), (29, 66), (30, 31), (30, 67), (31, 32), (31, 68), (32, 33),
    (32, 69), (33, 34), (33, 70), (34, 35), (34, 71), (35, 36), (35, 72), (36, 73), (37, 38),
    (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47),
    (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56),
    (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65),
    (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73)
]

# Generate layout
layout = generate_layout(edge_list)

# Output layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Extract Nodes**: The script extracts all unique nodes from the edge list.
2. **Grid Layout**: Nodes are arranged in a grid-like structure to minimize edge crossings. The grid dimensions are determined by the square root of the total number of nodes.
3. **Position Assignment**: Each node is assigned a position `(x, y)` in the grid based on its index.
4. **Output**: The layout is output in JSON format, where each node is mapped to its `(x, y)` position.

This approach ensures a simple and structured layout that minimizes edge crossings for most graphs.