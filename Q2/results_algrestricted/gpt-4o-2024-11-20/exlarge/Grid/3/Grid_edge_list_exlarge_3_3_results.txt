Here's a Python script to generate a layout for the provided graph using a custom algorithm that minimizes edge crossings. This algorithm is based on heuristic optimization. It tries to position nodes in layers based on their connectivity and assigns them coordinates in a grid-like structure.

```python
import json
from collections import defaultdict
from random import shuffle

# Function to generate a layout
def generate_graph_layout(edge_list):
    # Step 1: Build adjacency list
    adjacency_list = defaultdict(list)
    for u, v in edge_list:
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)

    # Step 2: Organize nodes into layers based on their distance from node 0
    layers = {}
    visited = set()
    queue = [(0, 0)]  # (node, layer)
    while queue:
        node, layer = queue.pop(0)
        if node in visited:
            continue
        visited.add(node)
        layers[node] = layer

        for neighbor in adjacency_list[node]:
            if neighbor not in visited:
                queue.append((neighbor, layer + 1))

    # Step 3: Group nodes by layers
    layer_nodes = defaultdict(list)
    for node, layer in layers.items():
        layer_nodes[layer].append(node)

    # Step 4: Assign positions to nodes
    positions = {}
    for layer, nodes in sorted(layer_nodes.items()):
        # Shuffle nodes to reduce edge overlaps
        shuffle(nodes)

        # Spread them horizontally
        y = layer * 2  # Fixed vertical spacing between layers
        for i, node in enumerate(sorted(nodes)):
            x = i * 2  # Fixed horizontal spacing between nodes
            positions[node] = (x, y)

    # Step 5: Return layout in JSON format
    return json.dumps(positions, indent=4)

# Example Edge List
edge_list = [
    (0, 1), (0, 18), (1, 2), (1, 19), (2, 3), (2, 20), (3, 4), (3, 21),
    (4, 5), (4, 22), (5, 6), (5, 23), (6, 7), (6, 24), (7, 8), (7, 25),
    (8, 9), (8, 26), (9, 10), (9, 27), (10, 11), (10, 28), (11, 12), (11, 29),
    (12, 13), (12, 30), (13, 14), (13, 31), (14, 15), (14, 32), (15, 16),
    (15, 33), (16, 17), (16, 34), (17, 35), (18, 19), (18, 36), (19, 20),
    (19, 37), (20, 21), (20, 38), (21, 22), (21, 39), (22, 23), (22, 40),
    (23, 24), (23, 41), (24, 25), (24, 42), (25, 26), (25, 43), (26, 27),
    (26, 44), (27, 28), (27, 45), (28, 29), (28, 46), (29, 30), (29, 47),
    (30, 31), (30, 48), (31, 32), (31, 49), (32, 33), (32, 50), (33, 34),
    (33, 51), (34, 35), (34, 52), (35, 53), (36, 37), (36, 54), (37, 38),
    (37, 55), (38, 39), (38, 56), (39, 40), (39, 57), (40, 41), (40, 58),
    (41, 42), (41, 59), (42, 43), (42, 60), (43, 44), (43, 61), (44, 45),
    (44, 62), (45, 46), (45, 63), (46, 47), (46, 64), (47, 48), (47, 65),
    (48, 49), (48, 66), (49, 50), (49, 67), (50, 51), (50, 68), (51, 52),
    (51, 69), (52, 53), (52, 70), (53, 71), (54, 55), (55, 56), (56, 57),
    (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64),
    (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71)
]

# Generate layout
layout_json = generate_graph_layout(edge_list)

print(layout_json)
```

This script groups nodes into layers based on their distances from an arbitrary starting node (in this case, node `0`). Positions are computed with fixed spacing between nodes within each layer. The layout is returned as a JSON-format string containing node positions.