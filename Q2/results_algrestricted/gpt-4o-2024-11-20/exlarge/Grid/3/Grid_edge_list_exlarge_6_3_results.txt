Below is a Python script that generates a layout for the given graph. The layout minimizes edge crossings by arranging the nodes in a grid-like structure. The script does not use any existing graph layout algorithms or visualization libraries. The output is a JSON representation of the graph layout.

```python
import json
import math

def generate_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = sorted(nodes)

    # Determine grid dimensions (approximate square layout)
    num_nodes = len(nodes)
    grid_size = math.ceil(math.sqrt(num_nodes))

    # Assign positions to nodes in a grid
    positions = {}
    for i, node in enumerate(nodes):
        row = i // grid_size
        col = i % grid_size
        positions[node] = (col, row)

    # Convert positions to JSON format
    layout_json = json.dumps(positions, indent=4)
    return layout_json

# Input edge list
edge_list = [
    (0, 1), (0, 39), (1, 2), (1, 40), (2, 3), (2, 41), (3, 4), (3, 42), (4, 5), (4, 43),
    (5, 6), (5, 44), (6, 7), (6, 45), (7, 8), (7, 46), (8, 9), (8, 47), (9, 10), (9, 48),
    (10, 11), (10, 49), (11, 12), (11, 50), (12, 13), (12, 51), (13, 14), (13, 52), (14, 15),
    (14, 53), (15, 16), (15, 54), (16, 17), (16, 55), (17, 18), (17, 56), (18, 19), (18, 57),
    (19, 20), (19, 58), (20, 21), (20, 59), (21, 22), (21, 60), (22, 23), (22, 61), (23, 24),
    (23, 62), (24, 25), (24, 63), (25, 26), (25, 64), (26, 27), (26, 65), (27, 28), (27, 66),
    (28, 29), (28, 67), (29, 30), (29, 68), (30, 31), (30, 69), (31, 32), (31, 70), (32, 33),
    (32, 71), (33, 34), (33, 72), (34, 35), (34, 73), (35, 36), (35, 74), (36, 37), (36, 75),
    (37, 38), (37, 76), (38, 77), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45),
    (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54),
    (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63),
    (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72),
    (72, 73), (73, 74), (74, 75), (75, 76), (76, 77)
]

# Generate layout
layout = generate_layout(edge_list)

# Print the layout in JSON format
print(layout)
```

### Explanation:
1. **Extract Unique Nodes**: The script extracts all unique nodes from the edge list.
2. **Grid Dimensions**: It calculates the grid size to arrange the nodes in an approximate square layout.
3. **Assign Positions**: Each node is assigned a position in a grid (row, column).
4. **Output JSON**: The positions are converted to a JSON format for output.

This approach ensures a simple and structured layout that minimizes edge crossings by arranging nodes in a grid.