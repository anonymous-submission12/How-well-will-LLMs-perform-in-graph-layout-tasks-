To generate a layout for the graph that minimizes edge crossings without using existing graph layout algorithms, we will implement a force-directed approach manually, which involves placing nodes in 2D space and simulating attractive forces (from edges) and repulsive forces (from nodes). Below is the Python script to calculate such a layout:

```python
import json
import math
from random import uniform

def generate_layout(edge_list, iterations=1000, width=1000, height=1000):
    # Initialize positions randomly within the bounding box width x height
    nodes = set([u for edge in edge_list for u in edge])
    positions = {node: [uniform(0, width), uniform(0, height)] for node in nodes}
    
    # Parameters for simulation
    k = math.sqrt(width * height / len(nodes))  # Ideal distance between nodes
    cooling_factor = 0.9  # Cooling factor for step size
    step_size = k * 0.1  # Initial step size for movement
    
    def distance(node1, node2):
        """Calculate Euclidean distance between two nodes."""
        x1, y1 = positions[node1]
        x2, y2 = positions[node2]
        return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)
    
    def repulsive_force(node1, node2):
        """Calculate repulsive force between two nodes."""
        dist = distance(node1, node2)
        if dist == 0:
            return [uniform(-1, 1), uniform(-1, 1)]  # Random tiny push if overlap
        force_magnitude = k ** 2 / dist  # Repulsion is inversely proportional to distance
        dx = (positions[node1][0] - positions[node2][0]) / dist
        dy = (positions[node1][1] - positions[node2][1]) / dist
        return [force_magnitude * dx, force_magnitude * dy]
    
    def attractive_force(node1, node2):
        """Calculate attractive force between connected nodes."""
        dist = distance(node1, node2)
        if dist == 0:
            dist = 0.01  # Prevent zero distance errors
        force_magnitude = dist ** 2 / k  # Attraction proportional to square of distance
        dx = (positions[node2][0] - positions[node1][0]) / dist
        dy = (positions[node2][1] - positions[node1][1]) / dist
        return [force_magnitude * dx, force_magnitude * dy]
    
    for iteration in range(iterations):
        # Calculate forces on all nodes
        displacements = {node: [0, 0] for node in nodes}
        
        # Apply repulsive forces between nodes
        for node1 in nodes:
            for node2 in nodes:
                if node1 != node2:
                    rep_force = repulsive_force(node1, node2)
                    displacements[node1][0] += rep_force[0]
                    displacements[node1][1] += rep_force[1]
        
        # Apply attractive forces between connected nodes
        for edge in edge_list:
            node1, node2 = edge
            attr_force = attractive_force(node1, node2)
            displacements[node1][0] -= attr_force[0]
            displacements[node1][1] -= attr_force[1]
            displacements[node2][0] += attr_force[0]
            displacements[node2][1] += attr_force[1]
        
        # Update positions based on total displacements
        for node in nodes:
            disp_x, disp_y = displacements[node]
            disp_magnitude = math.sqrt(disp_x ** 2 + disp_y ** 2)
            if disp_magnitude > 0:
                # Limit maximum step size to avoid instability
                disp_x = disp_x / disp_magnitude * min(step_size, disp_magnitude)
                disp_y = disp_y / disp_magnitude * min(step_size, disp_magnitude)
            positions[node][0] = min(width, max(0, positions[node][0] + disp_x))
            positions[node][1] = min(height, max(0, positions[node][1] + disp_y))
        
        # Reduce the step size (cooling)
        step_size *= cooling_factor
    
    return positions

# Define the graph edge list
edge_list = [(0, 1), (0, 24), (1, 2), (1, 25), (2, 3), (2, 26), (3, 4), (3, 27), (4, 5), (4, 28), (5, 6), (5, 29), 
             (6, 7), (6, 30), (7, 8), (7, 31), (8, 9), (8, 32), (9, 10), (9, 33), (10, 11), (10, 34), (11, 12), 
             (11, 35), (12, 13), (12, 36), (13, 14), (13, 37), (14, 15), (14, 38), (15, 16), (15, 39), (16, 17), 
             (16, 40), (17, 18), (17, 41), (18, 19), (18, 42), (19, 20), (19, 43), (20, 21), (20, 44), (21, 22), 
             (21, 45), (22, 23), (22, 46), (23, 47), (24, 25), (24, 48), (25, 26), (25, 49), (26, 27), (26, 50), 
             (27, 28), (27, 51), (28, 29), (28, 52), (29, 30), (29, 53), (30, 31), (30, 54), (31, 32), (31, 55), 
             (32, 33), (32, 56), (33, 34), (33, 57), (34, 35), (34, 58), (35, 36), (35, 59), (36, 37), (36, 60), 
             (37, 38), (37, 61), (38, 39), (38, 62), (39, 40), (39, 63), (40, 41), (40, 64), (41, 42), (41, 65), 
             (42, 43), (42, 66), (43, 44), (43, 67), (44, 45), (44, 68), (45, 46), (45, 69), (46, 47), (46, 70), 
             (47, 71), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), 
             (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), 
             (67, 68), (68, 69), (69, 70), (70, 71)]

# Generate and print the layout in JSON format
layout = generate_layout(edge_list)
print(json.dumps(layout, indent=4))
```

This script generates a layout for the provided graph by simulating forces and positions each node such that edge crossings are minimized. The force-directed approach is implemented manually without using existing layout algorithms. The result is outputted as JSON containing the positions of each node.