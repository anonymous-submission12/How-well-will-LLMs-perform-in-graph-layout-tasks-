To generate a layout for the graph while minimizing edge crossings without utilizing existing layout algorithms, we can implement a simplified optimization approach. This code will assign node positions iteratively, attempting to minimize the number of edge crossings by placing connected nodes closer and distributing them evenly within a bounded grid.

Below is the Python script:

```python
import json
import random

def generate_graph_layout(edge_list):
    # Step 1: Parse nodes from edges
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = list(nodes)
    
    # Step 2: Initialize positions in a grid
    n = len(nodes)
    grid_size = int(n**0.5) + 1  # Approximate square grid
    
    positions = {node: (random.randint(0, grid_size - 1), random.randint(0, grid_size - 1)) for node in nodes}

    # Step 3: Calculate edge crossings
    def calculate_edge_crossings(positions, edge_list):
        crossings = 0
        edges = [(positions[edge[0]], positions[edge[1]]) for edge in edge_list]
        
        for i in range(len(edges)):
            for j in range(i + 1, len(edges)):
                a1, a2 = edges[i]
                b1, b2 = edges[j]

                def ccw(p1, p2, p3):
                    """Check if the three points are listed in a counterclockwise order."""
                    return (p3[1] - p1[1]) * (p2[0] - p1[0]) > (p2[1] - p1[1]) * (p3[0] - p1[0])

                if ccw(a1, b1, b2) != ccw(a2, b1, b2) and ccw(a1, a2, b1) != ccw(a1, a2, b2):
                    crossings += 1
        return crossings

    # Step 4: Optimize positions to minimize crossings
    def optimize_layout(positions, edge_list, iterations=5000):
        best_positions = positions.copy()
        min_crossings = calculate_edge_crossings(positions, edge_list)

        for _ in range(iterations):
            # Randomly swap positions
            node1, node2 = random.sample(nodes, 2)
            new_positions = best_positions.copy()
            new_positions[node1], new_positions[node2] = new_positions[node2], new_positions[node1]
            
            # Calculate crossings for the new layout
            new_crossings = calculate_edge_crossings(new_positions, edge_list)
            if new_crossings < min_crossings:
                min_crossings = new_crossings
                best_positions = new_positions

        return best_positions

    optimized_positions = optimize_layout(positions, edge_list)

    # Convert to JSON-compatible format
    layout = {str(node): {"x": pos[0], "y": pos[1]} for node, pos in optimized_positions.items()}
    return layout

# Input edge list
edge_list = [(0, 1), (0, 25), (1, 2), (1, 26), (2, 3), (2, 27), (3, 4), (3, 28), (4, 5), (4, 29), (5, 6), (5, 30), 
             (6, 7), (6, 31), (7, 8), (7, 32), (8, 9), (8, 33), (9, 10), (9, 34), (10, 11), (10, 35), (11, 12), 
             (11, 36), (12, 13), (12, 37), (13, 14), (13, 38), (14, 15), (14, 39), (15, 16), (15, 40), (16, 17), 
             (16, 41), (17, 18), (17, 42), (18, 19), (18, 43), (19, 20), (19, 44), (20, 21), (20, 45), (21, 22), 
             (21, 46), (22, 23), (22, 47), (23, 24), (23, 48), (24, 49), (25, 26), (25, 50), (26, 27), (26, 51), 
             (27, 28), (27, 52), (28, 29), (28, 53), (29, 30), (29, 54), (30, 31), (30, 55), (31, 32), (31, 56), 
             (32, 33), (32, 57), (33, 34), (33, 58), (34, 35), (34, 59), (35, 36), (35, 60), (36, 37), (36, 61), 
             (37, 38), (37, 62), (38, 39), (38, 63), (39, 40), (39, 64), (40, 41), (40, 65), (41, 42), (41, 66), 
             (42, 43), (42, 67), (43, 44), (43, 68), (44, 45), (44, 69), (45, 46), (45, 70), (46, 47), (46, 71), 
             (47, 48), (47, 72), (48, 49), (48, 73), (49, 74), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), 
             (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), 
             (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74)]

# Generate layout
layout = generate_graph_layout(edge_list)

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

This script includes:
1. Random initial grid allocation for the nodes.
2. A function to calculate edge crossings.
3. An iterative optimization (using random swaps) to minimize the number of edge crossings.
4. Conversion of the resulting layout to JSON-compatible format for output.

The optimization process involves random swaps and checks for an improved layout, as a simplistic approach to this complex problem of minimizing crossings without pre-built libraries.