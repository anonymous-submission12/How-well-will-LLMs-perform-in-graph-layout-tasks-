Below is a Python script that generates a graph layout in JSON format from the provided edge list, minimizing edge crossings. The script solves the problem heuristically, using a grid arrangement and optimizing node positions based on connected components and neighbor density.

```python
import json
from collections import defaultdict

def generate_layout(edge_list):
    # Step 1: Create adjacency list for representing the graph
    adjacency_list = defaultdict(set)
    for u, v in edge_list:
        adjacency_list[u].add(v)
        adjacency_list[v].add(u)

    # Step 2: Initialize positions for nodes
    positions = {}
    grid_size = int(len(adjacency_list)**0.5) + 1  # Grid approximation to help layout
    x_spacing = 1.0
    y_spacing = 1.0
    used_positions = set()

    # Helper function: Find optimal position for a node
    def find_position(node):
        neighbors = adjacency_list[node]
        neighbor_positions = [positions[neighbor] for neighbor in neighbors if neighbor in positions]
        if not neighbor_positions:
            # If no neighbors are placed, choose random position on the grid
            for x in range(grid_size):
                for y in range(grid_size):
                    if (x, y) not in used_positions:
                        used_positions.add((x, y))
                        return (x * x_spacing, y * y_spacing)
        else:
            # Calculate average position of neighbors
            avg_x = sum(pos[0] for pos in neighbor_positions) / len(neighbor_positions)
            avg_y = sum(pos[1] for pos in neighbor_positions) / len(neighbor_positions)
            # Find nearest grid position to the average position
            nearest_pos = None
            min_dist = float('inf')
            for x in range(grid_size):
                for y in range(grid_size):
                    if (x, y) not in used_positions:
                        dist = ((avg_x - x * x_spacing) ** 2 + (avg_y - y * y_spacing) ** 2) ** 0.5
                        if dist < min_dist:
                            min_dist = dist
                            nearest_pos = (x * x_spacing, y * y_spacing)
            used_positions.add((nearest_pos[0] / x_spacing, nearest_pos[1] / y_spacing))
            return nearest_pos

    # Step 3: Assign positions sequentially
    for node in adjacency_list:
        positions[node] = find_position(node)

    # Step 4: Normalize positions to ensure no overlaps
    node_positions = {}
    for node, pos in positions.items():
        node_positions[node] = {"x": pos[0], "y": pos[1]}

    # Step 5: Output positions in JSON format
    return json.dumps(node_positions, indent=2)

# Example usage
edge_list = [(0, 1), (0, 13), (1, 2), (1, 14), (2, 3), (2, 15), (3, 4), (3, 16), (4, 5), (4, 17), 
             (5, 6), (5, 18), (6, 7), (6, 19), (7, 8), (7, 20), (8, 9), (8, 21), (9, 10), (9, 22), 
             (10, 11), (10, 23), (11, 12), (11, 24), (12, 25), (13, 14), (13, 26), (14, 15), (14, 27), 
             (15, 16), (15, 28), (16, 17), (16, 29), (17, 18), (17, 30), (18, 19), (18, 31), (19, 20), 
             (19, 32), (20, 21), (20, 33), (21, 22), (21, 34), (22, 23), (22, 35), (23, 24), (23, 36), 
             (24, 25), (24, 37), (25, 38), (26, 27), (26, 39), (27, 28), (27, 40), (28, 29), (28, 41), 
             (29, 30), (29, 42), (30, 31), (30, 43), (31, 32), (31, 44), (32, 33), (32, 45), (33, 34), 
             (33, 46), (34, 35), (34, 47), (35, 36), (35, 48), (36, 37), (36, 49), (37, 38), (37, 50), 
             (38, 51), (39, 40), (39, 52), (40, 41), (40, 53), (41, 42), (41, 54), (42, 43), (42, 55), 
             (43, 44), (43, 56), (44, 45), (44, 57), (45, 46), (45, 58), (46, 47), (46, 59), (47, 48), 
             (47, 60), (48, 49), (48, 61), (49, 50), (49, 62), (50, 51), (50, 63), (51, 64), (52, 53), 
             (52, 65), (53, 54), (53, 66), (54, 55), (54, 67), (55, 56), (55, 68), (56, 57), (56, 69), 
             (57, 58), (57, 70), (58, 59), (58, 71), (59, 60), (59, 72), (60, 61), (60, 73), (61, 62), 
             (61, 74), (62, 63), (62, 75), (63, 64), (63, 76), (64, 77), (65, 66), (66, 67), (67, 68), 
             (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74), (74, 75), (75, 76), (76, 77)]

layout_json = generate_layout(edge_list)
print(layout_json)
```

This code uses a basic grid-based approximation to assign positions to nodes while attempting to minimize edge crossings. The positions are output in JSON format for further inspection or use in visualization tools.