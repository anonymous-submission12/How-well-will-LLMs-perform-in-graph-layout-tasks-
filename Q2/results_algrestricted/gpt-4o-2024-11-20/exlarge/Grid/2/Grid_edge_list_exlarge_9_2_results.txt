To generate a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance, we can use a custom algorithm based on multidimensional scaling (MDS). MDS is a technique that attempts to place nodes in a low-dimensional space such that the pairwise Euclidean distances between nodes approximate their graph-theoretic distances.

Below is the Python code to compute the graph layout and output it in JSON format:

```python
import json
import numpy as np
from scipy.spatial.distance import squareform
from scipy.optimize import minimize

def compute_graph_layout(edge_list):
    # Step 1: Build adjacency matrix and compute shortest path distances
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = sorted(nodes)
    n = len(nodes)
    node_index = {node: i for i, node in enumerate(nodes)}
    
    # Initialize adjacency matrix
    adjacency_matrix = np.full((n, n), np.inf)
    for i in range(n):
        adjacency_matrix[i, i] = 0
    for u, v in edge_list:
        adjacency_matrix[node_index[u], node_index[v]] = 1
        adjacency_matrix[node_index[v], node_index[u]] = 1
    
    # Compute shortest path distances using Floyd-Warshall algorithm
    for k in range(n):
        for i in range(n):
            for j in range(n):
                adjacency_matrix[i, j] = min(adjacency_matrix[i, j], adjacency_matrix[i, k] + adjacency_matrix[k, j])
    
    # Step 2: Multidimensional scaling (MDS)
    def stress_function(positions):
        positions = positions.reshape((n, 2))
        euclidean_distances = squareform(np.sqrt(np.sum((positions[:, None, :] - positions[None, :, :])**2, axis=-1)))
        graph_distances = adjacency_matrix
        mask = np.isfinite(graph_distances)
        stress = np.sum((euclidean_distances[mask] - graph_distances[mask])**2)
        return stress
    
    # Initialize positions randomly
    initial_positions = np.random.rand(n, 2)
    result = minimize(stress_function, initial_positions.flatten(), method='L-BFGS-B')
    positions = result.x.reshape((n, 2))
    
    # Step 3: Output positions in JSON format
    layout = {nodes[i]: positions[i].tolist() for i in range(n)}
    return layout

# Input graph data
edge_list = [(0, 1), (0, 37), (1, 2), (1, 38), (2, 3), (2, 39), (3, 4), (3, 40), (4, 5), (4, 41), 
             (5, 6), (5, 42), (6, 7), (6, 43), (7, 8), (7, 44), (8, 9), (8, 45), (9, 10), (9, 46), 
             (10, 11), (10, 47), (11, 12), (11, 48), (12, 13), (12, 49), (13, 14), (13, 50), (14, 15), 
             (14, 51), (15, 16), (15, 52), (16, 17), (16, 53), (17, 18), (17, 54), (18, 19), (18, 55), 
             (19, 20), (19, 56), (20, 21), (20, 57), (21, 22), (21, 58), (22, 23), (22, 59), (23, 24), 
             (23, 60), (24, 25), (24, 61), (25, 26), (25, 62), (26, 27), (26, 63), (27, 28), (27, 64), 
             (28, 29), (28, 65), (29, 30), (29, 66), (30, 31), (30, 67), (31, 32), (31, 68), (32, 33), 
             (32, 69), (33, 34), (33, 70), (34, 35), (34, 71), (35, 36), (35, 72), (36, 73), (37, 38), 
             (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), 
             (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), 
             (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), 
             (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73)]

# Compute layout
layout = compute_graph_layout(edge_list)

# Output layout in JSON format
print(json.dumps(layout, indent=2))
```

This script computes the graph layout using a custom MDS-based approach and outputs the node positions in JSON format. The positions are optimized to minimize the difference between Euclidean distances and graph-theoretic distances.