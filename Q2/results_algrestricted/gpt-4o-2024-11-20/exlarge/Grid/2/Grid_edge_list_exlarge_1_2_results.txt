To generate a graph layout with positions that maintain consistency between Euclidean distances and graph-theoretic distances, we need to compute a layout based on spectral embedding or similar principles without relying on standard graph visualization libraries. Below is the Python code to achieve this, including computations for pairwise graph-theoretic distances and deriving the layout based on those distances.

```python
import json
import numpy as np
from scipy.sparse import csr_matrix
from scipy.sparse.csgraph import shortest_path
from sklearn.manifold import MDS

def generate_graph_layout(edge_list):
    # Step 1: Create adjacency matrix
    nodes = sorted(set(n for edge in edge_list for n in edge))
    node_index = {node: idx for idx, node in enumerate(nodes)}
    n = len(nodes)

    adjacency_matrix = np.zeros((n, n))
    for u, v in edge_list:
        adjacency_matrix[node_index[u], node_index[v]] = 1
        adjacency_matrix[node_index[v], node_index[u]] = 1  # For undirected graph

    # Step 2: Compute shortest-path distances matrix
    shortest_distances = shortest_path(csgraph=csr_matrix(adjacency_matrix), directed=False)

    # Step 3: Compute graph layout using Multidimensional Scaling (MDS)
    embedding = MDS(n_components=2, dissimilarity="precomputed", random_state=42)
    positions = embedding.fit_transform(shortest_distances)

    # Step 4: Convert positions to JSON format
    layout = {node: {"x": float(positions[node_index[node], 0]),
                     "y": float(positions[node_index[node], 1])}
              for node in nodes}

    return json.dumps(layout, indent=2)

# Edge list as input
edge_list = [(0, 1), (0, 25), (1, 2), (1, 26), (2, 3), (2, 27), (3, 4), (3, 28),
             (4, 5), (4, 29), (5, 6), (5, 30), (6, 7), (6, 31), (7, 8), (7, 32),
             (8, 9), (8, 33), (9, 10), (9, 34), (10, 11), (10, 35), (11, 12),
             (11, 36), (12, 13), (12, 37), (13, 14), (13, 38), (14, 15), (14, 39),
             (15, 16), (15, 40), (16, 17), (16, 41), (17, 18), (17, 42), (18, 19),
             (18, 43), (19, 20), (19, 44), (20, 21), (20, 45), (21, 22), (21, 46),
             (22, 23), (22, 47), (23, 24), (23, 48), (24, 49), (25, 26), (25, 50),
             (26, 27), (26, 51), (27, 28), (27, 52), (28, 29), (28, 53), (29, 30),
             (29, 54), (30, 31), (30, 55), (31, 32), (31, 56), (32, 33), (32, 57),
             (33, 34), (33, 58), (34, 35), (34, 59), (35, 36), (35, 60), (36, 37),
             (36, 61), (37, 38), (37, 62), (38, 39), (38, 63), (39, 40), (39, 64),
             (40, 41), (40, 65), (41, 42), (41, 66), (42, 43), (42, 67), (43, 44),
             (43, 68), (44, 45), (44, 69), (45, 46), (45, 70), (46, 47), (46, 71),
             (47, 48), (47, 72), (48, 49), (48, 73), (49, 74), (50, 51), (51, 52),
             (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59),
             (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66),
             (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73),
             (73, 74)]

# Generate graph layout
graph_layout = generate_graph_layout(edge_list)

# Print layout in JSON format
print(graph_layout)
```

### Explanation:

1. **Building the adjacency matrix**: Represents the graph as a matrix.
2. **Computing shortest-path distances**: Calculates graph-theoretic distances using the shortest-path algorithm.
3. **Position calculation with MDS**: Uses Multidimensional Scaling (MDS) to embed the nodes into a 2D space while preserving pairwise distances.
4. **Output in JSON format**: Converts the positions into a JSON format for reporting.

The layout ensures consistency between Euclidean distance in the 2D space and graph-theoretic distances in the graph.