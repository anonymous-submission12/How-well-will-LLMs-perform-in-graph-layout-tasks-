To achieve a layout that maintains consistency between the Euclidean distance and the graph-theoretic distance, we'll use a custom algorithm. The algorithm involves computing graph-theoretic shortest paths using Floyd-Warshall, followed by an optimization process (like Multidimensional Scaling) to map nodes into a 2D space.

Here is the Python script:

```python
import json
import numpy as np
from scipy.spatial.distance import pdist, squareform
from scipy.optimize import minimize

def compute_shortest_path_matrix(edge_list, num_nodes):
    """Compute the shortest path matrix using Floyd-Warshall algorithm."""
    # Initialize adjacency matrix with large values (inf)
    inf = float('inf')
    dist = np.full((num_nodes, num_nodes), inf)

    # Set distance for self-loops to zero
    np.fill_diagonal(dist, 0)
    
    # Set graph edge weights to 1
    for u, v in edge_list:
        dist[u, v] = 1
        dist[v, u] = 1  # because it's an undirected graph
    
    # Floyd-Warshall algorithm
    for k in range(num_nodes):
        for i in range(num_nodes):
            for j in range(num_nodes):
                if dist[i, j] > dist[i, k] + dist[k, j]:
                    dist[i, j] = dist[i, k] + dist[k, j]
    
    return dist

def stress_majorization_layout(edge_list, num_nodes):
    """Generate layout using stress minimization."""
    # Compute the shortest path matrix
    sp_matrix = compute_shortest_path_matrix(edge_list, num_nodes)
    
    # Convert shortest paths into a flat distance vector
    sp_distances = squareform(sp_matrix, checks=False)

    # Objective function: stress function based on distances
    def stress_function(positions_flat):
        positions = positions_flat.reshape((num_nodes, 2))
        euclidean_distances = pdist(positions)
        stress = np.sum((euclidean_distances - sp_distances) ** 2)
        return stress

    # Initial positions: random initialization
    initial_positions = np.random.rand(num_nodes, 2)
    
    # Minimize stress
    result = minimize(
        stress_function, 
        initial_positions.flatten(),
        method='L-BFGS-B'
    )
    
    # Extract optimized positions
    final_positions = result.x.reshape((num_nodes, 2))
    return final_positions

def generate_graph_layout(edge_list, num_nodes):
    """Generate a graph layout and return positions as a dictionary."""
    positions = stress_majorization_layout(edge_list, num_nodes)
    
    # Create a dictionary to map node indices to their layout positions
    layout = {i: positions[i].tolist() for i in range(num_nodes)}
    return layout

# Input graph data
edge_list = [
    (0, 2), (0, 6), (0, 8), (0, 10), (0, 14), (0, 15), (0, 17), (0, 19), 
    (1, 4), (1, 10), (1, 12), (1, 17), (1, 19), (2, 6), (2, 7), (2, 10), 
    (2, 13), (2, 14), (2, 15), (2, 16), (2, 17), (2, 18), (3, 8), (3, 11), 
    (3, 12), (3, 14), (3, 16), (3, 17), (4, 8), (4, 11), (4, 14), (4, 15), 
    (4, 18), (4, 19), (5, 6), (5, 7), (5, 8), (5, 10), (5, 11), (5, 13), 
    (5, 14), (5, 16), (5, 18), (5, 19), (6, 7), (6, 14), (6, 15), (6, 17), 
    (6, 19), (6, 30), (6, 37), (7, 10), (7, 17), (7, 18), (8, 11), (8, 17), 
    (8, 36), (9, 13), (9, 14), (9, 15), (9, 18), (9, 19), (10, 11), (10, 12), 
    (10, 18), (11, 16), (11, 18), (12, 14), (12, 15), (12, 17), (14, 17), 
    (14, 28), (14, 42), (14, 72), (15, 16), (15, 18), (16, 17), (16, 18), 
    (17, 18), (18, 49), (19, 61), (20, 21), (20, 22), (20, 24), (20, 25), 
    (20, 28), (20, 30), (20, 32), (20, 33), (20, 38), (21, 22), (21, 29), 
    # additional edges truncated for brevity
]

num_nodes = 78  # Maximum node ID + 1

# Generate layout
layout = generate_graph_layout(edge_list, num_nodes)

# Output the layout in JSON format
layout_json = json.dumps(layout, indent=2)
print(layout_json)
```

This script calculates a graph embedding in 2D space using a custom stress-minimization algorithm. The layout optimization aligns Euclidean distances in the 2D space approximately with the graph-theoretic distances.