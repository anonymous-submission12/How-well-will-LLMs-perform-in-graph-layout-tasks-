Below is the Python script that generates a layout for the given graph, expressed in JSON format. It uses a force-directed approach to ensure consistency between Euclidean distance and the graph-theoretic distance. This implementation avoids any existing graph layout algorithms or visualization methods.

```python
import json
import numpy as np
from scipy.spatial.distance import pdist, squareform
from scipy.optimize import minimize

def generate_layout(edge_list):
    # Extract unique nodes from the graph
    nodes = list(set([n for edge in edge_list for n in edge]))
    node_count = len(nodes)
    
    # Map nodes to indices for simplification
    node_to_index = {node: i for i, node in enumerate(nodes)}

    # Initialize positions randomly in 2D space
    initial_positions = np.random.rand(node_count, 2)

    # Adjacency matrix
    adjacency_matrix = np.zeros((node_count, node_count))
    for u, v in edge_list:
        adjacency_matrix[node_to_index[u], node_to_index[v]] = 1
        adjacency_matrix[node_to_index[v], node_to_index[u]] = 1

    # Compute graph-theoretic distances (using Floyd-Warshall algorithm)
    graph_distances = np.full((node_count, node_count), np.inf)
    np.fill_diagonal(graph_distances, 0)
    for i in range(node_count):
        for j in range(node_count):
            if adjacency_matrix[i, j] == 1:
                graph_distances[i, j] = 1
    
    for k in range(node_count):
        for i in range(node_count):
            for j in range(node_count):
                graph_distances[i, j] = min(graph_distances[i, j], graph_distances[i, k] + graph_distances[k, j])

    # Define stress function to minimize
    def stress_function(positions):
        positions = positions.reshape((node_count, 2))
        euclidean_distances = squareform(pdist(positions))
        mask = graph_distances < np.inf  # Only consider connected node pairs
        stress = (graph_distances[mask] - euclidean_distances[mask]) ** 2
        return np.sum(stress)

    # Minimize the stress function to generate layout
    result = minimize(stress_function, initial_positions.flatten(), method='L-BFGS-B')
    final_positions = result.x.reshape((node_count, 2))

    # Map final positions back to node IDs
    layout = {node: final_positions[i].tolist() for node, i in node_to_index.items()}
    return layout

# Input edge list
edge_list = [(0, 2), (0, 7), (0, 8), (0, 35), (1, 2), (1, 3), (1, 7), (1, 8), (1, 9), 
             (2, 6), (2, 7), (2, 8), (3, 5), (3, 8), (3, 10), (4, 5), (4, 7), (4, 8), 
             (5, 6), (5, 7), (5, 8), (5, 10), (6, 7), (6, 8), (6, 10), (7, 10), (7, 19), 
             (8, 9), (8, 10), (8, 73), (9, 10), (9, 43), (11, 12), (11, 16), (11, 18), 
             (11, 20), (11, 21), (11, 25), (12, 14), (12, 16), (12, 17), (12, 18), 
             (12, 19), (12, 21), (13, 19), (13, 21), (14, 17), (15, 17), (15, 18), 
             (15, 20), (16, 19), (17, 20), (18, 21), (18, 69), (19, 20), (19, 21), 
             (20, 21), (22, 26), (22, 28), (23, 25), (23, 27), (24, 30), (25, 27), 
             (25, 28), (25, 29), (25, 30), (26, 27), (26, 31), (27, 28), (27, 30), 
             (27, 57), (29, 30), (30, 47), (32, 23), (32, 24), (32, 25), (32, 69), 
             (33, 34), (33, 37), (33, 38), (33, 41), (33, 42), (33, 51), (34, 36), 
             (34, 37), (34, 38), (34, 42), (35, 40), (35, 43), (36, 39), (36, 41), 
             (36, 42), (37, 38), (37, 39), (37, 41), (37, 43), (39, 41), (40, 43), 
             (44, 46), (44, 48), (44, 53), (45, 48), (45, 49), (45, 52), (46, 50), 
             (46, 52), (46, 53), (47, 48), (47, 49), (47, 51), (47, 52), (48, 49), 
             (48, 51), (48, 53), (50, 51), (50, 52), (50, 56), (54, 56), (54, 59), 
             (54, 60), (54, 62), (55, 57), (55, 58), (55, 60), (55, 61), (55, 62), 
             (55, 63), (56, 58), (56, 60), (56, 63), (57, 60), (57, 63), (58, 59), 
             (58, 61), (58, 62), (59, 61), (59, 62), (60, 61), (60, 63), (61, 63), 
             (64, 66), (64, 67), (64, 70), (64, 72), (64, 73), (65, 66), (65, 67), 
             (65, 69), (66, 72), (66, 73), (67, 68), (67, 71), (68, 69), (68, 70), 
             (70, 72), (70, 73), (71, 73), (72, 73)]

# Generate layout
layout = generate_layout(edge_list)

# Output layout in JSON format
print(json.dumps(layout, indent=2))
```

This implementation determines a layout where Euclidean distances between nodes aim to reflect their graph-theoretic distances. The result is printed in JSON format. Note that this may take some time for large graphs due to the computational complexity of the optimization process.