Below is the Python script to generate a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance. The script uses a force-directed approach, where nodes are iteratively repositioned based on attractive and repulsive forces. The final layout is output in JSON format.

```python
import json
import math
import random
from collections import defaultdict

def generate_graph_layout(edge_list, iterations=1000, learning_rate=0.01, repulsion=1.0):
    # Initialize positions randomly
    nodes = set()
    for u, v in edge_list:
        nodes.add(u)
        nodes.add(v)
    positions = {node: [random.uniform(0, 1), random.uniform(0, 1)] for node in nodes}

    # Build adjacency list
    adjacency_list = defaultdict(list)
    for u, v in edge_list:
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)

    # Compute graph-theoretic distances using BFS
    def bfs_distances(start_node):
        distances = {node: float('inf') for node in nodes}
        distances[start_node] = 0
        queue = [start_node]
        while queue:
            current = queue.pop(0)
            for neighbor in adjacency_list[current]:
                if distances[neighbor] == float('inf'):
                    distances[neighbor] = distances[current] + 1
                    queue.append(neighbor)
        return distances

    graph_distances = {node: bfs_distances(node) for node in nodes}

    # Force-directed layout algorithm
    for _ in range(iterations):
        # Initialize forces
        forces = {node: [0, 0] for node in nodes}

        # Compute repulsive forces
        for u in nodes:
            for v in nodes:
                if u != v:
                    dx = positions[u][0] - positions[v][0]
                    dy = positions[u][1] - positions[v][1]
                    distance = math.sqrt(dx**2 + dy**2) + 1e-6  # Avoid division by zero
                    force = repulsion / distance**2
                    forces[u][0] += force * dx / distance
                    forces[u][1] += force * dy / distance

        # Compute attractive forces
        for u, v in edge_list:
            dx = positions[u][0] - positions[v][0]
            dy = positions[u][1] - positions[v][1]
            distance = math.sqrt(dx**2 + dy**2) + 1e-6  # Avoid division by zero
            ideal_distance = graph_distances[u][v] if graph_distances[u][v] != float('inf') else 1
            force = (distance - ideal_distance) / ideal_distance
            forces[u][0] -= force * dx / distance
            forces[u][1] -= force * dy / distance
            forces[v][0] += force * dx / distance
            forces[v][1] += force * dy / distance

        # Update positions
        for node in nodes:
            positions[node][0] += learning_rate * forces[node][0]
            positions[node][1] += learning_rate * forces[node][1]

    # Normalize positions to fit in a unit square
    min_x = min(pos[0] for pos in positions.values())
    max_x = max(pos[0] for pos in positions.values())
    min_y = min(pos[1] for pos in positions.values())
    max_y = max(pos[1] for pos in positions.values())

    for node in positions:
        positions[node][0] = (positions[node][0] - min_x) / (max_x - min_x)
        positions[node][1] = (positions[node][1] - min_y) / (max_y - min_y)

    # Output positions in JSON format
    return json.dumps(positions, indent=4)

# Example usage
edge_list = [
    (0, 1), (0, 3), (0, 5), (0, 7), (0, 15), (1, 4), (1, 5), (1, 7), (1, 8), (1, 57),
    (2, 3), (2, 4), (2, 5), (2, 6), (3, 5), (3, 7), (4, 5), (4, 6), (4, 7), (4, 41),
    (5, 8), (5, 9), (6, 7), (6, 75), (7, 9), (8, 9), (10, 14), (10, 15), (10, 16),
    (10, 18), (11, 12), (11, 15), (11, 16), (11, 19), (12, 15), (12, 16), (12, 18),
    (13, 18), (14, 15), (14, 19), (15, 16), (15, 18), (15, 19), (16, 18), (16, 62),
    (17, 18), (19, 34), (20, 23), (20, 25), (20, 26), (20, 27), (21, 23), (21, 28),
    (21, 29), (22, 23), (22, 25), (22, 27), (22, 29), (22, 48), (23, 24), (23, 26),
    (24, 25), (24, 26), (24, 27), (24, 29), (25, 27), (25, 71), (26, 27), (26, 29),
    (27, 29), (27, 61), (30, 47), (32, 30), (32, 35), (33, 30), (33, 34), (33, 37),
    (34, 31), (35, 31), (35, 36), (35, 37), (36, 30), (36, 37), (36, 68), (37, 38),
    (37, 50), (38, 39), (39, 31), (40, 42), (40, 44), (40, 45), (41, 45), (41, 46),
    (41, 49), (42, 45), (42, 46), (42, 48), (43, 46), (43, 49), (44, 45), (44, 49),
    (45, 48), (46, 47), (48, 49), (49, 61), (50, 51), (50, 53), (50, 54), (50, 55),
    (50, 57), (50, 58), (51, 52), (51, 54), (52, 54), (52, 57), (52, 58), (53, 54),
    (53, 56), (54, 56), (54, 57), (54, 72), (55, 58), (56, 58), (57, 58), (57, 76),
    (59, 60), (59, 61), (59, 62), (60, 62), (60, 63), (61, 62), (62, 63), (64, 60),
    (64, 62), (64, 66), (65, 59), (65, 66), (66, 59), (66, 61), (66, 63), (67, 60),
    (67, 63), (68, 70), (68, 72), (69, 73), (69, 74), (70, 71), (70, 74), (71, 72),
    (71, 73), (71, 74), (72, 73), (72, 76), (73, 76), (74, 76), (75, 76)
]

layout = generate_graph_layout(edge_list)
print(layout)
```