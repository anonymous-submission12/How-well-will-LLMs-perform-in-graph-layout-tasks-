To generate a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance, we can employ a combination of methods: compute the shortest path distance matrix using the Floyd-Warshall algorithm, and optimize node positions in a Euclidean space to minimize the energy of mismatching distances.

Here's the Python script:

```python
import json
import numpy as np

def floyd_warshall(num_nodes, edges):
    # Initialize the distance matrix
    dist = np.full((num_nodes, num_nodes), np.inf)
    for i in range(num_nodes):
        dist[i, i] = 0
    for u, v in edges:
        dist[u, v] = 1
        dist[v, u] = 1

    # Floyd-Warshall algorithm
    for k in range(num_nodes):
        for i in range(num_nodes):
            for j in range(num_nodes):
                dist[i, j] = min(dist[i, j], dist[i, k] + dist[k, j])
    return dist

def optimize_layout(num_nodes, distance_matrix, dimensions=2, iterations=1000, learning_rate=0.01):
    # Initialize random positions for nodes in a 2D space
    positions = np.random.rand(num_nodes, dimensions)

    # Gradient descent optimization
    for _ in range(iterations):
        gradients = np.zeros_like(positions)
        for i in range(num_nodes):
            for j in range(num_nodes):
                if i != j:
                    graph_dist = distance_matrix[i, j]
                    if graph_dist < np.inf:  # Only consider existing connections
                        euclidean_dist = np.linalg.norm(positions[i] - positions[j])
                        error = euclidean_dist - graph_dist
                        # Compute gradient
                        grad = 2 * error * (positions[i] - positions[j]) / (euclidean_dist + 1e-6)
                        gradients[i] += grad
                        gradients[j] -= grad
        # Update positions using gradients
        positions -= learning_rate * gradients

    return positions

def generate_graph_layout(edge_list, num_nodes):
    # Step 1: Compute the shortest path distance matrix
    distance_matrix = floyd_warshall(num_nodes, edge_list)

    # Step 2: Optimize positions in 2D space
    positions = optimize_layout(num_nodes, distance_matrix)

    # Step 3: Convert positions to a JSON-compatible format
    layout = {node: positions[node].tolist() for node in range(num_nodes)}
    return layout

if __name__ == "__main__":
    # Graph data
    edge_list = [
        (0, 1), (0, 3), (0, 7), (0, 9), (0, 12), (0, 13), (0, 15), (0, 71), (1, 3), (1, 4), (1, 5),
        (1, 8), (1, 9), (1, 10), (2, 3), (2, 4), (2, 5), (2, 7), (2, 9), (2, 12), (2, 67), (3, 4),
        # Continue with the edge list ...
    ]
    
    # Number of nodes in the graph
    num_nodes = max(max(u, v) for u, v in edge_list) + 1

    # Generate layout
    layout = generate_graph_layout(edge_list, num_nodes)

    # Output the layout in JSON format
    print(json.dumps(layout, indent=4))
```

### Explanation
1. **Floyd-Warshall Algorithm**:
   - Calculates the shortest path distance matrix for graph-theoretic distances.

2. **Gradient Descent Layout**:
   - Positions of nodes are optimized iteratively to minimize the mismatch between graph-theoretic and Euclidean distances.
   
3. **Final Layout**:
   - Outputs a dictionary where keys are nodes and values are their 2D positions in JSON format.

### Notes:
- Hyperparameters like `iterations` and `learning_rate` can be adjusted for better results depending on the graph size and structure.
- Use random initialization for positions and optimize them iteratively. Any randomness ensures repeatability for same input graphs if fixed seeds are used.