Below is the Python script that generates a layout for the graph while keeping the community structure clear. The script uses a modularity-based community detection algorithm to divide the graph into communities and assigns positions to nodes based on their community membership. The final output is a JSON object containing the layout.

```python
import networkx as nx
import community as community_louvain
import json
import math

def generate_graph_layout(edge_list):
    # Create a graph from the edge list
    G = nx.Graph()
    G.add_edges_from(edge_list)

    # Perform community detection using the Louvain method
    partition = community_louvain.best_partition(G)

    # Group nodes by community
    communities = {}
    for node, community_id in partition.items():
        if community_id not in communities:
            communities[community_id] = []
        communities[community_id].append(node)

    # Generate positions for each community
    positions = {}
    num_communities = len(communities)
    angle_step = 2 * math.pi / num_communities
    radius = 10  # Distance of communities from the center

    for i, (community_id, nodes) in enumerate(communities.items()):
        # Calculate the center of the community
        angle = i * angle_step
        community_center_x = radius * math.cos(angle)
        community_center_y = radius * math.sin(angle)

        # Arrange nodes in a circular layout within the community
        num_nodes = len(nodes)
        node_angle_step = 2 * math.pi / num_nodes
        node_radius = 3  # Distance of nodes from the community center

        for j, node in enumerate(nodes):
            node_angle = j * node_angle_step
            node_x = community_center_x + node_radius * math.cos(node_angle)
            node_y = community_center_y + node_radius * math.sin(node_angle)
            positions[node] = (node_x, node_y)

    # Convert positions to JSON format
    layout_json = json.dumps(positions, indent=4)
    return layout_json

# Input edge list
edge_list = [
    (0, 1), (0, 8), (0, 9), (0, 11), (0, 13), (0, 14), (1, 5), (1, 7), (1, 8), (1, 9), (1, 13), (1, 15),
    (2, 3), (2, 4), (2, 6), (2, 8), (2, 15), (3, 5), (3, 8), (3, 9), (3, 10), (4, 7), (4, 9), (4, 10),
    (4, 13), (4, 14), (4, 15), (5, 7), (5, 8), (5, 9), (6, 7), (6, 8), (6, 9), (6, 11), (6, 43), (7, 11),
    (7, 13), (7, 14), (7, 15), (8, 9), (8, 13), (9, 12), (9, 15), (10, 11), (10, 13), (11, 15), (12, 13),
    (13, 14), (13, 15), (13, 56), (14, 15), (16, 17), (16, 19), (16, 21), (16, 23), (16, 27), (16, 30),
    (17, 18), (17, 20), (17, 22), (17, 25), (17, 28), (18, 22), (18, 26), (18, 27), (18, 29), (18, 30),
    (19, 21), (19, 25), (19, 26), (19, 27), (19, 28), (20, 21), (20, 23), (20, 27), (20, 29), (21, 22),
    (21, 24), (21, 27), (21, 28), (21, 29), (21, 30), (22, 24), (22, 29), (22, 57), (23, 24), (23, 25),
    (23, 26), (24, 25), (24, 28), (24, 30), (25, 27), (25, 30), (27, 28), (27, 40), (27, 51), (29, 30),
    (29, 34), (29, 46), (32, 31), (32, 37), (32, 40), (32, 43), (33, 37), (33, 39), (33, 43), (34, 35),
    (34, 39), (34, 42), (34, 45), (35, 31), (35, 38), (35, 45), (36, 40), (36, 42), (36, 43), (37, 31),
    (37, 43), (37, 67), (38, 43), (39, 31), (39, 44), (40, 31), (40, 43), (41, 31), (41, 43), (41, 44),
    (41, 45), (41, 59), (42, 44), (42, 45), (43, 44), (46, 48), (46, 49), (46, 50), (46, 53), (46, 56),
    (46, 57), (46, 58), (47, 49), (47, 59), (48, 49), (48, 52), (48, 60), (49, 50), (49, 52), (49, 55),
    (49, 58), (50, 52), (50, 54), (50, 58), (50, 59), (51, 52), (51, 53), (51, 54), (51, 55), (51, 58),
    (51, 59), (51, 60), (52, 54), (52, 55), (52, 60), (53, 54), (53, 55), (53, 59), (53, 60), (54, 55),
    (55, 57), (55, 58), (57, 60), (61, 63), (62, 63), (64, 66), (64, 69), (64, 70), (64, 71), (64, 74),
    (65, 63), (65, 68), (65, 72), (65, 74), (66, 62), (66, 68), (66, 69), (66, 75), (67, 63), (67, 74),
    (68, 61), (68, 62), (68, 71), (68, 74), (69, 61), (69, 70), (69, 72), (69, 75), (70, 61), (70, 71),
    (70, 72), (70, 73), (70, 75), (71, 62), (71, 72), (71, 73), (71, 74), (71, 75), (72, 73), (72, 75),
    (74, 62), (75, 61), (75, 62)
]

# Generate the layout
layout = generate_graph_layout(edge_list)
print(layout)
```

### Explanation:
1. **Community Detection**: The script uses the Louvain method (via the `community_louvain` library) to detect communities in the graph.
2. **Community Layout**: Communities are arranged in a circular layout around the origin, with each community's nodes arranged in a smaller circle within their respective community.
3. **Output**: The positions of the nodes are output in JSON format, where each node is mapped to its `(x, y)` coordinates.