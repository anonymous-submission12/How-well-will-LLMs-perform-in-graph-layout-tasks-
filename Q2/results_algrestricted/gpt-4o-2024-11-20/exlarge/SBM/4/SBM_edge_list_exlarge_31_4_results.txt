Below is the Python script to generate a layout for the graph while keeping the community structure clear. The script uses the `community` module (Louvain method) for community detection and assigns positions to nodes based on their community membership. The final output is a JSON object containing the layout.

```python
import networkx as nx
import community as community_louvain
import json
import math

# Input graph data
edge_list = [
    (0, 2), (0, 7), (0, 8), (0, 35), (1, 2), (1, 3), (1, 7), (1, 8), (1, 9), (2, 6), (2, 7), (2, 8), (3, 5), (3, 8),
    (3, 10), (4, 5), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 10), (6, 7), (6, 8), (6, 10), (7, 10), (7, 19), (8, 9),
    (8, 10), (8, 73), (9, 10), (9, 43), (11, 12), (11, 16), (11, 18), (11, 20), (11, 21), (11, 25), (12, 14), (12, 16),
    (12, 17), (12, 18), (12, 19), (12, 21), (13, 19), (13, 21), (14, 17), (15, 17), (15, 18), (15, 20), (16, 19),
    (17, 20), (18, 21), (18, 69), (19, 20), (19, 21), (20, 21), (22, 26), (22, 28), (23, 25), (23, 27), (24, 30),
    (25, 27), (25, 28), (25, 29), (25, 30), (26, 27), (26, 31), (27, 28), (27, 30), (27, 57), (29, 30), (30, 47),
    (32, 23), (32, 24), (32, 25), (32, 69), (33, 34), (33, 37), (33, 38), (33, 41), (33, 42), (33, 51), (34, 36),
    (34, 37), (34, 38), (34, 42), (35, 40), (35, 43), (36, 39), (36, 41), (36, 42), (37, 38), (37, 39), (37, 41),
    (37, 43), (39, 41), (40, 43), (44, 46), (44, 48), (44, 53), (45, 48), (45, 49), (45, 52), (46, 50), (46, 52),
    (46, 53), (47, 48), (47, 49), (47, 51), (47, 52), (48, 49), (48, 51), (48, 53), (50, 51), (50, 52), (50, 56),
    (54, 56), (54, 59), (54, 60), (54, 62), (55, 57), (55, 58), (55, 60), (55, 61), (55, 62), (55, 63), (56, 58),
    (56, 60), (56, 63), (57, 60), (57, 63), (58, 59), (58, 61), (58, 62), (59, 61), (59, 62), (60, 61), (60, 63),
    (61, 63), (64, 66), (64, 67), (64, 70), (64, 72), (64, 73), (65, 66), (65, 67), (65, 69), (66, 72), (66, 73),
    (67, 68), (67, 71), (68, 69), (68, 70), (70, 72), (70, 73), (71, 73), (72, 73)
]

# Create a graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Detect communities using the Louvain method
partition = community_louvain.best_partition(G)

# Group nodes by community
communities = {}
for node, community in partition.items():
    if community not in communities:
        communities[community] = []
    communities[community].append(node)

# Generate positions for nodes
positions = {}
radius_step = 10  # Distance between communities
angle_step = 2 * math.pi / max(len(c) for c in communities.values())  # Angle step for nodes in a community

for i, (community, nodes) in enumerate(communities.items()):
    # Place each community in a circular layout
    radius = (i + 1) * radius_step
    for j, node in enumerate(nodes):
        angle = j * angle_step
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        positions[node] = (x, y)

# Output the layout as JSON
layout_json = json.dumps(positions, indent=4)
print(layout_json)
```

### Explanation:
1. **Community Detection**: The Louvain method is used to detect communities in the graph.
2. **Circular Layout for Communities**: Each community is assigned a circular layout, with the radius increasing for each community to avoid overlap.
3. **Node Placement**: Nodes within a community are evenly distributed along the circle's circumference.
4. **Output**: The final layout is output as a JSON object, where each node is mapped to its `(x, y)` position.

You can run this script to generate the layout for the given graph. The output will be a JSON object containing the positions of all nodes.