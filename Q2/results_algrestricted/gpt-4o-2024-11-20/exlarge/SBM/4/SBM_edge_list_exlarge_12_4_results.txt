Here's the Python script to generate a layout for the provided graph in JSON format. This script uses the Louvain algorithm for community detection to divide the graph into communities and positions nodes to clearly show the community structure. The implemented layout arranges nodes based on a combination of their community memberships and their neighboring structure.

```python
import json
import networkx as nx
import community  # This is the python-louvain package (install via `pip install python-louvain`)
import math

def generate_graph_layout(edge_list):
    # Create a graph from edge_list
    G = nx.Graph()
    G.add_edges_from(edge_list)
    
    # Perform community detection using the Louvain algorithm
    partition = community.best_partition(G)
    
    # Determine the number of communities
    communities = {}
    for node, community_id in partition.items():
        if community_id not in communities:
            communities[community_id] = []
        communities[community_id].append(node)
    
    # Assign positions to nodes
    positions = {}
    num_communities = len(communities)
    radius = 10  # Radius for overall community layout
    community_angle = 2 * math.pi / num_communities

    for i, (community_id, nodes) in enumerate(communities.items()):
        # Calculate the center of the community
        community_center_x = radius * math.cos(i * community_angle)
        community_center_y = radius * math.sin(i * community_angle)

        # Arrange nodes in the community in a circular layout
        num_nodes = len(nodes)
        node_angle = 2 * math.pi / num_nodes if num_nodes > 1 else 0
        node_radius = 3  # Radius for nodes within a community

        for j, node in enumerate(nodes):
            node_x = community_center_x + node_radius * math.cos(j * node_angle)
            node_y = community_center_y + node_radius * math.sin(j * node_angle)
            positions[node] = (node_x, node_y)
    
    # Convert positions to JSON serializable format
    positions_json = {str(node): {'x': pos[0], 'y': pos[1]} for node, pos in positions.items()}
    return positions_json

# Input edge list
edge_list = [
    (0, 1), (0, 5), (0, 6), (0, 9), (0, 11), (1, 3), (1, 5), (1, 7), (1, 9), (1, 18), (1, 77), 
    (2, 4), (2, 5), (3, 5), (3, 6), (3, 8), (3, 11), (3, 12), (3, 46), (4, 6), (4, 10), (4, 12), 
    (5, 9), (5, 11), (6, 7), (6, 9), (6, 11), (7, 8), (7, 12), (8, 9), (8, 11), (8, 12), (9, 10), 
    (9, 12), (13, 18), (13, 21), (13, 23), (13, 24), (14, 16), (14, 20), (14, 21), (14, 22), 
    (14, 25), (15, 16), (15, 17), (15, 18), (15, 19), (15, 20), (15, 23), (15, 24), (15, 25), 
    (16, 18), (16, 20), (16, 23), (16, 25), (17, 22), (17, 23), (17, 24), (17, 25), (18, 20), 
    (18, 22), (18, 25), (19, 20), (19, 22), (19, 25), (20, 22), (20, 23), (20, 25), (21, 23), 
    (21, 31), (22, 25), (23, 24), (23, 51), (25, 33), (26, 28), (26, 29), (26, 30), (27, 28), 
    (27, 30), (28, 30), (28, 31), (28, 56), (29, 30), (30, 31), (32, 28), (32, 31), (32, 33), 
    (32, 34), (32, 35), (32, 36), (32, 38), (33, 27), (33, 30), (33, 31), (33, 34), (33, 36), 
    (33, 38), (34, 35), (34, 37), (35, 26), (35, 31), (35, 36), (35, 38), (35, 40), (36, 26), 
    (36, 29), (36, 38), (37, 26), (37, 28), (37, 31), (37, 38), (38, 26), (38, 29), (39, 40), 
    (39, 43), (39, 44), (39, 48), (39, 49), (39, 51), (40, 41), (40, 45), (40, 48), (40, 49), 
    (41, 43), (41, 46), (41, 47), (41, 50), (42, 43), (42, 45), (42, 48), (42, 49), (43, 44), 
    (43, 46), (43, 48), (43, 50), (43, 51), (43, 52), (44, 48), (44, 49), (44, 50), (46, 47), 
    (46, 48), (46, 50), (47, 48), (48, 51), (49, 50), (49, 51), (52, 54), (52, 57), (52, 58), 
    (53, 55), (54, 55), (54, 57), (55, 57), (55, 58), (55, 61), (55, 63), (56, 59), (57, 61), 
    (59, 60), (60, 61), (64, 53), (64, 59), (64, 60), (64, 62), (65, 67), (65, 71), (65, 73), 
    (65, 74), (65, 76), (66, 67), (66, 69), (66, 70), (66, 71), (66, 74), (67, 68), (67, 73), 
    (67, 75), (67, 76), (68, 70), (68, 74), (68, 75), (69, 71), (69, 72), (69, 73), (70, 76), 
    (71, 72), (71, 74), (71, 75), (71, 76), (71, 77), (72, 73), (72, 75), (72, 77), (73, 74), 
    (73, 77), (74, 77), (75, 77)
]

# Generate and print the layout
layout = generate_graph_layout(edge_list)
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Community Detection**:
   - The Louvain algorithm (from the `python-louvain` package) is used to partition the nodes into communities based on modularity optimization.

2. **Community-based Layout**:
   - Communities are arranged in a circle with evenly spaced angle increments.
   - Nodes within each community are also placed in a circular layout within their communityâ€™s area.

3. **Position Output**:
   - Node positions are formatted into a JSON object with `{node: {'x': x, 'y': y}}` structure to prepare for visualization outside Python.

To run this script, ensure you have the packages `networkx` and `python-louvain` installed in your environment.