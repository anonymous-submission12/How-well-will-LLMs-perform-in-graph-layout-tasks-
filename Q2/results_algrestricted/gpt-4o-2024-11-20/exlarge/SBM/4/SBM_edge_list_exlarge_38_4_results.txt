Below is the Python code to generate a graph layout based on the provided edge list. The code uses a modularity-based community detection algorithm to divide the graph into communities and assigns positions to nodes such that the community structure is clear. The final output is the graph layout in JSON format.

```python
import networkx as nx
import community
import json
import math

def generate_graph_layout(edge_list):
    # Create the graph
    G = nx.Graph()
    G.add_edges_from(edge_list)

    # Detect communities using the Louvain method
    partition = community.best_partition(G)

    # Group nodes by community
    communities = {}
    for node, comm in partition.items():
        if comm not in communities:
            communities[comm] = []
        communities[comm].append(node)

    # Assign positions to nodes
    positions = {}
    num_communities = len(communities)
    angle_step = 2 * math.pi / num_communities
    radius = 10  # Radius for community centers

    for i, (comm, nodes) in enumerate(communities.items()):
        # Calculate the center of the community
        angle = i * angle_step
        center_x = radius * math.cos(angle)
        center_y = radius * math.sin(angle)

        # Arrange nodes in a circular layout within the community
        num_nodes = len(nodes)
        node_angle_step = 2 * math.pi / num_nodes
        node_radius = 3  # Radius for nodes within the community

        for j, node in enumerate(nodes):
            node_angle = j * node_angle_step
            node_x = center_x + node_radius * math.cos(node_angle)
            node_y = center_y + node_radius * math.sin(node_angle)
            positions[node] = (node_x, node_y)

    # Convert positions to JSON format
    positions_json = json.dumps(positions, indent=4)
    return positions_json

# Edge list
edge_list = [
    (0, 1), (0, 3), (0, 5), (0, 7), (0, 15), (1, 4), (1, 5), (1, 7), (1, 8), (1, 57),
    (2, 3), (2, 4), (2, 5), (2, 6), (3, 5), (3, 7), (4, 5), (4, 6), (4, 7), (4, 41),
    (5, 8), (5, 9), (6, 7), (6, 75), (7, 9), (8, 9), (10, 14), (10, 15), (10, 16), (10, 18),
    (11, 12), (11, 15), (11, 16), (11, 19), (12, 15), (12, 16), (12, 18), (13, 18), (14, 15),
    (14, 19), (15, 16), (15, 18), (15, 19), (16, 18), (16, 62), (17, 18), (19, 34), (20, 23),
    (20, 25), (20, 26), (20, 27), (21, 23), (21, 28), (21, 29), (22, 23), (22, 25), (22, 27),
    (22, 29), (22, 48), (23, 24), (23, 26), (24, 25), (24, 26), (24, 27), (24, 29), (25, 27),
    (25, 71), (26, 27), (26, 29), (27, 29), (27, 61), (30, 47), (32, 30), (32, 35), (33, 30),
    (33, 34), (33, 37), (34, 31), (35, 31), (35, 36), (35, 37), (36, 30), (36, 37), (36, 68),
    (37, 38), (37, 50), (38, 39), (39, 31), (40, 42), (40, 44), (40, 45), (41, 45), (41, 46),
    (41, 49), (42, 45), (42, 46), (42, 48), (43, 46), (43, 49), (44, 45), (44, 49), (45, 48),
    (46, 47), (48, 49), (49, 61), (50, 51), (50, 53), (50, 54), (50, 55), (50, 57), (50, 58),
    (51, 52), (51, 54), (52, 54), (52, 57), (52, 58), (53, 54), (53, 56), (54, 56), (54, 57),
    (54, 72), (55, 58), (56, 58), (57, 58), (57, 76), (59, 60), (59, 61), (59, 62), (60, 62),
    (60, 63), (61, 62), (62, 63), (64, 60), (64, 62), (64, 66), (65, 59), (65, 66), (66, 59),
    (66, 61), (66, 63), (67, 60), (67, 63), (68, 70), (68, 72), (69, 73), (69, 74), (70, 71),
    (70, 74), (71, 72), (71, 73), (71, 74), (72, 73), (72, 76), (73, 76), (74, 76), (75, 76)
]

# Generate layout
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Community Detection**: The `community` module is used to detect communities in the graph using the Louvain method.
2. **Position Assignment**: Nodes are arranged in circular layouts within their respective communities, and the communities themselves are arranged in a larger circular layout.
3. **Output**: The positions of nodes are returned in JSON format.

Make sure to install the `python-louvain` package (`pip install python-louvain`) before running the code.