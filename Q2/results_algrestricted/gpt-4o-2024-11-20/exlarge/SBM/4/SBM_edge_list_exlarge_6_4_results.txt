Below is the Python script to generate a layout for the graph while keeping the community structure clear. The script uses a modularity-based community detection algorithm to divide the graph into communities and assigns positions to nodes based on their community membership. The final output is a JSON object containing the layout.

```python
import networkx as nx
import community as community_louvain
import json
import math

def generate_graph_layout(edge_list):
    # Create a graph from the edge list
    G = nx.Graph()
    G.add_edges_from(edge_list)

    # Perform community detection using the Louvain method
    partition = community_louvain.best_partition(G)

    # Group nodes by community
    communities = {}
    for node, community in partition.items():
        if community not in communities:
            communities[community] = []
        communities[community].append(node)

    # Generate positions for each community
    positions = {}
    num_communities = len(communities)
    angle_step = 2 * math.pi / num_communities
    radius = 10  # Distance of communities from the center

    for i, (community, nodes) in enumerate(communities.items()):
        # Calculate the center of the community
        angle = i * angle_step
        community_center_x = radius * math.cos(angle)
        community_center_y = radius * math.sin(angle)

        # Arrange nodes in a circular layout within the community
        num_nodes = len(nodes)
        node_angle_step = 2 * math.pi / num_nodes
        node_radius = 3  # Distance of nodes from the community center

        for j, node in enumerate(nodes):
            node_angle = j * node_angle_step
            node_x = community_center_x + node_radius * math.cos(node_angle)
            node_y = community_center_y + node_radius * math.sin(node_angle)
            positions[node] = (node_x, node_y)

    # Convert positions to JSON format
    positions_json = json.dumps(positions)
    return positions_json

# Input edge list
edge_list = [
    (0, 2), (0, 3), (0, 4), (0, 7), (0, 9), (0, 10), (0, 11), (0, 13), (1, 3), (1, 4), (1, 7), (1, 8), (1, 9), (1, 12),
    (2, 4), (2, 6), (2, 7), (2, 8), (3, 4), (3, 8), (3, 9), (3, 11), (3, 12), (4, 6), (4, 7), (4, 10), (5, 7), (5, 8),
    (5, 10), (5, 12), (5, 13), (6, 7), (6, 8), (6, 11), (6, 13), (7, 9), (7, 10), (8, 11), (8, 12), (9, 11), (9, 13),
    (10, 56), (11, 12), (11, 13), (11, 72), (12, 13), (12, 22), (14, 16), (14, 18), (14, 23), (14, 25), (14, 56),
    (15, 16), (15, 17), (15, 18), (15, 21), (15, 24), (15, 26), (16, 19), (16, 21), (16, 22), (16, 25), (16, 26),
    (17, 19), (17, 21), (17, 22), (17, 23), (17, 26), (18, 21), (18, 24), (18, 26), (19, 21), (19, 23), (20, 21),
    (20, 22), (20, 23), (21, 24), (21, 26), (23, 24), (23, 25), (23, 26), (24, 25), (27, 31), (28, 29), (28, 30),
    (29, 31), (30, 31), (32, 30), (32, 35), (32, 38), (32, 45), (33, 27), (33, 28), (33, 38), (33, 39), (33, 74),
    (34, 27), (34, 28), (34, 38), (34, 41), (35, 29), (35, 30), (35, 36), (35, 63), (36, 29), (36, 31), (36, 37),
    (37, 27), (37, 29), (37, 31), (37, 38), (38, 39), (38, 69), (38, 72), (40, 43), (40, 46), (40, 48), (40, 49),
    (40, 51), (41, 48), (41, 50), (41, 67), (42, 43), (42, 45), (42, 46), (42, 47), (42, 50), (43, 44), (43, 45),
    (43, 48), (43, 49), (43, 52), (43, 59), (44, 45), (44, 50), (44, 52), (45, 46), (45, 47), (45, 48), (45, 49),
    (45, 52), (46, 49), (47, 48), (47, 51), (47, 52), (48, 49), (52, 76), (53, 58), (53, 61), (53, 62), (54, 56),
    (54, 62), (54, 63), (54, 76), (55, 56), (55, 58), (55, 61), (56, 57), (56, 63), (57, 58), (58, 60), (58, 61),
    (58, 62), (59, 61), (60, 61), (60, 63), (61, 62), (61, 63), (64, 54), (64, 57), (64, 62), (64, 63), (65, 53),
    (65, 57), (65, 60), (65, 63), (66, 71), (66, 73), (66, 75), (66, 76), (66, 78), (67, 68), (67, 70), (67, 74),
    (67, 78), (68, 70), (68, 71), (68, 75), (68, 76), (68, 78), (69, 71), (69, 73), (69, 74), (69, 76), (70, 71),
    (70, 72), (70, 77), (70, 78), (71, 74), (71, 77), (71, 78), (72, 74), (73, 74), (73, 78), (74, 77), (75, 78),
    (76, 77)
]

# Generate the layout
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

This script:
1. Detects communities using the Louvain method.
2. Assigns positions to nodes in a circular layout within their respective communities.
3. Arranges communities in a larger circular layout.
4. Outputs the layout as a JSON object.