Below is a Python script that generates a layout for the given graph in JSON format. The layout minimizes edge crossings by implementing a simple heuristic approach. The script does not use any existing graph layout algorithms or visualization libraries.

```python
import json
import random

def generate_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = list(nodes)

    # Initialize positions for nodes
    positions = {node: [0, 0] for node in nodes}

    # Assign initial random positions to nodes
    for node in nodes:
        positions[node] = [random.uniform(0, 1), random.uniform(0, 1)]

    # Function to calculate edge crossings
    def count_edge_crossings(positions, edge_list):
        crossings = 0
        for i in range(len(edge_list)):
            for j in range(i + 1, len(edge_list)):
                (a, b) = edge_list[i]
                (c, d) = edge_list[j]
                # Check if edges (a, b) and (c, d) cross
                if a != c and a != d and b != c and b != d:
                    ax, ay = positions[a]
                    bx, by = positions[b]
                    cx, cy = positions[c]
                    dx, dy = positions[d]
                    # Check for intersection using determinant method
                    det1 = (bx - ax) * (cy - ay) - (by - ay) * (cx - ax)
                    det2 = (bx - ax) * (dy - ay) - (by - ay) * (dx - ax)
                    det3 = (dx - cx) * (ay - cy) - (dy - cy) * (ax - cx)
                    det4 = (dx - cx) * (by - cy) - (dy - cy) * (bx - cx)
                    if det1 * det2 < 0 and det3 * det4 < 0:
                        crossings += 1
        return crossings

    # Iteratively improve positions to minimize edge crossings
    def optimize_positions(positions, edge_list, iterations=1000):
        for _ in range(iterations):
            # Randomly pick a node and move it slightly
            node = random.choice(list(positions.keys()))
            old_position = positions[node]
            new_position = [old_position[0] + random.uniform(-0.01, 0.01),
                            old_position[1] + random.uniform(-0.01, 0.01)]
            positions[node] = new_position

            # Calculate edge crossings with the new position
            old_crossings = count_edge_crossings(positions, edge_list)
            positions[node] = old_position  # Revert to old position
            new_crossings = count_edge_crossings(positions, edge_list)

            # Accept the new position if it reduces crossings
            if new_crossings < old_crossings:
                positions[node] = new_position

    # Optimize positions
    optimize_positions(positions, edge_list)

    # Return positions in JSON format
    return json.dumps(positions, indent=4)

# Input edge list
edge_list = [
    (0, 8), (0, 11), (0, 13), (0, 27), (1, 4), (1, 11), (2, 4), (2, 5), (2, 11), (2, 12), (2, 13),
    (3, 4), (3, 7), (3, 8), (3, 10), (3, 13), (4, 5), (4, 7), (4, 9), (4, 10), (4, 11), (4, 12),
    (4, 13), (5, 6), (5, 7), (5, 9), (5, 10), (5, 13), (6, 8), (6, 9), (6, 11), (7, 8), (7, 10),
    (8, 11), (8, 12), (9, 10), (9, 13), (9, 55), (10, 11), (10, 12), (10, 18), (11, 15), (14, 21),
    (14, 22), (14, 23), (14, 25), (14, 27), (14, 53), (15, 16), (15, 20), (15, 21), (15, 22),
    (15, 24), (15, 63), (16, 17), (16, 23), (16, 24), (16, 25), (16, 26), (17, 18), (17, 20),
    (17, 22), (17, 23), (17, 24), (17, 25), (17, 27), (18, 19), (18, 20), (18, 21), (18, 24),
    (18, 26), (18, 27), (19, 24), (19, 25), (19, 26), (20, 24), (20, 26), (21, 25), (21, 27),
    (22, 23), (22, 25), (22, 27), (23, 24), (23, 25), (23, 27), (24, 25), (24, 26), (25, 26),
    (28, 30), (29, 31), (32, 31), (32, 36), (32, 38), (32, 39), (33, 28), (33, 29), (33, 34),
    (33, 38), (33, 39), (33, 40), (33, 77), (34, 29), (34, 30), (34, 35), (34, 36), (34, 37),
    (34, 39), (34, 52), (35, 29), (35, 31), (37, 40), (38, 29), (38, 31), (40, 29), (40, 31),
    (40, 48), (41, 44), (41, 50), (42, 43), (42, 44), (42, 46), (42, 50), (42, 53), (42, 67),
    (43, 44), (43, 45), (43, 46), (43, 50), (43, 51), (43, 53), (44, 45), (44, 47), (44, 48),
    (44, 49), (44, 51), (44, 52), (44, 53), (45, 46), (45, 47), (45, 53), (46, 47), (46, 48),
    (46, 51), (46, 52), (47, 49), (47, 51), (47, 52), (48, 50), (50, 51), (50, 52), (51, 53),
    (52, 53), (52, 59), (54, 58), (54, 61), (54, 63), (55, 59), (55, 60), (56, 58), (56, 62),
    (56, 70), (57, 59), (57, 60), (57, 61), (57, 63), (58, 62), (59, 63), (60, 63), (61, 63),
    (64, 54), (64, 55), (64, 60), (64, 62), (64, 63), (64, 66), (65, 54), (65, 56), (65, 60),
    (65, 62), (66, 56), (66, 59), (66, 62), (67, 72), (68, 69), (68, 71), (68, 77), (68, 78),
    (69, 74), (69, 76), (70, 71), (70, 72), (70, 75), (70, 76), (71, 72), (71, 75), (72, 74),
    (72, 77), (72, 79), (73, 77), (74, 75), (74, 76), (74, 78), (75, 76), (76, 77), (76, 79),
    (78, 79)
]

# Generate layout
layout = generate_layout(edge_list)
print(layout)
```

This script generates a layout by assigning random initial positions to nodes and then iteratively adjusting the positions to minimize edge crossings. The final layout is output in JSON format.