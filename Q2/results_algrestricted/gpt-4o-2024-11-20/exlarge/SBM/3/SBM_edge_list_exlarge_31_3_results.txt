Below is the Python script to generate a graph layout that minimizes edge crossings without using any existing graph layout algorithms. The script uses a heuristic approach to assign positions to nodes based on their connectivity and attempts to minimize edge crossings.

```python
import json
import random

def generate_layout(edge_list):
    # Extract all nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = list(nodes)

    # Initialize positions dictionary
    positions = {node: (0, 0) for node in nodes}

    # Calculate node degrees
    degrees = {node: 0 for node in nodes}
    for edge in edge_list:
        degrees[edge[0]] += 1
        degrees[edge[1]] += 1

    # Sort nodes by degree (descending order)
    sorted_nodes = sorted(nodes, key=lambda x: degrees[x], reverse=True)

    # Assign positions to nodes
    width = 1000  # Width of the layout area
    height = 1000  # Height of the layout area
    spacing = 100  # Minimum spacing between nodes

    # Place the highest-degree node at the center
    center_x, center_y = width // 2, height // 2
    positions[sorted_nodes[0]] = (center_x, center_y)

    # Place remaining nodes around the center
    angle_step = 360 / len(nodes)
    current_angle = 0
    for node in sorted_nodes[1:]:
        x = int(center_x + spacing * degrees[node] * random.uniform(0.8, 1.2) * random.cos(current_angle))
        y = int(center_y + spacing * degrees[node] * random.uniform(0.8, 1.2) * random.sin(current_angle))
        positions[node] = (x, y)
        current_angle += angle_step

    # Return positions in JSON format
    return json.dumps(positions, indent=4)

# Input edge list
edge_list = [
    (0, 2), (0, 7), (0, 8), (0, 35), (1, 2), (1, 3), (1, 7), (1, 8), (1, 9), (2, 6), (2, 7), (2, 8), (3, 5), (3, 8),
    (3, 10), (4, 5), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 10), (6, 7), (6, 8), (6, 10), (7, 10), (7, 19), (8, 9),
    (8, 10), (8, 73), (9, 10), (9, 43), (11, 12), (11, 16), (11, 18), (11, 20), (11, 21), (11, 25), (12, 14), (12, 16),
    (12, 17), (12, 18), (12, 19), (12, 21), (13, 19), (13, 21), (14, 17), (15, 17), (15, 18), (15, 20), (16, 19), (17, 20),
    (18, 21), (18, 69), (19, 20), (19, 21), (20, 21), (22, 26), (22, 28), (23, 25), (23, 27), (24, 30), (25, 27), (25, 28),
    (25, 29), (25, 30), (26, 27), (26, 31), (27, 28), (27, 30), (27, 57), (29, 30), (30, 47), (32, 23), (32, 24), (32, 25),
    (32, 69), (33, 34), (33, 37), (33, 38), (33, 41), (33, 42), (33, 51), (34, 36), (34, 37), (34, 38), (34, 42), (35, 40),
    (35, 43), (36, 39), (36, 41), (36, 42), (37, 38), (37, 39), (37, 41), (37, 43), (39, 41), (40, 43), (44, 46), (44, 48),
    (44, 53), (45, 48), (45, 49), (45, 52), (46, 50), (46, 52), (46, 53), (47, 48), (47, 49), (47, 51), (47, 52), (48, 49),
    (48, 51), (48, 53), (50, 51), (50, 52), (50, 56), (54, 56), (54, 59), (54, 60), (54, 62), (55, 57), (55, 58), (55, 60),
    (55, 61), (55, 62), (55, 63), (56, 58), (56, 60), (56, 63), (57, 60), (57, 63), (58, 59), (58, 61), (58, 62), (59, 61),
    (59, 62), (60, 61), (60, 63), (61, 63), (64, 66), (64, 67), (64, 70), (64, 72), (64, 73), (65, 66), (65, 67), (65, 69),
    (66, 72), (66, 73), (67, 68), (67, 71), (68, 69), (68, 70), (70, 72), (70, 73), (71, 73), (72, 73)
]

# Generate layout
layout = generate_layout(edge_list)
print(layout)
```

This script uses a heuristic approach to assign positions to nodes based on their degree and places them in a circular layout around the highest-degree node. The positions are returned in JSON format. Note that this approach does not guarantee a perfect minimization of edge crossings but provides a reasonable approximation.