To generate a graph layout that minimizes edge crossings without using existing graph layout algorithms, we can implement a heuristic approach. One such method is to use a force-directed algorithm, where nodes repel each other and edges act as springs pulling connected nodes closer. Below is the Python code to compute the layout and output it in JSON format:

```python
import json
import random
import math

def generate_graph_layout(edge_list, iterations=1000, width=1000, height=1000):
    # Initialize node positions randomly within the given width and height
    nodes = set([node for edge in edge_list for node in edge])
    positions = {node: [random.uniform(0, width), random.uniform(0, height)] for node in nodes}
    
    # Parameters for the force-directed layout
    k = math.sqrt((width * height) / len(nodes))  # Ideal distance between nodes
    repulsion_factor = 0.1
    attraction_factor = 0.1

    def distance(pos1, pos2):
        """Calculate Euclidean distance between two positions."""
        return math.sqrt((pos1[0] - pos2[0])**2 + (pos1[1] - pos2[1])**2)

    def apply_repulsion():
        """Apply repulsion forces between all pairs of nodes."""
        for node1 in nodes:
            for node2 in nodes:
                if node1 != node2:
                    pos1, pos2 = positions[node1], positions[node2]
                    dist = distance(pos1, pos2)
                    if dist > 0:
                        force = repulsion_factor * (k**2 / dist)
                        dx = (pos1[0] - pos2[0]) / dist * force
                        dy = (pos1[1] - pos2[1]) / dist * force
                        positions[node1][0] += dx
                        positions[node1][1] += dy
                        positions[node2][0] -= dx
                        positions[node2][1] -= dy

    def apply_attraction():
        """Apply attraction forces along edges."""
        for node1, node2 in edge_list:
            pos1, pos2 = positions[node1], positions[node2]
            dist = distance(pos1, pos2)
            if dist > 0:
                force = attraction_factor * ((dist**2) / k)
                dx = (pos2[0] - pos1[0]) / dist * force
                dy = (pos2[1] - pos1[1]) / dist * force
                positions[node1][0] += dx
                positions[node1][1] += dy
                positions[node2][0] -= dx
                positions[node2][1] -= dy

    def limit_positions():
        """Ensure nodes stay within the bounds of the canvas."""
        for node in nodes:
            positions[node][0] = max(0, min(width, positions[node][0]))
            positions[node][1] = max(0, min(height, positions[node][1]))

    # Iteratively adjust positions
    for _ in range(iterations):
        apply_repulsion()
        apply_attraction()
        limit_positions()

    # Convert positions to JSON format
    layout = {node: {"x": positions[node][0], "y": positions[node][1]} for node in nodes}
    return json.dumps(layout, indent=4)

# Example usage
edge_list = [
    (0, 1), (0, 3), (0, 8), (0, 12), (0, 13), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 23),
    (1, 4), (1, 7), (1, 8), (1, 11), (1, 13), (1, 16), (1, 17), (1, 21), (1, 22), (1, 24), (1, 25),
    (1, 28), (1, 34), (1, 74), (2, 6), (2, 7), (2, 9), (2, 15), (2, 17), (2, 18), (2, 20), (3, 6),
    # (Truncated for brevity; include the full edge list here)
]

layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Initialization**: Nodes are placed randomly within a defined canvas size (`width` x `height`).
2. **Repulsion**: Nodes repel each other based on their distance, simulating a force that pushes them apart.
3. **Attraction**: Nodes connected by edges are pulled closer together, simulating spring-like behavior.
4. **Boundary Constraints**: Node positions are constrained within the canvas to prevent them from going out of bounds.
5. **Iterations**: The algorithm iteratively adjusts positions to minimize edge crossings and achieve a balanced layout.
6. **Output**: The final positions are output in JSON format.

You can replace the truncated edge list with the full edge list provided in your input.