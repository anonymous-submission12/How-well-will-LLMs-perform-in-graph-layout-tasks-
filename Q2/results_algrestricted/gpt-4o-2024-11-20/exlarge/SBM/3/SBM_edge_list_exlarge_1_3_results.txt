Below is a Python script that calculates a graph layout using a custom approach to minimize edge crossings. The algorithm places nodes iteratively, aiming to spread them out and reduce crossings by optimizing the positions based on connected edges.

```python
import json
import random
import math

def generate_graph_layout(edge_list):
    # Extract all unique nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = list(nodes)

    # Define a function to compute edge crossings
    def compute_crossings(positions, edges):
        crossings = 0
        for i in range(len(edges)):
            for j in range(i + 1, len(edges)):
                # Check if edge i and j cross
                (a, b), (c, d) = edges[i], edges[j]
                if len({a, b, c, d}) == 4:  # Check only if edges involve 4 distinct nodes
                    # Get positions
                    ax, ay = positions[a]
                    bx, by = positions[b]
                    cx, cy = positions[c]
                    dx, dy = positions[d]

                    # Use vector cross products to determine intersection
                    det1 = (cx - ax) * (by - ay) - (cy - ay) * (bx - ax)
                    det2 = (dx - ax) * (by - ay) - (dy - ay) * (bx - ax)
                    det3 = (ax - cx) * (dy - cy) - (ay - cy) * (dx - cx)
                    det4 = (bx - cx) * (dy - cy) - (by - cy) * (dx - cx)

                    if det1 * det2 < 0 and det3 * det4 < 0:
                        crossings += 1
        return crossings

    # Initialize positions randomly
    positions = {
        node: (random.uniform(0, 1), random.uniform(0, 1))
        for node in nodes
    }

    # Optimization loop to minimize edge crossings
    for _ in range(1000):  # Number of iterations
        for node in nodes:
            # Compute the "force" on this node based on edge neighbors
            force_x, force_y = 0, 0
            for edge in edge_list:
                if node in edge:
                    other = edge[0] if edge[1] == node else edge[1]
                    other_x, other_y = positions[other]
                    node_x, node_y = positions[node]

                    # Attractive force (spring-like)
                    dx = other_x - node_x
                    dy = other_y - node_y
                    distance = math.sqrt(dx ** 2 + dy ** 2) + 1e-6  # Avoid division by zero
                    attractive_force = 0.01 * (distance - 0.1)  # Target distance of 0.1

                    force_x += dx / distance * attractive_force
                    force_y += dy / distance * attractive_force

            # Random jitter to escape local minima
            jitter_x = random.uniform(-0.01, 0.01)
            jitter_y = random.uniform(-0.01, 0.01)

            # Update node position
            positions[node] = (
                max(0, min(1, positions[node][0] + force_x + jitter_x)),  # Keep within bounds [0, 1]
                max(0, min(1, positions[node][1] + force_y + jitter_y))
            )

        # Compute current crossings
        crossings = compute_crossings(positions, edge_list)
        print(f"Iteration {_} - Crossings: {crossings}")

    # Convert positions to JSON serializable format
    layout = {node: {"x": positions[node][0], "y": positions[node][1]} for node in nodes}
    return json.dumps(layout, indent=2)

# Input edge list
edge_list = [
    (0, 5), (1, 2), (1, 43), (2, 3), (2, 9), (3, 5), (3, 6), (3, 7), (3, 9), (3, 10), 
    (4, 6), (4, 7), (5, 9), (5, 17), (6, 7), (6, 9), (6, 10), (7, 8), (7, 9), (7, 10), 
    (8, 10), (9, 10), (11, 12), (11, 13), (11, 14), (11, 20), (12, 13), (12, 14), 
    (12, 15), (12, 17), (12, 18), (12, 19), (13, 16), (13, 19), (14, 18), (15, 18), 
    (15, 21), (15, 67), (16, 17), (16, 18), (16, 20), (16, 67), (17, 18), (17, 21), 
    (18, 20), (18, 64), (19, 20), (19, 21), (19, 54), (20, 52), (22, 26), (22, 28), 
    (22, 30), (22, 31), (23, 25), (23, 26), (23, 27), (23, 29), (23, 31), (24, 27), 
    (24, 29), (24, 30), (24, 31), (25, 30), (26, 27), (28, 29), (28, 31), (29, 30), 
    (29, 39), (31, 56), (32, 22), (32, 25), (32, 26), (32, 28), (32, 30), (33, 34), 
    (33, 35), (33, 37), (33, 38), (33, 39), (33, 40), (33, 42), (33, 43), (34, 38), 
    (34, 39), (34, 40), (34, 43), (35, 40), (35, 41), (35, 42), (36, 37), (36, 38), 
    (36, 39), (36, 40), (36, 41), (36, 42), (37, 40), (37, 41), (37, 43), (38, 40), 
    (38, 41), (39, 42), (40, 42), (40, 43), (44, 45), (44, 48), (44, 49), (44, 53), 
    (44, 54), (45, 48), (45, 51), (45, 54), (46, 49), (46, 51), (46, 52), (47, 49), 
    (47, 51), (47, 54), (48, 50), (49, 51), (49, 52), (49, 54), (50, 51), (50, 54), 
    (52, 53), (52, 54), (53, 54), (55, 60), (55, 62), (56, 60), (56, 61), (56, 62), 
    (56, 63), (57, 58), (57, 62), (57, 63), (58, 60), (58, 61), (58, 62), (58, 72), 
    (59, 60), (59, 63), (59, 69), (60, 62), (61, 63), (64, 59), (64, 61), (65, 59), 
    (66, 67), (66, 70), (66, 71), (66, 73), (66, 75), (67, 68), (67, 69), (67, 72), 
    (67, 75), (68, 74), (68, 75), (69, 71), (69, 73), (69, 74), (69, 75), (70, 71), 
    (70, 72), (71, 72), (71, 74), (72, 74), (73, 75), (74, 75)
]

# Generate and print the graph layout
print(generate_graph_layout(edge_list))
```

This script minimizes edge crossings by using a combination of iterative adjustments and random jitter for escape from local minima. The generated layout is output as a JSON-formatted string containing positions for each node.