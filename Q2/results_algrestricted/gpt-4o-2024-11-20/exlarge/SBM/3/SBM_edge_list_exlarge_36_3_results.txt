Below is the Python script to generate a graph layout that minimizes edge crossings without using existing graph layout algorithms. The script uses a heuristic approach to assign positions to nodes based on their connectivity and attempts to reduce edge crossings.

```python
import json
import random
from collections import defaultdict

def generate_graph_layout(edge_list):
    # Step 1: Parse the edge list to create adjacency list
    adjacency_list = defaultdict(list)
    for edge in edge_list:
        adjacency_list[edge[0]].append(edge[1])
        adjacency_list[edge[1]].append(edge[0])

    # Step 2: Initialize positions for nodes
    positions = {}
    node_count = len(adjacency_list)
    grid_size = int(node_count ** 0.5) + 1  # Define a grid size for layout

    # Step 3: Assign initial positions randomly
    for node in adjacency_list:
        positions[node] = (random.randint(0, grid_size), random.randint(0, grid_size))

    # Step 4: Optimize positions to minimize edge crossings
    def calculate_crossings(positions, edge_list):
        crossings = 0
        for i, edge1 in enumerate(edge_list):
            for j, edge2 in enumerate(edge_list):
                if i >= j:
                    continue
                # Check if edges (edge1 and edge2) cross
                x1, y1 = positions[edge1[0]]
                x2, y2 = positions[edge1[1]]
                x3, y3 = positions[edge2[0]]
                x4, y4 = positions[edge2[1]]

                # Using determinant method to check intersection
                def ccw(A, B, C):
                    return (C[1] - A[1]) * (B[0] - A[0]) > (B[1] - A[1]) * (C[0] - A[0])

                if (ccw((x1, y1), (x3, y3), (x4, y4)) != ccw((x2, y2), (x3, y3), (x4, y4)) and
                    ccw((x1, y1), (x2, y2), (x3, y3)) != ccw((x1, y1), (x2, y2), (x4, y4))):
                    crossings += 1
        return crossings

    def optimize_positions(positions, edge_list, iterations=1000):
        for _ in range(iterations):
            # Randomly pick a node and move it slightly
            node = random.choice(list(positions.keys()))
            old_position = positions[node]
            new_position = (old_position[0] + random.choice([-1, 0, 1]),
                            old_position[1] + random.choice([-1, 0, 1]))
            positions[node] = new_position

            # Calculate crossings with new position
            new_crossings = calculate_crossings(positions, edge_list)
            old_crossings = calculate_crossings({**positions, node: old_position}, edge_list)

            # Revert if crossings increase
            if new_crossings > old_crossings:
                positions[node] = old_position

    optimize_positions(positions, edge_list)

    # Step 5: Return positions in JSON format
    return json.dumps(positions, indent=4)

# Input edge list
edge_list = [
    (0, 1), (0, 3), (0, 7), (0, 10), (1, 2), (1, 7), (1, 9), (1, 13), (1, 18), (1, 19),
    (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 11), (2, 13), (2, 14), (2, 17), (2, 18),
    (2, 19), (3, 4), (3, 6), (3, 7), (3, 10), (3, 13), (3, 14), (3, 17), (3, 19), (4, 5),
    (4, 6), (4, 10), (4, 12), (4, 13), (4, 15), (4, 19), (5, 8), (5, 9), (5, 11), (5, 13),
    (5, 15), (5, 17), (5, 18), (5, 19), (6, 13), (6, 15), (6, 16), (6, 19), (6, 58), (6, 75),
    (7, 13), (7, 14), (7, 15), (7, 18), (7, 19), (8, 9), (8, 12), (8, 16), (8, 17), (9, 11),
    (9, 12), (9, 19), (9, 41), (10, 11), (10, 16), (10, 17), (11, 14), (11, 15), (11, 18),
    (11, 19), (11, 48), (11, 58), (12, 14), (12, 16), (12, 17), (12, 19), (13, 17), (13, 18),
    (14, 18), (14, 19), (15, 16), (15, 17), (16, 18), (16, 19), (17, 18), (17, 19), (17, 59),
    (19, 39), (20, 22), (20, 24), (20, 25), (20, 31), (20, 33), (20, 35), (20, 37), (20, 38),
    (21, 25), (21, 29), (21, 30), (21, 31), (21, 33), (21, 35), (21, 37), (21, 38), (22, 23),
    (22, 24), (22, 26), (22, 27), (22, 30), (22, 32), (22, 35), (22, 37), (22, 38), (23, 25),
    (23, 27), (23, 29), (23, 34), (23, 35), (23, 36), (23, 49), (24, 25), (24, 26), (24, 31),
    (24, 33), (24, 34), (24, 35), (25, 26), (25, 27), (25, 28), (25, 29), (25, 31), (25, 32),
    (25, 33), (25, 37), (25, 38), (25, 60), (26, 27), (26, 31), (27, 29), (27, 31), (27, 34),
    (27, 37), (28, 29), (28, 30), (28, 31), (28, 32), (28, 33), (28, 35), (29, 30), (29, 31),
    (29, 32), (29, 33), (30, 32), (30, 36), (30, 37), (31, 36), (31, 37), (32, 34), (32, 35),
    (32, 36), (32, 37), (33, 34), (33, 38), (34, 35), (34, 37), (34, 38), (39, 41), (39, 43),
    (39, 44), (39, 45), (39, 46), (39, 49), (39, 53), (39, 55), (39, 56), (40, 43), (40, 44),
    (40, 49), (40, 50), (40, 51), (40, 53), (40, 56), (40, 57), (41, 45), (41, 48), (41, 49),
    (41, 55), (41, 56), (42, 44), (42, 45), (42, 47), (42, 48), (42, 52), (42, 53), (42, 57),
    (43, 45), (43, 48), (43, 52), (43, 53), (43, 57), (44, 52), (44, 54), (45, 46), (45, 48),
    (45, 49), (45, 52), (45, 53), (45, 54), (45, 56), (46, 47), (46, 48), (46, 49), (46, 51),
    (46, 52), (46, 53), (46, 54), (47, 50), (47, 51), (47, 53), (47, 54), (47, 55), (47, 56),
    (48, 49), (48, 50), (48, 52), (48, 53), (48, 57), (49, 50), (49, 51), (49, 52), (49, 54),
    (49, 57), (50, 56), (50, 57), (50, 61), (51, 53), (51, 54), (52, 57), (52, 62), (53, 56),
    (53, 64), (54, 55), (55, 56), (58, 61), (58, 63), (58, 65), (58, 66), (58, 67), (58, 68),
    (58, 69), (58, 70), (58, 74), (58, 75), (59, 71), (59, 73), (59, 74), (60, 64), (60, 68),
    (60, 71), (60, 73), (61, 63), (61, 65), (61, 69), (61, 70), (61, 71), (62, 64), (62, 69),
    (62, 70), (62, 71), (62, 76), (63, 67), (63, 69), (63, 71), (63, 72), (63, 75), (64, 66),
    (64, 68), (64, 70), (64, 73), (64, 75), (65, 66), (65, 69), (66, 68), (66, 70), (66, 76),
    (67, 68), (67, 69), (67, 76), (68, 69), (68, 76), (69, 72), (69, 74), (70, 75), (71, 74),
    (72, 75), (74, 75)
]

# Generate layout
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

This script generates a layout for the graph and outputs the positions of nodes in JSON format. It uses a heuristic optimization approach to minimize edge crossings. Note that this method is not guaranteed to find the optimal layout but provides a reasonable approximation.