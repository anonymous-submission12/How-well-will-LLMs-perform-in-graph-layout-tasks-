Below is a Python script to generate a graph layout where the Euclidean distances between nodes are consistent with their graph-theoretic distances. The output of this script is saved as a JSON object containing the calculated positions.

```python
import json
import math
from collections import deque

def compute_graph_layout(edge_list):
    # Create adjacency list for the graph
    adjacency_list = {}
    for u, v in edge_list:
        if u not in adjacency_list:
            adjacency_list[u] = []
        if v not in adjacency_list:
            adjacency_list[v] = []
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)
    
    # Compute graph-theoretic distances using BFS
    def bfs_distance(root):
        visited = set()
        distance = {root: 0}
        queue = deque([root])
        while queue:
            node = queue.popleft()
            for neighbor in adjacency_list[node]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    distance[neighbor] = distance[node] + 1
                    queue.append(neighbor)
        return distance

    # Select a root node for the layout
    root = 0
    distances = bfs_distance(root)
    
    # Assign positions to nodes in a straight line based on their graph-theoretic distance
    # This will ensure Euclidean distance matches graph-theoretic distance
    scale = 1.0  # Adjust to scale graph if needed
    node_positions = {}
    for node, distance in distances.items():
        x = distance * scale
        y = 0  # For simplicity, graph is a straight line
        node_positions[node] = (x, y)
    
    return node_positions

# Input edge list
edge_list = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9),
             (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16),
             (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23),
             (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30),
             (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37),
             (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44),
             (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51),
             (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58),
             (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65),
             (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72),
             (72, 73), (73, 74), (74, 75), (75, 76), (76, 77)]

# Compute graph layout
layout = compute_graph_layout(edge_list)

# Export the layout to JSON
layout_json = json.dumps(layout, indent=4)
print(layout_json)
```

Here are the details of the output:
1. **Graph Layout**: Each node has `x` and `y` coordinates, where `x` corresponds to the node's graph-theoretic distance from the root node multiplied by a scale factor.
2. **Straight Line Assumption**: To simplify the logic and ensure that Euclidean distances strictly match graph-theoretic distances, nodes are laid out along a straight line.

You can run this script to get your graph layout in JSON format. Adjust the `scale` value for better spacing between nodes if necessary.