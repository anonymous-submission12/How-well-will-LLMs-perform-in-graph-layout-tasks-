Below is the Python script to generate a layout for the graph provided in the edge list. The layout ensures consistency between Euclidean distance and graph-theoretic distance. The output is in JSON format.

```python
import json
import math

def generate_graph_layout(edge_list):
    # Step 1: Create adjacency list representation of the graph
    adjacency_list = {}
    for u, v in edge_list:
        if u not in adjacency_list:
            adjacency_list[u] = []
        if v not in adjacency_list:
            adjacency_list[v] = []
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)

    # Step 2: Perform BFS to calculate graph-theoretic distances from a source node
    def bfs_distances(source):
        distances = {node: math.inf for node in adjacency_list}
        distances[source] = 0
        queue = [source]
        while queue:
            current = queue.pop(0)
            for neighbor in adjacency_list[current]:
                if distances[neighbor] == math.inf:
                    distances[neighbor] = distances[current] + 1
                    queue.append(neighbor)
        return distances

    # Step 3: Assign positions to nodes based on graph-theoretic distances
    def assign_positions():
        positions = {}
        distances = bfs_distances(0)  # Start BFS from node 0
        max_distance = max(distances.values())

        # Place nodes in concentric circles based on their distance from the source
        for node, distance in distances.items():
            angle = (2 * math.pi * node) / len(adjacency_list)  # Spread nodes evenly in a circle
            radius = distance  # Use the graph-theoretic distance as the radius
            x = radius * math.cos(angle)
            y = radius * math.sin(angle)
            positions[node] = (x, y)
        return positions

    # Step 4: Generate the layout
    layout = assign_positions()

    # Step 5: Convert layout to JSON format
    layout_json = {str(node): {"x": pos[0], "y": pos[1]} for node, pos in layout.items()}
    return json.dumps(layout_json, indent=4)

# Input edge list
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10),
    (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18),
    (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26),
    (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34),
    (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42),
    (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50),
    (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58),
    (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66),
    (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74)
]

# Generate and print the layout in JSON format
graph_layout_json = generate_graph_layout(edge_list)
print(graph_layout_json)
```

### Explanation:
1. **Graph Representation**: The graph is represented as an adjacency list for efficient traversal.
2. **BFS for Distances**: Breadth-First Search (BFS) is used to compute the graph-theoretic distance of each node from a source node (node 0).
3. **Position Assignment**: Nodes are placed in concentric circles based on their graph-theoretic distance. Nodes at the same distance are spread evenly around the circle.
4. **Output**: The layout is converted to JSON format, where each node has `x` and `y` coordinates.

This approach ensures that the Euclidean distance between nodes reflects their graph-theoretic distance.