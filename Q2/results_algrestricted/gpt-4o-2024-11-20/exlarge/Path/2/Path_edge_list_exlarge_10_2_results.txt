Below is the Python script to generate a layout for the given graph. The layout ensures consistency between Euclidean distance and graph-theoretic distance. The output is in JSON format.

```python
import json
import math

def generate_graph_layout(edge_list):
    # Create adjacency list
    adjacency_list = {}
    for u, v in edge_list:
        if u not in adjacency_list:
            adjacency_list[u] = []
        if v not in adjacency_list:
            adjacency_list[v] = []
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)

    # Perform BFS to calculate graph-theoretic distances from a root node
    def bfs_distances(root):
        distances = {root: 0}
        queue = [root]
        while queue:
            current = queue.pop(0)
            for neighbor in adjacency_list[current]:
                if neighbor not in distances:
                    distances[neighbor] = distances[current] + 1
                    queue.append(neighbor)
        return distances

    # Use BFS to calculate distances from node 0
    distances = bfs_distances(0)

    # Assign positions based on distances
    positions = {}
    angle_step = 2 * math.pi / len(distances)  # Spread nodes in a circular layout
    for node, distance in distances.items():
        angle = node * angle_step
        radius = distance  # Use graph-theoretic distance as radius
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        positions[node] = (x, y)

    # Convert positions to JSON format
    positions_json = json.dumps(positions, indent=4)
    return positions_json

# Input edge list
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10),
    (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18),
    (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26),
    (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34),
    (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42),
    (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50),
    (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58),
    (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66),
    (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74),
    (74, 75), (75, 76), (76, 77), (77, 78), (78, 79)
]

# Generate layout
layout_json = generate_graph_layout(edge_list)

# Print the layout in JSON format
print(layout_json)
```

### Explanation:
1. **Adjacency List**: The graph is represented as an adjacency list for efficient traversal.
2. **BFS for Distances**: Breadth-First Search (BFS) is used to calculate the graph-theoretic distance of each node from a root node (node 0).
3. **Position Assignment**: Nodes are placed in a circular layout, with the radius proportional to their graph-theoretic distance from the root. The angle is determined by evenly spacing nodes around the circle.
4. **Output**: The positions are output in JSON format, where each node is mapped to its `(x, y)` coordinates.

This approach ensures that the Euclidean distance between nodes reflects their graph-theoretic distance.