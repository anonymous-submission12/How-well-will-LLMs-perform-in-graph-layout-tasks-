Below is the Python script that generates a layout for the graph provided in the edge list while maintaining consistency between Euclidean distance and graph-theoretic distance. The generated layout will be output as a JSON object that maps node IDs to their respective coordinates.

```python
import json
import math

def calculate_layout(edges):
    # Step 1: Build adjacency list
    adjacency_list = {}
    for u, v in edges:
        if u not in adjacency_list:
            adjacency_list[u] = []
        if v not in adjacency_list:
            adjacency_list[v] = []
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)
    
    # Step 2: Perform BFS to calculate graph-theoretic distances from a reference node (node 0)
    distances = {}
    queue = [0]
    distances[0] = 0

    while queue:
        current = queue.pop(0)
        for neighbor in adjacency_list[current]:
            if neighbor not in distances:
                distances[neighbor] = distances[current] + 1
                queue.append(neighbor)
    
    # Step 3: Assign coordinates proportional to graph-theoretic distances in 2D space
    layout = {}
    for node, distance in distances.items():
        angle = (2 * math.pi / len(distances)) * node  # Spread nodes evenly in a circular pattern
        radius = distance  # Use the graph-theoretic distance as the radius
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        layout[node] = (x, y)
    
    return layout

# Edge list input
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), 
    (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), 
    (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), 
    (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), 
    (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), 
    (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), 
    (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), 
    (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), 
    (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), 
    (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), 
    (72, 73), (73, 74), (74, 75), (75, 76), (76, 77), (77, 78)
]

# Generate layout
layout = calculate_layout(edge_list)

# Output the layout in JSON format
layout_json = json.dumps(layout, indent=4)
print(layout_json)
```

### Explanation
1. **Graph Representation**: An adjacency list is constructed from the edge list for easy traversal.
2. **Breadth-First Search (BFS)**: BFS is used to compute the graph-theoretic distances of all nodes from node `0`.
3. **2D Layout**: Nodes are positioned in a circular pattern, with their radial distance proportional to the graph-theoretic distance. The angle for each node is distributed evenly around the circle.

### Output
The script calculates the 2D layout, with each node represented by `(x, y)` coordinates, and outputs the layout as a JSON object formatted with indentation for readability.