Below is the Python script to generate a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance. The script calculates positions for each node based on the graph-theoretic distance from a starting node and places them in a straight line for simplicity.

```python
import json

def generate_graph_layout(edge_list):
    # Create adjacency list representation of the graph
    graph = {}
    for u, v in edge_list:
        if u not in graph:
            graph[u] = []
        if v not in graph:
            graph[v] = []
        graph[u].append(v)
        graph[v].append(u)
    
    # Perform BFS to calculate graph-theoretic distances from node 0
    distances = {}
    visited = set()
    queue = [(0, 0)]  # (node, distance)
    
    while queue:
        current_node, current_distance = queue.pop(0)
        if current_node in visited:
            continue
        visited.add(current_node)
        distances[current_node] = current_distance
        for neighbor in graph[current_node]:
            if neighbor not in visited:
                queue.append((neighbor, current_distance + 1))
    
    # Generate positions based on graph-theoretic distances
    positions = {}
    for node, distance in distances.items():
        positions[node] = (distance, 0)  # Place nodes in a straight line along the x-axis
    
    # Convert positions to JSON format
    return json.dumps(positions, indent=4)

# Input edge list
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10),
    (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18),
    (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26),
    (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34),
    (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42),
    (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50),
    (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58),
    (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66),
    (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72)
]

# Generate layout
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Graph Representation**: The graph is represented as an adjacency list for efficient traversal.
2. **BFS for Distance Calculation**: Breadth-First Search (BFS) is used to calculate the graph-theoretic distance of each node from the starting node (node 0).
3. **Position Assignment**: Nodes are placed along the x-axis, with their x-coordinate equal to their graph-theoretic distance. The y-coordinate is fixed at 0 for simplicity.
4. **Output in JSON Format**: The positions are returned as a JSON object.

This ensures that the Euclidean distance between nodes corresponds to their graph-theoretic distance.