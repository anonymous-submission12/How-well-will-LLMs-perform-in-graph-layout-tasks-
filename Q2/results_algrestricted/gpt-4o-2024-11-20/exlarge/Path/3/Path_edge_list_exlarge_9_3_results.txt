Here is a Python script that generates a layout for the graph given in edge_list format. Since we are not allowed to use existing layout algorithms, the script manually calculates positions in an intelligently organized manner to minimize edge crossings. In this case, since the graph appears linear in structure, a simple arrangement of nodes in a straight line will minimize edge crossings.

```python
import json

def generate_layout(edge_list):
    # Determine all the nodes in the graph from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)

    # Generate positions for the nodes
    positions = {}
    for i, node in enumerate(sorted(nodes)):
        # Place nodes on a straight line, with equally spaced intervals
        positions[node] = {"x": i * 10, "y": 0}

    return positions

edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9),
    (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17),
    (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25),
    (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33),
    (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41),
    (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49),
    (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57),
    (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65),
    (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73),
    (73, 74), (74, 75), (75, 76), (76, 77), (77, 78)
]

layout = generate_layout(edge_list)

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Manual Position Calculation**: Nodes are arranged along a straight horizontal line (`y = 0`), with each node spaced apart by 10 units (`x = i * 10`). This minimizes edge crossings because all edges are sequential and don't overlap.
   
2. **Input Edge List**: The graph is processed to ensure all unique nodes are recognized from the edge list.

3. **JSON Output**: The final layout is output in JSON format for external use.

This strategy works well for linear graphs like the given example. In more complex graphs, a different manual approach would be crafted to minimize edge crossings.