Below is a Python script that generates a layout for the given graph using a custom heuristic to minimize edge crossings. The algorithm places the nodes sequentially along a grid-like structure to minimize edge overlap while ensuring it adheres to basic layout principles. The resulting layout is returned in JSON format.

```python
import json

def generate_layout(edge_list):
    # Step 1: Extract nodes
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    nodes = sorted(list(nodes))

    # Step 2: Create a unique layout for each node
    layout = {}
    grid_size = int(len(nodes)**0.5) + 1  # Define a grid-like layout
    
    for i, node in enumerate(nodes):
        # Place node on grid using a basic row-column coordinate system
        x = i % grid_size
        y = i // grid_size
        layout[node] = (x, y)

    # Step 3: Convert layout to JSON format
    layout_json = json.dumps(layout, indent=4)
    return layout_json

# Define the edge list (input graph)
edge_list = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), 
             (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), 
             (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), 
             (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), 
             (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), 
             (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), 
             (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), 
             (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), 
             (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), 
             (73, 74)]

# Generate layout for the graph
layout = generate_layout(edge_list)
print(layout)
```

### Explanation:
1. **Grid Layout:** Nodes are placed along a roughly square grid to minimize dense clustering and edge crossings. The nodes are assigned `(x, y)` coordinates based on their position index modulo and integer division by the grid size.
   
2. **Output Format:** The layout dictionary maps each node to its `(x, y)` position and is formatted as JSON for clarity and compatibility.

3. **Custom Heuristic:** The grid ensures that the edges connecting nodes will generally not cross frequently, given the linear nature of the input edge list.

You can use this code to generate positions for nodes, and the output will appear in JSON format.