To generate a layout for the graph that minimizes edge crossings without using existing graph layout algorithms, we can implement a simple heuristic. Since the graph provided is a linear chain (a path graph), we can arrange the nodes in a straight line or along a simple curve to minimize edge crossings. Below is the Python code to compute the layout and output it in JSON format:

```python
import json

def generate_graph_layout(edge_list):
    # Extract all unique nodes from the edge list
    nodes = sorted(set([node for edge in edge_list for node in edge]))
    
    # Generate positions for each node along a straight line
    # For simplicity, we place nodes at equal intervals along the x-axis
    layout = {node: (i, 0) for i, node in enumerate(nodes)}
    
    return layout

# Input edge list
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9),
    (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16),
    (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23),
    (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30),
    (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37),
    (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44),
    (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51),
    (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58),
    (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65),
    (65, 66), (66, 67), (67, 68), (68, 69), (69, 70)
]

# Generate the layout
layout = generate_graph_layout(edge_list)

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Node Extraction**: We extract all unique nodes from the edge list and sort them to ensure consistent ordering.
2. **Position Assignment**: Each node is assigned a position along the x-axis, with the y-coordinate fixed at 0. This ensures no edge crossings for a linear chain graph.
3. **Output**: The layout is output as a JSON object, where each node is mapped to its `(x, y)` position.

### Example Output:
For the given edge list, the output will look like this:
```json
{
    "0": [0, 0],
    "1": [1, 0],
    "2": [2, 0],
    "3": [3, 0],
    "4": [4, 0],
    "5": [5, 0],
    "6": [6, 0],
    "7": [7, 0],
    "8": [8, 0],
    "9": [9, 0],
    "10": [10, 0],
    ...
    "69": [69, 0],
    "70": [70, 0]
}
```

This layout minimizes edge crossings for the given graph structure.