Below is a Python script that generates a layout for the given graph. The layout minimizes edge crossings by arranging the nodes in a straight line, as the graph is a simple path (linear structure). The output is in JSON format, where each node is assigned a position in 2D space.

```python
import json

def generate_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = sorted(set([node for edge in edge_list for node in edge]))
    
    # Assign positions to nodes in a straight line (minimizing edge crossings)
    layout = {node: (i, 0) for i, node in enumerate(nodes)}
    
    return layout

# Input edge list
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10),
    (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18),
    (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26),
    (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34),
    (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42),
    (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50),
    (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58),
    (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66),
    (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72)
]

# Generate layout
layout = generate_layout(edge_list)

# Output layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Node Extraction**: The script extracts all unique nodes from the edge list and sorts them. This ensures that the nodes are processed in order.
2. **Position Assignment**: Each node is assigned a position `(i, 0)` where `i` is the index of the node in the sorted list. This places all nodes in a straight horizontal line, minimizing edge crossings.
3. **Output**: The layout is output in JSON format, where each node is mapped to its position.

### Example Output:
For the given edge list, the output will look like this:
```json
{
    "0": [0, 0],
    "1": [1, 0],
    "2": [2, 0],
    "3": [3, 0],
    "4": [4, 0],
    "5": [5, 0],
    "6": [6, 0],
    "7": [7, 0],
    "8": [8, 0],
    "9": [9, 0],
    "10": [10, 0],
    ...
    "71": [71, 0],
    "72": [72, 0]
}
```

This layout minimizes edge crossings because the graph is a simple path, and arranging nodes in a straight line ensures no edges cross.