Below is the Python script that computes a layout for the provided graph without using existing graph layout algorithms. It assumes the provided graph is essentially a path graph (as implied by the edge list), so a straightforward approach to minimize edge crossings is to place the nodes linearly in sequential order. The result is output in JSON format with each node assigned a (x, y) coordinate:

```python
import json

# Define the graph as an edge list
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10),
    (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), 
    (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), 
    (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), 
    (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), 
    (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), 
    (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), 
    (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), 
    (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74), 
    (74, 75)
]

def generate_linear_layout(edges):
    # Extract unique nodes from edges
    nodes = sorted(set(node for edge in edges for node in edge))
    
    # Assign each node a position along a line (minimizing edge crossings)
    layout = {node: (index, 0) for index, node in enumerate(nodes)}  # (x, y) coordinates
    return layout

if __name__ == "__main__":
    # Generate the linear layout
    layout = generate_linear_layout(edge_list)
    
    # Convert the layout dictionary to JSON format
    layout_json = json.dumps(layout, indent=4)
    print(layout_json)
```

### Explanation of the Script:
1. **Input Handling:** The edge list is used to derive a list of unique nodes.
2. **Layout Calculation:** Since minimizing crossings is straightforward for a path graph, nodes are laid out sequentially along the x-axis in the order of their labels.
   - Each node is placed at `(index, 0)` where `index` corresponds to its order in the sorted node list.
3. **Output JSON Format:** The layout positions of each node are returned in JavaScript Object Notation (JSON) format, which maps each node to its `(x, y)` coordinate.

### Sample Output:
For the input edge list, the script will generate output similar to this:
```json
{
    "0": [0, 0],
    "1": [1, 0],
    "2": [2, 0],
    "3": [3, 0],
    "4": [4, 0],
    "5": [5, 0],
    ...
    "74": [74, 0],
    "75": [75, 0]
}
```

This layout minimizes edge crossings as all nodes are placed sequentially in a straight line.