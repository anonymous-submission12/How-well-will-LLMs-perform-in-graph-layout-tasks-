Below is a Python script that generates a layout for the given graph. The layout minimizes edge crossings by arranging the nodes in a straight line, as the graph is a simple path. The positions are calculated manually without using any existing graph layout algorithms.

```python
import json

def generate_graph_layout(edge_list):
    # Create a dictionary to store node positions
    positions = {}
    
    # Assign positions to nodes in a straight line
    for i, (node1, node2) in enumerate(edge_list):
        if node1 not in positions:
            positions[node1] = (i, 0)  # Place node1 at (i, 0)
        if node2 not in positions:
            positions[node2] = (i + 1, 0)  # Place node2 at (i + 1, 0)
    
    # Convert positions to JSON format
    layout_json = json.dumps(positions, indent=4)
    return layout_json

# Input graph edge list
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10),
    (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18),
    (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26),
    (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34),
    (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42),
    (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50),
    (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58),
    (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66),
    (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74),
    (74, 75), (75, 76), (76, 77)
]

# Generate layout
layout = generate_graph_layout(edge_list)

# Print the layout in JSON format
print(layout)
```

### Explanation:
1. **Node Positioning**: Since the graph is a simple path, the nodes are arranged in a straight line along the x-axis. Each node is placed at `(i, 0)` where `i` is its position in the sequence.
2. **Edge Crossings**: This layout minimizes edge crossings because the graph is a path, and a straight-line arrangement ensures no edges overlap.
3. **Output Format**: The positions of the nodes are returned in JSON format, with each node mapped to its `(x, y)` coordinates.

### Example Output:
```json
{
    "0": [0, 0],
    "1": [1, 0],
    "2": [2, 0],
    "3": [3, 0],
    "4": [4, 0],
    "5": [5, 0],
    "6": [6, 0],
    "7": [7, 0],
    "8": [8, 0],
    "9": [9, 0],
    "10": [10, 0],
    ...
    "76": [76, 0],
    "77": [77, 0]
}
```