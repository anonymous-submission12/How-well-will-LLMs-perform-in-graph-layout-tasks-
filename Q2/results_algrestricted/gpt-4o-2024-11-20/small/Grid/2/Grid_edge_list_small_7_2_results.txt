To generate a layout for the given graph, we'll calculate positions such that the Euclidean distances of nodes in the layout are proportional to the graph-theoretic distances (shortest path lengths). Hereâ€™s Python code to achieve this:

```python
import json
import numpy as np
from collections import defaultdict, deque

def compute_shortest_path_lengths(edge_list, num_nodes):
    """Compute shortest path lengths for all nodes."""
    graph = defaultdict(list)
    for u, v in edge_list:
        graph[u].append(v)
        graph[v].append(u)

    shortest_paths = {}
    for start_node in range(num_nodes):
        queue = deque([(start_node, 0)])
        visited = set()
        shortest_paths[start_node] = {}

        while queue:
            node, distance = queue.popleft()
            if node in visited:
                continue
            visited.add(node)
            shortest_paths[start_node][node] = distance
            for neighbor in graph[node]:
                if neighbor not in visited:
                    queue.append((neighbor, distance + 1))

    return shortest_paths

def embed_graph_in_plane(shortest_paths, num_nodes):
    """Embed the graph in 2D plane while preserving shortest path lengths."""
    # Create a matrix representing pairwise graph-theoretic distances
    distances = np.zeros((num_nodes, num_nodes))
    for i in range(num_nodes):
        for j in range(num_nodes):
            distances[i][j] = shortest_paths[i].get(j, float('inf'))

    # Use classical multidimensional scaling (MDS) to derive positions
    # MDS minimizes stress between graph distances and Euclidean distances
    # Step 1: Convert distances into similarity matrix
    squared_distances = distances ** 2
    total_mean = np.mean(squared_distances)
    row_means = np.mean(squared_distances, axis=1)
    col_means = np.mean(squared_distances, axis=0)
    B_matrix = -0.5 * (squared_distances - row_means[:, None] - col_means[None, :] + total_mean)

    # Step 2: Perform eigen decomposition
    eigenvalues, eigenvectors = np.linalg.eigh(B_matrix)

    # Step 3: Take the top 2 eigenvectors for positions
    top_indices = np.argsort(eigenvalues)[-2:][::-1]
    top_eigenvectors = eigenvectors[:, top_indices]
    positions = top_eigenvectors * np.sqrt(eigenvalues[top_indices])

    # Normalize coordinates for better visualization
    min_coords = np.min(positions, axis=0)
    max_coords = np.max(positions, axis=0)
    normalized_positions = (positions - min_coords) / (max_coords - min_coords)

    # Return positions as a dictionary
    layout = {node: tuple(normalized_positions[node]) for node in range(num_nodes)}
    return layout

def generate_graph_layout(edge_list, num_nodes):
    """Main function to generate graph layout."""
    shortest_paths = compute_shortest_path_lengths(edge_list, num_nodes)
    layout = embed_graph_in_plane(shortest_paths, num_nodes)
    return layout

# Edge list input
edge_list = [
    (0, 1), (0, 7), (1, 2), (1, 8), (2, 3), (2, 9), (3, 4), (3, 10),
    (4, 5), (4, 11), (5, 6), (5, 12), (6, 13), (7, 8), (7, 14), (8, 9),
    (8, 15), (9, 10), (9, 16), (10, 11), (10, 17), (11, 12), (11, 18),
    (12, 13), (12, 19), (13, 20), (14, 15), (14, 21), (15, 16), (15, 22),
    (16, 17), (16, 23), (17, 18), (17, 24), (18, 19), (18, 25), (19, 20),
    (19, 26), (20, 27), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27)
]

# Number of nodes in the graph
num_nodes = 28

# Generate the layout
graph_layout = generate_graph_layout(edge_list, num_nodes)

# Output the layout in JSON format
print(json.dumps(graph_layout, indent=4))
```

### Explanation:
1. **Graph-Theoretic Distances**:
   - We compute shortest path lengths between all pairs of nodes using Breadth-First Search.

2. **Multidimensional Scaling (MDS)**:
   - Classical MDS ensures nodes are placed in 2D space such that Euclidean distances approximate graph-theoretic distances.

3. **Output Layout**:
   - The layout dictionary contains node IDs as keys and 2D positions (tuples) as values. Positions are normalized for convenience.

The above script outputs the layout in JSON format, which can be used for further analysis or visualization.