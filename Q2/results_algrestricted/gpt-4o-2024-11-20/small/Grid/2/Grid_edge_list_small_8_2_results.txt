To generate a layout for the graph while maintaining consistency between Euclidean distance and graph-theoretic distance, we can use a custom algorithm. The algorithm will compute positions for each node based on the shortest path distances between nodes and embed them in a 2D space using multidimensional scaling (MDS). Below is the Python script:

```python
import json
import numpy as np
from scipy.spatial.distance import squareform, pdist
from scipy.linalg import eigh

def generate_graph_layout(edge_list):
    # Step 1: Build adjacency matrix and compute shortest path distances
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = sorted(nodes)
    n = len(nodes)
    node_index = {node: i for i, node in enumerate(nodes)}

    # Initialize adjacency matrix
    adjacency_matrix = np.zeros((n, n))
    for u, v in edge_list:
        adjacency_matrix[node_index[u], node_index[v]] = 1
        adjacency_matrix[node_index[v], node_index[u]] = 1

    # Compute shortest path distances using Floyd-Warshall algorithm
    distance_matrix = np.full((n, n), np.inf)
    np.fill_diagonal(distance_matrix, 0)
    for u, v in edge_list:
        distance_matrix[node_index[u], node_index[v]] = 1
        distance_matrix[node_index[v], node_index[u]] = 1

    for k in range(n):
        for i in range(n):
            for j in range(n):
                distance_matrix[i, j] = min(distance_matrix[i, j], distance_matrix[i, k] + distance_matrix[k, j])

    # Step 2: Apply multidimensional scaling (MDS) to embed nodes in 2D space
    # Convert distance matrix to similarity matrix
    J = np.eye(n) - np.ones((n, n)) / n
    B = -0.5 * J @ (distance_matrix ** 2) @ J

    # Compute eigenvalues and eigenvectors
    eigenvalues, eigenvectors = eigh(B, subset_by_index=[n-2, n-1])
    positions = eigenvectors @ np.diag(np.sqrt(np.maximum(eigenvalues, 0)))

    # Extract 2D positions
    layout = {nodes[i]: positions[i, :2].tolist() for i in range(n)}

    # Step 3: Return layout in JSON format
    return json.dumps(layout, indent=4)

# Input graph edge list
edge_list = [
    (0, 1), (0, 14), (1, 2), (1, 15), (2, 3), (2, 16), (3, 4), (3, 17),
    (4, 5), (4, 18), (5, 6), (5, 19), (6, 7), (6, 20), (7, 8), (7, 21),
    (8, 9), (8, 22), (9, 10), (9, 23), (10, 11), (10, 24), (11, 12), (11, 25),
    (12, 13), (12, 26), (13, 27), (14, 15), (15, 16), (16, 17), (17, 18),
    (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25),
    (25, 26), (26, 27)
]

# Generate layout
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Adjacency Matrix**: The adjacency matrix represents connections between nodes.
2. **Shortest Path Distances**: The Floyd-Warshall algorithm computes the shortest path distances between all pairs of nodes.
3. **Multidimensional Scaling (MDS)**: MDS embeds the nodes in a 2D space by preserving pairwise distances as much as possible. This is done using eigen decomposition of the similarity matrix derived from the distance matrix.
4. **Output**: The final layout is returned as a JSON object, where each node is mapped to its 2D coordinates.

This script avoids using any existing graph layout algorithms and provides a custom implementation for generating the layout.