To create a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance without using existing layout algorithms, we can employ a force-directed approach from scratch. Below is the Python code for computing the layout and outputting it in JSON format:

```python
import json
import math
from collections import defaultdict


def compute_graph_layout(edge_list, num_iterations=100, learning_rate=0.01):
    # Step 1: Create adjacency list for the graph
    adjacency_list = defaultdict(list)
    for u, v in edge_list:
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)

    # Step 2: Initialize random positions for each node
    nodes = list(adjacency_list.keys())
    positions = {node: [random.uniform(0, 1), random.uniform(0, 1)] for node in nodes}

    # Step 3: Calculate graph-theoretic distance between nodes using BFS
    def bfs_distances(start_node):
        distances = {start_node: 0}
        queue = [start_node]
        while queue:
            current = queue.pop(0)
            for neighbor in adjacency_list[current]:
                if neighbor not in distances:
                    distances[neighbor] = distances[current] + 1
                    queue.append(neighbor)
        return distances

    graph_distances = {}
    for node in nodes:
        graph_distances[node] = bfs_distances(node)

    # Step 4: Force-directed layout computation
    for _ in range(num_iterations):
        force = {node: [0.0, 0.0] for node in nodes}

        for i in range(len(nodes)):
            for j in range(i + 1, len(nodes)):
                node1, node2 = nodes[i], nodes[j]

                # Graph-theoretic distance
                graph_distance = graph_distances[node1].get(node2, float('inf'))

                # Skip pairs without a valid graph distance
                if math.isinf(graph_distance):
                    continue

                # Euclidean positions
                pos1, pos2 = positions[node1], positions[node2]

                # Euclidean distance between the nodes
                dx = pos2[0] - pos1[0]
                dy = pos2[1] - pos1[1]
                euclidean_distance = math.sqrt(dx ** 2 + dy ** 2)

                if euclidean_distance == 0:
                    euclidean_distance = 1e-4  # Avoid division by zero

                # Calculate the ideal distance proportional to the graph-theoretic distance
                ideal_distance = graph_distance

                # Compute the discrepancy
                delta = euclidean_distance - ideal_distance

                # Apply forces to adjust positions
                fx = (delta / euclidean_distance) * dx
                fy = (delta / euclidean_distance) * dy

                # Update forces for both nodes
                force[node1][0] -= fx
                force[node1][1] -= fy
                force[node2][0] += fx
                force[node2][1] += fy

        # Update positions based on forces
        for node in nodes:
            positions[node][0] += learning_rate * force[node][0]
            positions[node][1] += learning_rate * force[node][1]

    # Step 5: Convert positions to JSON format
    layout = {node: {"x": positions[node][0], "y": positions[node][1]} for node in nodes}
    return json.dumps(layout, indent=4)


# Example graph data (edge list)
edge_list = [
    (0, 1), (0, 5), (1, 2), (1, 6), (2, 3), (2, 7), (3, 4), (3, 8), (4, 9),
    (5, 6), (5, 10), (6, 7), (6, 11), (7, 8), (7, 12), (8, 9), (8, 13), (9, 14),
    (10, 11), (10, 15), (11, 12), (11, 16), (12, 13), (12, 17), (13, 14), (13, 18),
    (14, 19), (15, 16), (15, 20), (16, 17), (16, 21), (17, 18), (17, 22), (18, 19),
    (18, 23), (19, 24), (20, 21), (21, 22), (22, 23), (23, 24)
]

# Run the layout computation
graph_layout_json = compute_graph_layout(edge_list)

# Print the layout in JSON format
print(graph_layout_json)
```

### Key Points
1. **Custom Force-Directed Approach**: This code implements a basic force-directed algorithm where nodes are pushed and pulled based on discrepancies between graph-theoretic and Euclidean distances.
2. **Output in JSON Format**: The positions of nodes are output as JSON objects containing "x" and "y" coordinates.
3. **Graph-Theoretic Distance via BFS**: Graph distances are computed using breadth-first search from each node.

This approach ensures the layout conforms to the principle of consistency between graph-theoretic and Euclidean distances without relying on external libraries' layout algorithms.