To generate a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance, we can use a custom algorithm. The algorithm will compute the shortest path distances between all pairs of nodes using the Floyd-Warshall algorithm, then embed the graph in a 2D space using multidimensional scaling (MDS). MDS minimizes the difference between graph-theoretic distances and Euclidean distances.

Here is the Python script:

```python
import json
import numpy as np
from scipy.spatial.distance import squareform
from scipy.optimize import minimize

def generate_graph_layout(edge_list):
    # Step 1: Extract nodes and initialize adjacency matrix
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = sorted(nodes)
    n = len(nodes)
    node_index = {node: i for i, node in enumerate(nodes)}
    
    # Initialize adjacency matrix
    adjacency_matrix = np.full((n, n), np.inf)
    np.fill_diagonal(adjacency_matrix, 0)
    for u, v in edge_list:
        adjacency_matrix[node_index[u], node_index[v]] = 1
        adjacency_matrix[node_index[v], node_index[u]] = 1
    
    # Step 2: Compute shortest path distances using Floyd-Warshall algorithm
    for k in range(n):
        for i in range(n):
            for j in range(n):
                adjacency_matrix[i, j] = min(adjacency_matrix[i, j], adjacency_matrix[i, k] + adjacency_matrix[k, j])
    
    # Step 3: Multidimensional scaling (MDS) to find 2D positions
    def stress_function(positions):
        positions = positions.reshape((n, 2))
        euclidean_distances = squareform(np.sqrt(np.sum((positions[:, None, :] - positions[None, :, :]) ** 2, axis=-1)))
        graph_distances = squareform(adjacency_matrix)
        return np.sum((euclidean_distances - graph_distances) ** 2)
    
    # Initialize random positions
    initial_positions = np.random.rand(n, 2)
    result = minimize(stress_function, initial_positions.flatten(), method='L-BFGS-B')
    final_positions = result.x.reshape((n, 2))
    
    # Step 4: Convert positions to JSON format
    layout = {node: final_positions[node_index[node]].tolist() for node in nodes}
    return json.dumps(layout, indent=4)

# Input graph data
edge_list = [
    (0, 1), (0, 10), (1, 2), (1, 11), (2, 3), (2, 12), (3, 4), (3, 13), (4, 5), (4, 14),
    (5, 6), (5, 15), (6, 7), (6, 16), (7, 8), (7, 17), (8, 9), (8, 18), (9, 19), (10, 11),
    (10, 20), (11, 12), (11, 21), (12, 13), (12, 22), (13, 14), (13, 23), (14, 15), (14, 24),
    (15, 16), (15, 25), (16, 17), (16, 26), (17, 18), (17, 27), (18, 19), (18, 28), (19, 29),
    (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29)
]

# Generate layout
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Adjacency Matrix**: The graph is represented as an adjacency matrix, where the value at `(i, j)` is the weight of the edge between nodes `i` and `j`. For unweighted graphs, the weight is `1`.

2. **Shortest Path Distances**: The Floyd-Warshall algorithm computes the shortest path distances between all pairs of nodes.

3. **Multidimensional Scaling (MDS)**: Positions in 2D space are optimized to minimize the difference between graph-theoretic distances and Euclidean distances.

4. **Output**: The final positions of nodes are returned in JSON format.

This script does not use any existing graph layout algorithms and adheres to the requirements.