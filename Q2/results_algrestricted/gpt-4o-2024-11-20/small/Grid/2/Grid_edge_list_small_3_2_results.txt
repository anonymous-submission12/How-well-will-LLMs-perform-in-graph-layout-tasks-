Below is the Python script to generate a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance. The script uses a custom algorithm to compute positions based on graph-theoretic distances.

```python
import json
import numpy as np
from collections import defaultdict, deque

def compute_graph_layout(edge_list):
    # Step 1: Build adjacency list
    adjacency_list = defaultdict(list)
    for u, v in edge_list:
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)

    # Step 2: Compute graph-theoretic distances using BFS
    def bfs_distances(start_node):
        distances = {}
        queue = deque([(start_node, 0)])
        visited = set()
        while queue:
            node, dist = queue.popleft()
            if node not in visited:
                visited.add(node)
                distances[node] = dist
                for neighbor in adjacency_list[node]:
                    if neighbor not in visited:
                        queue.append((neighbor, dist + 1))
        return distances

    # Compute all-pairs shortest paths
    all_distances = {}
    for node in adjacency_list:
        all_distances[node] = bfs_distances(node)

    # Step 3: Use Multidimensional Scaling (MDS) to compute positions
    nodes = list(adjacency_list.keys())
    n = len(nodes)
    distance_matrix = np.zeros((n, n))
    for i, node_i in enumerate(nodes):
        for j, node_j in enumerate(nodes):
            distance_matrix[i, j] = all_distances[node_i][node_j]

    # Double-center the distance matrix
    J = np.eye(n) - np.ones((n, n)) / n
    B = -0.5 * J @ (distance_matrix ** 2) @ J

    # Compute eigenvalues and eigenvectors
    eigvals, eigvecs = np.linalg.eigh(B)

    # Select the top two eigenvectors corresponding to the largest eigenvalues
    idx = np.argsort(eigvals)[::-1]
    top_eigvecs = eigvecs[:, idx[:2]]

    # Compute positions
    positions = {nodes[i]: top_eigvecs[i].tolist() for i in range(n)}

    return positions

# Input graph data
edge_list = [
    (0, 1), (0, 12), (1, 2), (1, 13), (2, 3), (2, 14), (3, 4), (3, 15),
    (4, 5), (4, 16), (5, 6), (5, 17), (6, 7), (6, 18), (7, 8), (7, 19),
    (8, 9), (8, 20), (9, 10), (9, 21), (10, 11), (10, 22), (11, 23),
    (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19),
    (19, 20), (20, 21), (21, 22), (22, 23)
]

# Generate layout
layout = compute_graph_layout(edge_list)

# Output layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph-Theoretic Distance Calculation**: The script uses BFS to compute the shortest path distances between all pairs of nodes.
2. **Multidimensional Scaling (MDS)**: The script applies MDS to embed the graph into a 2D space while preserving the graph-theoretic distances as closely as possible.
3. **Output**: The positions of nodes are returned in JSON format, where each node is mapped to its 2D coordinates.

You can run this script to generate the layout for the given graph.