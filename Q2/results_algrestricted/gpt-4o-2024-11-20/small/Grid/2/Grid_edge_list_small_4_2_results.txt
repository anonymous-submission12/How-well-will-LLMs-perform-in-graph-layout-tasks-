To generate a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance, we can use a custom algorithm based on multidimensional scaling (MDS). MDS is a technique that attempts to place nodes in a space such that the pairwise Euclidean distances between nodes approximate their graph-theoretic distances.

Below is the Python script to compute the layout and output it in JSON format:

```python
import json
import numpy as np
from scipy.spatial.distance import squareform
from scipy.optimize import minimize

def compute_graph_layout(edge_list):
    # Step 1: Build adjacency matrix and compute shortest path distances
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = sorted(nodes)
    n = len(nodes)
    node_index = {node: i for i, node in enumerate(nodes)}
    
    # Initialize adjacency matrix
    adjacency_matrix = np.full((n, n), np.inf)
    for i in range(n):
        adjacency_matrix[i, i] = 0  # Distance to self is 0
    
    for u, v in edge_list:
        adjacency_matrix[node_index[u], node_index[v]] = 1
        adjacency_matrix[node_index[v], node_index[u]] = 1
    
    # Compute shortest path distances using Floyd-Warshall algorithm
    for k in range(n):
        for i in range(n):
            for j in range(n):
                adjacency_matrix[i, j] = min(adjacency_matrix[i, j], adjacency_matrix[i, k] + adjacency_matrix[k, j])
    
    # Step 2: Multidimensional scaling (MDS)
    # Convert distances to condensed form for optimization
    condensed_distances = squareform(adjacency_matrix)
    
    # Objective function for MDS
    def stress_function(positions):
        positions = positions.reshape((n, 2))
        euclidean_distances = squareform(np.sqrt(np.sum((positions[:, None, :] - positions[None, :, :]) ** 2, axis=-1)))
        return np.sum((euclidean_distances - condensed_distances) ** 2)
    
    # Initialize positions randomly
    initial_positions = np.random.rand(n, 2)
    
    # Optimize positions to minimize stress
    result = minimize(stress_function, initial_positions.flatten(), method='L-BFGS-B')
    final_positions = result.x.reshape((n, 2))
    
    # Step 3: Output positions in JSON format
    layout = {node: final_positions[node_index[node]].tolist() for node in nodes}
    return json.dumps(layout, indent=4)

# Input graph data
edge_list = [
    (0, 1), (0, 15), (1, 2), (1, 16), (2, 3), (2, 17), (3, 4), (3, 18),
    (4, 5), (4, 19), (5, 6), (5, 20), (6, 7), (6, 21), (7, 8), (7, 22),
    (8, 9), (8, 23), (9, 10), (9, 24), (10, 11), (10, 25), (11, 12), (11, 26),
    (12, 13), (12, 27), (13, 14), (13, 28), (14, 29), (15, 16), (16, 17),
    (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24),
    (24, 25), (25, 26), (26, 27), (27, 28), (28, 29)
]

# Generate layout
layout_json = compute_graph_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Adjacency Matrix**: The adjacency matrix is constructed to represent the graph, and the shortest path distances are computed using the Floyd-Warshall algorithm.
2. **Multidimensional Scaling (MDS)**: The `stress_function` minimizes the difference between graph-theoretic distances and Euclidean distances in the layout.
3. **Optimization**: The `scipy.optimize.minimize` function is used to find the optimal positions for nodes in 2D space.
4. **Output**: The final positions are returned in JSON format.

This script ensures that the Euclidean distances in the layout are consistent with the graph-theoretic distances.