Below is the Python script to generate a layout for the given graph. The layout ensures consistency between Euclidean distance and graph-theoretic distance. The script uses a force-directed algorithm implemented from scratch to determine the positions of the nodes.

```python
import json
import math
import random
from collections import defaultdict

def generate_graph_layout(edge_list, iterations=1000, k=1, damping=0.85):
    # Initialize positions randomly
    nodes = set()
    for u, v in edge_list:
        nodes.add(u)
        nodes.add(v)
    positions = {node: (random.uniform(0, 1), random.uniform(0, 1)) for node in nodes}

    # Build adjacency list
    adjacency_list = defaultdict(list)
    for u, v in edge_list:
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)

    # Compute graph-theoretic distances using BFS
    def bfs_distances(start_node):
        distances = {node: float('inf') for node in nodes}
        distances[start_node] = 0
        queue = [start_node]
        while queue:
            current = queue.pop(0)
            for neighbor in adjacency_list[current]:
                if distances[neighbor] == float('inf'):
                    distances[neighbor] = distances[current] + 1
                    queue.append(neighbor)
        return distances

    graph_distances = {node: bfs_distances(node) for node in nodes}

    # Force-directed layout algorithm
    for _ in range(iterations):
        # Compute repulsive forces
        forces = {node: [0, 0] for node in nodes}
        for u in nodes:
            for v in nodes:
                if u != v:
                    dx = positions[u][0] - positions[v][0]
                    dy = positions[u][1] - positions[v][1]
                    distance = math.sqrt(dx**2 + dy**2) + 1e-6  # Avoid division by zero
                    repulsive_force = k**2 / distance
                    forces[u][0] += (dx / distance) * repulsive_force
                    forces[u][1] += (dy / distance) * repulsive_force

        # Compute attractive forces
        for u, v in edge_list:
            dx = positions[u][0] - positions[v][0]
            dy = positions[u][1] - positions[v][1]
            distance = math.sqrt(dx**2 + dy**2) + 1e-6  # Avoid division by zero
            ideal_distance = graph_distances[u][v] * k
            attractive_force = (distance - ideal_distance) / distance
            forces[u][0] -= (dx / distance) * attractive_force
            forces[u][1] -= (dy / distance) * attractive_force
            forces[v][0] += (dx / distance) * attractive_force
            forces[v][1] += (dy / distance) * attractive_force

        # Update positions
        for node in nodes:
            positions[node] = (
                positions[node][0] + damping * forces[node][0],
                positions[node][1] + damping * forces[node][1]
            )

    # Convert positions to JSON format
    layout = {node: {"x": positions[node][0], "y": positions[node][1]} for node in nodes}
    return json.dumps(layout, indent=2)

# Input graph data
edge_list = [
    (0, 1), (0, 6), (1, 2), (1, 7), (2, 3), (2, 8), (3, 4), (3, 9), (4, 5), (4, 10), (5, 11),
    (6, 7), (6, 12), (7, 8), (7, 13), (8, 9), (8, 14), (9, 10), (9, 15), (10, 11), (10, 16),
    (11, 17), (12, 13), (12, 18), (13, 14), (13, 19), (14, 15), (14, 20), (15, 16), (15, 21),
    (16, 17), (16, 22), (17, 23), (18, 19), (18, 24), (19, 20), (19, 25), (20, 21), (20, 26),
    (21, 22), (21, 27), (22, 23), (22, 28), (23, 29), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29)
]

# Generate layout
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Initialization**: Nodes are assigned random initial positions in a 2D space.
2. **Graph-Theoretic Distance**: BFS is used to compute the shortest path (graph-theoretic distance) between all pairs of nodes.
3. **Force-Directed Algorithm**:
   - **Repulsive Forces**: Nodes repel each other based on their Euclidean distance.
   - **Attractive Forces**: Connected nodes attract each other based on the difference between their Euclidean distance and graph-theoretic distance.
4. **Position Update**: Node positions are updated iteratively based on the computed forces.
5. **Output**: The final positions are returned in JSON format.

This script avoids using any pre-built layout algorithms and adheres to the requirement of maintaining consistency between Euclidean and graph-theoretic distances.