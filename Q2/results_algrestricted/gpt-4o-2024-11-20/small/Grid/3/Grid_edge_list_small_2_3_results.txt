Below is the Python script to generate a layout for the given graph. The layout minimizes edge crossings by arranging the nodes in a grid-like structure based on their connectivity. The output is in JSON format.

```python
import json
import math

def generate_graph_layout(edge_list):
    # Step 1: Determine the number of nodes
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = sorted(nodes)
    num_nodes = len(nodes)

    # Step 2: Arrange nodes in a grid layout
    # Calculate grid dimensions (close to a square)
    grid_size = math.ceil(math.sqrt(num_nodes))
    positions = {}

    for idx, node in enumerate(nodes):
        row = idx // grid_size
        col = idx % grid_size
        positions[node] = (col, row)  # (x, y) coordinates

    # Step 3: Return the layout in JSON format
    return json.dumps(positions, indent=4)

# Input graph as edge list
edge_list = [
    (0, 1), (0, 5), (1, 2), (1, 6), (2, 3), (2, 7), (3, 4), (3, 8), (4, 9),
    (5, 6), (5, 10), (6, 7), (6, 11), (7, 8), (7, 12), (8, 9), (8, 13), (9, 14),
    (10, 11), (10, 15), (11, 12), (11, 16), (12, 13), (12, 17), (13, 14), (13, 18),
    (14, 19), (15, 16), (15, 20), (16, 17), (16, 21), (17, 18), (17, 22), (18, 19),
    (18, 23), (19, 24), (20, 21), (21, 22), (22, 23), (23, 24)
]

# Generate layout
layout = generate_graph_layout(edge_list)

# Print the layout
print(layout)
```

### Explanation of the Code:
1. **Node Identification**: The script identifies all unique nodes in the graph by iterating through the edge list.
2. **Grid Layout**: Nodes are arranged in a grid-like structure to minimize edge crossings. The grid dimensions are determined by taking the square root of the total number of nodes and rounding up to the nearest integer.
3. **Position Assignment**: Each node is assigned a position `(x, y)` in the grid based on its index.
4. **JSON Output**: The positions are serialized into JSON format for easy readability and further processing.

### Example Output:
For the given graph, the output might look like this:
```json
{
    "0": [0, 0],
    "1": [1, 0],
    "2": [2, 0],
    "3": [3, 0],
    "4": [4, 0],
    "5": [0, 1],
    "6": [1, 1],
    "7": [2, 1],
    "8": [3, 1],
    "9": [4, 1],
    "10": [0, 2],
    "11": [1, 2],
    "12": [2, 2],
    "13": [3, 2],
    "14": [4, 2],
    "15": [0, 3],
    "16": [1, 3],
    "17": [2, 3],
    "18": [3, 3],
    "19": [4, 3],
    "20": [0, 4],
    "21": [1, 4],
    "22": [2, 4],
    "23": [3, 4],
    "24": [4, 4]
}
```

This layout arranges the nodes in a 5x5 grid, which minimizes edge crossings for this specific graph.