Below is the Python script to generate a layout for the given graph. The layout minimizes edge crossings by arranging the nodes in a grid-like structure based on their connectivity. The output is provided in JSON format.

```python
import json
import math

def generate_layout(edge_list):
    # Step 1: Identify all nodes in the graph
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = sorted(nodes)  # Sort nodes for consistent ordering

    # Step 2: Determine grid dimensions (approximate square layout)
    num_nodes = len(nodes)
    grid_size = math.ceil(math.sqrt(num_nodes))  # Grid size (rows/columns)

    # Step 3: Assign positions to nodes in a grid
    positions = {}
    for idx, node in enumerate(nodes):
        row = idx // grid_size
        col = idx % grid_size
        positions[node] = (col, row)  # (x, y) position

    # Step 4: Return positions as JSON
    return json.dumps(positions, indent=4)

# Input graph as edge list
edge_list = [
    (0, 1), (0, 10), (1, 2), (1, 11), (2, 3), (2, 12), (3, 4), (3, 13),
    (4, 5), (4, 14), (5, 6), (5, 15), (6, 7), (6, 16), (7, 8), (7, 17),
    (8, 9), (8, 18), (9, 19), (10, 11), (10, 20), (11, 12), (11, 21),
    (12, 13), (12, 22), (13, 14), (13, 23), (14, 15), (14, 24), (15, 16),
    (15, 25), (16, 17), (16, 26), (17, 18), (17, 27), (18, 19), (18, 28),
    (19, 29), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26),
    (26, 27), (27, 28), (28, 29)
]

# Generate layout
layout = generate_layout(edge_list)

# Print the layout
print(layout)
```

### Explanation of the Code:
1. **Node Identification**: The script first identifies all unique nodes in the graph by iterating through the edge list.
2. **Grid Dimensions**: It calculates the grid size as the square root of the number of nodes, rounded up to the nearest integer. This ensures a roughly square layout.
3. **Node Positioning**: Nodes are assigned positions in a grid, with each node placed in a row-column format based on its index.
4. **Output**: The positions are returned as a JSON-formatted string.

### Example Output:
For the given graph, the output might look like this:
```json
{
    "0": [0, 0],
    "1": [1, 0],
    "2": [2, 0],
    "3": [3, 0],
    "4": [4, 0],
    "5": [5, 0],
    "6": [0, 1],
    "7": [1, 1],
    "8": [2, 1],
    "9": [3, 1],
    "10": [4, 1],
    "11": [5, 1],
    "12": [0, 2],
    "13": [1, 2],
    "14": [2, 2],
    "15": [3, 2],
    "16": [4, 2],
    "17": [5, 2],
    "18": [0, 3],
    "19": [1, 3],
    "20": [2, 3],
    "21": [3, 3],
    "22": [4, 3],
    "23": [5, 3],
    "24": [0, 4],
    "25": [1, 4],
    "26": [2, 4],
    "27": [3, 4],
    "28": [4, 4],
    "29": [5, 4]
}
```

This layout minimizes edge crossings by arranging nodes in a structured grid.