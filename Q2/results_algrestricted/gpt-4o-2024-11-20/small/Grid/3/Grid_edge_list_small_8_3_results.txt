Below is a Python script that generates a layout for the given graph while attempting to minimize edge crossings. The script uses a custom algorithm to assign positions to nodes based on their connectivity and structure. The final output is a JSON representation of the graph layout.

```python
import json

def generate_graph_layout(edge_list):
    # Step 1: Create adjacency list representation of the graph
    adjacency_list = {}
    for edge in edge_list:
        u, v = edge
        if u not in adjacency_list:
            adjacency_list[u] = []
        if v not in adjacency_list:
            adjacency_list[v] = []
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)

    # Step 2: Assign positions to nodes
    # We'll use a simple grid-based layout to minimize edge crossings
    positions = {}
    visited = set()
    current_x, current_y = 0, 0
    step_x, step_y = 1, 1  # Step size for grid layout

    def dfs(node, x, y):
        """Depth-first search to assign positions to nodes."""
        if node in visited:
            return
        visited.add(node)
        positions[node] = (x, y)
        neighbors = adjacency_list[node]
        for i, neighbor in enumerate(neighbors):
            if neighbor not in visited:
                # Spread neighbors around the current node
                dfs(neighbor, x + step_x * (i + 1), y + step_y * (i + 1))

    # Start DFS from the first node in the edge list
    if edge_list:
        start_node = edge_list[0][0]
        dfs(start_node, current_x, current_y)

    # Step 3: Convert positions to JSON format
    layout_json = json.dumps(positions, indent=4)
    return layout_json

# Input graph data
edge_list = [
    (0, 1), (0, 14), (1, 2), (1, 15), (2, 3), (2, 16), (3, 4), (3, 17),
    (4, 5), (4, 18), (5, 6), (5, 19), (6, 7), (6, 20), (7, 8), (7, 21),
    (8, 9), (8, 22), (9, 10), (9, 23), (10, 11), (10, 24), (11, 12), (11, 25),
    (12, 13), (12, 26), (13, 27), (14, 15), (15, 16), (16, 17), (17, 18),
    (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25),
    (25, 26), (26, 27)
]

# Generate layout
layout = generate_graph_layout(edge_list)
print(layout)
```

### Explanation:
1. **Adjacency List**: The graph is represented as an adjacency list for efficient traversal.
2. **DFS-Based Layout**: A depth-first search (DFS) is used to traverse the graph and assign positions to nodes. The positions are spread out in a grid-like manner to reduce edge crossings.
3. **JSON Output**: The final positions of nodes are output in JSON format.

### Output Example:
The output will look like this (positions are illustrative and depend on the graph structure):
```json
{
    "0": [0, 0],
    "1": [1, 1],
    "14": [2, 2],
    "2": [2, 2],
    "15": [3, 3],
    ...
}
```

This script avoids using any existing graph layout algorithms and provides a custom solution for generating node positions.