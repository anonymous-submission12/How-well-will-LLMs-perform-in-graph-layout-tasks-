Below is the Python script to generate a layout for the given graph. The layout minimizes edge crossings by implementing a basic force-directed algorithm from scratch. The final output is the graph layout in JSON format.

```python
import json
import math
from collections import defaultdict

def generate_layout(edge_list, iterations=1000, width=1000, height=1000, repulsion=1000, attraction=0.1):
    # Initialize positions randomly within the given width and height
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    positions = {node: [width * 0.5, height * 0.5] for node in nodes}
    
    # Initialize forces
    def distance(pos1, pos2):
        return math.sqrt((pos1[0] - pos2[0]) ** 2 + (pos1[1] - pos2[1]) ** 2)

    def apply_repulsion():
        forces = {node: [0, 0] for node in nodes}
        for node1 in nodes:
            for node2 in nodes:
                if node1 != node2:
                    dx = positions[node1][0] - positions[node2][0]
                    dy = positions[node1][1] - positions[node2][1]
                    dist = max(distance(positions[node1], positions[node2]), 0.01)
                    force = repulsion / dist ** 2
                    forces[node1][0] += force * dx / dist
                    forces[node1][1] += force * dy / dist
        return forces

    def apply_attraction():
        forces = {node: [0, 0] for node in nodes}
        for edge in edge_list:
            node1, node2 = edge
            dx = positions[node2][0] - positions[node1][0]
            dy = positions[node2][1] - positions[node1][1]
            dist = max(distance(positions[node1], positions[node2]), 0.01)
            force = attraction * dist
            forces[node1][0] += force * dx / dist
            forces[node1][1] += force * dy / dist
            forces[node2][0] -= force * dx / dist
            forces[node2][1] -= force * dy / dist
        return forces

    # Iteratively adjust positions
    for _ in range(iterations):
        repulsion_forces = apply_repulsion()
        attraction_forces = apply_attraction()
        for node in nodes:
            positions[node][0] += repulsion_forces[node][0] + attraction_forces[node][0]
            positions[node][1] += repulsion_forces[node][1] + attraction_forces[node][1]
            # Keep nodes within bounds
            positions[node][0] = min(max(0, positions[node][0]), width)
            positions[node][1] = min(max(0, positions[node][1]), height)

    # Convert positions to JSON format
    layout = {node: {"x": positions[node][0], "y": positions[node][1]} for node in nodes}
    return json.dumps(layout, indent=2)

# Input graph data
edge_list = [
    (0, 1), (0, 7), (1, 2), (1, 8), (2, 3), (2, 9), (3, 4), (3, 10), (4, 5), (4, 11), 
    (5, 6), (5, 12), (6, 13), (7, 8), (7, 14), (8, 9), (8, 15), (9, 10), (9, 16), 
    (10, 11), (10, 17), (11, 12), (11, 18), (12, 13), (12, 19), (13, 20), (14, 15), 
    (14, 21), (15, 16), (15, 22), (16, 17), (16, 23), (17, 18), (17, 24), (18, 19), 
    (18, 25), (19, 20), (19, 26), (20, 27), (21, 22), (22, 23), (23, 24), (24, 25), 
    (25, 26), (26, 27)
]

# Generate layout
layout_json = generate_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Initialization**:
   - Nodes are initialized with random positions within a defined width and height.
   - Forces are calculated for repulsion (between all nodes) and attraction (between connected nodes).

2. **Force Calculation**:
   - Repulsion is inversely proportional to the square of the distance between nodes.
   - Attraction is proportional to the distance between connected nodes.

3. **Position Updates**:
   - Node positions are updated iteratively based on the forces.
   - Nodes are constrained to remain within the defined bounds.

4. **Output**:
   - The final positions of the nodes are output in JSON format.

This script avoids using any existing graph layout algorithms and provides a custom implementation of a force-directed layout.