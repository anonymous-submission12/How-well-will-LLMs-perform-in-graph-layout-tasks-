Below is the Python code to generate a graph layout in JSON format. The algorithm is created from scratch and does not utilize any existing graph layout functions. It uses a simple force-directed approach with iterative refinements to minimize edge crossings.

```python
import json
import math
from collections import defaultdict

def apply_forces(nodes, edges, pos, width=500, height=500, iterations=100, cooling_factor=0.95):
    """
    Simple force-directed algorithm to position graph nodes.
    """
    def distance(node1, node2):
        return math.sqrt((pos[node1][0] - pos[node2][0]) ** 2 + (pos[node1][1] - pos[node2][1]) ** 2)

    def repulsion_force(node1, node2):
        dist = distance(node1, node2)
        if dist == 0:
            dist = 0.01
        force = k ** 2 / dist
        return force

    def attraction_force(edge_node1, edge_node2):
        dist = distance(edge_node1, edge_node2)
        force = (dist ** 2) / k
        return force

    area = width * height
    k = math.sqrt(area / len(nodes))  # Optimal distance between nodes
    t = width / 10  # Initial temperature

    for _ in range(iterations):
        # Calculate repulsion forces
        displacement = {node: [0, 0] for node in nodes}
        for i in nodes:
            for j in nodes:
                if i != j:
                    dx = pos[i][0] - pos[j][0]
                    dy = pos[i][1] - pos[j][1]
                    dist = math.sqrt(dx ** 2 + dy ** 2) + 0.01
                    force = repulsion_force(i, j)
                    displacement[i][0] += (dx / dist) * force
                    displacement[i][1] += (dy / dist) * force

        # Calculate attraction forces
        for edge in edges:
            u, v = edge
            dx = pos[u][0] - pos[v][0]
            dy = pos[u][1] - pos[v][1]
            dist = math.sqrt(dx ** 2 + dy ** 2) + 0.01
            force = attraction_force(u, v)
            displacement[u][0] -= (dx / dist) * force
            displacement[u][1] -= (dy / dist) * force
            displacement[v][0] += (dx / dist) * force
            displacement[v][1] += (dy / dist) * force

        # Update positions
        for node in nodes:
            dx, dy = displacement[node]
            dist = math.sqrt(dx ** 2 + dy ** 2)
            if dist > 0:
                pos[node][0] += (dx / dist) * min(t, dist)
                pos[node][1] += (dy / dist) * min(t, dist)

            # Ensure nodes stay within bounds
            pos[node][0] = min(width, max(0, pos[node][0]))
            pos[node][1] = min(height, max(0, pos[node][1]))

        # Cool down temperature
        t *= cooling_factor

    return pos

def generate_graph_layout(edgelist):
    # Extract nodes
    nodes = set()
    for u, v in edgelist:
        nodes.add(u)
        nodes.add(v)
    nodes = list(nodes)

    # Initialize positions randomly within a 500x500 area
    pos = {node: [i * 50 % 500, i * 50 % 500] for i, node in enumerate(nodes)}

    # Apply forces to minimize edge crossings
    pos = apply_forces(nodes, edgelist, pos)

    return pos

def main():
    # Input graph as an edgelist
    edgelist = [(0, 1), (0, 15), (1, 2), (1, 16), (2, 3), (2, 17), (3, 4), (3, 18), (4, 5), (4, 19), 
                (5, 6), (5, 20), (6, 7), (6, 21), (7, 8), (7, 22), (8, 9), (8, 23), (9, 10), (9, 24), 
                (10, 11), (10, 25), (11, 12), (11, 26), (12, 13), (12, 27), (13, 14), (13, 28), (14, 29), 
                (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), 
                (24, 25), (25, 26), (26, 27), (27, 28), (28, 29)]
    
    # Generate layout
    layout = generate_graph_layout(edgelist)
    
    # Output layout in JSON format
    print(json.dumps(layout, indent=2))

if __name__ == "__main__":
    main()
```