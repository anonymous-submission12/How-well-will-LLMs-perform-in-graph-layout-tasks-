Below is a Python script to generate a layout for the graph provided using a simple algorithm that attempts to minimize edge crossings. The algorithm places the nodes in layers based on their connections, assigns horizontal positions sequentially within layers, and outputs the node positions as JSON in the desired format.

```python
import json

def generate_layout(edge_list):
    # Step 1: Create adjacency list representation of the graph
    adjacency_list = {}
    for edge in edge_list:
        u, v = edge
        if u not in adjacency_list:
            adjacency_list[u] = []
        if v not in adjacency_list:
            adjacency_list[v] = []
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)

    # Step 2: Determine layers using a BFS-like approach
    def bfs_layers(start_node):
        visited = set()
        layers = {}
        current_layer = [start_node]
        layer_index = 0
        while current_layer:
            next_layer = []
            for node in current_layer:
                if node not in visited:
                    visited.add(node)
                    layers[node] = layer_index
                    next_layer.extend([neighbor for neighbor in adjacency_list[node] if neighbor not in visited])
            current_layer = next_layer
            layer_index += 1
        return layers

    # Start BFS from an arbitrary node, e.g., node 0
    layers = bfs_layers(0)

    # Step 3: Arrange nodes within layers
    layer_positions = {}
    for node, layer in layers.items():
        if layer not in layer_positions:
            layer_positions[layer] = []
        layer_positions[layer].append(node)

    # Sort nodes within layers for neat arrangement
    for layer in layer_positions:
        layer_positions[layer].sort()

    # Step 4: Assign positions to nodes
    positions = {}
    layer_offset = 0
    for layer in sorted(layer_positions.keys()):
        horizontal_offset = 0
        for node in layer_positions[layer]:
            # The vertical position is proportional to the layer
            # The horizontal position is determined by order in the layer
            positions[node] = (horizontal_offset, -layer_offset)
            horizontal_offset += 1
        layer_offset += 1  # Separate layers vertically

    # Step 5: Convert to JSON format
    positions_json = json.dumps(positions, indent=4)
    return positions_json


# Example usage
edge_list = [(0, 1), (0, 12), (1, 2), (1, 13), (2, 3), (2, 14), (3, 4), (3, 15),
             (4, 5), (4, 16), (5, 6), (5, 17), (6, 7), (6, 18), (7, 8), (7, 19),
             (8, 9), (8, 20), (9, 10), (9, 21), (10, 11), (10, 22), (11, 23),
             (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19),
             (19, 20), (20, 21), (21, 22), (22, 23)]

layout_json = generate_layout(edge_list)
print(layout_json)
```

### Explanation
1. **Graph Representation**:
   - I represented the graph using an adjacency list for efficiency and simplicity.

2. **Layer Organization**:
   - The BFS algorithm groups nodes into layers based on distances from the starting node.

3. **Position Assignment**:
   - Each node's position is calculated based on its layer (vertical offset) and order within the layer (horizontal offset).

4. **Output Format**:
   - The final layout is converted to JSON format with node positions as `(x, y)` pairs.

This algorithm is simple and algorithmically places nodes with an attempt to minimize intersections by structuring layers and assigning positions systematically.