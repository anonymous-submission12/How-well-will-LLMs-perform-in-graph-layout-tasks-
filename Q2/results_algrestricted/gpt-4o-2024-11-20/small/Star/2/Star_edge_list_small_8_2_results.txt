To generate a graph layout that maintains consistency between the Euclidean distance and the graph-theoretic distance, we can employ a custom force-directed approach. The edge_list you've provided represents a star graph centered around node `0`. I'll write a Python script that computes a layout for this graph.

Here is the Python script:

```python
import json
import math

def generate_graph_layout(edge_list):
    # Extract unique nodes
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = list(nodes)
    
    # Initialize positions
    positions = {}
    # Center node (0) is placed at the origin
    center_node = 0
    positions[center_node] = (0.0, 0.0)
    
    # Arrange peripheral nodes in a circle around the center node
    num_peripheral_nodes = len(nodes) - 1
    radius = 10  # Arbitrary radius for layout
    angle_increment = 2 * math.pi / num_peripheral_nodes
    
    current_angle = 0
    for node in nodes:
        if node == center_node:
            continue
        # Calculate position based on polar coordinates
        x = radius * math.cos(current_angle)
        y = radius * math.sin(current_angle)
        positions[node] = (x, y)
        current_angle += angle_increment
    
    # Convert positions to JSON
    layout_json = json.dumps(positions, indent=4)
    return layout_json

# Example graph data
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
             (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), 
             (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27)]

# Generate layout
layout = generate_graph_layout(edge_list)
print(layout)
```

### Explanation of the Script:
1. **Node Position Initialization**:
   - A star graph has a central node (`0`, in this case) connected to peripheral nodes.
   - The central node is placed at the origin `(0, 0)`.

2. **Circular Layout for Peripheral Nodes**:
   - The peripheral nodes are arranged in a circle around the central node to maintain symmetry and consistency.
   - The radius is set arbitrarily to `10`. The angle between adjacent nodes is determined based on the number of peripheral nodes.

3. **Mapping and Output**:
   - The positions are stored in a dictionary where keys are node IDs, and values are tuples representing `(x, y)` coordinates.
   - Finally, the positions are converted to a JSON-formatted string and returned.

### Output JSON Format:
The script will produce a JSON-formatted string representing the node positions, e.g.:
```json
{
    "0": [0.0, 0.0],
    "1": [10.0, 0.0],
    "2": [9.510565162951535, 3.090169943749474],
    "3": [8.090169943749475, 5.877852522924732],
    ...
    "27": [9.510565162951536, -3.090169943749471]
}
```

### Notes:
- The positions are evenly spaced in a circular arrangement, proportional to the graph-theoretic distance.
- You can adjust the `radius` parameter to scale the layout.