Below is the Python code to generate a layout for the graph provided in the edge list format. The layout ensures consistency between Euclidean distance and graph-theoretic distance. The code calculates positions for each node based on graph-theoretic distances and outputs the layout in JSON format.

```python
import json
import numpy as np
from scipy.spatial import distance
from collections import deque

def compute_graph_layout(edge_list):
    # Step 1: Build adjacency list
    adjacency_list = {}
    for u, v in edge_list:
        if u not in adjacency_list:
            adjacency_list[u] = []
        if v not in adjacency_list:
            adjacency_list[v] = []
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)

    # Step 2: Compute graph-theoretic distances using BFS
    def bfs_distances(start_node):
        distances = {start_node: 0}
        queue = deque([start_node])
        while queue:
            current = queue.popleft()
            for neighbor in adjacency_list[current]:
                if neighbor not in distances:
                    distances[neighbor] = distances[current] + 1
                    queue.append(neighbor)
        return distances

    # Compute distances from node 0 (assuming it's the central node)
    distances_from_center = bfs_distances(0)

    # Step 3: Generate positions based on distances
    positions = {}
    radius_step = 1.0  # Distance between layers
    angle_step = 2 * np.pi / max(1, len(edge_list))  # Angle step for nodes in the same layer

    positions[0] = (0.0, 0.0)  # Center node at origin
    layers = {}
    for node, distance in distances_from_center.items():
        if distance not in layers:
            layers[distance] = []
        layers[distance].append(node)

    for distance, nodes in layers.items():
        radius = distance * radius_step
        for i, node in enumerate(nodes):
            angle = i * angle_step
            x = radius * np.cos(angle)
            y = radius * np.sin(angle)
            positions[node] = (x, y)

    # Step 4: Output positions in JSON format
    return json.dumps(positions, indent=4)

# Input graph edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9),
    (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17),
    (0, 18), (0, 19), (0, 20), (0, 21), (0, 22)
]

# Generate layout
layout_json = compute_graph_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Adjacency List Construction**: The graph is represented as an adjacency list for efficient traversal.
2. **Graph-Theoretic Distance Calculation**: Breadth-First Search (BFS) is used to compute the shortest path distance from the central node (node `0`) to all other nodes.
3. **Position Assignment**: Nodes are placed in concentric circles based on their distance from the central node. Nodes in the same layer are evenly distributed around the circle.
4. **Output**: The positions are output in JSON format.

This approach ensures that the Euclidean distance between nodes reflects their graph-theoretic distance.