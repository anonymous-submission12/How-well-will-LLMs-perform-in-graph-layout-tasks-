Below is a Python script that generates a layout for the given graph while maintaining consistency between Euclidean distance and graph-theoretic distance. This implementation calculates graph-theoretic distances using Breadth-First Search (BFS) and places nodes in a 2D space based on their distances while avoiding the use of existing layout algorithms.

```python
import json
import math
from collections import deque

def generate_layout(edge_list):
    # Step 1: Parse the graph into an adjacency list
    graph = {}
    for u, v in edge_list:
        if u not in graph:
            graph[u] = []
        if v not in graph:
            graph[v] = []
        graph[u].append(v)
        graph[v].append(u)
    
    # Step 2: Calculate the graph-theoretic distance (shortest path length) using BFS
    def bfs_distances(start_node):
        distances = {start_node: 0}
        queue = deque([start_node])
        while queue:
            node = queue.popleft()
            for neighbor in graph[node]:
                if neighbor not in distances:
                    distances[neighbor] = distances[node] + 1
                    queue.append(neighbor)
        return distances
    
    # Calculate distances from the central node (assuming it's node 0)
    distances = bfs_distances(0)

    # Step 3: Place nodes based on distances in a radial layout
    node_positions = {}
    radius_step = 1.0  # Radial distance between layers
    angle_step = 2 * math.pi / max(1, len(graph) - 1)  # Angle between nodes in the same layer
    
    for node, distance in distances.items():
        radius = distance * radius_step
        angle = distance * angle_step + (node * angle_step) % (2 * math.pi)
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        node_positions[node] = (x, y)

    # Step 4: Convert positions to JSON format and return
    node_positions_json = json.dumps(node_positions, indent=2)
    return node_positions_json

# Input graph edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), 
             (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12),
             (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18),
             (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24),
             (0, 25), (0, 26), (0, 27), (0, 28)]

# Generate the graph layout
layout_json = generate_layout(edge_list)

# Print the final layout in JSON format
print(layout_json)
```

### How It Works:
1. The graph is represented as an adjacency list to build connectivity.
2. BFS calculates the graph-theoretic distances from the central node (node 0).
3. Nodes are placed radially around the central node based on their graph-theoretic distances, with angular positions determined by uniform spacing to avoid overlaps.
4. The layout is returned in JSON format. This can later be used for visualization through external tools if needed.

This script avoids using any built-in layout algorithms, and the positioning is computed entirely based on graph-theoretic and Euclidean relationships.