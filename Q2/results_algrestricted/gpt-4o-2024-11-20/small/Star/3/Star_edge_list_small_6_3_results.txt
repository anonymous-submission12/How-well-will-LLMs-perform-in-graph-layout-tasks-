Below is a Python script that generates a layout for the given graph while attempting to minimize edge crossings. The layout is determined by placing the central node (node 0) at the origin and arranging the other nodes in a circular pattern around it. This approach minimizes edge crossings for a star graph like the one provided.

```python
import json
import math

def generate_layout(edge_list):
    # Extract unique nodes
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    
    # Convert nodes to a sorted list
    nodes = sorted(nodes)
    
    # Initialize layout dictionary
    layout = {}
    
    # Place the central node (node 0) at the origin
    center_node = 0
    layout[center_node] = (0, 0)
    
    # Determine the number of peripheral nodes
    peripheral_nodes = [node for node in nodes if node != center_node]
    num_peripheral = len(peripheral_nodes)
    
    # Arrange peripheral nodes in a circular pattern
    radius = 10  # Arbitrary radius for the circle
    for i, node in enumerate(peripheral_nodes):
        angle = 2 * math.pi * i / num_peripheral
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        layout[node] = (x, y)
    
    return layout

# Input graph data
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), 
    (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), 
    (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25)
]

# Generate layout
layout = generate_layout(edge_list)

# Output layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Central Node Placement**: The central node (node 0) is placed at the origin `(0, 0)`.
2. **Peripheral Node Placement**: The remaining nodes are evenly distributed in a circular pattern around the central node. The angle for each node is calculated based on its position in the list of peripheral nodes.
3. **Radius**: The radius of the circle is set to an arbitrary value (10 in this case) to ensure the nodes are spaced out.

### Output:
The script outputs the layout as a JSON object, where each key is a node, and the value is a tuple representing the `(x, y)` coordinates of the node.