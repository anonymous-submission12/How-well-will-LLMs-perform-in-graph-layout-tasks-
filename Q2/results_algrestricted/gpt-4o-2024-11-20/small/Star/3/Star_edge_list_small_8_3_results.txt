Here is a custom Python script that generates a layout for the given graph. This script avoids using predefined graph layout algorithms and tries to minimize edge crossings by using a simple radial layout for this style of "hub-and-spoke" star-like graph. The final output is in JSON format.

```python
import json
import math

def generate_graph_layout(edge_list):
    # Extract unique nodes
    nodes = set()
    for u, v in edge_list:
        nodes.add(u)
        nodes.add(v)
    
    # Central node determination (node connected to most others, or the first one)
    degree_count = {node: 0 for node in nodes}
    for u, v in edge_list:
        degree_count[u] += 1
        degree_count[v] += 1
    central_node = max(degree_count, key=degree_count.get)  # Maximum connections

    # Initialize layout dictionary
    layout = {}

    # Place the central node at the origin (0, 0)
    layout[central_node] = (0, 0)

    # Calculate positions for other nodes in a circular layout around the center
    radius = 10  # Fixed radius for placement
    peripheral_nodes = [node for node in nodes if node != central_node]
    num_peripheral = len(peripheral_nodes)

    # Assign each peripheral node a position on a circle
    for i, node in enumerate(peripheral_nodes):
        angle = 2 * math.pi * i / num_peripheral  # Evenly spaced angles
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        layout[node] = (x, y)

    return layout

# Example graph data
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), 
    (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), 
    (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), 
    (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27)
]

# Generate layout
layout = generate_graph_layout(edge_list)

# Convert the result to JSON format
layout_json = json.dumps(layout, indent=4)
print(layout_json)
```

### Explanation of the Code:
1. **Central Node Calculation**: The node with the highest degree (connections) is treated as the central node (in this case, node `0` since all other nodes are connected to it).
2. **Radial Layout**: Each of the peripheral nodes is placed on a circle around the central node. Their positions are determined based on evenly spaced angles.
3. **Final Output**: The script outputs the layout, with each node's coordinates in a JSON format.

Let me know if you need further clarification!