Below is a Python script that generates a layout for the given graph while attempting to minimize edge crossings. The script does not use any existing graph layout algorithms and outputs the layout in JSON format.

```python
import json
import math

def generate_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = list(nodes)

    # Initialize positions dictionary
    positions = {}

    # Place the central node (node 0) at the origin
    central_node = 0
    positions[central_node] = (0, 0)

    # Place all other nodes in a circular layout around the central node
    num_nodes = len(nodes) - 1  # Exclude the central node
    radius = 10  # Arbitrary radius for the circular layout
    angle_step = 2 * math.pi / num_nodes

    for i, node in enumerate(nodes):
        if node == central_node:
            continue
        angle = i * angle_step
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        positions[node] = (x, y)

    return positions

# Input edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9),
    (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17),
    (0, 18), (0, 19), (0, 20)
]

# Generate layout
layout = generate_layout(edge_list)

# Output layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Node Extraction**: The script extracts all unique nodes from the edge list.
2. **Central Node Placement**: The central node (node `0`) is placed at the origin `(0, 0)`.
3. **Circular Layout**: All other nodes are placed in a circular layout around the central node. The positions are calculated using trigonometric functions (`cos` and `sin`) to evenly distribute the nodes around the circle.
4. **JSON Output**: The final layout is output in JSON format.

### Example Output:
For the given edge list, the output might look like this:
```json
{
    "0": [0, 0],
    "1": [10.0, 0.0],
    "2": [9.510565162951535, 3.090169943749474],
    "3": [8.090169943749475, 5.877852522924732],
    "4": [5.877852522924732, 8.090169943749475],
    "5": [3.0901699437494745, 9.510565162951535],
    "6": [6.123233995736766e-16, 10.0],
    "7": [-3.0901699437494736, 9.510565162951536],
    "8": [-5.87785252292473, 8.090169943749475],
    "9": [-8.090169943749473, 5.877852522924733],
    "10": [-9.510565162951535, 3.090169943749475],
    "11": [-10.0, 1.2246467991473533e-15],
    "12": [-9.510565162951536, -3.0901699437494727],
    "13": [-8.090169943749476, -5.87785252292473],
    "14": [-5.877852522924733, -8.090169943749473],
    "15": [-3.0901699437494754, -9.510565162951535],
    "16": [-1.8369701987210296e-15, -10.0],
    "17": [3.0901699437494723, -9.510565162951536],
    "18": [5.877852522924729, -8.090169943749476],
    "19": [8.090169943749473, -5.877852522924734],
    "20": [9.510565162951535, -3.0901699437494763]
}
```

This layout minimizes edge crossings by placing all nodes symmetrically around the central node.