Below is a Python script that generates a layout for the given graph. The layout minimizes edge crossings by arranging the nodes in a circular pattern. This approach is simple and effective for star-like graphs, such as the one provided, where one central node (node 0) is connected to many peripheral nodes.

```python
import json
import math

def generate_layout(edge_list):
    # Extract all nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    
    # Sort nodes to ensure consistent ordering
    nodes = sorted(nodes)
    
    # Determine the central node (node with the most connections)
    central_node = edge_list[0][0]
    
    # Initialize positions dictionary
    positions = {}
    
    # Place the central node at the center
    positions[central_node] = (0.0, 0.0)
    
    # Place peripheral nodes in a circular layout around the central node
    num_peripheral_nodes = len(nodes) - 1
    radius = 10  # Arbitrary radius for the circular layout
    angle_step = 2 * math.pi / num_peripheral_nodes
    
    for i, node in enumerate(nodes):
        if node == central_node:
            continue
        angle = i * angle_step
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        positions[node] = (x, y)
    
    # Convert positions to JSON format
    return json.dumps(positions, indent=4)

# Input graph data
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9),
    (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17),
    (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25),
    (0, 26)
]

# Generate layout
layout = generate_layout(edge_list)

# Print the layout
print(layout)
```

### Explanation:
1. **Central Node Placement**: The central node (node 0) is placed at the origin `(0.0, 0.0)`.
2. **Peripheral Node Placement**: The peripheral nodes are arranged in a circular pattern around the central node. The radius of the circle is set to `10`, and the angular spacing between nodes is calculated based on the total number of peripheral nodes.
3. **Output Format**: The positions of the nodes are returned in JSON format, where each node is mapped to its `(x, y)` coordinates.

This approach ensures minimal edge crossings for the given graph structure.