Below is the Python code that generates a graph layout while ensuring consistency between the Euclidean distance and the graph-theoretic distance.

```python
import json
import math

def generate_graph_layout(edge_list):
    # Compute a breadth-first search (BFS) to ascertain graph-theoretic distances.
    def bfs_distances(start_node, edges):
        graph = {}
        for u, v in edges:
            graph.setdefault(u, []).append(v)
            graph.setdefault(v, []).append(u)
        
        distances = {start_node: 0}
        queue = [start_node]
        
        while queue:
            current = queue.pop(0)
            current_distance = distances[current]
            
            for neighbor in graph[current]:
                if neighbor not in distances:
                    distances[neighbor] = current_distance + 1
                    queue.append(neighbor)
        
        return distances

    # Generate graph-theoretic distances from the first node (0) in the edge_list.
    distances = bfs_distances(0, edge_list)
    
    # Coordinates generation based on graph-theoretic distances.
    # We place nodes as colinear points spaced proportionally to their distances:
    layout = {}
    for node in distances:
        # x-coordinate is proportional to distance from node 0.
        x_pos = distances[node]
        # y-coordinate is constant, creating a straight line layout.
        y_pos = 0
        layout[node] = [x_pos, y_pos]
    
    return json.dumps(layout, indent=2)

# Edge list for the graph provided.
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), 
    (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), 
    (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), 
    (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), 
    (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), 
    (25, 26), (26, 27), (27, 28)
]

# Generate the layout.
graph_layout_json = generate_graph_layout(edge_list)
print(graph_layout_json)
```

### Explanation:
1. **Breadth-First Search (BFS)**:
   - It calculates graph-theoretic distances (minimum number of hops) from the first node (node `0`) to all other nodes. This ensures graph distances are mapped.

2. **Layout Placement**:
   - Nodes are placed on a straight line (colinear layout) with spacing proportional to their graph-theoretic distance. The x-coordinate of a node is set equal to its distance from node `0`, while the y-coordinate is constant (`0`).

3. **Output**:
   - The resulting node positions are returned as a JSON-formatted string.

This implementation ensures the layout properly reflects graph-theoretic distances and avoids using external graph layout algorithms.