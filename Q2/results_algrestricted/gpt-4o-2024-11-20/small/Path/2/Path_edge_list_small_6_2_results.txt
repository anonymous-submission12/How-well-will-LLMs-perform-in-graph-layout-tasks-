Below is the Python script to generate a layout for the given graph. The layout ensures consistency between Euclidean distance and graph-theoretic distance. The script calculates positions for each node based on their graph-theoretic distance from a starting node (node 0) and places them in a straight line for simplicity.

```python
import json
import math
from collections import defaultdict, deque

# Input graph as edge list
edge_list = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), 
             (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), 
             (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), 
             (21, 22), (22, 23), (23, 24), (24, 25)]

# Step 1: Build adjacency list representation of the graph
graph = defaultdict(list)
for u, v in edge_list:
    graph[u].append(v)
    graph[v].append(u)

# Step 2: Compute graph-theoretic distances using BFS
def compute_distances(graph, start_node):
    distances = {}
    queue = deque([(start_node, 0)])
    visited = set()
    
    while queue:
        node, dist = queue.popleft()
        if node in visited:
            continue
        visited.add(node)
        distances[node] = dist
        for neighbor in graph[node]:
            if neighbor not in visited:
                queue.append((neighbor, dist + 1))
    
    return distances

# Compute distances from node 0
distances = compute_distances(graph, 0)

# Step 3: Assign positions based on distances
# Place nodes in a straight line with equal spacing
layout = {}
spacing = 1.0  # Distance between consecutive nodes
for node, distance in distances.items():
    layout[node] = (distance * spacing, 0)  # (x, y) coordinates

# Step 4: Output the layout in JSON format
layout_json = json.dumps(layout, indent=4)
print(layout_json)
```

### Explanation:
1. **Graph Representation**: The graph is represented as an adjacency list for efficient traversal.
2. **Graph-Theoretic Distance**: A breadth-first search (BFS) is used to compute the shortest path distance from the starting node (node 0) to all other nodes.
3. **Layout Generation**: Nodes are placed in a straight line along the x-axis, with the x-coordinate proportional to their graph-theoretic distance. The y-coordinate is fixed at 0 for simplicity.
4. **Output**: The layout is output in JSON format, where each node is mapped to its `(x, y)` position.

### Example Output:
For the given graph, the output will look like this:
```json
{
    "0": [0.0, 0],
    "1": [1.0, 0],
    "2": [2.0, 0],
    "3": [3.0, 0],
    "4": [4.0, 0],
    "5": [5.0, 0],
    "6": [6.0, 0],
    "7": [7.0, 0],
    "8": [8.0, 0],
    "9": [9.0, 0],
    "10": [10.0, 0],
    "11": [11.0, 0],
    "12": [12.0, 0],
    "13": [13.0, 0],
    "14": [14.0, 0],
    "15": [15.0, 0],
    "16": [16.0, 0],
    "17": [17.0, 0],
    "18": [18.0, 0],
    "19": [19.0, 0],
    "20": [20.0, 0],
    "21": [21.0, 0],
    "22": [22.0, 0],
    "23": [23.0, 0],
    "24": [24.0, 0],
    "25": [25.0, 0]
}
```