To generate a layout for this graph that reflects consistency between the Euclidean distance and graph-theoretic distance, I will write Python code to calculate positions for nodes based on their shortest path distances in the graph. The layout will position nodes along a straight line to simplify the representation. The graph-theoretic distance will be directly proportional to Euclidean distance, resulting in consistent spacing between connected nodes.

Here is the Python code:

```python
import json

def generate_graph_layout(edge_list):
    # Create adjacency list representation of graph
    graph = {}
    for u, v in edge_list:
        if u not in graph:
            graph[u] = set()
        if v not in graph:
            graph[v] = set()
        graph[u].add(v)
        graph[v].add(u)
    
    # Perform Breadth-First Search (BFS) from node 0 to compute shortest path distances
    distances = {}
    queue = [0]
    distances[0] = 0
    visited = set(queue)
    
    while queue:
        current = queue.pop(0)
        for neighbor in graph[current]:
            if neighbor not in visited:
                distances[neighbor] = distances[current] + 1
                visited.add(neighbor)
                queue.append(neighbor)
    
    # Generate positions based on shortest path distances
    layout = {}
    for node in distances:
        layout[node] = (distances[node], 0)  # Place nodes along x-axis
    
    return json.dumps(layout, indent=2)

# Graph edge list
edge_list = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8),
             (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15),
             (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21),
             (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27),
             (27, 28), (28, 29)]

# Generate layout
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### How the code works:
1. **Graph Representation**:
   - The edge list is converted into an adjacency list for efficient traversal.

2. **Breadth-First Search (BFS)**:
   - BFS is used to calculate the shortest path distance of each node from the starting node (node 0).

3. **Layout Generation**:
   - Nodes are positioned along a straight horizontal line (x-axis) with distances proportional to their graph-theoretic distances.

4. **JSON Output**:
   - The layout is returned as a JSON object, specifying the 2D coordinates `(x, y)` of each node.

### Example Output (partial):
```json
{
  "0": [0, 0],
  "1": [1, 0],
  "2": [2, 0],
  "3": [3, 0],
  "4": [4, 0],
  "5": [5, 0],
  ...
  "28": [28, 0],
  "29": [29, 0]
}
```
Nodes are linearly arranged along the x-axis, maintaining consistency between Euclidean distance and graph-theoretic distance.