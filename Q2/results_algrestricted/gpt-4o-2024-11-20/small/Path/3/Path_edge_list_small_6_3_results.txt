Here is a Python script that generates a layout for the graph provided in edge list format, while attempting to minimize edge crossings. To do so, I will assign positions to nodes in a linear arrangement since the graph is a chain-like structure. The positions will account for the order of the nodes in the chain. The positions will be output in JSON format.

```python
import json

def generate_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = sorted(set(node for edge in edge_list for node in edge))
    
    # Assign each node a position in a 1D layout (linear arrangement, no edge crossings for chains)
    layout = {node: {'x': i, 'y': 0} for i, node in enumerate(nodes)}
    
    return layout

# Edge list of the graph
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), 
    (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), 
    (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), 
    (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25)
]

# Generate layout
layout = generate_layout(edge_list)

# Output the layout in JSON format
layout_json = json.dumps(layout, indent=4)
print(layout_json)
```

### Explanation
1. **Extract Unique Nodes**: From the edge list, the code identifies all unique nodes by flattening the edge list into a single set. It sorts these nodes to process them in a consistent order.
2. **Linear Layout**: To minimize edge crossings, each node is positioned linearly along the x-axis at regular intervals, with the y-coordinate fixed at 0.
3. **JSON Output**: The resulting dictionary of node positions is serialized into a JSON format, which is easy to parse or use in further processing.

### Example Layout Output
If you run the code, you will get output similar to this (formatted in JSON):
```json
{
    "0": {"x": 0, "y": 0},
    "1": {"x": 1, "y": 0},
    "2": {"x": 2, "y": 0},
    "3": {"x": 3, "y": 0},
    "4": {"x": 4, "y": 0},
    "5": {"x": 5, "y": 0},
    "6": {"x": 6, "y": 0},
    "7": {"x": 7, "y": 0},
    "8": {"x": 8, "y": 0},
    "9": {"x": 9, "y": 0},
    "10": {"x": 10, "y": 0},
    "11": {"x": 11, "y": 0},
    "12": {"x": 12, "y": 0},
    "13": {"x": 13, "y": 0},
    "14": {"x": 14, "y": 0},
    "15": {"x": 15, "y": 0},
    "16": {"x": 16, "y": 0},
    "17": {"x": 17, "y": 0},
    "18": {"x": 18, "y": 0},
    "19": {"x": 19, "y": 0},
    "20": {"x": 20, "y": 0},
    "21": {"x": 21, "y": 0},
    "22": {"x": 22, "y": 0},
    "23": {"x": 23, "y": 0},
    "24": {"x": 24, "y": 0},
    "25": {"x": 25, "y": 0}
}
```

This arrangement minimizes edge crossings, as the graph is a simple chain.