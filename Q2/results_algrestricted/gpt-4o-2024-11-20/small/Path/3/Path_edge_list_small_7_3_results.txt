Below is a Python script that generates a layout for the given graph while attempting to minimize edge crossings. The layout is determined by assigning positions to nodes in a linear arrangement, as the graph is a simple path (chain). This approach inherently minimizes edge crossings because there are no cycles or complex connections.

```python
import json

def generate_layout(edge_list):
    # Extract all unique nodes from the edge list
    nodes = sorted(set(node for edge in edge_list for node in edge))
    
    # Assign positions to nodes in a linear layout
    # Each node is placed at (x, y) where x is the node index and y is 0
    layout = {node: (index, 0) for index, node in enumerate(nodes)}
    
    return layout

# Input graph data
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9),
    (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16),
    (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23),
    (23, 24), (24, 25), (25, 26)
]

# Generate layout
layout = generate_layout(edge_list)

# Output layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Node Extraction**: The script extracts all unique nodes from the edge list using a set comprehension.
2. **Linear Layout**: Each node is assigned a position `(x, y)` where `x` is the index of the node in the sorted list of nodes, and `y` is fixed at `0`. This ensures a straight-line layout.
3. **Output**: The layout is returned as a dictionary and printed in JSON format for easy readability.

### Output Example:
For the given edge list, the output will look like this:
```json
{
    "0": [0, 0],
    "1": [1, 0],
    "2": [2, 0],
    "3": [3, 0],
    "4": [4, 0],
    "5": [5, 0],
    "6": [6, 0],
    "7": [7, 0],
    "8": [8, 0],
    "9": [9, 0],
    "10": [10, 0],
    "11": [11, 0],
    "12": [12, 0],
    "13": [13, 0],
    "14": [14, 0],
    "15": [15, 0],
    "16": [16, 0],
    "17": [17, 0],
    "18": [18, 0],
    "19": [19, 0],
    "20": [20, 0],
    "21": [21, 0],
    "22": [22, 0],
    "23": [23, 0],
    "24": [24, 0],
    "25": [25, 0],
    "26": [26, 0]
}
```