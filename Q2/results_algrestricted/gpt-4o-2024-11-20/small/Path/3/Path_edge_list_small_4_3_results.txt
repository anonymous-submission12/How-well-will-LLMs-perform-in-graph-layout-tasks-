Below is a Python script that generates a layout for the graph you provided as an edge list. I employ a simple heuristic optimization approach to reduce edge crossings by iteratively improving vertex positions. The final layout is printed in JSON format.

```python
import json
import random

def generate_layout(edge_list):
    # Extract the nodes from the edge list
    nodes = list(set([node for edge in edge_list for node in edge]))
    node_count = len(nodes)
    
    # Initialize the positions randomly along a line (x-axis)
    positions = {node: (i * 10, 0) for i, node in enumerate(nodes)}
    
    def calculate_edge_crossings():
        """Calculate the number of edge crossings in the graph."""
        crossings = 0
        for i, (u1, v1) in enumerate(edge_list):
            for j, (u2, v2) in enumerate(edge_list):
                if i >= j:  # Avoid redundant comparisons
                    continue
                # Extract positions
                x1, x2 = positions[u1][0], positions[v1][0]
                y1, y2 = positions[u2][0], positions[v2][0]
                # Check if (u1, v1) crosses (u2, v2)
                if (x1 - x2) * (x1 - y2) < 0 and (y1 - x2) * (y1 - y2) < 0:
                    crossings += 1
        return crossings

    def swap_positions(node1, node2):
        """Swap the positions of two nodes."""
        positions[node1], positions[node2] = positions[node2], positions[node1]

    # Try to minimize edge crossings using a heuristic swap method
    min_crossings = calculate_edge_crossings()
    improved = True
    while improved:
        improved = False
        for i in range(node_count):
            for j in range(i + 1, node_count):
                # Swap two nodes and check the new number of crossings
                swap_positions(nodes[i], nodes[j])
                new_crossings = calculate_edge_crossings()
                if new_crossings < min_crossings:
                    min_crossings = new_crossings
                    improved = True  # Keep the swap
                else:
                    swap_positions(nodes[i], nodes[j])  # Undo the swap if no improvement
    
    # Return the final layout as a dictionary
    return positions

if __name__ == "__main__":
    # Input edge list
    edge_list = [
        (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6),
        (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12),
        (12, 13), (13, 14), (14, 15), (15, 16), (16, 17),
        (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23)
    ]

    # Generate layout
    layout = generate_layout(edge_list)

    # Output the layout in JSON format
    print(json.dumps(layout, indent=4))
```

### Explanation
1. **Initialization**:
   - Each node is assigned an initial position along the x-axis, evenly spaced (e.g., `(0, 0), (10, 0), (20, 0), ...`).

2. **Edge Crossing Calculation**:
   - The function `calculate_edge_crossings` determines how many edges in the graph cross by comparing pairs of edges.

3. **Improvement via Node Swapping**:
   - Pairs of nodes are swapped, and if the swap reduces the number of crossings, it is kept. Otherwise, the swap is undone.
   - The process continues until no swaps result in fewer crossings.

4. **Output**:
   - The final positions of the nodes are output as a dictionary (node ID â†’ position) in JSON format.

This iterative method avoids using pre-built graph layout functions and aligns with the requirement to minimize edge crossings.