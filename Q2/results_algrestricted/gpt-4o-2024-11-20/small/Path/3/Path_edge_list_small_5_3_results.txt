Creating a layout for a graph that minimizes edge crossings without relying on existing algorithms is a complex task. A simple heuristic that attempts to reduce edge crossings is to assign positions based on a linear ordering of nodes and distribute them evenly along a line or grid.

Below is Python code that implements such an approach. It calculates positions for each node based on their order in the graph, and outputs the layout in JSON format:

```python
import json

def create_graph_layout(edge_list):
    # Extract unique nodes from edge list
    nodes = sorted(set(sum(edge_list, ())))
    
    # Assign positions linearly to minimize crossings
    # We use a simple 1D layout (nodes placed on a straight line)
    layout = {node: [i, 0] for i, node in enumerate(nodes)}
    
    # Convert layout to JSON format
    layout_json = json.dumps(layout, indent=4)
    return layout_json

# Input graph data (edge list)
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5),
    (5, 6), (6, 7), (7, 8), (8, 9), (9, 10),
    (10, 11), (11, 12), (12, 13), (13, 14), (14, 15),
    (15, 16), (16, 17), (17, 18), (18, 19), (19, 20),
    (20, 21), (21, 22), (22, 23), (23, 24)
]

# Generate layout
graph_layout = create_graph_layout(edge_list)

# Output the JSON layout
print(graph_layout)
```

### Explanation:
1. **Nodes Extraction**: All unique nodes are extracted from the edge list and sorted to ensure a consistent order.
2. **Position Assignment**: A position `[x, y]` is assigned to each node, where `x` is the index of the node in the sorted list, and `y` is fixed to 0 (a straight line layout).
3. **JSON Output**: The layout is serialized into JSON format for consumption by other tools or systems.

### Example Output:
```json
{
    "0": [0, 0],
    "1": [1, 0],
    "2": [2, 0],
    "3": [3, 0],
    "4": [4, 0],
    "5": [5, 0],
    "6": [6, 0],
    "7": [7, 0],
    "8": [8, 0],
    "9": [9, 0],
    "10": [10, 0],
    "11": [11, 0],
    "12": [12, 0],
    "13": [13, 0],
    "14": [14, 0],
    "15": [15, 0],
    "16": [16, 0],
    "17": [17, 0],
    "18": [18, 0],
    "19": [19, 0],
    "20": [20, 0],
    "21": [21, 0],
    "22": [22, 0],
    "23": [23, 0],
    "24": [24, 0]
}
```

This approach works well for simple graphs like chains but does not optimize layouts for complex graphs with overlapping edges. To achieve higher sophistication, you would need to implement more advanced custom heuristics or optimization techniques.