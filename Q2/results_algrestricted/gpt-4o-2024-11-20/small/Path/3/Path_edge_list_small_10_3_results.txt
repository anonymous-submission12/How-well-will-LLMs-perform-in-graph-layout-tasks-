Below is a Python script that generates a layout for the given graph. The layout minimizes edge crossings by arranging the nodes in a straight line, as the graph is a simple path. The positions are determined manually based on the graph structure.

```python
import json

def generate_layout(edge_list):
    # Create a dictionary to store positions
    positions = {}
    
    # Assign positions to nodes in a straight line
    for i, (node1, node2) in enumerate(edge_list):
        if node1 not in positions:
            positions[node1] = (i, 0)  # Place nodes along the x-axis
        if node2 not in positions:
            positions[node2] = (i + 1, 0)  # Place the next node to the right
    
    return positions

# Input graph edge list
edge_list = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), 
             (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), 
             (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), 
             (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29)]

# Generate layout
layout = generate_layout(edge_list)

# Output layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Node Placement**: Since the graph is a simple path, the nodes are placed along the x-axis in sequential order. This minimizes edge crossings as there are no overlapping edges in a straight-line arrangement.
2. **Output Format**: The positions of the nodes are stored in a dictionary where the keys are node IDs and the values are tuples representing the (x, y) coordinates.
3. **JSON Output**: The layout is printed in JSON format for easy consumption.

### Example Output:
For the given edge list, the output will look like this:
```json
{
    "0": [0, 0],
    "1": [1, 0],
    "2": [2, 0],
    "3": [3, 0],
    "4": [4, 0],
    "5": [5, 0],
    "6": [6, 0],
    "7": [7, 0],
    "8": [8, 0],
    "9": [9, 0],
    "10": [10, 0],
    "11": [11, 0],
    "12": [12, 0],
    "13": [13, 0],
    "14": [14, 0],
    "15": [15, 0],
    "16": [16, 0],
    "17": [17, 0],
    "18": [18, 0],
    "19": [19, 0],
    "20": [20, 0],
    "21": [21, 0],
    "22": [22, 0],
    "23": [23, 0],
    "24": [24, 0],
    "25": [25, 0],
    "26": [26, 0],
    "27": [27, 0],
    "28": [28, 0],
    "29": [29, 0]
}
```