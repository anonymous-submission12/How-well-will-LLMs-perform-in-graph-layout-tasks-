Below is a Python script that generates a layout for the given graph. The layout minimizes edge crossings by arranging the nodes in a straight line, as the graph is a simple path. The positions are determined manually based on the graph structure.

```python
import json

def generate_layout(edge_list):
    # Extract all unique nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    
    # Sort nodes to ensure consistent ordering
    sorted_nodes = sorted(nodes)
    
    # Generate positions for each node in a straight line
    layout = {}
    for i, node in enumerate(sorted_nodes):
        layout[node] = {"x": i * 10, "y": 0}  # x increases linearly, y is constant
    
    return layout

# Input graph data
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9),
    (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16),
    (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23),
    (23, 24), (24, 25), (25, 26), (26, 27)
]

# Generate layout
layout = generate_layout(edge_list)

# Output layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Node Extraction**: The script extracts all unique nodes from the edge list.
2. **Sorting**: Nodes are sorted to ensure consistent ordering.
3. **Position Assignment**: Each node is assigned a position along a straight line. The `x` coordinate increases linearly, while the `y` coordinate remains constant.
4. **Output**: The layout is output in JSON format.

This approach minimizes edge crossings because the graph is a simple path, and arranging nodes in a straight line ensures no edges overlap.