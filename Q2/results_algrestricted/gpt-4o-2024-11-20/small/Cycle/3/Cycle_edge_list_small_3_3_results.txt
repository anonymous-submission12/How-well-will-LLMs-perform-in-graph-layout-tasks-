Below is a Python script that generates a layout for the given graph while attempting to minimize edge crossings. The layout is computed using a simple heuristic approach, where nodes are arranged in a circular pattern to reduce edge crossings. The output is provided in JSON format.

```python
import json
import math

def generate_layout(edge_list):
    # Determine the number of nodes in the graph
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    num_nodes = len(nodes)
    
    # Sort nodes to ensure consistent ordering
    sorted_nodes = sorted(nodes)
    
    # Generate positions for nodes in a circular layout
    positions = {}
    radius = 10  # Arbitrary radius for the circular layout
    for i, node in enumerate(sorted_nodes):
        angle = 2 * math.pi * i / num_nodes
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        positions[node] = {"x": x, "y": y}
    
    return positions

# Input graph data
edge_list = [
    (0, 1), (0, 22), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), 
    (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), 
    (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), 
    (21, 22)
]

# Generate layout
layout = generate_layout(edge_list)

# Output layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Circular Layout**: Nodes are arranged in a circular pattern to minimize edge crossings. This is a simple heuristic that works well for small graphs.
2. **Position Calculation**: Each node's position is calculated using trigonometric functions (`cos` and `sin`) based on its index in the sorted list of nodes.
3. **JSON Output**: The final layout is output as a JSON object, where each node is mapped to its `x` and `y` coordinates.

### Example Output:
For the given graph, the output might look like this:
```json
{
    "0": {"x": 10.0, "y": 0.0},
    "1": {"x": 9.510565162951535, "y": 3.090169943749474},
    "2": {"x": 8.090169943749475, "y": 5.877852522924732},
    ...
    "22": {"x": 9.510565162951535, "y": -3.090169943749474}
}
```

This layout ensures that nodes are evenly distributed in a circular pattern, reducing the likelihood of edge crossings.