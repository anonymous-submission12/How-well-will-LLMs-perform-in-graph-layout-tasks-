Here is the Python code that generates a graph layout aimed at minimizing edge crossings without using any existing graph layout algorithms. The layout positions will be output in JSON format.

```python
import json
import math

def generate_minimized_crossing_layout(edge_list):
    """
    Generate a layout for a graph given an edge_list, with positions aiming to minimize edge crossings.
    Arguments:
        edge_list: List of edges (connections between nodes).
    Returns:
        Dictionary (JSON format) mapping nodes to their positions (x, y).
    """
    # Extract unique nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)

    nodes = list(nodes)
    num_nodes = len(nodes)

    # Assign positions (x, y) to nodes, avoiding edge crossings
    # Lay out nodes in a circular layout to avoid edge crossings
    radius = 100  # Arbitrary fixed radius for the circular layout
    positions = {}
    angle_increment = 2 * math.pi / num_nodes  # Evenly distribute nodes around the circle
    
    for i, node in enumerate(nodes):
        angle = i * angle_increment
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        positions[node] = {'x': x, 'y': y}
    
    return positions

# Graph edge data
edge_list = [(0, 1), (0, 21), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8),
             (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16),
             (16, 17), (17, 18), (18, 19), (19, 20), (20, 21)]

# Generate layout
layout = generate_minimized_crossing_layout(edge_list)

# Output positions in JSON format
print(json.dumps(layout, indent=2))
```

### Output Example:
The positions will appear in a JSON format similar to the following (actual values depend on the circular layout calculation):

```json
{
  "0": {"x": 100.0, "y": 0.0},
  "1": {"x": 95.11, "y": 31.18},
  "2": {"x": 80.90, "y": 58.78},
  ...
  "21": {"x": 95.11, "y": -31.18}
}
```

This script uses a simple circular distribution approach to minimize edge crossings, which works well for relatively simple graphs like the one provided. If nodes need to be repositioned based on their connections, additional optimization techniques would be necessary.