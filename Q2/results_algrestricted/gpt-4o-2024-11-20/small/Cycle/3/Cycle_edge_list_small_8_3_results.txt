Below is the Python script that generates a layout for the graph, aiming to minimize edge crossings without using existing graph layout algorithms. The script directly calculates positions for graph nodes and outputs the layout in JSON format.

The chosen algorithm arranges nodes along a circle to minimize edge crossings because this gives an intuitive correlation between node connectivity and spatial proximity.

```python
import math
import json

def generate_graph_layout(edge_list):
    # Identify all unique nodes in the graph
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)

    nodes = sorted(list(nodes))  # Sort nodes to maintain consistent indexing

    # Calculate layout positions (arrange nodes in a circle)
    num_nodes = len(nodes)
    radius = 100  # Arbitrary radius for the circular layout
    angle_step = 2 * math.pi / num_nodes

    positions = {}
    for i, node in enumerate(nodes):
        angle = i * angle_step
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        positions[node] = {"x": x, "y": y}

    # Return layout as JSON
    return json.dumps(positions, indent=4)

# Edge list input
edge_list = [(0, 1), (0, 27), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), 
             (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), 
             (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27)]

# Generate layout and print
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Circular Layout**: Nodes are arranged evenly on a circle to simplify edge patterns. This strategy is simple and avoids clustering, reducing edge crossings in symmetric graphs.

2. **Position Calculation**: The x and y positions are computed using trigonometric functions with a fixed radius.

3. **Output**: The layout is returned as a JSON-formatted string with positions for each node.

Replace the `radius` and `angle_step` if you need finer control of the layout scaling or node spacing.