Below is a Python script that generates a layout for the given graph that attempts to minimize edge crossings. As the layout algorithm cannot use any existing libraries, a simple heuristic approach is implemented manually.

The script ensures appropriate positioning of nodes for minimal edge crossings, using a linear arrangement since the graph is effectively a cycle.

```python
import json

def generate_layout(edge_list):
    # Create adjacency list for the graph
    adjacency_list = {}
    for edge in edge_list:
        u, v = edge
        if u not in adjacency_list:
            adjacency_list[u] = []
        if v not in adjacency_list:
            adjacency_list[v] = []
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)
    
    # Generate layout positions for nodes
    num_nodes = len(adjacency_list)
    positions = {}
    
    # Place nodes in a circular layout to minimize crossings in a cycle graph
    # This works well specifically since the graph is a cycle
    import math
    radius = num_nodes  # Arbitrary scaling factor for clarity
    angle_increment = 2 * math.pi / num_nodes  # Angle between consecutive nodes
    for i in range(num_nodes):
        angle = i * angle_increment
        positions[i] = (radius * math.cos(angle), radius * math.sin(angle))
    
    return json.dumps(positions, indent=4)

# Edge list input
edge_list = [
    (0, 1), (0, 29), (1, 2), (2, 3), (3, 4), (4, 5), 
    (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), 
    (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), 
    (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), 
    (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), 
    (26, 27), (27, 28), (28, 29)
]

# Generate and print layout
layout_json = generate_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Adjacency List Creation**: A dictionary is used to store graph connections for each node, which helps in processing edge relationships later (though not heavily utilized in this simple layout).
2. **Heuristic**: A circular layout is generated because a cycle graph (like the one in your edge list) naturally minimizes edge crossings in a circular arrangement.
3. **Position Calculation**: Each node's position is determined using polar coordinates with a radius and angle, converted to Cartesian `(x, y)` coordinates.
4. **Output**: The computed positions are returned as a JSON-formatted string.

The output will include positions of nodes in the format:
```json
{
    "0": [x0, y0],
    "1": [x1, y1],
    ...
    "29": [x29, y29]
}
```

Let me know if you have further questions!