Below is the Python script that generates a layout for the given graph such that the layout maintains consistency between Euclidean distance and graph-theoretic distance. The script uses a computational approach to determine node positions without using any existing layout algorithms. The output is stored as a JSON object.

```python
import json
import numpy as np

def compute_graph_layout(edge_list):
    # Extract nodes from edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = sorted(nodes)
    
    # Create adjacency matrix
    n = len(nodes)
    adjacency_matrix = np.zeros((n, n))
    for u, v in edge_list:
        adjacency_matrix[u, v] = 1
        adjacency_matrix[v, u] = 1
    
    # Compute shortest path lengths using Floyd-Warshall algorithm
    dist_matrix = np.full((n, n), float('inf'))
    np.fill_diagonal(dist_matrix, 0)
    for u, v in edge_list:
        dist_matrix[u, v] = 1
        dist_matrix[v, u] = 1

    for k in range(n):
        for i in range(n):
            for j in range(n):
                dist_matrix[i, j] = min(dist_matrix[i, j], dist_matrix[i, k] + dist_matrix[k, j])
    
    # Dimensionality reduction (project distances into 2D space)
    # Multidimensional Scaling (MDS) approach
    dist_squared = dist_matrix ** 2
    row_mean = np.mean(dist_squared, axis=1)
    grand_mean = np.mean(row_mean)
    B = -0.5 * (dist_squared - row_mean[:, np.newaxis] - row_mean[np.newaxis, :] + grand_mean)

    # Compute the eigenvalues and eigenvectors
    eigenvalues, eigenvectors = np.linalg.eigh(B)

    # Take the largest two eigenvalues and their eigenvectors for 2D positioning
    idx = np.argsort(eigenvalues)[::-1]  # Indices of eigenvalues in descending order
    top_two_eigenvalues = eigenvalues[idx[:2]]
    top_two_eigenvectors = eigenvectors[:, idx[:2]]

    # Compute the coordinates
    coords = top_two_eigenvectors * np.sqrt(top_two_eigenvalues)

    # Map back to JSON format
    layout = {node: coords[node].tolist() for node in range(n)}
    return layout

# Input graph edge_list
edge_list = [
    (0, 1), (0, 27), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9),
    (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17),
    (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25),
    (25, 26), (26, 27)
]

# Generate layout
layout = compute_graph_layout(edge_list)

# Output layout in JSON format
print(json.dumps(layout, indent=4))
```

**Explanation of the Code:**
1. **Adjacency Matrix and Shortest Path Calculation:**
   - The adjacency matrix is built for the graph.
   - Floyd-Warshall algorithm is used to compute the shortest path matrix.

2. **Dimensionality Reduction:**
   - A classical Multidimensional Scaling (MDS) approach is used to project the graph-theoretic distances into a 2D Euclidean space while preserving consistency between graph-theoretic and Euclidean distances.
   - The eigenvectors associated with the largest eigenvalues determine the 2D coordinates.

3. **Final Output:**
   - The layout is returned as a JSON object with node IDs as keys and their 2D coordinates as values.