Below is the Python script to generate a layout for the given graph. The layout ensures consistency between Euclidean distance and graph-theoretic distance. The script uses a custom force-directed algorithm to calculate the positions of the nodes.

```python
import json
import math
import random

def generate_graph_layout(edge_list, iterations=1000, k=1, damping=0.85):
    # Initialize positions randomly
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    positions = {node: [random.uniform(0, 1), random.uniform(0, 1)] for node in nodes}

    # Helper function to calculate Euclidean distance
    def euclidean_distance(pos1, pos2):
        return math.sqrt((pos1[0] - pos2[0])**2 + (pos1[1] - pos2[1])**2)

    # Helper function to calculate graph-theoretic distance
    def graph_distance(node1, node2):
        visited = set()
        queue = [(node1, 0)]
        while queue:
            current, dist = queue.pop(0)
            if current == node2:
                return dist
            if current not in visited:
                visited.add(current)
                for neighbor in adjacency_list[current]:
                    queue.append((neighbor, dist + 1))
        return float('inf')  # Should not happen in a connected graph

    # Build adjacency list
    adjacency_list = {node: [] for node in nodes}
    for u, v in edge_list:
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)

    # Force-directed algorithm
    for _ in range(iterations):
        forces = {node: [0, 0] for node in nodes}

        # Calculate repulsive forces
        for node1 in nodes:
            for node2 in nodes:
                if node1 != node2:
                    dist = euclidean_distance(positions[node1], positions[node2])
                    if dist > 0:
                        repulsive_force = k**2 / dist
                        dx = (positions[node1][0] - positions[node2][0]) / dist
                        dy = (positions[node1][1] - positions[node2][1]) / dist
                        forces[node1][0] += repulsive_force * dx
                        forces[node1][1] += repulsive_force * dy

        # Calculate attractive forces
        for u, v in edge_list:
            dist = euclidean_distance(positions[u], positions[v])
            if dist > 0:
                attractive_force = (dist**2) / k
                dx = (positions[v][0] - positions[u][0]) / dist
                dy = (positions[v][1] - positions[u][1]) / dist
                forces[u][0] += attractive_force * dx
                forces[u][1] += attractive_force * dy
                forces[v][0] -= attractive_force * dx
                forces[v][1] -= attractive_force * dy

        # Update positions based on forces
        for node in nodes:
            positions[node][0] += damping * forces[node][0]
            positions[node][1] += damping * forces[node][1]

    # Normalize positions to fit in a unit square
    min_x = min(pos[0] for pos in positions.values())
    max_x = max(pos[0] for pos in positions.values())
    min_y = min(pos[1] for pos in positions.values())
    max_y = max(pos[1] for pos in positions.values())

    for node in positions:
        positions[node][0] = (positions[node][0] - min_x) / (max_x - min_x)
        positions[node][1] = (positions[node][1] - min_y) / (max_y - min_y)

    return positions

# Input graph data
edge_list = [(0, 1), (0, 29), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), 
             (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), 
             (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), 
             (25, 26), (26, 27), (27, 28), (28, 29)]

# Generate layout
layout = generate_graph_layout(edge_list)

# Output layout in JSON format
print(json.dumps(layout, indent=2))
```

### Explanation:
1. **Initialization**: The positions of the nodes are initialized randomly within a unit square.
2. **Force Calculation**: The algorithm calculates repulsive forces between all pairs of nodes and attractive forces between connected nodes.
3. **Position Update**: The positions are updated iteratively based on the forces, with a damping factor to control the movement.
4. **Normalization**: The final positions are normalized to fit within a unit square.
5. **Output**: The layout is output in JSON format.