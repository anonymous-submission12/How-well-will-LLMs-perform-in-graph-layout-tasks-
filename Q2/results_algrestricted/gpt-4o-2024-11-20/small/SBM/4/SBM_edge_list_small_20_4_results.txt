Below is the Python script that generates a layout for the graph while keeping the community structure clear. The script uses a modularity-based community detection algorithm to divide the graph into communities and assigns positions to nodes based on their community membership. The final output is the graph layout in JSON format.

```python
import networkx as nx
import community as community_louvain
import json
import math

def generate_graph_layout(edge_list):
    # Create a graph from the edge list
    G = nx.Graph()
    G.add_edges_from(edge_list)

    # Perform community detection using the Louvain method
    partition = community_louvain.best_partition(G)

    # Group nodes by community
    communities = {}
    for node, community_id in partition.items():
        if community_id not in communities:
            communities[community_id] = []
        communities[community_id].append(node)

    # Generate positions for each community
    positions = {}
    num_communities = len(communities)
    angle_step = 2 * math.pi / num_communities
    radius = 10  # Distance of communities from the center

    for i, (community_id, nodes) in enumerate(communities.items()):
        # Calculate the center of the community
        angle = i * angle_step
        community_center_x = radius * math.cos(angle)
        community_center_y = radius * math.sin(angle)

        # Arrange nodes in a circular layout within the community
        num_nodes = len(nodes)
        node_angle_step = 2 * math.pi / num_nodes
        node_radius = 3  # Distance of nodes from the community center

        for j, node in enumerate(nodes):
            node_angle = j * node_angle_step
            node_x = community_center_x + node_radius * math.cos(node_angle)
            node_y = community_center_y + node_radius * math.sin(node_angle)
            positions[node] = (node_x, node_y)

    # Convert positions to JSON format
    positions_json = json.dumps(positions, indent=4)
    return positions_json

# Input edge list
edge_list = [
    (0, 1), (0, 3), (0, 9), (1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 5), (3, 5), 
    (4, 5), (5, 19), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (7, 8), (7, 9), (7, 10), 
    (7, 11), (8, 9), (8, 10), (10, 11), (11, 15), (12, 13), (12, 14), (12, 15), (12, 16), 
    (12, 17), (13, 14), (13, 15), (13, 16), (13, 21), (14, 15), (14, 16), (16, 17), 
    (18, 19), (18, 20), (18, 21), (18, 22), (19, 20), (19, 21), (20, 21), (20, 22), 
    (21, 22), (22, 26), (23, 24), (23, 25), (23, 26), (24, 25), (24, 27), (25, 26), 
    (25, 27), (26, 27)
]

# Generate the graph layout
layout_json = generate_graph_layout(edge_list)

# Print the layout in JSON format
print(layout_json)
```

### Explanation:
1. **Community Detection**: The script uses the Louvain method (via the `community_louvain` library) to detect communities in the graph.
2. **Community Layout**: Communities are arranged in a circular layout around a central point. Each community is assigned a unique angle, and nodes within a community are arranged in a smaller circular layout around the community's center.
3. **Output**: The positions of the nodes are stored in a dictionary and converted to JSON format for output.

### Output:
The output is a JSON object where each key is a node, and the value is a tuple representing the `(x, y)` position of the node.