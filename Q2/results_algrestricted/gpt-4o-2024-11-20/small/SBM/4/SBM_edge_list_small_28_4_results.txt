Below is the Python script to generate a graph layout that preserves community structure using a modularity-based community detection algorithm. The script outputs the layout in JSON format.

```python
import networkx as nx
import community  # python-louvain library
import json

def generate_graph_layout(edge_list):
    # Create the graph from the edge list
    G = nx.Graph()
    G.add_edges_from(edge_list)

    # Detect communities using the Louvain method
    partition = community.best_partition(G)

    # Group nodes by their community
    communities = {}
    for node, comm in partition.items():
        if comm not in communities:
            communities[comm] = []
        communities[comm].append(node)

    # Generate positions for nodes
    positions = {}
    community_centers = {}
    radius = 10  # Radius for community layout
    angle_step = 2 * 3.14159 / len(communities)  # Angle step for community centers

    # Assign positions to community centers
    for i, comm in enumerate(communities.keys()):
        angle = i * angle_step
        community_centers[comm] = (radius * nx.utils.cos(angle), radius * nx.utils.sin(angle))

    # Assign positions to nodes within each community
    for comm, nodes in communities.items():
        center_x, center_y = community_centers[comm]
        node_angle_step = 2 * 3.14159 / len(nodes) if len(nodes) > 1 else 0
        for j, node in enumerate(nodes):
            node_angle = j * node_angle_step
            node_x = center_x + nx.utils.cos(node_angle)
            node_y = center_y + nx.utils.sin(node_angle)
            positions[node] = (node_x, node_y)

    # Convert positions to JSON format
    positions_json = json.dumps(positions, indent=4)
    return positions_json

# Edge list provided
edge_list = [
    (0, 4), (0, 5), (0, 6), (0, 8), (0, 9), (0, 10), (0, 11), (1, 3), (1, 4), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10),
    (2, 3), (2, 4), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10),
    (3, 11), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9),
    (6, 10), (6, 11), (7, 8), (7, 9), (7, 10), (7, 11), (8, 9), (8, 10), (8, 11), (9, 11), (9, 22), (12, 13), (12, 14),
    (12, 15), (12, 16), (12, 17), (12, 18), (12, 19), (12, 20), (12, 21), (12, 22), (12, 23), (13, 14), (13, 15),
    (13, 16), (13, 18), (13, 19), (13, 20), (13, 22), (13, 23), (14, 15), (14, 17), (14, 18), (14, 19), (14, 20),
    (14, 22), (14, 23), (15, 16), (15, 17), (15, 18), (15, 19), (15, 22), (15, 23), (16, 17), (16, 18), (16, 19),
    (16, 22), (16, 23), (17, 19), (17, 20), (17, 21), (17, 22), (17, 23), (18, 20), (18, 21), (18, 23), (19, 21),
    (19, 23), (20, 21), (20, 22), (21, 22), (21, 23)
]

# Generate layout
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Community Detection**: The script uses the Louvain method (`community.best_partition`) to detect communities in the graph.
2. **Community Centers**: Each community is assigned a center position on a circle.
3. **Node Positions**: Nodes within a community are arranged in a circular layout around their community center.
4. **Output**: The positions of nodes are returned in JSON format.

### Note:
Install the `python-louvain` library if not already installed:
```bash
pip install python-louvain
```