Below is the Python script that generates a layout for the graph while keeping the community structure clear. The script uses a modularity-based community detection algorithm to divide the graph into communities and then assigns positions to nodes based on their community membership. The final output is a JSON representation of the graph layout.

```python
import networkx as nx
import community as community_louvain
import json
import math

def generate_graph_layout(edge_list):
    # Create a graph from the edge list
    G = nx.Graph()
    G.add_edges_from(edge_list)

    # Perform community detection using the Louvain method
    partition = community_louvain.best_partition(G)

    # Group nodes by community
    communities = {}
    for node, community in partition.items():
        if community not in communities:
            communities[community] = []
        communities[community].append(node)

    # Generate positions for each community
    positions = {}
    num_communities = len(communities)
    angle_step = 2 * math.pi / num_communities
    radius = 10  # Distance of communities from the center

    for i, (community, nodes) in enumerate(communities.items()):
        # Calculate the center of the community
        angle = i * angle_step
        community_center_x = radius * math.cos(angle)
        community_center_y = radius * math.sin(angle)

        # Arrange nodes in a circular layout within the community
        num_nodes = len(nodes)
        node_angle_step = 2 * math.pi / num_nodes
        node_radius = 3  # Distance of nodes from the community center

        for j, node in enumerate(nodes):
            node_angle = j * node_angle_step
            node_x = community_center_x + node_radius * math.cos(node_angle)
            node_y = community_center_y + node_radius * math.sin(node_angle)
            positions[node] = (node_x, node_y)

    # Convert positions to JSON format
    positions_json = json.dumps(positions)
    return positions_json

# Input edge list
edge_list = [
    (0, 1), (0, 2), (0, 4), (0, 5), (0, 16), (1, 3), (1, 4), (1, 5), (1, 9),
    (2, 4), (2, 5), (2, 11), (3, 4), (3, 5), (4, 27), (5, 16), (6, 7), (6, 8),
    (6, 9), (6, 10), (6, 11), (7, 8), (7, 9), (7, 10), (8, 9), (8, 10), (8, 11),
    (9, 10), (9, 11), (12, 13), (12, 14), (12, 16), (13, 14), (13, 15), (13, 17),
    (14, 15), (14, 16), (14, 17), (15, 16), (15, 17), (16, 17), (16, 19), (18, 19),
    (18, 21), (18, 22), (19, 20), (19, 22), (20, 21), (20, 22), (23, 27), (24, 26),
    (24, 27), (25, 26), (25, 27), (26, 27)
]

# Generate the layout
layout_json = generate_graph_layout(edge_list)

# Print the layout in JSON format
print(layout_json)
```

### Explanation:
1. **Community Detection**: The script uses the Louvain method (via the `community_louvain` library) to detect communities in the graph.
2. **Community Layout**: Communities are arranged in a circular layout around a central point, with each community's nodes arranged in a smaller circular layout within the community.
3. **Position Calculation**: The positions of nodes are calculated using trigonometric functions to ensure clear separation between communities.
4. **Output**: The final positions are serialized into JSON format for output.

### Output:
The output will be a JSON string containing the positions of all nodes in the graph. Each node is represented by its ID and its `(x, y)` coordinates.