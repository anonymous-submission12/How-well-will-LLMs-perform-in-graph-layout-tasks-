Below is the Python script to generate a graph layout based on community structure using a modularity-based community detection algorithm. The script outputs the layout in JSON format.

```python
import networkx as nx
import community  # python-louvain
import json

def generate_graph_layout(edge_list):
    # Create the graph
    G = nx.Graph()
    G.add_edges_from(edge_list)

    # Detect communities using the Louvain method
    partition = community.best_partition(G)

    # Group nodes by community
    communities = {}
    for node, comm in partition.items():
        if comm not in communities:
            communities[comm] = []
        communities[comm].append(node)

    # Generate positions for nodes
    positions = {}
    community_centers = {}
    radius = 10  # Distance between communities
    angle_step = 2 * 3.14159 / len(communities)  # Angle step for community centers

    # Assign community centers in a circular layout
    for i, comm in enumerate(communities.keys()):
        angle = i * angle_step
        community_centers[comm] = (radius * nx.cos(angle), radius * nx.sin(angle))

    # Assign positions within each community
    for comm, nodes in communities.items():
        center_x, center_y = community_centers[comm]
        sub_radius = 3  # Distance within community
        sub_angle_step = 2 * 3.14159 / len(nodes) if len(nodes) > 1 else 0

        for j, node in enumerate(nodes):
            sub_angle = j * sub_angle_step
            positions[node] = (
                center_x + sub_radius * nx.cos(sub_angle),
                center_y + sub_radius * nx.sin(sub_angle)
            )

    # Output positions in JSON format
    return json.dumps(positions, indent=4)

# Edge list provided
edge_list = [
    (0, 1), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 20), (1, 2), (1, 3), (1, 4), (1, 5), (1, 8), (1, 9),
    (1, 10), (1, 11), (1, 12), (2, 3), (2, 4), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (2, 12), (3, 5), (3, 6), (3, 7),
    (3, 8), (3, 9), (3, 10), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (4, 11), (4, 12), (5, 6), (5, 7), (5, 8),
    (5, 9), (5, 10), (5, 12), (6, 10), (6, 11), (7, 8), (7, 9), (7, 11), (7, 12), (8, 9), (8, 10), (8, 14), (9, 10),
    (9, 11), (9, 12), (9, 14), (11, 12), (13, 14), (13, 15), (13, 16), (13, 17), (13, 18), (13, 19), (13, 20), (13, 21),
    (13, 22), (13, 24), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (14, 20), (14, 21), (14, 22), (14, 23),
    (14, 24), (15, 16), (15, 17), (15, 18), (15, 19), (15, 21), (15, 22), (15, 24), (16, 17), (16, 20), (16, 22),
    (16, 24), (17, 19), (17, 20), (17, 21), (17, 22), (17, 24), (18, 20), (18, 24), (19, 20), (19, 22), (19, 23),
    (19, 24), (20, 22), (20, 23), (20, 24), (21, 22), (21, 23), (21, 24), (22, 23), (23, 24)
]

# Generate layout
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Community Detection**: The script uses the Louvain method (`community.best_partition`) to detect communities in the graph.
2. **Community Centers**: Communities are placed in a circular layout, ensuring clear separation between them.
3. **Node Positions**: Nodes within each community are arranged in a smaller circular layout around their community center.
4. **Output**: The positions of nodes are returned in JSON format.

### Requirements:
- Install the `python-louvain` package for community detection:
  ```bash
  pip install python-louvain
  ```