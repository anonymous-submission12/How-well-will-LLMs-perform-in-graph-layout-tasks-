Below is the Python script to generate a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance. The script uses a custom approach to compute node positions based on graph-theoretic distances.

```python
import json
import numpy as np
from scipy.spatial.distance import euclidean
from scipy.optimize import minimize

def generate_graph_layout(edge_list):
    # Step 1: Create adjacency list
    adjacency_list = {}
    for u, v in edge_list:
        adjacency_list.setdefault(u, []).append(v)
        adjacency_list.setdefault(v, []).append(u)

    # Step 2: Compute graph-theoretic distances using BFS
    def bfs_distances(start_node):
        distances = {start_node: 0}
        queue = [start_node]
        while queue:
            current = queue.pop(0)
            for neighbor in adjacency_list[current]:
                if neighbor not in distances:
                    distances[neighbor] = distances[current] + 1
                    queue.append(neighbor)
        return distances

    all_distances = {}
    for node in adjacency_list:
        all_distances[node] = bfs_distances(node)

    # Step 3: Define objective function to minimize
    def objective_function(positions):
        positions = positions.reshape(-1, 2)
        error = 0
        for u in adjacency_list:
            for v in adjacency_list:
                if u != v:
                    graph_distance = all_distances[u][v]
                    euclidean_distance = euclidean(positions[u], positions[v])
                    error += (euclidean_distance - graph_distance) ** 2
        return error

    # Step 4: Initialize random positions for nodes
    num_nodes = len(adjacency_list)
    initial_positions = np.random.rand(num_nodes, 2)

    # Step 5: Optimize positions using scipy's minimize
    result = minimize(
        objective_function,
        initial_positions.flatten(),
        method='L-BFGS-B'
    )
    optimized_positions = result.x.reshape(-1, 2)

    # Step 6: Convert positions to JSON format
    layout = {node: optimized_positions[node].tolist() for node in adjacency_list}
    return json.dumps(layout, indent=4)

# Input edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 5), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), 
    (2, 3), (2, 5), (2, 6), (3, 5), (3, 6), (3, 22), (4, 5), (4, 6), (5, 6), 
    (5, 21), (7, 9), (7, 10), (7, 11), (7, 13), (8, 9), (8, 13), (8, 17), 
    (10, 12), (10, 13), (11, 12), (11, 13), (12, 13), (13, 18), (14, 15), 
    (14, 16), (14, 17), (14, 18), (14, 20), (15, 17), (15, 20), (16, 17), 
    (16, 18), (16, 20), (17, 18), (17, 20), (18, 19), (18, 20), (18, 21), 
    (21, 22), (21, 25), (21, 26), (21, 27), (22, 23), (22, 24), (22, 25), 
    (22, 26), (22, 27), (23, 24), (23, 25), (23, 26), (24, 25), (24, 26), 
    (24, 27), (25, 26), (25, 27)
]

# Generate layout
graph_layout = generate_graph_layout(edge_list)
print(graph_layout)
```

This script computes a layout for the graph by minimizing the difference between Euclidean distances and graph-theoretic distances. The output is a JSON object containing the positions of each node.