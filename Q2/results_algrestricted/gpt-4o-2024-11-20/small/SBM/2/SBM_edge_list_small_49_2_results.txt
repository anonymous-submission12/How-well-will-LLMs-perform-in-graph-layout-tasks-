Here is the Python script that computes a graph layout maintaining consistency between the Euclidean distance and graph-theoretic distances without using any predefined graph layout algorithms. The script first computes all-pairs shortest paths using the Floyd-Warshall algorithm to determine graph-theoretic distances, and constructs node positions in a manner consistent with these distances.

```python
import json
import numpy as np

def compute_graph_layout(edge_list):
    # Extract nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = list(nodes)
    n = len(nodes)

    # Create adjacency matrix
    index = {node: i for i, node in enumerate(nodes)}
    adjacency_matrix = np.full((n, n), np.inf)
    np.fill_diagonal(adjacency_matrix, 0)

    for u, v in edge_list:
        adjacency_matrix[index[u], index[v]] = 1
        adjacency_matrix[index[v], index[u]] = 1

    # Compute all-pairs shortest paths using Floyd-Warshall algorithm
    for k in range(n):
        for i in range(n):
            for j in range(n):
                adjacency_matrix[i, j] = min(
                    adjacency_matrix[i, j],
                    adjacency_matrix[i, k] + adjacency_matrix[k, j]
                )

    # Initialize positions randomly
    positions = np.random.rand(n, 2)

    # Gradient descent to optimize for consistent distances
    learning_rate = 0.01
    for _ in range(1000):  # Number of iterations
        for i in range(n):
            for j in range(i + 1, n):
                if adjacency_matrix[i, j] < np.inf:
                    dist = np.linalg.norm(positions[i] - positions[j])
                    desired_dist = adjacency_matrix[i, j]
                    error = dist - desired_dist
                    if dist != 0:
                        grad = error * (positions[i] - positions[j]) / dist
                        positions[i] -= learning_rate * grad
                        positions[j] += learning_rate * grad

    # Map positions back to nodes
    graph_layout = {nodes[i]: positions[i].tolist() for i in range(n)}
    return graph_layout

# Example usage
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 7), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), 
             (1, 2), (1, 5), (1, 6), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), 
             (2, 3), (2, 6), (2, 7), (2, 9), (2, 11), (2, 12), (2, 13), (3, 4), (3, 6), (3, 7), 
             (3, 8), (3, 11), (3, 13), (4, 5), (4, 6), (4, 8), (4, 9), (4, 10), (4, 11), 
             (5, 6), (5, 7), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (6, 7), (6, 8), (6, 10), 
             (6, 11), (6, 12), (6, 13), (7, 8), (7, 9), (7, 11), (7, 12), (8, 9), (8, 10), (8, 11), 
             (8, 12), (8, 13), (9, 10), (9, 12), (9, 13), (10, 11), (10, 12), (10, 13), (11, 13), 
             (11, 22), (12, 13), 
             (14, 16), (14, 17), (14, 18), (14, 19), (14, 20), (14, 21), (14, 25), (14, 26), 
             (15, 16), (15, 19), (15, 21), (15, 23), (15, 25), (15, 26), (16, 17), (16, 18), 
             (16, 19), (16, 20), (16, 21), (16, 23), (16, 25), (16, 26), (17, 18), (17, 19), 
             (17, 20), (17, 21), (17, 25), (17, 26), (18, 19), (18, 21), (18, 22), (18, 23), 
             (18, 25), (18, 26), (19, 20), (19, 22), (19, 24), (19, 25), (19, 26), (20, 22), 
             (20, 23), (20, 26), (21, 22), (21, 23), (21, 25), (21, 26), (22, 23), (22, 25), 
             (22, 26), (23, 24), (23, 25), (23, 26), (24, 25)]

layout = compute_graph_layout(edge_list)
print(json.dumps(layout, indent=2))
```

This code generates a layout for the graph and outputs the node positions in JSON format. Note that the positions are determined using gradient descent to minimize the difference between Euclidean distances in the layout and the graph-theoretic distances. You can adjust the number of iterations or learning rate for finer control.