To generate a graph layout consistent with the graph-theoretic distance, we can use a force-directed algorithm. Here's the Python script to compute positions for all nodes in the provided graph:

```python
import json
import math
from collections import defaultdict

def compute_graph_distance(edge_list, num_nodes):
    """Compute graph-theoretic distance (shortest paths) between all pairs of nodes."""
    dist = [[float('inf')] * num_nodes for _ in range(num_nodes)]
    for u, v in edge_list:
        dist[u][v] = 1
        dist[v][u] = 1
    for i in range(num_nodes):
        dist[i][i] = 0
    for k in range(num_nodes):
        for i in range(num_nodes):
            for j in range(num_nodes):
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])
    return dist

def normalize_positions(positions):
    """Normalize positions to fit within a unit square."""
    min_x = min(pos[0] for pos in positions.values())
    min_y = min(pos[1] for pos in positions.values())
    max_x = max(pos[0] for pos in positions.values())
    max_y = max(pos[1] for pos in positions.values())

    range_x = max_x - min_x
    range_y = max_y - min_y

    for node in positions:
        positions[node] = [
            (positions[node][0] - min_x) / range_x,
            (positions[node][1] - min_y) / range_y,
        ]
    return positions

def compute_layout(edge_list, num_nodes, max_iter=1000, learning_rate=0.01):
    """Compute positions for nodes to maintain consistency between
    Euclidean distance and graph-theoretic distance."""
    # Compute graph-theoretic distances
    graph_distances = compute_graph_distance(edge_list, num_nodes)

    # Initialize random positions for nodes
    positions = {i: [math.cos(2 * math.pi * i / num_nodes), math.sin(2 * math.pi * i / num_nodes)] for i in range(num_nodes)}
    
    for _ in range(max_iter):
        # Compute forces between all pairs of nodes
        forces = defaultdict(lambda: [0, 0])
        for i in range(num_nodes):
            for j in range(num_nodes):
                if i != j:
                    # Desired Euclidean distance proportional to graph-theoretic distance
                    target_dist = graph_distances[i][j]
                    if target_dist == float('inf'):
                        continue  # Skip if nodes are disconnected
                    
                    # Current Euclidean distance
                    delta_x = positions[j][0] - positions[i][0]
                    delta_y = positions[j][1] - positions[i][1]
                    current_dist = math.sqrt(delta_x**2 + delta_y**2)
                    
                    # Compute force vector
                    if current_dist == 0:
                        continue  # Avoid division by zero
                    force_magnitude = (current_dist - target_dist)
                    forces[i][0] += force_magnitude * delta_x / current_dist
                    forces[i][1] += force_magnitude * delta_y / current_dist
        
        # Update positions based on computed forces
        for i in range(num_nodes):
            positions[i][0] -= learning_rate * forces[i][0]
            positions[i][1] -= learning_rate * forces[i][1]

    # Normalize positions to fit within a unit square
    positions = normalize_positions(positions)
    
    return positions

# Input graph data
edge_list = [
    (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 9), (1, 2), (1, 5), (1, 6), (1, 7),
    (1, 8), (1, 9), (2, 4), (2, 5), (2, 7), (2, 8), (2, 9), (2, 21), (3, 4), (3, 5),
    (3, 6), (3, 7), (3, 8), (3, 9), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6),
    (5, 7), (5, 8), (6, 7), (6, 8), (6, 9), (6, 18), (7, 9), (10, 11), (10, 12),
    (10, 13), (10, 14), (10, 15), (10, 16), (10, 17), (10, 18), (10, 19), (11, 12),
    (11, 13), (11, 14), (11, 15), (11, 16), (11, 17), (11, 18), (11, 19), (11, 28),
    (12, 13), (12, 15), (12, 16), (12, 17), (12, 27), (13, 15), (13, 16), (13, 17),
    (13, 18), (13, 19), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (15, 16),
    (15, 17), (15, 19), (16, 17), (16, 19), (17, 18), (17, 19), (18, 19), (18, 22),
    (20, 21), (20, 23), (20, 26), (20, 27), (20, 29), (21, 22), (21, 24), (21, 25),
    (21, 27), (21, 28), (21, 29), (22, 23), (22, 24), (22, 26), (22, 27), (22, 28),
    (23, 24), (23, 25), (23, 26), (23, 28), (23, 29), (24, 27), (24, 29), (25, 27),
    (25, 28), (25, 29), (26, 27), (26, 28), (26, 29), (27, 28), (28, 29)
]
num_nodes = 30

# Compute graph layout positions
layout = compute_layout(edge_list, num_nodes)

# Output layout in JSON format
print(json.dumps(layout, indent=2))
```

This script uses a basic force-directed method where the Euclidean distance between node positions is adjusted to match the graph-theoretic distances between nodes. It outputs the positions of nodes in JSON format. Note that the algorithm iteratively adjusts positions over `max_iter` iterations to simulate minimization of energy based on differences between graph-theoretic and Euclidean distances.