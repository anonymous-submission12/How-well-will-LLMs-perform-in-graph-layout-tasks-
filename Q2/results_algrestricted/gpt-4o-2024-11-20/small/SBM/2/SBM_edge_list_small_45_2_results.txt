To generate a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance, we can use a custom approach involving multidimensional scaling (MDS). MDS is a dimensionality reduction technique that positions nodes in a way that preserves pairwise distances as closely as possible in Euclidean space.

Here is the Python code to achieve this:

```python
import numpy as np
import json
from scipy.spatial.distance import squareform
from scipy.sparse.csgraph import shortest_path

# Input edge list
edge_list = [
    (0, 2), (0, 3), (0, 4), (0, 5), (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (2, 5),
    (3, 4), (4, 5), (5, 6), (6, 7), (6, 8), (6, 10), (6, 11), (7, 8), (7, 9), (7, 10),
    (7, 11), (7, 14), (8, 9), (8, 10), (8, 11), (9, 10), (9, 11), (10, 11), (12, 13),
    (12, 14), (12, 17), (13, 15), (13, 16), (13, 17), (13, 23), (14, 15), (14, 17),
    (15, 16), (15, 17), (16, 17), (16, 22), (18, 19), (18, 21), (18, 22), (18, 23),
    (19, 20), (19, 21), (19, 22), (20, 21), (20, 22), (20, 23), (21, 22), (21, 23),
    (22, 23)
]

# Step 1: Create an adjacency matrix
nodes = sorted(set(node for edge in edge_list for node in edge))
n = len(nodes)
node_to_idx = {node: idx for idx, node in enumerate(nodes)}

adj_matrix = np.zeros((n, n))
for u, v in edge_list:
    adj_matrix[node_to_idx[u], node_to_idx[v]] = 1
    adj_matrix[node_to_idx[v], node_to_idx[u]] = 1

# Step 2: Calculate graph-theoretic distances using shortest path
distance_matrix = shortest_path(csgraph=adj_matrix, directed=False, unweighted=True)

# Step 3: Apply multidimensional scaling (MDS)
def mds(distance_matrix, dimensions=2):
    # Double centering
    n = distance_matrix.shape[0]
    J = np.eye(n) - (1 / n) * np.ones((n, n))
    B = -0.5 * J @ (distance_matrix ** 2) @ J

    # Eigen decomposition
    eigenvalues, eigenvectors = np.linalg.eigh(B)
    sorted_indices = np.argsort(eigenvalues)[::-1]
    top_eigenvalues = eigenvalues[sorted_indices[:dimensions]]
    top_eigenvectors = eigenvectors[:, sorted_indices[:dimensions]]

    # Embed nodes in the specified dimensions
    return top_eigenvectors * np.sqrt(top_eigenvalues)

positions = mds(distance_matrix)

# Step 4: Convert layout to JSON format
layout = {node: positions[node_to_idx[node]].tolist() for node in nodes}

# Output the layout
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Adjacency Matrix:** Represents connections between nodes as a matrix where the entry `(i, j)` is 1 if nodes `i` and `j` are connected.
2. **Shortest Path:** Calculates the graph-theoretic distance using the Floyd-Warshall algorithm.
3. **Multidimensional Scaling (MDS):** Uses a double-centering approach and spectral decomposition to embed the graph in a 2D Euclidean space while preserving pairwise graph-theoretic distances.
4. **JSON Output:** Exports the computed positions in JSON format.

This code complies with the requirement: no existing layout algorithms are used, and it outputs the layout in JSON format.