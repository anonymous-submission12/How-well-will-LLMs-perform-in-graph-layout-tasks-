Below is the Python script to generate a layout for the given graph. The layout ensures consistency between Euclidean distance and graph-theoretic distance. The script uses a custom force-directed algorithm to compute the positions of the nodes.

```python
import json
import math
import random
from collections import defaultdict

def compute_graph_layout(edge_list, iterations=1000, k=0.1, repulsive_force=0.01):
    # Initialize graph structure
    graph = defaultdict(list)
    for u, v in edge_list:
        graph[u].append(v)
        graph[v].append(u)

    # Initialize positions randomly
    positions = {node: (random.uniform(0, 1), random.uniform(0, 1)) for node in graph}

    # Helper function to calculate Euclidean distance
    def euclidean_distance(pos1, pos2):
        return math.sqrt((pos1[0] - pos2[0]) ** 2 + (pos1[1] - pos2[1]) ** 2)

    # Helper function to normalize a vector
    def normalize_vector(dx, dy):
        magnitude = math.sqrt(dx ** 2 + dy ** 2)
        if magnitude == 0:
            return 0, 0
        return dx / magnitude, dy / magnitude

    # Force-directed layout algorithm
    for _ in range(iterations):
        # Initialize forces
        forces = {node: [0, 0] for node in graph}

        # Compute repulsive forces
        for node1 in graph:
            for node2 in graph:
                if node1 != node2:
                    dx = positions[node1][0] - positions[node2][0]
                    dy = positions[node1][1] - positions[node2][1]
                    distance = euclidean_distance(positions[node1], positions[node2])
                    if distance > 0:
                        repulsive = repulsive_force / distance
                        fx, fy = normalize_vector(dx, dy)
                        forces[node1][0] += fx * repulsive
                        forces[node1][1] += fy * repulsive

        # Compute attractive forces
        for node1, neighbors in graph.items():
            for node2 in neighbors:
                dx = positions[node2][0] - positions[node1][0]
                dy = positions[node2][1] - positions[node1][1]
                distance = euclidean_distance(positions[node1], positions[node2])
                attractive = (distance ** 2) / k
                fx, fy = normalize_vector(dx, dy)
                forces[node1][0] += fx * attractive
                forces[node1][1] += fy * attractive

        # Update positions based on forces
        for node in graph:
            positions[node] = (
                positions[node][0] + forces[node][0],
                positions[node][1] + forces[node][1]
            )

    # Return positions in JSON format
    return json.dumps(positions, indent=2)

# Input edge list
edge_list = [
    (0, 4), (0, 5), (0, 6), (0, 8), (0, 9), (0, 10), (0, 11), (1, 3), (1, 4), (1, 6),
    (1, 7), (1, 8), (1, 9), (1, 10), (2, 3), (2, 4), (2, 6), (2, 7), (2, 8), (2, 9),
    (2, 10), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 11), (4, 6),
    (4, 7), (4, 8), (4, 9), (4, 10), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7),
    (6, 8), (6, 9), (6, 10), (6, 11), (7, 8), (7, 9), (7, 10), (7, 11), (8, 9), (8, 10),
    (8, 11), (9, 11), (9, 22), (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (12, 18),
    (12, 19), (12, 20), (12, 21), (12, 22), (12, 23), (13, 14), (13, 15), (13, 16), (13, 18),
    (13, 19), (13, 20), (13, 22), (13, 23), (14, 15), (14, 17), (14, 18), (14, 19), (14, 20),
    (14, 22), (14, 23), (15, 16), (15, 17), (15, 18), (15, 19), (15, 22), (15, 23), (16, 17),
    (16, 18), (16, 19), (16, 22), (16, 23), (17, 19), (17, 20), (17, 21), (17, 22), (17, 23),
    (18, 20), (18, 21), (18, 23), (19, 21), (19, 23), (20, 21), (20, 22), (21, 22), (21, 23)
]

# Generate layout
layout = compute_graph_layout(edge_list)
print(layout)
```

This script computes the layout of the graph using a custom force-directed algorithm. The output is a JSON-formatted string containing the positions of the nodes.