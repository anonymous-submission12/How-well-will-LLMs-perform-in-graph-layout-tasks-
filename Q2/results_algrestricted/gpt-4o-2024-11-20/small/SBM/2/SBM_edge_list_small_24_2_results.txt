To generate a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance, we can use a custom algorithm. The algorithm will compute the shortest path distances between all pairs of nodes using Floyd-Warshall or Dijkstra's algorithm, then embed the graph in a Euclidean space such that the Euclidean distances approximate the graph-theoretic distances.

Below is the Python script to achieve this:

```python
import json
import numpy as np
from scipy.optimize import minimize
from collections import defaultdict

def compute_shortest_path_distances(edge_list, num_nodes):
    # Initialize distance matrix
    dist = np.full((num_nodes, num_nodes), np.inf)
    np.fill_diagonal(dist, 0)
    
    # Populate distances based on edge list
    for u, v in edge_list:
        dist[u, v] = 1
        dist[v, u] = 1
    
    # Floyd-Warshall algorithm to compute shortest paths
    for k in range(num_nodes):
        for i in range(num_nodes):
            for j in range(num_nodes):
                dist[i, j] = min(dist[i, j], dist[i, k] + dist[k, j])
    
    return dist

def graph_layout(edge_list, num_nodes, dim=2):
    # Compute shortest path distances
    sp_distances = compute_shortest_path_distances(edge_list, num_nodes)
    
    # Objective function to minimize
    def stress_function(positions):
        positions = positions.reshape((num_nodes, dim))
        stress = 0
        for i in range(num_nodes):
            for j in range(i + 1, num_nodes):
                graph_dist = sp_distances[i, j]
                if graph_dist < np.inf:  # Only consider connected nodes
                    euclidean_dist = np.linalg.norm(positions[i] - positions[j])
                    stress += (euclidean_dist - graph_dist) ** 2
        return stress
    
    # Initial positions (random)
    initial_positions = np.random.rand(num_nodes * dim)
    
    # Minimize stress function
    result = minimize(stress_function, initial_positions, method='L-BFGS-B')
    final_positions = result.x.reshape((num_nodes, dim))
    
    # Convert positions to dictionary format
    layout = {i: final_positions[i].tolist() for i in range(num_nodes)}
    return layout

# Input graph data
edge_list = [(0, 1), (0, 2), (0, 3), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), 
             (3, 4), (3, 5), (4, 5), (4, 22), (5, 14), (6, 7), (6, 8), (6, 10), (7, 8), 
             (7, 9), (7, 10), (7, 11), (8, 9), (8, 10), (8, 11), (9, 10), (9, 11), 
             (10, 11), (10, 26), (12, 13), (12, 16), (12, 17), (13, 15), (13, 16), 
             (13, 17), (13, 25), (14, 15), (14, 16), (14, 17), (14, 19), (15, 16), 
             (15, 17), (16, 17), (18, 19), (18, 20), (18, 21), (18, 22), (19, 20), 
             (19, 21), (20, 21), (20, 22), (21, 22), (23, 24), (23, 25), (23, 26), 
             (23, 27), (24, 26), (24, 27), (25, 26), (25, 27), (26, 27)]
num_nodes = 28  # Total number of nodes in the graph

# Generate layout
layout = graph_layout(edge_list, num_nodes)

# Output layout in JSON format
print(json.dumps(layout, indent=2))
```

### Explanation:
1. **Shortest Path Calculation**: The `compute_shortest_path_distances` function uses the Floyd-Warshall algorithm to compute the shortest path distances between all pairs of nodes.
2. **Stress Function**: The `stress_function` measures the difference between graph-theoretic distances and Euclidean distances for all pairs of nodes.
3. **Optimization**: The `minimize` function from `scipy.optimize` is used to find node positions in a 2D space that minimize the stress function.
4. **Output**: The final positions are returned as a dictionary and printed in JSON format.

This script ensures that the Euclidean distances between nodes approximate the graph-theoretic distances.