Below is the Python code that calculates a graph layout based on maintaining consistency between Euclidean distance and graph-theoretic distance. This approach uses a force-directed algorithm implemented manually to minimize differences between the two distances.

```python
import json
import random
from math import sqrt
from collections import defaultdict


def compute_graph_layout(edge_list, iterations=1000, initial_range=10, spring_length=1, spring_constant=0.1):
    # Build adjacency list for graph
    graph = defaultdict(list)
    for u, v in edge_list:
        graph[u].append(v)
        graph[v].append(u)

    # Get all nodes in the graph
    nodes = list(graph.keys())

    # Initialize random positions for nodes
    positions = {node: [random.uniform(-initial_range, initial_range), random.uniform(-initial_range, initial_range)] for node in nodes}

    # Function to compute graph-theoretic distance (BFS)
    def compute_distances(graph, start_node):
        distances = {node: float('inf') for node in graph}
        distances[start_node] = 0
        queue = [start_node]

        while queue:
            current = queue.pop(0)
            for neighbor in graph[current]:
                if distances[neighbor] == float('inf'):
                    distances[neighbor] = distances[current] + 1
                    queue.append(neighbor)
        return distances

    # Precompute graph-theoretic distances between all pairs of nodes
    all_distances = {}
    for node in nodes:
        all_distances[node] = compute_distances(graph, node)

    # Force-directed algorithm to adjust positions
    for _ in range(iterations):
        # Create a dictionary to store net force on each node
        net_forces = {node: [0, 0] for node in nodes}

        # Compute pairwise forces
        for i, node_a in enumerate(nodes):
            for j, node_b in enumerate(nodes):
                if i >= j:
                    continue

                # Graph-theoretic distance
                graph_dist = all_distances[node_a][node_b]

                # Skip if nodes are unreachable from each other
                if graph_dist == float('inf'):
                    continue

                # Euclidean distance
                dx = positions[node_b][0] - positions[node_a][0]
                dy = positions[node_b][1] - positions[node_a][1]
                euclidean_dist = sqrt(dx**2 + dy**2)

                # Compute spring forces to maintain consistency
                delta_dist = euclidean_dist - graph_dist * spring_length
                force_magnitude = spring_constant * delta_dist

                # Normalize the force vector
                if euclidean_dist > 1e-6:  # Avoid division by zero
                    fx = force_magnitude * (dx / euclidean_dist)
                    fy = force_magnitude * (dy / euclidean_dist)
                else:
                    fx, fy = 0, 0

                # Apply forces to the nodes
                net_forces[node_a][0] += fx
                net_forces[node_a][1] += fy
                net_forces[node_b][0] -= fx
                net_forces[node_b][1] -= fy

        # Update node positions based on net forces
        for node in nodes:
            positions[node][0] += net_forces[node][0]
            positions[node][1] += net_forces[node][1]

    # Convert positions to JSON format
    layout_json = json.dumps({node: {"x": positions[node][0], "y": positions[node][1]} for node in positions}, indent=4)
    return layout_json


# Edge list for the graph (input data)
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 3),
    (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6), (4, 6), (4, 24), (5, 6), (7, 8), (7, 9), (7, 10),
    (7, 11), (7, 12), (8, 12), (9, 10), (9, 11), (10, 11), (10, 12), (11, 12), (12, 24), (13, 16),
    (13, 17), (14, 15), (14, 16), (14, 17), (14, 18), (15, 16), (16, 17), (17, 18), (18, 23),
    (19, 21), (19, 22), (19, 23), (20, 21), (20, 22), (20, 24), (21, 22), (21, 23), (21, 24), (22, 23),
    (22, 24), (23, 24)
]

# Generate graph layout in JSON format
layout = compute_graph_layout(edge_list)
print(layout)
```

### Explanation:
This code computes positions using a customized force-directed layout algorithm:
- **Graph-theoretic distances**: This is computed using Breadth-First Search (BFS).
- **Force adjustment**: Forces calculated based on deviations between Euclidean distances and graph-theoretic distances push the nodes iteratively closer to the desired positions.

The result is printed as a JSON string containing the positions of each node. This does not use external visualization libraries like `matplotlib` or `networkx`.