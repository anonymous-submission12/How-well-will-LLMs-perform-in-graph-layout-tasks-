Below is the Python script to generate a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance. The script uses a custom algorithm to compute node positions based on graph-theoretic distances.

```python
import json
import numpy as np
from scipy.spatial.distance import euclidean
from scipy.optimize import minimize
from collections import defaultdict

# Input graph data
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12),
    (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13),
    (2, 4), (2, 7), (2, 8), (2, 10), (2, 11), (2, 12), (3, 4), (3, 6), (3, 8), (3, 9), (3, 10),
    (4, 5), (4, 6), (4, 7), (4, 8), (4, 10), (4, 11), (4, 12), (4, 20), (5, 6), (5, 7), (5, 8),
    (5, 11), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12), (7, 8), (7, 9), (7, 11), (7, 12), (8, 9),
    (8, 10), (8, 11), (8, 12), (9, 10), (9, 11), (9, 12), (10, 11), (10, 12), (11, 12), (13, 14),
    (13, 15), (13, 16), (13, 18), (13, 20), (13, 21), (13, 22), (13, 23), (13, 24), (14, 15),
    (14, 17), (14, 18), (14, 20), (14, 21), (14, 22), (14, 23), (14, 24), (15, 16), (15, 17),
    (15, 18), (15, 19), (15, 21), (15, 22), (15, 23), (15, 24), (15, 25), (16, 17), (16, 18),
    (16, 19), (16, 20), (16, 22), (16, 25), (17, 18), (17, 20), (17, 22), (17, 25), (18, 19),
    (18, 20), (18, 22), (18, 24), (18, 25), (19, 20), (19, 22), (19, 24), (19, 25), (20, 21),
    (20, 23), (20, 24), (21, 22), (21, 23), (21, 24), (21, 25), (22, 23), (22, 25), (23, 24),
    (23, 25), (24, 25)
]

# Step 1: Build adjacency list
def build_adjacency_list(edges):
    adj_list = defaultdict(list)
    for u, v in edges:
        adj_list[u].append(v)
        adj_list[v].append(u)
    return adj_list

adj_list = build_adjacency_list(edge_list)

# Step 2: Compute graph-theoretic distances using BFS
def bfs_distances(adj_list, start_node):
    distances = {start_node: 0}
    queue = [start_node]
    while queue:
        current = queue.pop(0)
        for neighbor in adj_list[current]:
            if neighbor not in distances:
                distances[neighbor] = distances[current] + 1
                queue.append(neighbor)
    return distances

# Compute all-pairs shortest paths
all_distances = {}
nodes = list(adj_list.keys())
for node in nodes:
    all_distances[node] = bfs_distances(adj_list, node)

# Step 3: Define objective function for layout optimization
def layout_error(positions):
    positions = positions.reshape(-1, 2)
    error = 0
    for i in nodes:
        for j in nodes:
            if i != j:
                graph_dist = all_distances[i][j]
                euclidean_dist = euclidean(positions[i], positions[j])
                error += (euclidean_dist - graph_dist) ** 2
    return error

# Step 4: Optimize node positions
initial_positions = np.random.rand(len(nodes), 2)  # Random initial positions
result = minimize(layout_error, initial_positions.flatten(), method='L-BFGS-B')
optimized_positions = result.x.reshape(-1, 2)

# Step 5: Convert positions to JSON format
layout = {node: list(optimized_positions[node]) for node in nodes}
layout_json = json.dumps(layout, indent=4)

# Output the layout in JSON format
print(layout_json)
```