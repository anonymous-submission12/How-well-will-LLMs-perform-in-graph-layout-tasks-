Here is a Python script to generate a layout for the provided graph in JSON format. The layout ensures consistency between Euclidean distance and graph-theoretic distances. The positions are determined by minimizing a custom objective function designed to achieve this consistency.

```python
import json
import numpy as np
from scipy.optimize import minimize
from itertools import combinations

def calculate_graph_distances(edge_list, num_nodes):
    # Compute shortest path graph distances using Floyd-Warshall algorithm
    inf = float('inf')
    distances = np.full((num_nodes, num_nodes), inf)
    for i in range(num_nodes):
        distances[i, i] = 0
    for u, v in edge_list:
        distances[u, v] = 1
        distances[v, u] = 1
    for k in range(num_nodes):
        for i in range(num_nodes):
            for j in range(num_nodes):
                distances[i, j] = min(distances[i, j], distances[i, k] + distances[k, j])
    return distances

def objective_function(positions, distances, num_nodes):
    # Objective function to maintain consistency between graph-theoretic distances and Euclidean distances
    positions = positions.reshape((num_nodes, 2))
    total_error = 0
    for i, j in combinations(range(num_nodes), 2):
        graph_dist = distances[i, j]
        if graph_dist == float('inf'):
            continue
        euclidean_dist = np.linalg.norm(positions[i] - positions[j])
        total_error += (euclidean_dist - graph_dist) ** 2
    return total_error

def generate_layout(edge_list, num_nodes):
    # Compute graph-theoretic distances
    distances = calculate_graph_distances(edge_list, num_nodes)

    # Initialize positions randomly
    initial_positions = np.random.rand(num_nodes, 2)

    # Minimize the objective function
    result = minimize(
        objective_function,
        initial_positions.flatten(),
        args=(distances, num_nodes),
        method='L-BFGS-B'
    )

    # Extract optimized positions
    final_positions = result.x.reshape((num_nodes, 2))
    layout = {node: final_positions[node].tolist() for node in range(num_nodes)}
    return layout

# Input graph edge list
edge_list = [(0, 1), (0, 2), (0, 4), (0, 5), (1, 3), (1, 5), (1, 6), (1, 7), (2, 5), (2, 6), 
             (2, 13), (2, 19), (2, 23), (3, 4), (3, 5), (3, 6), (3, 7), (3, 13), (4, 5), 
             (4, 6), (4, 7), (5, 6), (5, 13), (5, 21), (6, 7), (8, 9), (8, 10), (8, 11), 
             (8, 12), (9, 11), (9, 12), (9, 13), (9, 14), (10, 11), (10, 12), (10, 13), 
             (10, 14), (10, 20), (11, 12), (11, 13), (11, 14), (12, 13), (12, 14), (13, 14), 
             (13, 20), (15, 16), (15, 18), (15, 19), (15, 20), (15, 21), (16, 18), (16, 20), 
             (16, 21), (17, 18), (17, 20), (17, 21), (18, 19), (18, 21), (19, 20), (19, 21), 
             (20, 21), (22, 23), (22, 24), (22, 26), (22, 27), (22, 28), (23, 24), (23, 25), 
             (23, 27), (23, 28), (24, 25), (24, 27), (24, 28), (25, 27), (27, 28)]

# Determine the number of nodes in the graph
num_nodes = max(max(u, v) for u, v in edge_list) + 1

# Generate the layout
layout = generate_layout(edge_list, num_nodes)

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph-Theoretic Distances**: The `calculate_graph_distances` function computes the shortest path distance between every pair of nodes using the Floyd-Warshall algorithm.

2. **Objective Function**: The `objective_function` calculates the error between the Euclidean distances in the layout and the graph-theoretic distances. The goal is to minimize this error.

3. **Optimization**: The `scipy.optimize.minimize` function minimizes the objective function, adjusting the node positions iteratively.

4. **Output**: The final optimized positions are stored in a dictionary and printed in JSON format. 

Run the code to compute a layout that maintains consistency between Euclidean and graph-theoretic distances. Note that the positions are optimized but not visualized explicitly (as specified).