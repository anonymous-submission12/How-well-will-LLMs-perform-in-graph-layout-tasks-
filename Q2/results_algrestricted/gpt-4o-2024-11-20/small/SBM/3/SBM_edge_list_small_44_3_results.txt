To generate a layout for the graph that minimizes edge crossings without using existing graph layout algorithms, we can implement a custom algorithm. One approach is to use a force-directed layout algorithm, where nodes repel each other and edges act as springs pulling connected nodes together. Below is the Python code to compute such a layout:

```python
import json
import math
import random

def generate_layout(edge_list, iterations=1000, width=1000, height=1000):
    # Initialize positions randomly
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    positions = {node: [random.uniform(0, width), random.uniform(0, height)] for node in nodes}
    
    # Parameters for the force-directed layout
    k = math.sqrt((width * height) / len(nodes))  # Ideal distance between nodes
    repulsion_strength = 1.0
    spring_strength = 0.1
    damping = 0.85  # To reduce oscillations
    
    def euclidean_distance(pos1, pos2):
        return math.sqrt((pos1[0] - pos2[0])**2 + (pos1[1] - pos2[1])**2)
    
    # Iteratively adjust positions
    for _ in range(iterations):
        # Calculate repulsion forces
        forces = {node: [0, 0] for node in nodes}
        for node1 in nodes:
            for node2 in nodes:
                if node1 != node2:
                    pos1, pos2 = positions[node1], positions[node2]
                    dist = euclidean_distance(pos1, pos2)
                    if dist > 0:
                        repulsion = repulsion_strength * (k**2 / dist)
                        direction = [(pos1[0] - pos2[0]) / dist, (pos1[1] - pos2[1]) / dist]
                        forces[node1][0] += repulsion * direction[0]
                        forces[node1][1] += repulsion * direction[1]
        
        # Calculate spring forces
        for edge in edge_list:
            node1, node2 = edge
            pos1, pos2 = positions[node1], positions[node2]
            dist = euclidean_distance(pos1, pos2)
            if dist > 0:
                spring = spring_strength * (dist - k)
                direction = [(pos2[0] - pos1[0]) / dist, (pos2[1] - pos1[1]) / dist]
                forces[node1][0] += spring * direction[0]
                forces[node1][1] += spring * direction[1]
                forces[node2][0] -= spring * direction[0]
                forces[node2][1] -= spring * direction[1]
        
        # Update positions based on forces
        for node in nodes:
            positions[node][0] += damping * forces[node][0]
            positions[node][1] += damping * forces[node][1]
            
            # Keep nodes within bounds
            positions[node][0] = max(0, min(width, positions[node][0]))
            positions[node][1] = max(0, min(height, positions[node][1]))
    
    # Convert positions to JSON format
    layout = {node: {"x": positions[node][0], "y": positions[node][1]} for node in nodes}
    return json.dumps(layout, indent=4)

# Example usage
edge_list = [
    (0, 1), (0, 2), (0, 4), (0, 5), (1, 3), (1, 5), (1, 6), (1, 7), (2, 5), (2, 6), (2, 13), (2, 19), (2, 23),
    (3, 4), (3, 5), (3, 6), (3, 7), (3, 13), (4, 5), (4, 6), (4, 7), (5, 6), (5, 13), (5, 21), (6, 7), (8, 9),
    (8, 10), (8, 11), (8, 12), (9, 11), (9, 12), (9, 13), (9, 14), (10, 11), (10, 12), (10, 13), (10, 14), (10, 20),
    (11, 12), (11, 13), (11, 14), (12, 13), (12, 14), (13, 14), (13, 20), (15, 16), (15, 18), (15, 19), (15, 20),
    (15, 21), (16, 18), (16, 20), (16, 21), (17, 18), (17, 20), (17, 21), (18, 19), (18, 21), (19, 20), (19, 21),
    (20, 21), (22, 23), (22, 24), (22, 26), (22, 27), (22, 28), (23, 24), (23, 25), (23, 27), (23, 28), (24, 25),
    (24, 27), (24, 28), (25, 27), (27, 28)
]

layout_json = generate_layout(edge_list)
print(layout_json)
```

This code generates a layout for the graph and outputs the positions of the nodes in JSON format. The algorithm uses a force-directed approach to minimize edge crossings.