Below is a Python script that generates a layout for the given graph while attempting to minimize edge crossings. The script uses a heuristic approach to assign positions to nodes based on their connectivity and attempts to spread nodes apart to reduce edge crossings. The final output is a JSON representation of the graph layout.

```python
import json
import math

def generate_graph_layout(edge_list):
    # Step 1: Extract nodes from edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = sorted(nodes)

    # Step 2: Initialize positions dictionary
    positions = {node: (0, 0) for node in nodes}

    # Step 3: Assign positions heuristically
    # Group nodes based on their degree (number of connections)
    degree_map = {node: 0 for node in nodes}
    for edge in edge_list:
        degree_map[edge[0]] += 1
        degree_map[edge[1]] += 1

    # Sort nodes by degree (higher degree nodes placed closer to the center)
    sorted_nodes = sorted(nodes, key=lambda n: degree_map[n], reverse=True)

    # Place nodes in concentric circles based on their degree
    center = (0, 0)
    radius_step = 10  # Distance between concentric circles
    angle_step = math.pi / 4  # Angle step for node placement

    current_radius = radius_step
    current_angle = 0
    for i, node in enumerate(sorted_nodes):
        # Calculate position
        x = center[0] + current_radius * math.cos(current_angle)
        y = center[1] + current_radius * math.sin(current_angle)
        positions[node] = (x, y)

        # Update angle and radius
        current_angle += angle_step
        if current_angle >= 2 * math.pi:
            current_angle = 0
            current_radius += radius_step

    # Step 4: Output positions in JSON format
    return json.dumps(positions, indent=4)

# Input graph data
edge_list = [
    (0, 2), (0, 3), (0, 4), (0, 5), (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (2, 5),
    (3, 4), (4, 5), (5, 6), (6, 7), (6, 8), (6, 10), (6, 11), (7, 8), (7, 9), (7, 10),
    (7, 11), (7, 14), (8, 9), (8, 10), (8, 11), (9, 10), (9, 11), (10, 11), (12, 13),
    (12, 14), (12, 17), (13, 15), (13, 16), (13, 17), (13, 23), (14, 15), (14, 17),
    (15, 16), (15, 17), (16, 17), (16, 22), (18, 19), (18, 21), (18, 22), (18, 23),
    (19, 20), (19, 21), (19, 22), (20, 21), (20, 22), (20, 23), (21, 22), (21, 23),
    (22, 23)
]

# Generate layout
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Node Extraction**: The script extracts all unique nodes from the edge list.
2. **Degree Calculation**: Nodes are sorted by their degree (number of connections) to prioritize placement of highly connected nodes closer to the center.
3. **Heuristic Placement**: Nodes are placed in concentric circles, with higher-degree nodes closer to the center. The angle and radius are adjusted iteratively to spread nodes apart.
4. **Output**: The positions of nodes are output in JSON format.

This approach is heuristic and does not guarantee a perfect minimization of edge crossings but provides a reasonable layout based on node connectivity.