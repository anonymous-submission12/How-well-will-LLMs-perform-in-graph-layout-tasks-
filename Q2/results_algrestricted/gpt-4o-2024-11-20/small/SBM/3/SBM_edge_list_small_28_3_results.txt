Below is the Python script to generate a layout for the given graph. The layout minimizes edge crossings by implementing a simple heuristic approach. The output is a JSON object containing the positions of the nodes.

```python
import json
import random

def generate_layout(edge_list):
    # Extract unique nodes from the edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = list(nodes)

    # Initialize positions for nodes
    positions = {node: (random.uniform(0, 1), random.uniform(0, 1)) for node in nodes}

    # Function to calculate edge crossings
    def count_edge_crossings(positions, edge_list):
        crossings = 0
        for i in range(len(edge_list)):
            for j in range(i + 1, len(edge_list)):
                (x1, y1), (x2, y2) = positions[edge_list[i][0]], positions[edge_list[i][1]]
                (x3, y3), (x4, y4) = positions[edge_list[j][0]], positions[edge_list[j][1]]

                # Check if edges (x1, y1)-(x2, y2) and (x3, y3)-(x4, y4) cross
                def ccw(a, b, c):
                    return (c[1] - a[1]) * (b[0] - a[0]) > (b[1] - a[1]) * (c[0] - a[0])

                if (ccw((x1, y1), (x3, y3), (x4, y4)) != ccw((x2, y2), (x3, y3), (x4, y4)) and
                        ccw((x1, y1), (x2, y2), (x3, y3)) != ccw((x1, y1), (x2, y2), (x4, y4))):
                    crossings += 1
        return crossings

    # Optimize positions to minimize edge crossings
    def optimize_positions(positions, edge_list, iterations=1000):
        for _ in range(iterations):
            # Pick two random nodes and swap their positions
            node1, node2 = random.sample(nodes, 2)
            positions[node1], positions[node2] = positions[node2], positions[node1]

            # Calculate new edge crossings
            new_crossings = count_edge_crossings(positions, edge_list)

            # If the new layout is worse, revert the swap
            if new_crossings > count_edge_crossings(positions, edge_list):
                positions[node1], positions[node2] = positions[node2], positions[node1]

    # Run optimization
    optimize_positions(positions, edge_list)

    # Return positions as JSON
    return json.dumps(positions, indent=4)

# Input edge list
edge_list = [
    (0, 4), (0, 5), (0, 6), (0, 8), (0, 9), (0, 10), (0, 11), (1, 3), (1, 4), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10),
    (2, 3), (2, 4), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10),
    (3, 11), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9),
    (6, 10), (6, 11), (7, 8), (7, 9), (7, 10), (7, 11), (8, 9), (8, 10), (8, 11), (9, 11), (9, 22), (12, 13), (12, 14),
    (12, 15), (12, 16), (12, 17), (12, 18), (12, 19), (12, 20), (12, 21), (12, 22), (12, 23), (13, 14), (13, 15),
    (13, 16), (13, 18), (13, 19), (13, 20), (13, 22), (13, 23), (14, 15), (14, 17), (14, 18), (14, 19), (14, 20),
    (14, 22), (14, 23), (15, 16), (15, 17), (15, 18), (15, 19), (15, 22), (15, 23), (16, 17), (16, 18), (16, 19),
    (16, 22), (16, 23), (17, 19), (17, 20), (17, 21), (17, 22), (17, 23), (18, 20), (18, 21), (18, 23), (19, 21),
    (19, 23), (20, 21), (20, 22), (21, 22), (21, 23)
]

# Generate layout
layout = generate_layout(edge_list)
print(layout)
```

This script generates a layout for the graph by randomly initializing node positions and then optimizing them to minimize edge crossings using a simple heuristic. The final layout is output in JSON format. Note that this approach is not guaranteed to find the optimal layout but provides a reasonable approximation.