Below is the Python code to generate a graph layout that minimizes edge crossings. The code uses a simulated annealing approach to optimize the node positions for the given graph structure without relying on built-in graph layout algorithms.

```python
import json
import random
import math

def calculate_crossings(edges, positions):
    """
    Calculate the number of edge crossings given node positions and edges.
    """
    crossings = 0
    for i, (a1, b1) in enumerate(edges):
        for j, (a2, b2) in enumerate(edges):
            if i >= j:
                continue
            # Get positions of the endpoints
            x1, y1 = positions[a1]
            x2, y2 = positions[b1]
            x3, y3 = positions[a2]
            x4, y4 = positions[b2]

            # Check if two line segments intersect using determinant method
            def ccw(xa, ya, xb, yb, xc, yc):
                return (yc - ya) * (xb - xa) > (yb - ya) * (xc - xa)

            if (ccw(x1, y1, x3, y3, x4, y4) != ccw(x2, y2, x3, y3, x4, y4)) and \
               (ccw(x1, y1, x2, y2, x3, y3) != ccw(x1, y1, x2, y2, x4, y4)):
                crossings += 1
                
    return crossings

def simulated_annealing(graph, initial_positions, max_iterations=10000, temperature=100):
    """
    Perform simulated annealing to minimize edge crossings.
    """
    edges = graph
    positions = initial_positions.copy()
    num_nodes = len(positions)
    
    def random_position():
        return (random.uniform(0, 1), random.uniform(0, 1))
    
    current_crossings = calculate_crossings(edges, positions)
    
    for iteration in range(max_iterations):
        # Cooling schedule
        T = temperature / (1 + iteration)  
        
        # Pick a random node to move
        node = random.randint(0, num_nodes - 1)
        old_position = positions[node]
        
        # Move the node to a new random position
        positions[node] = random_position()
        
        # Calculate new crossings
        new_crossings = calculate_crossings(edges, positions)
        
        # Accept or reject based on simulated annealing criteria
        if new_crossings < current_crossings or random.uniform(0, 1) < math.exp(-(new_crossings - current_crossings) / T):
            current_crossings = new_crossings
        else:
            positions[node] = old_position  # Revert the change
            
    return positions

def generate_graph_layout(edge_list):
    """
    Generate a layout for the graph that minimizes edge crossings.
    """
    nodes = set()
    for a, b in edge_list:
        nodes.add(a)
        nodes.add(b)
    
    # Generate initial random positions for nodes
    initial_positions = {node: (random.uniform(0, 1), random.uniform(0, 1)) for node in nodes}
    
    # Optimize layout to minimize edge crossings
    final_positions = simulated_annealing(edge_list, initial_positions)
    
    return final_positions

# Input graph as edge list
edge_list = [(0, 2), (0, 3), (0, 4), (0, 12), (1, 3), (1, 4), (1, 5), (1, 6), (1, 12), (1, 16), 
             (2, 3), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 13), (3, 18), (4, 5), (4, 6), 
             (5, 9), (6, 7), (7, 8), (7, 9), (7, 10), (7, 11), (7, 13), (8, 9), (8, 10), (8, 12), 
             (8, 13), (9, 10), (9, 11), (9, 13), (10, 11), (10, 12), (11, 12), (11, 13), (11, 18), 
             (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (14, 20), (15, 16), (15, 17), 
             (15, 18), (15, 19), (15, 20), (16, 17), (16, 18), (16, 19), (17, 18), (17, 19), 
             (17, 20), (18, 19), (18, 20), (19, 20)]

# Generate the layout
layout = generate_graph_layout(edge_list)

# Output layout in JSON format
print(json.dumps(layout, indent=2))
```

### Explanation:
1. **Crossing Calculation:** The `calculate_crossings` function determines the number of edge crossings for the graph given the positions of nodes.
2. **Simulated Annealing:** This optimization method, implemented in the `simulated_annealing` function, attempts to iteratively modify the graph layout to minimize edge crossings.
3. **Node Layout:** Nodes are assigned random initial positions. The layout is optimized by moving nodes within the unit square `[0, 1] x [0, 1]`.
4. **Output:** The final graph layout is returned as JSON, presenting positions as `(x, y)` coordinates for each node.

Let me know if you need further clarification!