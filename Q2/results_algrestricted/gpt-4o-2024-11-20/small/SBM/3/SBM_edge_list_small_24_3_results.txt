Below is the Python script to generate a layout for the given graph. The layout minimizes edge crossings by implementing a simple force-directed algorithm from scratch. The final output is a JSON object containing the positions of the nodes.

```python
import json
import random
import math

def generate_layout(edge_list, iterations=1000, width=1000, height=1000, repulsion=1000, attraction=0.1):
    # Extract nodes from edge list
    nodes = set()
    for edge in edge_list:
        nodes.update(edge)
    nodes = list(nodes)

    # Initialize positions randomly
    positions = {node: [random.uniform(0, width), random.uniform(0, height)] for node in nodes}

    # Initialize velocities
    velocities = {node: [0, 0] for node in nodes}

    def distance(pos1, pos2):
        return math.sqrt((pos1[0] - pos2[0]) ** 2 + (pos1[1] - pos2[1]) ** 2)

    def normalize(vec):
        length = math.sqrt(vec[0] ** 2 + vec[1] ** 2)
        if length == 0:
            return [0, 0]
        return [vec[0] / length, vec[1] / length]

    # Simulate forces
    for _ in range(iterations):
        # Calculate repulsive forces
        repulsive_forces = {node: [0, 0] for node in nodes}
        for i, node1 in enumerate(nodes):
            for j, node2 in enumerate(nodes):
                if i != j:
                    pos1 = positions[node1]
                    pos2 = positions[node2]
                    dist = distance(pos1, pos2)
                    if dist > 0:
                        force = repulsion / (dist ** 2)
                        direction = normalize([pos1[0] - pos2[0], pos1[1] - pos2[1]])
                        repulsive_forces[node1][0] += force * direction[0]
                        repulsive_forces[node1][1] += force * direction[1]

        # Calculate attractive forces
        attractive_forces = {node: [0, 0] for node in nodes}
        for edge in edge_list:
            node1, node2 = edge
            pos1 = positions[node1]
            pos2 = positions[node2]
            dist = distance(pos1, pos2)
            force = attraction * (dist ** 2)
            direction = normalize([pos2[0] - pos1[0], pos2[1] - pos1[1]])
            attractive_forces[node1][0] += force * direction[0]
            attractive_forces[node1][1] += force * direction[1]
            attractive_forces[node2][0] -= force * direction[0]
            attractive_forces[node2][1] -= force * direction[1]

        # Update positions based on forces
        for node in nodes:
            net_force = [
                repulsive_forces[node][0] + attractive_forces[node][0],
                repulsive_forces[node][1] + attractive_forces[node][1],
            ]
            velocities[node][0] += net_force[0]
            velocities[node][1] += net_force[1]
            positions[node][0] += velocities[node][0]
            positions[node][1] += velocities[node][1]

            # Keep nodes within bounds
            positions[node][0] = max(0, min(width, positions[node][0]))
            positions[node][1] = max(0, min(height, positions[node][1]))

    # Return positions as JSON
    return json.dumps(positions, indent=2)

# Input edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5), (4, 22), (5, 14),
    (6, 7), (6, 8), (6, 10), (7, 8), (7, 9), (7, 10), (7, 11), (8, 9), (8, 10), (8, 11), (9, 10), (9, 11), (10, 11),
    (10, 26), (12, 13), (12, 16), (12, 17), (13, 15), (13, 16), (13, 17), (13, 25), (14, 15), (14, 16), (14, 17),
    (14, 19), (15, 16), (15, 17), (16, 17), (18, 19), (18, 20), (18, 21), (18, 22), (19, 20), (19, 21), (20, 21),
    (20, 22), (21, 22), (23, 24), (23, 25), (23, 26), (23, 27), (24, 26), (24, 27), (25, 26), (25, 27), (26, 27)
]

# Generate layout
layout = generate_layout(edge_list)
print(layout)
```

This script uses a basic force-directed algorithm to calculate the positions of the nodes. The positions are adjusted iteratively based on repulsive and attractive forces between nodes. The final layout is output as a JSON object.