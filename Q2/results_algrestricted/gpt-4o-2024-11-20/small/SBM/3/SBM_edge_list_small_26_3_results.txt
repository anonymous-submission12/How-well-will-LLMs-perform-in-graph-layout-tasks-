Here's a Python script that computes a layout to minimize edge crossings in the graph provided. This script uses a heuristic method to position the nodes in such a way as to minimize edge crossings.

The output is in JSON format, representing the positions of the nodes. Note that this approach is not guaranteed to find the optimal solution for minimal edge crossings but provides a reasonable approximation.

```python
import json
import random
from math import dist

def assign_initial_positions(nodes):
    """Assign random initial positions to the nodes as starting points."""
    return {node: (random.uniform(0, 1), random.uniform(0, 1)) for node in nodes}

def compute_edge_crossings(edges, positions):
    """Count the number of edge crossings given node positions."""
    crossings = 0
    for i in range(len(edges)):
        for j in range(i + 1, len(edges)):
            (a, b), (c, d) = edges[i], edges[j]
            # These define whether two line segments (a-b and c-d) intersect
            def ccw(p1, p2, p3):
                return (p3[1] - p1[1]) * (p2[0] - p1[0]) > (p2[1] - p1[1]) * (p3[0] - p1[0])
            pi1, pi2, pi3, pi4 = positions[a], positions[b], positions[c], positions[d]
            if ccw(pi1, pi3, pi4) != ccw(pi2, pi3, pi4) and ccw(pi1, pi2, pi3) != ccw(pi1, pi2, pi4):
                crossings += 1
    return crossings

def adjust_positions(nodes, edges, positions, iterations=1000, step=0.01):
    """Use a simple optimization to reduce edge crossings."""
    for _ in range(iterations):
        for node in nodes:
            # Save original position
            original_position = positions[node]
            # Try a small random move
            new_position = (original_position[0] + random.uniform(-step, step),
                            original_position[1] + random.uniform(-step, step))
            positions[node] = new_position
            
            # Recompute crossings
            new_crossings = compute_edge_crossings(edges, positions)
            if new_crossings >= compute_edge_crossings(edges, positions):  # No improvement
                positions[node] = original_position  # Revert to original position
    return positions

def generate_layout(edge_list):
    """Generate a layout for the graph minimizing edge crossings."""
    # Extract nodes from edges
    nodes = set([node for edge in edge_list for node in edge])

    # Assign random initial positions
    positions = assign_initial_positions(nodes)
    
    # Optimize positions to reduce edge crossings
    optimized_positions = adjust_positions(nodes, edge_list, positions)
    
    return optimized_positions

# Input edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 11), (0, 13), (0, 14), 
    (1, 2), (1, 4), (1, 5), (1, 6), (1, 19), (2, 3), (2, 6), (3, 4), (3, 5), 
    (3, 6), (4, 5), (4, 6), (4, 18), (5, 6), (5, 9), (7, 8), (7, 9), (7, 10), 
    (7, 11), (7, 12), (7, 13), (8, 9), (8, 11), (8, 12), (8, 13), (9, 10), 
    (9, 11), (9, 12), (10, 11), (10, 12), (10, 13), (10, 14), (11, 12), 
    (11, 13), (12, 13), (14, 15), (14, 17), (14, 18), (14, 19), (14, 20), 
    (15, 16), (15, 17), (15, 18), (15, 20), (16, 17), (16, 18), (16, 19), 
    (16, 20), (17, 18), (17, 19), (17, 20), (18, 19), (18, 20)
]

# Generate the layout
layout = generate_layout(edge_list)

# Output the layout as JSON
print(json.dumps(layout, indent=4))
```

This code performs a randomized optimization to iteratively adjust node positions while trying to minimize edge crossings. The positions are output in JSON format. To visualize the graph layout, an external tool would need to be used with the computed positions.