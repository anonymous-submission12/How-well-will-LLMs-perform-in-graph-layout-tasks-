To generate a layout for the graph that minimizes edge crossings without using existing graph layout algorithms, we can implement a custom algorithm. One approach is to use a force-directed layout algorithm, where nodes repel each other and edges act as springs pulling connected nodes closer. This algorithm can be implemented manually.

Below is the Python script to compute the graph layout and output the positions in JSON format:

```python
import json
import random
import math

def generate_layout(edge_list, iterations=1000, width=1000, height=1000):
    # Initialize node positions randomly within the given width and height
    nodes = set([node for edge in edge_list for node in edge])
    positions = {node: [random.uniform(0, width), random.uniform(0, height)] for node in nodes}
    
    # Parameters for the force-directed layout
    k = math.sqrt((width * height) / len(nodes))  # Ideal distance between nodes
    repulsion_factor = 0.1
    attraction_factor = 0.1

    def distance(pos1, pos2):
        """Calculate Euclidean distance between two positions."""
        return math.sqrt((pos1[0] - pos2[0])**2 + (pos1[1] - pos2[1])**2)

    def apply_repulsion():
        """Apply repulsion forces between all pairs of nodes."""
        for node1 in nodes:
            for node2 in nodes:
                if node1 != node2:
                    pos1, pos2 = positions[node1], positions[node2]
                    dist = distance(pos1, pos2)
                    if dist > 0:
                        force = repulsion_factor * (k**2 / dist)
                        dx = (pos1[0] - pos2[0]) / dist * force
                        dy = (pos1[1] - pos2[1]) / dist * force
                        positions[node1][0] += dx
                        positions[node1][1] += dy
                        positions[node2][0] -= dx
                        positions[node2][1] -= dy

    def apply_attraction():
        """Apply attraction forces along edges."""
        for edge in edge_list:
            node1, node2 = edge
            pos1, pos2 = positions[node1], positions[node2]
            dist = distance(pos1, pos2)
            if dist > 0:
                force = attraction_factor * ((dist**2) / k)
                dx = (pos2[0] - pos1[0]) / dist * force
                dy = (pos2[1] - pos1[1]) / dist * force
                positions[node1][0] += dx
                positions[node1][1] += dy
                positions[node2][0] -= dx
                positions[node2][1] -= dy

    def limit_positions():
        """Ensure nodes stay within the bounds of the canvas."""
        for node in nodes:
            positions[node][0] = max(0, min(width, positions[node][0]))
            positions[node][1] = max(0, min(height, positions[node][1]))

    # Iteratively apply forces to adjust positions
    for _ in range(iterations):
        apply_repulsion()
        apply_attraction()
        limit_positions()

    # Return positions as JSON
    return json.dumps(positions, indent=4)

# Example usage
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 5), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 3), (2, 5), (2, 6), 
    (3, 5), (3, 6), (3, 22), (4, 5), (4, 6), (5, 6), (5, 21), (7, 9), (7, 10), (7, 11), (7, 13), 
    (8, 9), (8, 13), (8, 17), (10, 12), (10, 13), (11, 12), (11, 13), (12, 13), (13, 18), (14, 15), 
    (14, 16), (14, 17), (14, 18), (14, 20), (15, 17), (15, 20), (16, 17), (16, 18), (16, 20), (17, 18), 
    (17, 20), (18, 19), (18, 20), (18, 21), (21, 22), (21, 25), (21, 26), (21, 27), (22, 23), (22, 24), 
    (22, 25), (22, 26), (22, 27), (23, 24), (23, 25), (23, 26), (24, 25), (24, 26), (24, 27), (25, 26), 
    (25, 27)
]

layout = generate_layout(edge_list)
print(layout)
```

This script calculates positions for each node in the graph using a custom force-directed layout algorithm. The output is a JSON object containing the positions of each node.