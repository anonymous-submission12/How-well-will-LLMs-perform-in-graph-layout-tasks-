To accomplish the requested task, I'll write Python code to implement a simple, custom iterative optimization algorithm for reducing edge crossings. This will manually determine positions for the nodes in order to minimize edge crossings, without relying on any existing layout algorithms.

This solution will follow a heuristic approach (like a force-directed algorithm, but implemented manually). The output will be the node positions in JSON format.

```python
import json
import random

def edge_crossings(edge_list, positions):
    """
    Calculate the number of edge crossings in the graph given the positions.
    """
    def do_edges_cross(edge1, edge2):
        (x1, y1), (x2, y2) = positions[edge1[0]], positions[edge1[1]]
        (x3, y3), (x4, y4) = positions[edge2[0]], positions[edge2[1]]

        def determinant(p1, p2):
            return p1[0] * p2[1] - p1[1] * p2[0]

        dx12, dy12 = x2 - x1, y2 - y1
        dx34, dy34 = x4 - x3, y4 - y3

        det12_34 = determinant((dx12, dy12), (dx34, dy34))
        if abs(det12_34) < 1e-10:
            return False  # Parallel edges

        dx13, dy13 = x3 - x1, y3 - y1

        t1 = determinant((dx13, dy13), (dx34, dy34)) / det12_34
        t2 = determinant((dx13, dy13), (dx12, dy12)) / det12_34

        return 0 <= t1 <= 1 and 0 <= t2 <= 1

    crossings = 0
    edge_count = len(edge_list)
    for i in range(edge_count):
        for j in range(i + 1, edge_count):
            if do_edges_cross(edge_list[i], edge_list[j]):
                crossings += 1
    return crossings


def optimize_layout(edge_list, iterations=1000, learning_rate=0.1):
    """
    Optimize the positions of nodes to minimize edge crossings.
    """
    # Find all unique nodes
    nodes = set()
    for u, v in edge_list:
        nodes.add(u)
        nodes.add(v)
    nodes = list(nodes)

    # Initialize node positions randomly in a 2D space
    positions = {node: [random.uniform(0, 1), random.uniform(0, 1)] for node in nodes}

    best_positions = positions.copy()
    min_crossings = edge_crossings(edge_list, positions)

    for _ in range(iterations):
        # Pick a random node and move it slightly
        node = random.choice(nodes)
        original_position = positions[node][:]

        # Apply a small random change in position
        positions[node][0] += random.uniform(-learning_rate, learning_rate)
        positions[node][1] += random.uniform(-learning_rate, learning_rate)

        # Clamp values to the 0-1 range
        positions[node][0] = max(0, min(1, positions[node][0]))
        positions[node][1] = max(0, min(1, positions[node][1]))

        # Calculate the number of edge crossings in the new layout
        crossings = edge_crossings(edge_list, positions)

        if crossings < min_crossings:
            min_crossings = crossings
            best_positions = positions.copy()
        else:
            # Revert the change
            positions[node] = original_position

    return best_positions


# Input edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 3),
    (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6), (4, 6), (4, 24), (5, 6), (7, 8), (7, 9), (7, 10),
    (7, 11), (7, 12), (8, 12), (9, 10), (9, 11), (10, 11), (10, 12), (11, 12), (12, 24), (13, 16),
    (13, 17), (14, 15), (14, 16), (14, 17), (14, 18), (15, 16), (16, 17), (17, 18), (18, 23), (19, 21),
    (19, 22), (19, 23), (20, 21), (20, 22), (20, 24), (21, 22), (21, 23), (21, 24), (22, 23), (22, 24),
    (23, 24)
]

# Generate the layout
positions = optimize_layout(edge_list)

# Output to JSON format
output = {node: {"x": pos[0], "y": pos[1]} for node, pos in positions.items()}
print(json.dumps(output, indent=2))
```

### Explanation:
1. **Edge Crossings Calculation**: The `edge_crossings` function determines the number of crossing edges based on the current node positions.
2. **Layout Optimization**: A random node's position is slightly adjusted iteratively to minimize edge crossings. The changes are accepted only if they reduce the crossings.
3. **Output Layout**: After optimization, the node positions are output as JSON, normalized to a 0-1 range.