To write Python code that generates a layout minimizing edge crossings without using existing layout functions provided by libraries such as NetworkX, we must implement a custom approach. Below is the Python script that reads the input graph as an edge list, computes the layout (coordinates of each node), and outputs the result in JSON format.

This custom layout strategy places nodes in a way that tries to minimize edge crossings by iteratively adjusting node positions based on connectivity and edge lengths.

```python
import json
import random
import math

def generate_custom_layout(edge_list):
    # Initialize random positions for each node
    nodes = {node for edge in edge_list for node in edge}
    positions = {node: [random.uniform(-1, 1), random.uniform(-1, 1)] for node in nodes}

    # Function to calculate edge crossing count
    def count_edge_crossings():
        crossings = 0
        edges = list(edge_list)
        for i in range(len(edges)):
            for j in range(i + 1, len(edges)):
                a, b = edges[i]
                c, d = edges[j]
                # Check for crossing
                if a != c and a != d and b != c and b != d:
                    if do_edges_intersect(positions[a], positions[b], positions[c], positions[d]):
                        crossings += 1
        return crossings

    # Function to check intersection between two line segments
    def do_edges_intersect(p1, p2, q1, q2):
        def orientation(p, q, r):
            val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])
            if val == 0: return 0
            return 1 if val > 0 else 2

        def on_segment(p, q, r):
            return (min(p[0], q[0]) <= r[0] <= max(p[0], q[0]) and
                    min(p[1], q[1]) <= r[1] <= max(p[1], q[1]))

        o1 = orientation(p1, p2, q1)
        o2 = orientation(p1, p2, q2)
        o3 = orientation(q1, q2, p1)
        o4 = orientation(q1, q2, p2)

        if o1 != o2 and o3 != o4:
            return True
        
        if o1 == 0 and on_segment(p1, p2, q1): return True
        if o2 == 0 and on_segment(p1, p2, q2): return True
        if o3 == 0 and on_segment(q1, q2, p1): return True
        if o4 == 0 and on_segment(q1, q2, p2): return True

        return False

    # Perform a naive optimization loop to reduce edge crossings
    iterations = 1000
    learning_rate = 0.1
    for _ in range(iterations):
        for node in nodes:
            # Compute gradient for current node
            current_position = positions[node]
            original_crossings = count_edge_crossings()
            gradient = [0, 0]

            for dim in range(2):
                for direction in [-1, 1]:
                    temp_position = current_position[:]
                    temp_position[dim] += direction * learning_rate
                    positions[node] = temp_position
                    new_crossings = count_edge_crossings()
                    gradient[dim] += direction * (new_crossings - original_crossings)

            # Update position of the node
            for dim in range(2):
                current_position[dim] -= learning_rate * gradient[dim]

            positions[node] = current_position

    return positions


# Input: edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 7), (0, 9), (0, 10), (0, 11), (0, 12), (1, 3), (1, 5), (1, 6), (1, 7), (1, 8), (1, 10), (1, 12), (2, 4), (2, 5), (2, 6), (2, 7), (2, 9), (2, 10), (2, 11), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 10), (3, 11), (3, 12), (3, 13), (4, 6), (4, 7), (4, 8), (4, 10), (4, 11), (4, 12), (5, 6), (5, 7), (5, 9), (5, 10), (5, 12), (5, 21), (6, 7), (6, 9), (6, 10), (6, 11), (7, 8), (7, 9), (7, 10), (7, 11), (8, 10), (8, 11), (8, 12), (9, 10), (9, 12), (9, 16), (10, 12), (10, 23), (13, 14), (13, 15), (13, 17), (13, 18), (13, 20), (13, 21), (13, 22), (13, 25), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (14, 21), (14, 22), (14, 23), (14, 24), (14, 25), (15, 16), (15, 17), (15, 18), (15, 20), (15, 21), (15, 22), (15, 23), (15, 24), (15, 25), (16, 17), (16, 18), (16, 19), (16, 20), (16, 21), (16, 22), (16, 25), (17, 19), (17, 20), (17, 23), (17, 24), (18, 19), (18, 21), (18, 22), (18, 23), (18, 25), (19, 21), (19, 22), (19, 23), (19, 25), (20, 22), (20, 23), (20, 24), (20, 25), (21, 22), (21, 24), (21, 25), (22, 23), (22, 25), (23, 24), (23, 25), (24, 25)]

# Generate layout
layout = generate_custom_layout(edge_list)

# Output layout as JSON
print(json.dumps(layout, indent=2))
```

### Explanation:
1. **Initialization**: We assign random positions to each node within a confined space.
2. **Edge Crossing Calculation**: A function calculates the number of edge crossings using geometry (i.e., checking intersection of two line segments).
3. **Optimization**: Iteratively adjust node positions to reduce edge crossings using a naive gradient estimation approach.
4. **Output**: The final positions of the nodes are output in JSON format.

This implementation avoids using libraries like NetworkX for layout generation and focuses on a custom algorithm while adhering to the rules mentioned.