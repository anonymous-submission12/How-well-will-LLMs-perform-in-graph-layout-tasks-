```python
import json
import math

def layout_graph(edge_list):
    """
    Generates a layout for a graph, attempting to maintain consistency
    between Euclidean distance and graph-theoretic distance.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A dictionary where keys are node IDs and values are (x, y) coordinates.
    """

    # 1. Identify all nodes in the graph.
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    nodes = sorted(list(nodes))  # Ensure consistent node order

    # 2. Initialize node positions.  Start with a circle.
    num_nodes = len(nodes)
    positions = {}
    for i, node in enumerate(nodes):
        angle = 2 * math.pi * i / num_nodes
        positions[node] = (math.cos(angle), math.sin(angle))

    # 3. Iteratively adjust positions using a force-based approach.
    #    Nodes connected by edges attract each other, while all nodes repel each other.
    num_iterations = 100
    attraction_strength = 0.1
    repulsion_strength = 0.01
    damping_factor = 0.9

    velocities = {node: (0.0, 0.0) for node in nodes}  # Initialize velocities

    for _ in range(num_iterations):
        forces = {node: (0.0, 0.0) for node in nodes}

        # Calculate attractive forces
        for u, v in edge_list:
            pos_u = positions[u]
            pos_v = positions[v]
            dx = pos_v[0] - pos_u[0]
            dy = pos_v[1] - pos_u[1]
            distance = math.sqrt(dx**2 + dy**2)
            if distance == 0:
                distance = 0.0001 # Avoid division by zero
                dx = 0.0001
                dy = 0.0001

            force = attraction_strength * distance
            forces[u] = (forces[u][0] + force * dx / distance, forces[u][1] + force * dy / distance)
            forces[v] = (forces[v][0] - force * dx / distance, forces[v][1] - force * dy / distance)

        # Calculate repulsive forces
        for u in nodes:
            for v in nodes:
                if u == v:
                    continue
                pos_u = positions[u]
                pos_v = positions[v]
                dx = pos_v[0] - pos_u[0]
                dy = pos_v[1] - pos_u[1]
                distance = math.sqrt(dx**2 + dy**2)
                if distance == 0:
                    distance = 0.0001 # Avoid division by zero
                    dx = 0.0001
                    dy = 0.0001

                force = -repulsion_strength / distance**2  # Inverse square law
                forces[u] = (forces[u][0] + force * dx / distance, forces[u][1] + force * dy / distance)

        # Update velocities and positions
        for node in nodes:
            fx, fy = forces[node]
            vx, vy = velocities[node]

            vx = damping_factor * vx + fx
            vy = damping_factor * vy + fy

            velocities[node] = (vx, vy)

            x, y = positions[node]
            x += vx
            y += vy

            positions[node] = (x, y)

    # 4. Normalize positions to fit within a unit square (optional, but good practice).
    min_x = min(pos[0] for pos in positions.values())
    max_x = max(pos[0] for pos in positions.values())
    min_y = min(pos[1] for pos in positions.values())
    max_y = max(pos[1] for pos in positions.values())

    x_range = max_x - min_x
    y_range = max_y - min_y

    if x_range == 0:
        x_range = 1  # Prevent division by zero if all x-coordinates are the same
    if y_range == 0:
        y_range = 1  # Prevent division by zero if all y-coordinates are the same

    normalized_positions = {}
    for node, (x, y) in positions.items():
        normalized_x = (x - min_x) / x_range
        normalized_y = (y - min_y) / y_range
        normalized_positions[node] = (normalized_x, normalized_y)

    return normalized_positions


# Example usage with the provided graph data:
edge_list = [(0, 1), (0, 25), (1, 2), (1, 26), (2, 3), (2, 27), (3, 4), (3, 28), (4, 5), (4, 29), (5, 6), (5, 30), (6, 7), (6, 31), (7, 8), (7, 32), (8, 9), (8, 33), (9, 10), (9, 34), (10, 11), (10, 35), (11, 12), (11, 36), (12, 13), (12, 37), (13, 14), (13, 38), (14, 15), (14, 39), (15, 16), (15, 40), (16, 17), (16, 41), (17, 18), (17, 42), (18, 19), (18, 43), (19, 20), (19, 44), (20, 21), (20, 45), (21, 22), (21, 46), (22, 23), (22, 47), (23, 24), (23, 48), (24, 49), (25, 26), (25, 50), (26, 27), (26, 51), (27, 28), (27, 52), (28, 29), (28, 53), (29, 30), (29, 54), (30, 31), (30, 55), (31, 32), (31, 56), (32, 33), (32, 57), (33, 34), (33, 58), (34, 35), (34, 59), (35, 36), (35, 60), (36, 37), (36, 61), (37, 38), (37, 62), (38, 39), (38, 63), (39, 40), (39, 64), (40, 41), (40, 65), (41, 42), (41, 66), (42, 43), (42, 67), (43, 44), (43, 68), (44, 45), (44, 69), (45, 46), (45, 70), (46, 47), (46, 71), (47, 48), (47, 72), (48, 49), (48, 73), (49, 74), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74)]

graph_layout = layout_graph(edge_list)
print(json.dumps(graph_layout, indent=2))
```