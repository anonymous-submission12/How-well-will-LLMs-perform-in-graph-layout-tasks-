```python
import json

def layout_graph(edge_list):
    """
    Generates a layout for a graph to minimize edge crossings.

    This function implements a simple layering approach.  It first identifies
    nodes with degree 1 (leaves) and assigns them to the outermost layer.
    Then, it iteratively moves inwards, assigning nodes to layers based on
    the layers of their neighbors.  Finally, nodes within each layer are
    arranged to minimize crossings based on a simple sorting heuristic.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A dictionary where keys are node IDs and values are (x, y) coordinates.
    """

    # 1. Build adjacency list
    adj = {}
    for u, v in edge_list:
        if u not in adj:
            adj[u] = []
        if v not in adj:
            adj[v] = []
        adj[u].append(v)
        adj[v].append(u)

    nodes = list(adj.keys())
    num_nodes = len(nodes)

    # 2. Layer assignment
    layer = {}
    layers = []

    # Initialize layer assignment.  Start with leaves in the outermost layer.
    leaves = [node for node in nodes if len(adj[node]) == 1]
    for node in leaves:
        layer[node] = 0
    layers.append(leaves)

    remaining_nodes = set(nodes) - set(leaves)
    current_layer_index = 1

    while remaining_nodes:
        current_layer = []
        for node in list(remaining_nodes):
            neighbors_in_layers = [neighbor for neighbor in adj[node] if neighbor in layer]
            if neighbors_in_layers:
                layer[node] = current_layer_index
                current_layer.append(node)

        if not current_layer:
            # Handle isolated nodes or cycles by assigning them to a new layer
            for node in list(remaining_nodes):
                layer[node] = current_layer_index
                current_layer.append(node)

        layers.append(current_layer)
        remaining_nodes -= set(current_layer)
        current_layer_index += 1

    num_layers = len(layers)

    # 3. Node ordering within layers (minimize crossings heuristic)
    for i in range(1, num_layers):
        # Sort nodes in layer i based on the average position of their neighbors in layer i-1
        def calculate_neighbor_position(node):
            neighbors_in_previous_layer = [neighbor for neighbor in adj[node] if neighbor in layers[i-1]]
            if not neighbors_in_previous_layer:
                return 0  # Default position if no neighbors in the previous layer
            
            neighbor_indices = [layers[i-1].index(neighbor) for neighbor in neighbors_in_previous_layer]
            return sum(neighbor_indices) / len(neighbors_in_previous_layer)

        layers[i].sort(key=calculate_neighbor_position)

    # 4. Assign coordinates
    layout = {}
    x_spacing = 1.0
    y_spacing = 1.0

    for i in range(num_layers):
        for j, node in enumerate(layers[i]):
            x = j * x_spacing
            y = i * y_spacing
            layout[node] = (x, y)

    return layout


# Graph data
edge_list = [(0, 1), (0, 13), (1, 2), (1, 14), (2, 3), (2, 15), (3, 4), (3, 16), (4, 5), (4, 17), (5, 6), (5, 18), (6, 7), (6, 19), (7, 8), (7, 20), (8, 9), (8, 21), (9, 10), (9, 22), (10, 11), (10, 23), (11, 12), (11, 24), (12, 25), (13, 14), (13, 26), (14, 15), (14, 27), (15, 16), (15, 28), (16, 17), (16, 29), (17, 18), (17, 30), (18, 19), (18, 31), (19, 20), (19, 32), (20, 21), (20, 33), (21, 22), (21, 34), (22, 23), (22, 35), (23, 24), (23, 36), (24, 25), (24, 37), (25, 38), (26, 27), (26, 39), (27, 28), (27, 40), (28, 29), (28, 41), (29, 30), (29, 42), (30, 31), (30, 43), (31, 32), (31, 44), (32, 33), (32, 45), (33, 34), (33, 46), (34, 35), (34, 47), (35, 36), (35, 48), (36, 37), (36, 49), (37, 38), (37, 50), (38, 51), (39, 40), (39, 52), (40, 41), (40, 53), (41, 42), (41, 54), (42, 43), (42, 55), (43, 44), (43, 56), (44, 45), (44, 57), (45, 46), (45, 58), (46, 47), (46, 59), (47, 48), (47, 60), (48, 49), (48, 61), (49, 50), (49, 62), (50, 51), (50, 63), (51, 64), (52, 53), (52, 65), (53, 54), (53, 66), (54, 55), (54, 67), (55, 56), (55, 68), (56, 57), (56, 69), (57, 58), (57, 70), (58, 59), (58, 71), (59, 60), (59, 72), (60, 61), (60, 73), (61, 62), (61, 74), (62, 63), (62, 75), (63, 64), (63, 76), (64, 77), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74), (74, 75), (75, 76), (76, 77)]

# Generate layout
layout = layout_graph(edge_list)

# Output layout in JSON format
print(json.dumps(layout, indent=2))
```