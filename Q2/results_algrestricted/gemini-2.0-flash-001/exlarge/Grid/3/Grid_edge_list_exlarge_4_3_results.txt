```python
import json

def assign_positions(edge_list):
    """
    Assigns positions to nodes in a graph to minimize edge crossings.

    This function implements a simple hierarchical layout algorithm.  It first
    identifies nodes with no incoming edges (roots) and places them at the top
    level.  Then, it iteratively places the children of each node in the next
    level, trying to minimize crossings by ordering the children based on the
    average x-position of their parents.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A dictionary where keys are node IDs and values are (x, y) coordinates.
    """

    # 1. Build the graph representation (adjacency list)
    graph = {}
    for u, v in edge_list:
        if u not in graph:
            graph[u] = []
        if v not in graph:
            graph[v] = []
        graph[u].append(v)

    # 2. Find root nodes (nodes with no incoming edges)
    all_nodes = set()
    for u, v in edge_list:
        all_nodes.add(u)
        all_nodes.add(v)

    incoming_edges = {}
    for u, v in edge_list:
        if v not in incoming_edges:
            incoming_edges[v] = []
        incoming_edges[v].append(u)

    root_nodes = []
    for node in all_nodes:
        if node not in incoming_edges:
            root_nodes.append(node)

    # 3. Assign initial y-coordinates based on levels
    node_levels = {}
    level_queue = [(node, 0) for node in root_nodes]
    visited = set()

    while level_queue:
        node, level = level_queue.pop(0)
        if node in visited:
            continue
        visited.add(node)
        node_levels[node] = level
        if node in graph:
            for neighbor in graph[node]:
                level_queue.append((neighbor, level + 1))

    # 4. Assign x-coordinates to minimize crossings (simple heuristic)
    levels = {}
    for node, level in node_levels.items():
        if level not in levels:
            levels[level] = []
        levels[level].append(node)

    num_nodes = len(all_nodes)
    positions = {}
    x_spacing = 1  # Adjust as needed
    y_spacing = 1 # Adjust as needed

    for level, nodes in levels.items():
        num_nodes_in_level = len(nodes)
        start_x = -(num_nodes_in_level - 1) * x_spacing / 2  # Center the level
        for i, node in enumerate(nodes):
            positions[node] = (start_x + i * x_spacing, -level * y_spacing)  # Invert y for top-down

    # 5. Return the layout in JSON format
    return positions


# Provided graph data
edge_list = [(0, 1), (0, 26), (1, 2), (1, 27), (2, 3), (2, 28), (3, 4), (3, 29), (4, 5), (4, 30), (5, 6), (5, 31), (6, 7), (6, 32), (7, 8), (7, 33), (8, 9), (8, 34), (9, 10), (9, 35), (10, 11), (10, 36), (11, 12), (11, 37), (12, 13), (12, 38), (13, 14), (13, 39), (14, 15), (14, 40), (15, 16), (15, 41), (16, 17), (16, 42), (17, 18), (17, 43), (18, 19), (18, 44), (19, 20), (19, 45), (20, 21), (20, 46), (21, 22), (21, 47), (22, 23), (22, 48), (23, 24), (23, 49), (24, 25), (24, 50), (25, 51), (26, 27), (26, 52), (27, 28), (27, 53), (28, 29), (28, 54), (29, 30), (29, 55), (30, 31), (30, 56), (31, 32), (31, 57), (32, 33), (32, 58), (33, 34), (33, 59), (34, 35), (34, 60), (35, 36), (35, 61), (36, 37), (36, 62), (37, 38), (37, 63), (38, 39), (38, 64), (39, 40), (39, 65), (40, 41), (40, 66), (41, 42), (41, 67), (42, 43), (42, 68), (43, 44), (43, 69), (44, 45), (44, 70), (45, 46), (45, 71), (46, 47), (46, 72), (47, 48), (47, 73), (48, 49), (48, 74), (49, 50), (49, 75), (50, 51), (50, 76), (51, 77), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74), (74, 75), (75, 76), (76, 77)]

# Generate the layout
layout = assign_positions(edge_list)

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```