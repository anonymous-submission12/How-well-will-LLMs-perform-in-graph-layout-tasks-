```python
import json

def layout_graph(edge_list):
    """
    Generates a layout for a graph to minimize edge crossings.

    This function implements a simple layering approach.  It first identifies
    a longest path in the graph and assigns nodes on this path to layers.
    Then, it assigns remaining nodes to layers based on their distance to
    nodes on the longest path.  Finally, nodes within each layer are ordered
    to minimize crossings.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A dictionary where keys are node IDs and values are (x, y) coordinates.
    """

    # 1. Build the graph representation (adjacency list)
    graph = {}
    for u, v in edge_list:
        if u not in graph:
            graph[u] = []
        if v not in graph:
            graph[v] = []
        graph[u].append(v)
        graph[v].append(u)

    nodes = list(graph.keys())
    num_nodes = len(nodes)

    # 2. Find a longest path (very basic approach - can be improved)
    def find_longest_path(start_node):
        longest_path = []
        def dfs(node, path):
            nonlocal longest_path
            if len(path) > len(longest_path):
                longest_path = path[:]

            for neighbor in graph[node]:
                if neighbor not in path:
                    dfs(neighbor, path + [neighbor])

        dfs(start_node, [start_node])
        return longest_path

    longest_path = []
    for node in nodes:
        path = find_longest_path(node)
        if len(path) > len(longest_path):
            longest_path = path

    # 3. Assign nodes to layers
    layers = {}
    layer_assignment = {}
    for i, node in enumerate(longest_path):
        layers.setdefault(i, []).append(node)
        layer_assignment[node] = i

    remaining_nodes = [node for node in nodes if node not in layer_assignment]

    for node in remaining_nodes:
        min_distance = float('inf')
        closest_layer = -1
        for layer_node in longest_path:
            distance = len(find_path(graph, node, layer_node)) -1
            if distance < min_distance:
                min_distance = distance
                closest_layer = layer_assignment[layer_node]

        layers.setdefault(closest_layer + min_distance, []).append(node)
        layer_assignment[node] = closest_layer + min_distance

    # Helper function to find a path between two nodes
    def find_path(graph, start, end, path=[]):
        path = path + [start]
        if start == end:
            return path
        if start not in graph:
            return None
        for node in graph[start]:
            if node not in path:
                newpath = find_path(graph, node, end, path)
                if newpath: return newpath
        return None

    # 4. Order nodes within each layer (very basic - can be improved)
    for layer_index in layers:
        # Simple sorting based on node ID
        layers[layer_index].sort()

    # 5. Generate coordinates
    layout = {}
    x_spacing = 1
    y_spacing = 1
    for layer_index, layer_nodes in layers.items():
        for i, node in enumerate(layer_nodes):
            layout[node] = (i * x_spacing, -layer_index * y_spacing)  # Invert y for visual appeal

    return layout


# Example usage:
edge_list = [(0, 1), (0, 39), (1, 2), (1, 40), (2, 3), (2, 41), (3, 4), (3, 42), (4, 5), (4, 43), (5, 6), (5, 44), (6, 7), (6, 45), (7, 8), (7, 46), (8, 9), (8, 47), (9, 10), (9, 48), (10, 11), (10, 49), (11, 12), (11, 50), (12, 13), (12, 51), (13, 14), (13, 52), (14, 15), (14, 53), (15, 16), (15, 54), (16, 17), (16, 55), (17, 18), (17, 56), (18, 19), (18, 57), (19, 20), (19, 58), (20, 21), (20, 59), (21, 22), (21, 60), (22, 23), (22, 61), (23, 24), (23, 62), (24, 25), (24, 63), (25, 26), (25, 64), (26, 27), (26, 65), (27, 28), (27, 66), (28, 29), (28, 67), (29, 30), (29, 68), (30, 31), (30, 69), (31, 32), (31, 70), (32, 33), (32, 71), (33, 34), (33, 72), (34, 35), (34, 73), (35, 36), (35, 74), (36, 37), (36, 75), (37, 38), (37, 76), (38, 77), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74), (74, 75), (75, 76), (76, 77)]
layout = layout_graph(edge_list)
print(json.dumps(layout, indent=4))
```