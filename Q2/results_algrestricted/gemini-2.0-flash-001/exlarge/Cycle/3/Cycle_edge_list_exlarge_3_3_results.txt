```python
import json

def layout_graph(edge_list):
    """
    Generates a layout for a graph to minimize edge crossings.

    This function implements a simple layout algorithm that places nodes in a circle
    and then adjusts their positions based on their connections to minimize edge crossings.

    Args:
        edge_list: A list of tuples representing the edges of the graph. Each tuple
                   contains the node indices of the two connected nodes.

    Returns:
        A dictionary where keys are node indices and values are (x, y) coordinates
        representing the layout of the graph. The layout is returned in JSON format.
    """

    # 1. Create a set of all nodes in the graph.
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    nodes = sorted(list(nodes))  # Sort nodes for consistent ordering

    num_nodes = len(nodes)

    # 2. Initialize node positions in a circle.
    import math
    radius = 10  # Adjust radius as needed
    positions = {}
    for i, node in enumerate(nodes):
        angle = 2 * math.pi * i / num_nodes
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        positions[node] = (x, y)

    # 3. Iteratively adjust node positions to minimize edge crossings.
    #    This is a very basic approach and can be improved significantly.
    num_iterations = 100  # Adjust number of iterations as needed
    for _ in range(num_iterations):
        for node in nodes:
            # Calculate the average position of neighboring nodes.
            neighbor_x_sum = 0
            neighbor_y_sum = 0
            neighbor_count = 0
            for edge in edge_list:
                if node == edge[0]:
                    neighbor = edge[1]
                    neighbor_x_sum += positions[neighbor][0]
                    neighbor_y_sum += positions[neighbor][1]
                    neighbor_count += 1
                elif node == edge[1]:
                    neighbor = edge[0]
                    neighbor_x_sum += positions[neighbor][0]
                    neighbor_y_sum += positions[neighbor][1]
                    neighbor_count += 1

            if neighbor_count > 0:
                avg_x = neighbor_x_sum / neighbor_count
                avg_y = neighbor_y_sum / neighbor_count

                # Move the node slightly towards the average position of its neighbors.
                positions[node] = (
                    positions[node][0] + 0.1 * (avg_x - positions[node][0]),
                    positions[node][1] + 0.1 * (avg_y - positions[node][1]),
                )

    # 4. Return the layout in JSON format.
    return json.dumps(positions)


# Example usage with the provided graph data:
edge_list = [(0, 1), (0, 72), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72)]
graph_layout_json = layout_graph(edge_list)
print(graph_layout_json)
```