```python
import json

def layout_graph(edge_list):
    """
    Generates a layout for a graph to minimize edge crossings.

    This implementation uses a simple layering approach.  It first identifies a longest path
    in the graph and places those nodes in a straight line.  Then, it iteratively adds
    nodes connected to the existing layout, placing them in layers to minimize crossings.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A dictionary where keys are node IDs and values are (x, y) coordinates.
    """

    # 1. Build the graph representation (adjacency list)
    graph = {}
    for u, v in edge_list:
        if u not in graph:
            graph[u] = []
        if v not in graph:
            graph[v] = []
        graph[u].append(v)
        graph[v].append(u)

    nodes = list(graph.keys())
    num_nodes = len(nodes)

    # 2. Find a "longest" path (simple heuristic: start at a random node and do a DFS)
    def dfs(start_node):
        visited = {start_node}
        path = [start_node]
        
        def explore(node, current_path):
            nonlocal path
            
            is_leaf = True
            for neighbor in graph[node]:
                if neighbor not in visited:
                    is_leaf = False
                    visited.add(neighbor)
                    new_path = current_path + [neighbor]
                    explore(neighbor, new_path)
            
            if is_leaf and len(current_path) > len(path):
                path = current_path
        
        explore(start_node, [start_node])
        return path

    longest_path = dfs(nodes[0])

    # 3. Initial layout: Place the longest path in a straight line
    layout = {}
    for i, node in enumerate(longest_path):
        layout[node] = (i, 0)

    # 4. Iteratively add remaining nodes in layers
    remaining_nodes = set(nodes) - set(longest_path)
    layer = 1
    while remaining_nodes:
        nodes_to_add = []
        for node in remaining_nodes:
            # Check if the node is connected to the existing layout
            for neighbor in graph[node]:
                if neighbor in layout:
                    nodes_to_add.append(node)
                    break

        if not nodes_to_add:
            # Handle disconnected components (place them randomly)
            node = remaining_nodes.pop()
            layout[node] = (layer * 5, layer * 5)  # Place disconnected nodes far away
            layer += 1
            continue

        # Calculate positions for the new nodes (simple average of neighbors)
        for node in nodes_to_add:
            x_sum = 0
            count = 0
            for neighbor in graph[node]:
                if neighbor in layout:
                    x_sum += layout[neighbor][0]
                    count += 1
            if count > 0:
                x = x_sum / count
            else:
                x = layer * 2  # If no neighbors in layout, place it at a default x

            layout[node] = (x, layer)

        remaining_nodes -= set(nodes_to_add)
        layer += 1

    # 5. Normalize coordinates (optional, but good for consistent output)
    min_x = min(x for x, y in layout.values())
    min_y = min(y for x, y in layout.values())

    for node in layout:
        x, y = layout[node]
        layout[node] = (x - min_x, y - min_y)

    return layout


# Example usage with the provided graph data:
edge_list = [(0, 1), (0, 71), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11),
             (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21),
             (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31),
             (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41),
             (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51),
             (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61),
             (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71)]

layout = layout_graph(edge_list)
print(json.dumps(layout, indent=2))
```