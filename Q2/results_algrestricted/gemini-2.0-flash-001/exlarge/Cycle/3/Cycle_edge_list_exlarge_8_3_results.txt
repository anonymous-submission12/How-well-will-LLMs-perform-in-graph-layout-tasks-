```python
import json

def layout_graph(edge_list):
    """
    Generates a layout for a graph to minimize edge crossings.

    This function implements a simple layering approach.  It first identifies a longest path
    in the graph and assigns nodes on that path to layers sequentially.  Then, it assigns
    remaining nodes to layers based on their distance from the nodes on the longest path.
    Finally, it positions nodes within each layer to minimize crossings.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A dictionary where keys are node IDs and values are (x, y) coordinates.
    """

    # 1. Build adjacency list
    adj = {}
    for u, v in edge_list:
        if u not in adj:
            adj[u] = []
        if v not in adj:
            adj[v] = []
        adj[u].append(v)
        adj[v].append(u)

    nodes = list(adj.keys())
    num_nodes = len(nodes)

    # 2. Find a longest path (very basic approach - can be improved)
    def find_longest_path(start_node):
        longest_path = []
        def dfs(node, path):
            nonlocal longest_path
            if len(path) > len(longest_path):
                longest_path = path[:]

            for neighbor in adj[node]:
                if neighbor not in path:
                    dfs(neighbor, path + [neighbor])

        dfs(start_node, [start_node])
        return longest_path

    longest_path = find_longest_path(nodes[0])  # Start from an arbitrary node

    # 3. Assign nodes to layers
    layers = {}
    layer_assignment = {}
    for i, node in enumerate(longest_path):
        layers.setdefault(i, []).append(node)
        layer_assignment[node] = i

    remaining_nodes = [node for node in nodes if node not in longest_path]

    for node in remaining_nodes:
        min_dist = float('inf')
        best_layer = -1
        for layer_idx in range(len(longest_path)):
            for path_node in layers[layer_idx]:
                # Calculate distance (number of hops) from the current node to nodes in the longest path
                q = [(node, 0)]
                visited = {node}
                found = False
                while q:
                    curr_node, dist = q.pop(0)
                    if curr_node == path_node:
                        if dist < min_dist:
                            min_dist = dist
                            best_layer = layer_idx
                        found = True
                        break
                    for neighbor in adj[curr_node]:
                        if neighbor not in visited:
                            visited.add(neighbor)
                            q.append((neighbor, dist + 1))
                if found:
                    break # Move to the next node in the longest path

        if best_layer != -1:
            layers.setdefault(best_layer, []).append(node)
            layer_assignment[node] = best_layer
        else:
            # If a node is disconnected, assign it to a new layer at the end
            new_layer_idx = len(layers)
            layers.setdefault(new_layer_idx, []).append(node)
            layer_assignment[node] = new_layer_idx

    # 4. Position nodes within layers (simple ordering)
    positions = {}
    x_spacing = 1
    y_spacing = 1
    for layer_idx, nodes_in_layer in layers.items():
        nodes_in_layer.sort()  # Simple sorting for initial x position
        for i, node in enumerate(nodes_in_layer):
            positions[node] = (i * x_spacing, -layer_idx * y_spacing)  # y is negative for visual consistency

    return positions


# Graph data
edge_list = [(0, 1), (0, 77), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11),
             (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21),
             (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31),
             (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41),
             (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51),
             (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61),
             (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71),
             (71, 72), (72, 73), (73, 74), (74, 75), (75, 76), (76, 77)]

# Generate layout
layout = layout_graph(edge_list)

# Output in JSON format
print(json.dumps(layout, indent=4))
```