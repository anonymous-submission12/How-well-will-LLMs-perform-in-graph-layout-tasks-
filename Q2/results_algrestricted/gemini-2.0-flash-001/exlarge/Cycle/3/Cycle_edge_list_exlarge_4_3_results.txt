```python
import json

def layout_graph(edge_list):
    """
    Generates a layout for a graph to minimize edge crossings.

    This implementation uses a simple layering approach.  It first identifies a longest path
    in the graph and places those nodes in a straight line.  Then, it iteratively places
    remaining nodes in layers, trying to minimize crossings with existing edges.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A dictionary where keys are node IDs and values are (x, y) coordinates.
    """

    # 1. Build adjacency list
    adj = {}
    for u, v in edge_list:
        if u not in adj:
            adj[u] = []
        if v not in adj:
            adj[v] = []
        adj[u].append(v)
        adj[v].append(u)

    nodes = list(adj.keys())
    num_nodes = len(nodes)

    # 2. Find a longest path (very basic approach)
    #    This is a simplification and doesn't guarantee the absolute longest path.
    #    A more sophisticated algorithm could be used for larger graphs.
    start_node = nodes[0]
    longest_path = [start_node]
    visited = {start_node}
    
    def dfs(node, path):
        nonlocal longest_path
        
        if len(path) > len(longest_path):
            longest_path = path[:]
            
        for neighbor in adj[node]:
            if neighbor not in visited:
                visited.add(neighbor)
                dfs(neighbor, path + [neighbor])
                visited.remove(neighbor)  # Backtrack

    dfs(start_node, [start_node])

    # 3. Initial layout: Place longest path in a line
    layout = {}
    for i, node in enumerate(longest_path):
        layout[node] = (i, 0)

    # 4. Place remaining nodes in layers
    remaining_nodes = [node for node in nodes if node not in layout]
    layer = 1
    while remaining_nodes:
        new_layer_nodes = []
        for node in remaining_nodes:
            neighbors_in_layout = [n for n in adj[node] if n in layout]
            if neighbors_in_layout:
                new_layer_nodes.append(node)

        # Calculate x position based on connected nodes in previous layers
        for node in new_layer_nodes:
            neighbors_x = [layout[n][0] for n in adj[node] if n in layout]
            if neighbors_x:
                x = sum(neighbors_x) / len(neighbors_x)
            else:
                x = 0  # Default if no neighbors are placed yet
            layout[node] = (x, layer)

        remaining_nodes = [node for node in remaining_nodes if node not in layout]
        layer += 1

    # 5. Normalize x positions to integers to avoid floating point issues in JSON
    min_x = min(x for x, y in layout.values())
    for node in layout:
        layout[node] = (int(layout[node][0] - min_x), int(layout[node][1]))

    return layout


# Example usage with the provided graph data:
edge_list = [(0, 1), (0, 73), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73)]
layout = layout_graph(edge_list)
print(json.dumps(layout, indent=4))
```