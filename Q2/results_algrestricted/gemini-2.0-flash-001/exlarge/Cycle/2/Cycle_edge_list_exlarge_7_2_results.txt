```python
import json
import math

def layout_graph(edge_list):
    """
    Generates a layout for a graph, attempting to maintain consistency
    between Euclidean distance and graph-theoretic distance.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A dictionary where keys are node IDs and values are (x, y) coordinates.
    """

    # 1. Determine the nodes in the graph.
    nodes = set()
    for u, v in edge_list:
        nodes.add(u)
        nodes.add(v)
    nodes = sorted(list(nodes))  # Ensure consistent ordering

    # 2. Initialize node positions.  Start with a simple linear layout.
    layout = {}
    num_nodes = len(nodes)
    for i, node in enumerate(nodes):
        angle = 2 * math.pi * i / num_nodes
        x = i  # Simple linear position
        y = 0
        layout[node] = (x, y)

    # 3. Iteratively refine the layout using a force-based approach.
    #    This is a simplified version of force-directed layout.
    num_iterations = 100
    repulsion_strength = 100.0
    attraction_strength = 0.1
    damping = 0.5

    for _ in range(num_iterations):
        forces = {}
        for node in nodes:
            forces[node] = [0.0, 0.0]  # Initialize force vector

        # Calculate repulsive forces between all pairs of nodes.
        for i in range(num_nodes):
            for j in range(i + 1, num_nodes):
                node1 = nodes[i]
                node2 = nodes[j]
                x1, y1 = layout[node1]
                x2, y2 = layout[node2]
                dx = x2 - x1
                dy = y2 - y1
                distance = math.sqrt(dx**2 + dy**2)
                if distance == 0:
                    distance = 0.001  # Avoid division by zero

                # Repulsive force is inversely proportional to distance.
                repulsion = repulsion_strength / distance**2
                fx = -repulsion * dx / distance
                fy = -repulsion * dy / distance

                forces[node1][0] += fx
                forces[node1][1] += fy
                forces[node2][0] -= fx
                forces[node2][1] -= fy

        # Calculate attractive forces between connected nodes.
        for u, v in edge_list:
            x1, y1 = layout[u]
            x2, y2 = layout[v]
            dx = x2 - x1
            dy = y2 - y1
            distance = math.sqrt(dx**2 + dy**2)

            # Attractive force is proportional to distance.
            attraction = attraction_strength * distance
            fx = attraction * dx / distance if distance > 0 else 0
            fy = attraction * dy / distance if distance > 0 else 0

            forces[u][0] += fx
            forces[u][1] += fy
            forces[v][0] -= fx
            forces[v][1] -= fy

        # Update node positions based on the calculated forces.
        for node in nodes:
            fx, fy = forces[node]
            x, y = layout[node]
            layout[node] = (x + fx * damping, y + fy * damping)

    # 4. Normalize the layout to fit within a reasonable range (optional).
    min_x = min(x for x, y in layout.values())
    max_x = max(x for x, y in layout.values())
    min_y = min(y for x, y in layout.values())
    max_y = max(y for x, y in layout.values())

    width = max_x - min_x
    height = max_y - min_y

    if width > 0 and height > 0:
        for node in nodes:
            x, y = layout[node]
            x = (x - min_x) / width
            y = (y - min_y) / height
            layout[node] = (x, y)

    return layout


# Example usage with the provided graph data:
edge_list = [(0, 1), (0, 76), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74), (74, 75), (75, 76)]
layout = layout_graph(edge_list)

# Output the layout in JSON format.
print(json.dumps(layout, indent=4))
```