```python
import json
import random

def layout_graph(edge_list):
    """
    Generates a layout for a graph to minimize edge crossings.

    This function implements a simple iterative layout algorithm. It starts with
    random positions for the nodes and then iteratively adjusts the positions
    to reduce edge crossings.

    Args:
        edge_list: A list of tuples representing the edges of the graph.
                   Each tuple (u, v) represents an edge between node u and node v.

    Returns:
        A dictionary where keys are node IDs and values are (x, y) coordinates.
    """

    nodes = set()
    for u, v in edge_list:
        nodes.add(u)
        nodes.add(v)

    num_nodes = len(nodes)
    node_list = list(nodes)

    # 1. Initialize node positions randomly.
    positions = {node: (random.random(), random.random()) for node in node_list}

    # 2. Iteratively adjust positions to reduce edge crossings.
    num_iterations = 100  # Adjust as needed
    for _ in range(num_iterations):
        for node in node_list:
            # Calculate the "attraction" force from connected nodes.
            attraction_x = 0
            attraction_y = 0
            neighbor_count = 0
            for u, v in edge_list:
                if u == node:
                    attraction_x += positions[v][0]
                    attraction_y += positions[v][1]
                    neighbor_count += 1
                elif v == node:
                    attraction_x += positions[u][0]
                    attraction_y += positions[u][1]
                    neighbor_count += 1

            if neighbor_count > 0:
                attraction_x /= neighbor_count
                attraction_y /= neighbor_count

                # Move the node towards the average position of its neighbors.
                dx = attraction_x - positions[node][0]
                dy = attraction_y - positions[node][1]

                # Add a small random perturbation to avoid local minima
                dx += random.uniform(-0.01, 0.01)
                dy += random.uniform(-0.01, 0.01)

                # Limit the movement to avoid large oscillations
                max_movement = 0.05
                dx = max(min(dx, max_movement), -max_movement)
                dy = max(min(dy, max_movement), -max_movement)

                new_x = positions[node][0] + dx
                new_y = positions[node][1] + dy

                # Keep the nodes within the unit square
                new_x = max(0, min(new_x, 1))
                new_y = max(0, min(new_y, 1))

                positions[node] = (new_x, new_y)

    return positions


# Example usage with the provided graph data:
edge_list = [(0, 2), (0, 7), (0, 8), (0, 10), (1, 3), (1, 4), (1, 5), (1, 10), (2, 4), (2, 7), (2, 8), (2, 10), (2, 12), (3, 8), (3, 9), (3, 47), (4, 8), (4, 10), (4, 34), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (7, 8), (11, 14), (11, 17), (11, 20), (12, 15), (12, 16), (13, 15), (13, 19), (13, 20), (14, 17), (14, 19), (14, 20), (15, 18), (15, 19), (15, 21), (16, 18), (16, 19), (16, 21), (17, 18), (22, 23), (23, 24), (23, 26), (23, 28), (24, 25), (24, 28), (25, 26), (25, 28), (25, 30), (26, 27), (26, 28), (26, 30), (26, 31), (27, 29), (27, 30), (27, 31), (28, 31), (28, 35), (29, 30), (32, 22), (32, 24), (32, 30), (33, 34), (33, 36), (33, 37), (33, 39), (33, 42), (34, 36), (34, 39), (34, 41), (35, 38), (35, 40), (35, 41), (36, 38), (36, 42), (37, 41), (37, 42), (38, 39), (38, 40), (39, 42), (40, 42), (40, 58), (43, 44), (43, 45), (43, 46), (43, 50), (43, 52), (44, 46), (44, 47), (44, 48), (44, 49), (44, 62), (45, 51), (46, 47), (46, 49), (46, 51), (46, 52), (47, 48), (47, 49), (47, 51), (48, 51), (48, 52), (49, 50), (50, 51), (50, 52), (50, 70), (51, 52), (53, 54), (53, 55), (53, 56), (53, 58), (53, 60), (53, 61), (54, 57), (54, 58), (54, 60), (54, 61), (54, 62), (55, 56), (55, 57), (55, 58), (55, 59), (55, 60), (55, 61), (55, 62), (56, 59), (57, 59), (57, 60), (58, 59), (59, 61), (59, 62), (60, 62), (64, 63), (64, 65), (64, 67), (64, 68), (64, 71), (65, 63), (65, 66), (65, 67), (65, 68), (65, 71), (66, 68), (66, 71), (67, 69), (67, 72), (68, 69), (68, 70), (69, 70), (69, 71), (70, 72), (71, 63), (71, 72)]
layout = layout_graph(edge_list)
print(json.dumps(layout, indent=4))
```