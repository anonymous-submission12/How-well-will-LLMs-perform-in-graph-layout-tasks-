```python
import json
import random

def layout_graph(edge_list):
    """
    Generates a layout for a graph to minimize edge crossings.

    This function implements a simple force-based layout algorithm.  It initializes
    node positions randomly and then iteratively adjusts them based on attractive
    forces between connected nodes and repulsive forces between all nodes.

    Args:
        edge_list: A list of tuples representing the edges of the graph.  Each
            tuple (u, v) indicates an edge between node u and node v.

    Returns:
        A dictionary where keys are node IDs and values are (x, y) coordinates
        representing the layout.  The layout is also returned as a JSON string.
    """

    # 1. Initialization
    nodes = set()
    for u, v in edge_list:
        nodes.add(u)
        nodes.add(v)

    num_nodes = len(nodes)
    positions = {node: (random.random(), random.random()) for node in nodes}

    # 2. Force-Directed Layout
    iterations = 100  # Number of iterations for the algorithm
    attractive_force = 0.01  # Strength of attraction between connected nodes
    repulsive_force = 0.05  # Strength of repulsion between all nodes
    damping_factor = 0.5  # Damping factor to slow down movement

    for _ in range(iterations):
        forces = {node: [0.0, 0.0] for node in nodes}  # Initialize forces to zero

        # Calculate attractive forces
        for u, v in edge_list:
            x1, y1 = positions[u]
            x2, y2 = positions[v]
            dx = x2 - x1
            dy = y2 - y1
            distance = max((dx**2 + dy**2)**0.5, 0.01)  # Avoid division by zero

            force = attractive_force * distance
            forces[u][0] += force * dx / distance
            forces[u][1] += force * dy / distance
            forces[v][0] -= force * dx / distance
            forces[v][1] -= force * dy / distance

        # Calculate repulsive forces
        for u in nodes:
            for v in nodes:
                if u != v:
                    x1, y1 = positions[u]
                    x2, y2 = positions[v]
                    dx = x2 - x1
                    dy = y2 - y1
                    distance = max((dx**2 + dy**2)**0.5, 0.01)  # Avoid division by zero

                    force = repulsive_force / distance**2
                    forces[u][0] -= force * dx / distance
                    forces[u][1] -= force * dy / distance
                    forces[v][0] += force * dx / distance
                    forces[v][1] += force * dy / distance

        # Update positions based on forces
        for node in nodes:
            forces[node][0] *= damping_factor
            forces[node][1] *= damping_factor
            positions[node] = (positions[node][0] + forces[node][0], positions[node][1] + forces[node][1])

            # Keep nodes within bounds (0 to 1)
            positions[node] = (max(0.0, min(1.0, positions[node][0])), max(0.0, min(1.0, positions[node][1])))

    # 3. Return Layout
    return positions

# Example usage:
edge_list = [(0, 2), (0, 3), (0, 4), (0, 9), (0, 10), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 10), (2, 5), (2, 11), (3, 7), (4, 5), (4, 7), (5, 11), (6, 11), (7, 8), (7, 10), (8, 9), (8, 10), (8, 11), (8, 59), (9, 10), (9, 18), (10, 11), (12, 13), (12, 14), (12, 16), (12, 17), (12, 19), (12, 21), (13, 14), (13, 18), (14, 16), (15, 17), (15, 19), (15, 22), (15, 23), (16, 17), (16, 19), (16, 21), (16, 23), (17, 18), (17, 20), (18, 22), (19, 21), (19, 22), (20, 21), (20, 23), (21, 22), (21, 23), (21, 50), (22, 33), (24, 26), (24, 29), (25, 27), (26, 29), (27, 28), (27, 29), (27, 30), (29, 30), (29, 31), (30, 31), (30, 52), (32, 24), (32, 28), (32, 29), (32, 30), (32, 31), (32, 34), (33, 26), (33, 28), (33, 35), (34, 24), (34, 26), (34, 27), (34, 28), (34, 31), (35, 27), (35, 28), (35, 30), (36, 38), (36, 41), (36, 43), (36, 44), (36, 45), (36, 46), (37, 38), (37, 39), (37, 41), (37, 44), (38, 39), (38, 44), (38, 45), (38, 49), (39, 40), (39, 41), (39, 42), (39, 44), (39, 64), (40, 42), (40, 43), (40, 44), (40, 46), (41, 42), (41, 43), (42, 43), (42, 44), (42, 46), (43, 45), (43, 46), (44, 45), (45, 46), (45, 76), (47, 48), (47, 51), (48, 50), (48, 52), (48, 54), (48, 57), (49, 51), (49, 53), (49, 56), (49, 57), (51, 53), (51, 56), (51, 57), (52, 56), (54, 57), (55, 57), (58, 62), (59, 60), (61, 63), (64, 60), (64, 63), (64, 66), (65, 58), (65, 60), (65, 61), (65, 68), (66, 58), (66, 61), (67, 62), (67, 63), (67, 68), (68, 58), (68, 59), (68, 62), (69, 72), (69, 75), (69, 78), (69, 79), (70, 72), (70, 76), (70, 78), (70, 79), (71, 72), (71, 73), (71, 74), (71, 76), (71, 78), (72, 75), (72, 76), (72, 77), (72, 78), (72, 79), (73, 76), (73, 79), (75, 77), (75, 79), (76, 77), (77, 78), (78, 79)]
layout = layout_graph(edge_list)
print(json.dumps(layout))
```