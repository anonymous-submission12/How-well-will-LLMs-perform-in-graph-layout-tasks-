```python
import json
import random

def layout_graph(edge_list):
    """
    Generates a layout for a graph, attempting to maintain consistency
    between Euclidean distance and graph-theoretic distance.

    This implementation uses a simple force-based approach.  Nodes are
    initialized randomly, and then iteratively adjusted.  Connected nodes
    attract each other, while all nodes repel each other.

    Args:
        edge_list: A list of tuples representing the edges of the graph.
                   Each tuple (u, v) indicates an edge between node u and node v.

    Returns:
        A dictionary where keys are node IDs and values are (x, y) coordinates.
        This dictionary represents the graph layout.
    """

    # 1. Initialization
    nodes = set()
    for u, v in edge_list:
        nodes.add(u)
        nodes.add(v)

    num_nodes = len(nodes)
    node_positions = {node: (random.random(), random.random()) for node in nodes}  # Initialize with random positions

    # 2. Force-Directed Layout
    iterations = 100  # Number of iterations for the force-directed algorithm
    attraction_force = 0.01  # Strength of attraction between connected nodes
    repulsion_force = 0.005  # Strength of repulsion between all nodes
    damping_factor = 0.5  # Damping factor to slow down movement

    for _ in range(iterations):
        forces = {node: [0.0, 0.0] for node in nodes}  # Initialize forces for each node

        # Calculate attractive forces
        for u, v in edge_list:
            x1, y1 = node_positions[u]
            x2, y2 = node_positions[v]
            dx = x2 - x1
            dy = y2 - y1
            distance = ((dx**2 + dy**2)**0.5) + 0.0001  # Avoid division by zero

            force = attraction_force * distance
            fx = force * (dx / distance)
            fy = force * (dy / distance)

            forces[u][0] += fx
            forces[u][1] += fy
            forces[v][0] -= fx
            forces[v][1] -= fy

        # Calculate repulsive forces
        for u in nodes:
            for v in nodes:
                if u != v:
                    x1, y1 = node_positions[u]
                    x2, y2 = node_positions[v]
                    dx = x2 - x1
                    dy = y2 - y1
                    distance = ((dx**2 + dy**2)**0.5) + 0.0001  # Avoid division by zero

                    force = repulsion_force / (distance**2)
                    fx = force * (dx / distance)
                    fy = force * (dy / distance)

                    forces[u][0] -= fx
                    forces[u][1] -= fy
                    forces[v][0] += fx
                    forces[v][1] += fy

        # Update node positions
        for node in nodes:
            forces[node][0] *= damping_factor
            forces[node][1] *= damping_factor

            node_positions[node] = (
                node_positions[node][0] + forces[node][0],
                node_positions[node][1] + forces[node][1],
            )

            # Keep nodes within bounds (0, 1)
            node_positions[node] = (
                max(0.0, min(1.0, node_positions[node][0])),
                max(0.0, min(1.0, node_positions[node][1])),
            )

    return node_positions


# Example usage with the provided graph data:
edge_list = [(0, 2), (0, 3), (0, 4), (0, 7), (0, 9), (0, 10), (0, 11), (0, 13), (1, 3), (1, 4), (1, 7), (1, 8), (1, 9), (1, 12), (2, 4), (2, 6), (2, 7), (2, 8), (3, 4), (3, 8), (3, 9), (3, 11), (3, 12), (4, 6), (4, 7), (4, 10), (5, 7), (5, 8), (5, 10), (5, 12), (5, 13), (6, 7), (6, 8), (6, 11), (6, 13), (7, 9), (7, 10), (8, 11), (8, 12), (9, 11), (9, 13), (10, 56), (11, 12), (11, 13), (11, 72), (12, 13), (12, 22), (14, 16), (14, 18), (14, 23), (14, 25), (14, 56), (15, 16), (15, 17), (15, 18), (15, 21), (15, 24), (15, 26), (16, 19), (16, 21), (16, 22), (16, 25), (16, 26), (17, 19), (17, 21), (17, 22), (17, 23), (17, 26), (18, 21), (18, 24), (18, 26), (19, 21), (19, 23), (20, 21), (20, 22), (20, 23), (21, 24), (21, 26), (23, 24), (23, 25), (23, 26), (24, 25), (27, 31), (28, 29), (28, 30), (29, 31), (30, 31), (32, 30), (32, 35), (32, 38), (32, 45), (33, 27), (33, 28), (33, 38), (33, 39), (33, 74), (34, 27), (34, 28), (34, 38), (34, 41), (35, 29), (35, 30), (35, 36), (35, 63), (36, 29), (36, 31), (36, 37), (37, 27), (37, 29), (37, 31), (37, 38), (38, 39), (38, 69), (38, 72), (40, 43), (40, 46), (40, 48), (40, 49), (40, 51), (41, 48), (41, 50), (41, 67), (42, 43), (42, 45), (42, 46), (42, 47), (42, 50), (43, 44), (43, 45), (43, 48), (43, 49), (43, 52), (43, 59), (44, 45), (44, 50), (44, 52), (45, 46), (45, 47), (45, 48), (45, 49), (45, 52), (46, 49), (47, 48), (47, 51), (47, 52), (48, 49), (52, 76), (53, 58), (53, 61), (53, 62), (54, 56), (54, 62), (54, 63), (54, 76), (55, 56), (55, 58), (55, 61), (56, 57), (56, 63), (57, 58), (58, 60), (58, 61), (58, 62), (59, 61), (60, 61), (60, 63), (61, 62), (61, 63), (64, 54), (64, 57), (64, 62), (64, 63), (65, 53), (65, 57), (65, 60), (65, 63), (66, 71), (66, 73), (66, 75), (66, 76), (66, 78), (67, 68), (67, 70), (67, 74), (67, 78), (68, 70), (68, 71), (68, 75), (68, 76), (68, 78), (69, 71), (69, 73), (69, 74), (69, 76), (70, 71), (70, 72), (70, 77), (70, 78), (71, 74), (71, 77), (71, 78), (72, 74), (73, 74), (73, 78), (74, 77), (75, 78), (76, 77)]
layout = layout_graph(edge_list)
print(json.dumps(layout, indent=2))
```