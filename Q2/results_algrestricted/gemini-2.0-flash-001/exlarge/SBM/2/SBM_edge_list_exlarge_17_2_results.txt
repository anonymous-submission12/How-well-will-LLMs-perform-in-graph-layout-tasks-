```python
import json
import random
import math

def layout_graph(edge_list):
    """
    Generates a graph layout that attempts to maintain consistency between
    Euclidean distance and graph-theoretic distance.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A dictionary where keys are node IDs and values are (x, y) coordinates.
    """

    # 1. Build the adjacency list representation of the graph.
    adj = {}
    for u, v in edge_list:
        if u not in adj:
            adj[u] = []
        if v not in adj:
            adj[v] = []
        adj[u].append(v)
        adj[v].append(u)

    nodes = list(adj.keys())
    num_nodes = len(nodes)

    # 2. Initialize node positions randomly.
    pos = {node: (random.random(), random.random()) for node in nodes}

    # 3. Iteratively adjust node positions using a force-based approach.
    iterations = 100  # Number of iterations for the layout algorithm
    repulsion_strength = 0.1  # Strength of the repulsive force
    attraction_strength = 0.2  # Strength of the attractive force
    damping_factor = 0.5  # Damping factor to reduce oscillations

    for _ in range(iterations):
        forces = {node: [0.0, 0.0] for node in nodes}  # Initialize forces to zero

        # Calculate repulsive forces between all pairs of nodes.
        for i in range(num_nodes):
            for j in range(i + 1, num_nodes):
                node1 = nodes[i]
                node2 = nodes[j]
                x1, y1 = pos[node1]
                x2, y2 = pos[node2]
                dx = x2 - x1
                dy = y2 - y1
                distance = math.sqrt(dx**2 + dy**2)

                # Apply a repulsive force inversely proportional to the distance.
                if distance > 0:
                    repulsion = repulsion_strength / distance
                    forces[node1][0] += repulsion * (-dx / distance)
                    forces[node1][1] += repulsion * (-dy / distance)
                    forces[node2][0] += repulsion * (dx / distance)
                    forces[node2][1] += repulsion * (dy / distance)
                else:
                    # If nodes are at the same position, apply a small random force.
                    forces[node1][0] += random.uniform(-0.1, 0.1)
                    forces[node1][1] += random.uniform(-0.1, 0.1)
                    forces[node2][0] += random.uniform(-0.1, 0.1)
                    forces[node2][1] += random.uniform(-0.1, 0.1)

        # Calculate attractive forces between connected nodes.
        for u, neighbors in adj.items():
            x1, y1 = pos[u]
            for v in neighbors:
                x2, y2 = pos[v]
                dx = x2 - x1
                dy = y2 - y1
                distance = math.sqrt(dx**2 + dy**2)

                # Apply an attractive force proportional to the distance.
                attraction = attraction_strength * distance
                forces[u][0] += attraction * (dx / distance)
                forces[u][1] += attraction * (dy / distance)
                forces[v][0] += attraction * (-dx / distance)
                forces[v][1] += attraction * (-dy / distance)

        # Update node positions based on the calculated forces.
        for node in nodes:
            x, y = pos[node]
            fx, fy = forces[node]
            x += damping_factor * fx
            y += damping_factor * fy

            # Keep nodes within the unit square.
            x = max(0.0, min(1.0, x))
            y = max(0.0, min(1.0, y))

            pos[node] = (x, y)

    return pos


# Example usage with the provided graph data:
edge_list = [(0, 1), (0, 4), (0, 12), (1, 5), (1, 6), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (2, 7), (2, 11), (3, 6), (3, 10), (3, 11), (4, 5), (4, 7), (4, 9), (5, 6), (5, 7), (5, 8), (5, 10), (5, 11), (7, 10), (7, 12), (8, 59), (9, 11), (10, 11), (10, 17), (12, 49), (13, 15), (13, 16), (13, 17), (13, 20), (13, 22), (13, 23), (13, 24), (14, 17), (14, 18), (14, 22), (14, 24), (15, 22), (15, 24), (15, 34), (16, 17), (16, 19), (16, 22), (16, 25), (17, 25), (17, 50), (18, 23), (18, 24), (18, 25), (19, 20), (19, 22), (19, 35), (20, 22), (20, 23), (20, 24), (20, 25), (21, 23), (21, 24), (21, 50), (22, 23), (26, 27), (26, 30), (26, 31), (27, 29), (27, 30), (27, 31), (28, 30), (28, 31), (29, 30), (30, 31), (32, 27), (32, 28), (32, 29), (32, 30), (32, 31), (33, 27), (33, 28), (33, 31), (33, 34), (33, 35), (33, 36), (34, 27), (34, 30), (34, 35), (34, 36), (34, 37), (34, 38), (34, 74), (35, 29), (35, 36), (35, 37), (36, 26), (36, 27), (36, 38), (36, 51), (37, 27), (37, 29), (38, 27), (38, 28), (38, 31), (38, 62), (39, 41), (39, 43), (39, 45), (39, 51), (40, 42), (40, 43), (40, 44), (40, 45), (40, 48), (41, 43), (41, 46), (42, 45), (42, 54), (43, 44), (43, 60), (44, 46), (44, 49), (44, 51), (45, 47), (45, 48), (46, 48), (46, 49), (46, 50), (47, 49), (52, 55), (52, 56), (52, 59), (52, 60), (52, 61), (52, 62), (52, 63), (53, 56), (53, 61), (53, 62), (54, 56), (54, 63), (57, 58), (57, 59), (58, 61), (58, 62), (58, 63), (59, 61), (60, 61), (61, 63), (62, 63), (64, 65), (64, 66), (64, 67), (64, 68), (64, 72), (64, 75), (65, 66), (65, 67), (65, 68), (65, 69), (65, 74), (65, 75), (66, 68), (67, 68), (67, 75), (68, 69), (68, 72), (68, 74), (69, 70), (69, 71), (70, 75), (71, 72), (71, 73), (71, 74), (71, 75), (72, 73), (72, 75)]
graph_layout = layout_graph(edge_list)
print(json.dumps(graph_layout, indent=4))
```