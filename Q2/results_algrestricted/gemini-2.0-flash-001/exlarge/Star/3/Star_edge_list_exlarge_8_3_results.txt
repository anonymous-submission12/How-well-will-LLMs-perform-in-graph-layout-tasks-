```python
import json
import math

def calculate_layout(edges):
    """
    Calculates a layout for a graph to minimize edge crossings.

    This implementation uses a radial layout with node 0 at the center.
    Other nodes are placed on a circle around the center, equally spaced.

    Args:
        edges: A list of tuples representing the graph's edges.

    Returns:
        A dictionary where keys are node IDs and values are (x, y) coordinates.
    """

    nodes = set()
    for edge in edges:
        nodes.add(edge[0])
        nodes.add(edge[1])

    nodes = sorted(list(nodes))  # Ensure consistent node ordering
    center_node = 0
    other_nodes = [node for node in nodes if node != center_node]
    num_other_nodes = len(other_nodes)

    layout = {}
    layout[center_node] = (0, 0)  # Center node at (0, 0)

    radius = 10  # Adjust radius as needed

    for i, node in enumerate(other_nodes):
        angle = 2 * math.pi * i / num_other_nodes
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        layout[node] = (x, y)

    return layout


# Graph data
edges = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37), (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), (0, 56), (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71), (0, 72), (0, 73), (0, 74), (0, 75), (0, 76), (0, 77)]

# Calculate the layout
layout = calculate_layout(edges)

# Convert the layout to JSON format
layout_json = json.dumps(layout, indent=4)

# Print the JSON output
print(layout_json)
```