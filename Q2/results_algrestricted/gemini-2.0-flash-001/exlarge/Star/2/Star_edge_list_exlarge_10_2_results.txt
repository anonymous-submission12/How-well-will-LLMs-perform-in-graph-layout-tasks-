```python
import json
import math

def layout_graph(edge_list):
    """
    Generates a graph layout based on the given edge list,
    attempting to maintain consistency between Euclidean distance
    and graph-theoretic distance.  This implementation uses a
    force-directed approach, but without relying on networkx.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A dictionary where keys are node IDs and values are (x, y) coordinates.
    """

    # 1. Identify Nodes
    nodes = set()
    for u, v in edge_list:
        nodes.add(u)
        nodes.add(v)
    nodes = list(nodes)
    num_nodes = len(nodes)

    # 2. Initialize Positions Randomly
    positions = {}
    for node in nodes:
        positions[node] = (math.cos(node) * 10, math.sin(node) * 10)  # Initial positions on a circle

    # 3. Force-Directed Layout
    iterations = 100
    k = 0.5  # Ideal distance between nodes (tunable parameter)
    repulsion_strength = 10
    attraction_strength = 0.1
    damping = 0.9

    for _ in range(iterations):
        forces = {}
        for node in nodes:
            forces[node] = [0.0, 0.0]  # Initialize force vector

        # Repulsive Forces
        for i in range(num_nodes):
            for j in range(i + 1, num_nodes):
                node1 = nodes[i]
                node2 = nodes[j]
                pos1 = positions[node1]
                pos2 = positions[node2]

                delta_x = pos1[0] - pos2[0]
                delta_y = pos1[1] - pos2[1]
                distance = math.sqrt(delta_x**2 + delta_y**2)
                if distance == 0:
                    distance = 0.01  # Avoid division by zero

                repulsion = repulsion_strength * (k**2) / distance
                forces[node1][0] += repulsion * delta_x / distance
                forces[node1][1] += repulsion * delta_y / distance
                forces[node2][0] -= repulsion * delta_x / distance
                forces[node2][1] -= repulsion * delta_y / distance

        # Attractive Forces (based on edges)
        for u, v in edge_list:
            pos_u = positions[u]
            pos_v = positions[v]

            delta_x = pos_u[0] - pos_v[0]
            delta_y = pos_u[1] - pos_v[1]
            distance = math.sqrt(delta_x**2 + delta_y**2)

            attraction = attraction_strength * (distance**2) / k
            forces[u][0] -= attraction * delta_x / distance
            forces[u][1] -= attraction * delta_y / distance
            forces[v][0] += attraction * delta_x / distance
            forces[v][1] += attraction * delta_y / distance

        # Update Positions
        for node in nodes:
            forces[node][0] *= damping
            forces[node][1] *= damping
            positions[node] = (positions[node][0] + forces[node][0], positions[node][1] + forces[node][1])

    # 4. Normalize Positions (optional, but good for consistent scaling)
    min_x = min(pos[0] for pos in positions.values())
    min_y = min(pos[1] for pos in positions.values())
    max_x = max(pos[0] for pos in positions.values())
    max_y = max(pos[1] for pos in positions.values())

    width = max_x - min_x
    height = max_y - min_y

    if width == 0:
        width = 1
    if height == 0:
        height = 1

    for node in nodes:
        x, y = positions[node]
        x = (x - min_x) / width
        y = (y - min_y) / height
        positions[node] = (x, y)

    return positions


# Example Usage:
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37), (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), (0, 56), (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71), (0, 72), (0, 73), (0, 74), (0, 75), (0, 76), (0, 77), (0, 78), (0, 79)]
layout = layout_graph(edge_list)
print(json.dumps(layout, indent=4))
```