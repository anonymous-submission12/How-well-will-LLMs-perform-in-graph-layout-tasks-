```python
import json
import math

def layout_graph(edge_list):
    """
    Generates a layout for a graph, attempting to maintain consistency
    between Euclidean distance and graph-theoretic distance.

    This implementation uses a simple radial layout, placing nodes connected to
    the central node (node 0) in a circle, and other nodes randomly.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A dictionary where keys are node IDs and values are (x, y) coordinates.
    """

    nodes = set()
    for u, v in edge_list:
        nodes.add(u)
        nodes.add(v)

    num_nodes = len(nodes)
    layout = {}

    # Place node 0 at the center
    layout[0] = (0, 0)

    # Place nodes directly connected to node 0 in a circle
    neighbors_of_0 = set()
    for u, v in edge_list:
        if u == 0:
            neighbors_of_0.add(v)
        elif v == 0:
            neighbors_of_0.add(u)

    num_neighbors = len(neighbors_of_0)
    radius = 10  # Adjust as needed

    for i, node in enumerate(neighbors_of_0):
        angle = 2 * math.pi * i / num_neighbors
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        layout[node] = (x, y)

    # Place remaining nodes randomly
    remaining_nodes = nodes - {0} - neighbors_of_0
    for node in remaining_nodes:
        x = 20 * (0.5 -  hash(node) % 1000 / 1000) # Random x coordinate between -10 and 10
        y = 20 * (0.5 - hash(node * 100) % 1000 / 1000) # Random y coordinate between -10 and 10
        layout[node] = (x, y)

    return layout


# Example usage with the provided graph data:
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37), (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), (0, 56), (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71), (0, 72)]
layout = layout_graph(edge_list)

# Convert the layout to JSON format
layout_json = json.dumps(layout, indent=4)

# Print the JSON output
print(layout_json)
```