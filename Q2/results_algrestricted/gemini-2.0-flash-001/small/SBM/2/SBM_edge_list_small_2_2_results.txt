```python
import json
import random
import math

def layout_graph(edge_list, dimensions=2, iterations=100, initial_temperature=1.0, cooling_rate=0.95):
    """
    Generates a graph layout using a force-directed algorithm.

    Args:
        edge_list: A list of tuples representing the edges of the graph.
        dimensions: The number of dimensions for the layout (default: 2).
        iterations: The number of iterations to run the algorithm (default: 100).
        initial_temperature: The initial temperature for simulated annealing (default: 1.0).
        cooling_rate: The cooling rate for simulated annealing (default: 0.95).

    Returns:
        A dictionary where keys are node indices and values are lists representing their coordinates.
    """

    # 1. Identify Nodes
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    nodes = sorted(list(nodes))  # Ensure consistent node ordering

    num_nodes = len(nodes)

    # 2. Initialize Positions Randomly
    positions = {node: [random.random() for _ in range(dimensions)] for node in nodes}

    # 3. Define Force Function (Simple Repulsion and Attraction)
    def calculate_force(node1, node2, distance, is_connected):
        """Calculates the force between two nodes."""
        repulsion_strength = 0.1
        attraction_strength = 0.05

        if is_connected:
            return attraction_strength * distance  # Attraction if connected
        else:
            return -repulsion_strength / (distance + 0.0001)  # Repulsion if not connected (avoid division by zero)

    # 4. Simulated Annealing Loop
    temperature = initial_temperature
    for _ in range(iterations):
        for node in nodes:
            # Calculate net force on the node
            net_force = [0.0] * dimensions
            for other_node in nodes:
                if node == other_node:
                    continue

                # Calculate distance between nodes
                distance = math.sqrt(sum([(positions[node][i] - positions[other_node][i])**2 for i in range(dimensions)]))

                # Check if nodes are connected
                is_connected = (node, other_node) in edge_list or (other_node, node) in edge_list

                # Calculate force
                force_magnitude = calculate_force(node, other_node, distance, is_connected)

                # Decompose force into components
                for i in range(dimensions):
                    net_force[i] += force_magnitude * (positions[other_node][i] - positions[node][i]) / (distance + 0.0001)

            # Update position based on net force and temperature
            for i in range(dimensions):
                # Apply a maximum displacement based on temperature
                max_displacement = temperature * 0.1
                displacement = max(min(net_force[i], max_displacement), -max_displacement)
                positions[node][i] += displacement

                # Keep nodes within bounds [0, 1]
                positions[node][i] = max(0.0, min(1.0, positions[node][i]))

        # Cool the temperature
        temperature *= cooling_rate

    # 5. Return Layout
    return positions


# Example Usage with your provided graph data:
edge_list = [(0, 1), (0, 2), (0, 3), (0, 5), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 3), (2, 5), (2, 6), (3, 5), (3, 6), (3, 22), (4, 5), (4, 6), (5, 6), (5, 21), (7, 9), (7, 10), (7, 11), (7, 13), (8, 9), (8, 13), (8, 17), (10, 12), (10, 13), (11, 12), (11, 13), (12, 13), (13, 18), (14, 15), (14, 16), (14, 17), (14, 18), (14, 20), (15, 17), (15, 20), (16, 17), (16, 18), (16, 20), (17, 18), (17, 20), (18, 19), (18, 20), (18, 21), (21, 22), (21, 25), (21, 26), (21, 27), (22, 23), (22, 24), (22, 25), (22, 26), (22, 27), (23, 24), (23, 25), (23, 26), (24, 25), (24, 26), (24, 27), (25, 26), (25, 27)]
layout = layout_graph(edge_list)

# Convert layout to JSON format
layout_json = json.dumps(layout, indent=4)
print(layout_json)
```