```python
import json
import random
import math

def layout_graph(edge_list):
    """
    Generates a layout for a graph, attempting to maintain consistency
    between Euclidean distance and graph-theoretic distance.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A dictionary where keys are node IDs and values are (x, y) coordinates.
    """

    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    nodes = list(nodes)
    num_nodes = len(nodes)

    # Initialize node positions randomly
    positions = {node: (random.random(), random.random()) for node in nodes}

    # Define a function to calculate Euclidean distance
    def euclidean_distance(pos1, pos2):
        return math.sqrt((pos1[0] - pos2[0])**2 + (pos1[1] - pos2[1])**2)

    # Define a function to calculate graph-theoretic distance (shortest path)
    def graph_distance(node1, node2, edge_list):
        # Use BFS to find the shortest path
        queue = [(node1, 0)]  # (node, distance)
        visited = {node1}
        while queue:
            curr_node, dist = queue.pop(0)
            if curr_node == node2:
                return dist
            for edge in edge_list:
                if edge[0] == curr_node and edge[1] not in visited:
                    queue.append((edge[1], dist + 1))
                    visited.add(edge[1])
                elif edge[1] == curr_node and edge[0] not in visited:
                    queue.append((edge[0], dist + 1))
                    visited.add(edge[0])
        return float('inf')  # Return infinity if no path exists

    # Iteratively adjust positions to minimize the difference between
    # Euclidean distance and graph-theoretic distance
    num_iterations = 1000
    learning_rate = 0.01

    for _ in range(num_iterations):
        for node1 in nodes:
            for node2 in nodes:
                if node1 == node2:
                    continue

                graph_dist = graph_distance(node1, node2, edge_list)
                euclidean_dist = euclidean_distance(positions[node1], positions[node2])

                # Calculate the difference between the distances
                diff = euclidean_dist - graph_dist

                # Adjust positions to reduce the difference
                # Move nodes closer if Euclidean distance is too large, and vice versa
                x1, y1 = positions[node1]
                x2, y2 = positions[node2]

                # Calculate the direction vector
                dx = x2 - x1
                dy = y2 - y1
                dist = euclidean_distance(positions[node1], positions[node2])
                if dist == 0:
                    continue # Avoid division by zero

                # Normalize the direction vector
                dx /= dist
                dy /= dist

                # Update positions
                positions[node1] = (x1 + learning_rate * diff * dx, y1 + learning_rate * diff * dy)
                positions[node2] = (x2 - learning_rate * diff * dx, y2 - learning_rate * diff * dy)

    # Normalize positions to be within [0, 1]
    min_x = min(pos[0] for pos in positions.values())
    min_y = min(pos[1] for pos in positions.values())
    max_x = max(pos[0] for pos in positions.values())
    max_y = max(pos[1] for pos in positions.values())

    for node in nodes:
        x, y = positions[node]
        x = (x - min_x) / (max_x - min_x) if (max_x - min_x) != 0 else 0.5
        y = (y - min_y) / (max_y - min_y) if (max_y - min_y) != 0 else 0.5
        positions[node] = (x, y)

    return positions


# Example usage:
edge_list = [(0, 1), (0, 2), (0, 4), (0, 5), (0, 6), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 4), (2, 6), (2, 7), (2, 8), (3, 5), (3, 6), (3, 7), (3, 8), (4, 5), (4, 6), (4, 8), (5, 7), (6, 7), (7, 8), (9, 10), (9, 14), (9, 16), (9, 17), (9, 22), (10, 11), (10, 12), (10, 15), (10, 16), (10, 17), (11, 12), (11, 13), (11, 14), (11, 16), (11, 17), (11, 24), (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (13, 14), (13, 15), (14, 15), (14, 16), (14, 17), (15, 17), (16, 17), (18, 19), (18, 20), (18, 21), (18, 22), (18, 23), (18, 24), (18, 25), (19, 20), (19, 21), (19, 22), (19, 23), (19, 24), (20, 22), (20, 23), (20, 24), (20, 25), (21, 22), (21, 23), (21, 25), (22, 23), (22, 24), (22, 25), (23, 24), (24, 25)]
graph_layout = layout_graph(edge_list)
print(json.dumps(graph_layout, indent=4))
```