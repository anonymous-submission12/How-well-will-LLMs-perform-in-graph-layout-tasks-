```python
import json
import random
import math

def layout_graph(edge_list):
    """
    Generates a graph layout that attempts to maintain consistency between
    Euclidean distance and graph-theoretic distance.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A dictionary where keys are node indices and values are (x, y) coordinates.
    """

    # 1. Build the adjacency list representation of the graph.
    adj = {}
    for u, v in edge_list:
        if u not in adj:
            adj[u] = []
        if v not in adj:
            adj[v] = []
        adj[u].append(v)
        adj[v].append(u)

    nodes = list(adj.keys())
    num_nodes = len(nodes)

    # 2. Initialize node positions randomly.
    layout = {}
    for node in nodes:
        layout[node] = (random.random(), random.random())  # Initial positions in [0, 1] x [0, 1]

    # 3. Iteratively refine the layout using a force-directed approach.
    iterations = 100  # Number of iterations for refinement
    repulsion_strength = 0.05  # Strength of the repulsive force
    attraction_strength = 0.1  # Strength of the attractive force
    damping_factor = 0.5 # Damping factor to prevent oscillations

    for _ in range(iterations):
        # Calculate forces on each node
        forces = {}
        for node in nodes:
            forces[node] = [0.0, 0.0]  # Initialize force vector

        # Repulsive forces (between all pairs of nodes)
        for i in range(num_nodes):
            for j in range(i + 1, num_nodes):
                node1 = nodes[i]
                node2 = nodes[j]
                pos1 = layout[node1]
                pos2 = layout[node2]
                
                dx = pos2[0] - pos1[0]
                dy = pos2[1] - pos1[1]
                distance = math.sqrt(dx**2 + dy**2)

                # Apply a repulsive force inversely proportional to the distance
                if distance > 0:  # Avoid division by zero
                    repulsion = repulsion_strength / distance
                    fx = dx / distance * repulsion
                    fy = dy / distance * repulsion
                    forces[node1][0] -= fx
                    forces[node1][1] -= fy
                    forces[node2][0] += fx
                    forces[node2][1] += fy

        # Attractive forces (between connected nodes)
        for u, neighbors in adj.items():
            for v in neighbors:
                if u < v: # Avoid double counting edges
                    pos_u = layout[u]
                    pos_v = layout[v]
                    dx = pos_v[0] - pos_u[0]
                    dy = pos_v[1] - pos_u[1]
                    distance = math.sqrt(dx**2 + dy**2)

                    # Apply an attractive force proportional to the distance
                    attraction = attraction_strength * distance
                    fx = dx / distance * attraction if distance > 0 else 0 # Avoid division by zero
                    fy = dy / distance * attraction if distance > 0 else 0
                    forces[u][0] += fx
                    forces[u][1] += fy
                    forces[v][0] -= fx
                    forces[v][1] -= fy

        # Update node positions based on the calculated forces
        for node in nodes:
            layout[node] = (
                layout[node][0] + forces[node][0] * damping_factor,
                layout[node][1] + forces[node][1] * damping_factor
            )

            # Keep nodes within the bounds [0, 1] x [0, 1]
            layout[node] = (max(0.0, min(1.0, layout[node][0])), max(0.0, min(1.0, layout[node][1])))

    return layout


# Graph data
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 6), (1, 2), (1, 3), (1, 24), (2, 3), (2, 4), (3, 4), (5, 6), (5, 7), (5, 8), (5, 9), (6, 7), (6, 8), (6, 9), (6, 29), (7, 8), (7, 9), (7, 23), (8, 9), (10, 11), (10, 13), (10, 14), (11, 12), (11, 14), (11, 28), (12, 13), (12, 26), (15, 16), (15, 17), (15, 18), (15, 19), (16, 17), (16, 19), (16, 26), (17, 18), (20, 21), (20, 22), (20, 23), (20, 24), (21, 22), (21, 23), (22, 23), (22, 24), (25, 26), (25, 27), (25, 28), (25, 29), (26, 27), (26, 28), (26, 29), (27, 28), (28, 29)]

# Generate the layout
layout = layout_graph(edge_list)

# Convert the layout to JSON format
layout_json = json.dumps(layout, indent=4)

# Print the JSON output
print(layout_json)
```