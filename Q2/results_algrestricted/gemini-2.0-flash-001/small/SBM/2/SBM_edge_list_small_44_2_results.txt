```python
import json
import random
import math

def graph_layout(edge_list):
    """
    Generates a graph layout that attempts to maintain consistency between
    Euclidean distance and graph-theoretic distance.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A dictionary where keys are node indices and values are (x, y) coordinates.
    """

    # 1. Build the adjacency list representation of the graph.
    adj = {}
    for u, v in edge_list:
        if u not in adj:
            adj[u] = []
        if v not in adj:
            adj[v] = []
        adj[u].append(v)
        adj[v].append(u)

    nodes = list(adj.keys())
    num_nodes = len(nodes)

    # 2. Initialize node positions randomly.
    layout = {node: (random.random(), random.random()) for node in nodes}

    # 3. Iteratively adjust node positions to minimize stress.
    iterations = 100  # Number of iterations for the layout algorithm
    for _ in range(iterations):
        for u in nodes:
            # Calculate the attractive and repulsive forces on node u.
            attractive_force_x = 0
            attractive_force_y = 0
            repulsive_force_x = 0
            repulsive_force_y = 0

            # Attractive forces from connected nodes.
            for v in adj[u]:
                dx = layout[v][0] - layout[u][0]
                dy = layout[v][1] - layout[u][1]
                dist = math.sqrt(dx**2 + dy**2)
                if dist == 0:
                    dist = 0.0001 # Avoid division by zero
                    dx = 0.0001
                    dy = 0.0001

                attractive_force_x += dx / dist
                attractive_force_y += dy / dist

            # Repulsive forces from all other nodes.
            for v in nodes:
                if u != v:
                    dx = layout[v][0] - layout[u][0]
                    dy = layout[v][1] - layout[u][1]
                    dist = math.sqrt(dx**2 + dy**2)
                    if dist == 0:
                        dist = 0.0001 # Avoid division by zero
                        dx = 0.0001
                        dy = 0.0001
                    repulsive_force_x -= dx / (dist**2)
                    repulsive_force_y -= dy / (dist**2)

            # Update node position based on the net force.
            total_force_x = attractive_force_x + repulsive_force_x
            total_force_y = attractive_force_y + repulsive_force_y

            # Limit the movement to prevent oscillations and improve convergence.
            max_movement = 0.01
            movement_x = max(min(total_force_x * 0.1, max_movement), -max_movement)
            movement_y = max(min(total_force_y * 0.1, max_movement), -max_movement)

            new_x = layout[u][0] + movement_x
            new_y = layout[u][1] + movement_y

            # Keep nodes within the unit square.
            new_x = max(0, min(1, new_x))
            new_y = max(0, min(1, new_y))

            layout[u] = (new_x, new_y)

    return layout


# Graph data
edge_list = [(0, 1), (0, 2), (0, 4), (0, 5), (1, 3), (1, 5), (1, 6), (1, 7), (2, 5), (2, 6), (2, 13), (2, 19), (2, 23), (3, 4), (3, 5), (3, 6), (3, 7), (3, 13), (4, 5), (4, 6), (4, 7), (5, 6), (5, 13), (5, 21), (6, 7), (8, 9), (8, 10), (8, 11), (8, 12), (9, 11), (9, 12), (9, 13), (9, 14), (10, 11), (10, 12), (10, 13), (10, 14), (10, 20), (11, 12), (11, 13), (11, 14), (12, 13), (12, 14), (13, 14), (13, 20), (15, 16), (15, 18), (15, 19), (15, 20), (15, 21), (16, 18), (16, 20), (16, 21), (17, 18), (17, 20), (17, 21), (18, 19), (18, 21), (19, 20), (19, 21), (20, 21), (22, 23), (22, 24), (22, 26), (22, 27), (22, 28), (23, 24), (23, 25), (23, 27), (23, 28), (24, 25), (24, 27), (24, 28), (25, 27), (27, 28)]

# Generate the layout
layout = graph_layout(edge_list)

# Convert the layout to JSON format
layout_json = json.dumps(layout, indent=4)

# Print the JSON output
print(layout_json)
```