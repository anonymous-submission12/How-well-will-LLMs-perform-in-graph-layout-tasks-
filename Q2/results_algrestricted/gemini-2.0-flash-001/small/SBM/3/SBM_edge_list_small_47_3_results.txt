```python
import json
import random

def calculate_crossing_number(edges, layout):
    """Calculates the number of edge crossings for a given layout."""
    crossing_number = 0
    n = len(edges)
    for i in range(n):
        for j in range(i + 1, n):
            a, b = edges[i]
            c, d = edges[j]

            # Check if the edges (a, b) and (c, d) intersect
            if (a != c and a != d and b != c and b != d):
                # Orientation test
                def orientation(p, q, r):
                    val = (layout[q][1] - layout[p][1]) * (layout[r][0] - layout[q][0]) - \
                          (layout[q][0] - layout[p][0]) * (layout[r][1] - layout[q][1])
                    if val == 0:
                        return 0  # collinear
                    return 1 if val > 0 else -1  # clock or counterclock wise

                o1 = orientation(a, b, c)
                o2 = orientation(a, b, d)
                o3 = orientation(c, d, a)
                o4 = orientation(c, d, b)

                if (o1 != o2 and o3 != o4):
                    crossing_number += 1

    return crossing_number


def initial_layout(nodes):
    """Generates an initial random layout for the graph."""
    layout = {}
    for node in nodes:
        layout[node] = (random.random(), random.random())  # Assign random x, y coordinates
    return layout


def optimize_layout(edges, nodes, iterations=1000, step_size=0.01):
    """Optimizes the graph layout to minimize edge crossings using a simple iterative improvement approach."""

    layout = initial_layout(nodes)
    best_layout = layout.copy()
    min_crossing_number = calculate_crossing_number(edges, layout)

    for _ in range(iterations):
        # Choose a random node
        node_to_move = random.choice(nodes)

        # Generate a small random displacement
        dx = random.uniform(-step_size, step_size)
        dy = random.uniform(-step_size, step_size)

        # Create a new layout with the node moved
        new_layout = layout.copy()
        new_layout[node_to_move] = (layout[node_to_move][0] + dx, layout[node_to_move][1] + dy)

        # Calculate the crossing number for the new layout
        new_crossing_number = calculate_crossing_number(edges, new_layout)

        # If the new layout has fewer crossings, accept it
        if new_crossing_number < min_crossing_number:
            min_crossing_number = new_crossing_number
            best_layout = new_layout
            layout = new_layout
        else:
            # Revert to the previous layout
            pass

    return best_layout


# Graph data
edges = [(0, 4), (0, 5), (0, 7), (1, 2), (1, 3), (1, 5), (1, 7), (2, 3), (2, 4), (2, 5), (2, 6), (3, 5), (3, 6), (3, 7), (3, 22), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (6, 7), (8, 10), (8, 11), (8, 12), (8, 13), (8, 14), (8, 15), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (11, 12), (11, 13), (12, 13), (12, 14), (12, 15), (13, 14), (13, 15), (14, 18), (16, 17), (16, 18), (16, 20), (16, 21), (16, 22), (17, 19), (17, 20), (17, 21), (17, 22), (18, 19), (18, 20), (18, 21), (18, 22), (19, 20), (19, 21), (19, 22), (20, 21)]
nodes = list(set([u for edge in edges for u in edge]))

# Generate and optimize the layout
layout = optimize_layout(edges, nodes)

# Convert the layout to JSON format
layout_json = json.dumps(layout, indent=4)

# Print the JSON output
print(layout_json)
```