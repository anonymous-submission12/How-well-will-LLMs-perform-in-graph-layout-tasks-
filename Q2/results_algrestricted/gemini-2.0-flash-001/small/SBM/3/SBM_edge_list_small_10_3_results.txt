```python
import json

def layout_graph(edges):
    """
    Generates a layout for a graph to minimize edge crossings.

    This function implements a simple layout algorithm that attempts to
    minimize edge crossings by positioning nodes in a circular arrangement
    and then iteratively adjusting their positions based on the positions
    of their neighbors.

    Args:
        edges: A list of tuples representing the edges of the graph.

    Returns:
        A dictionary where keys are node IDs and values are (x, y) coordinates.
    """

    # 1. Initialize node positions in a circle
    nodes = set()
    for edge in edges:
        nodes.add(edge[0])
        nodes.add(edge[1])

    num_nodes = len(nodes)
    positions = {}
    for i, node in enumerate(nodes):
        angle = 2 * 3.14159 * i / num_nodes
        positions[node] = (10 * (1 + 0.1 * i) *  math.cos(angle), 10 * (1 + 0.1 * i) * math.sin(angle)) # Scale up the coordinates

    # 2. Iteratively adjust positions to minimize edge crossings
    num_iterations = 100
    for _ in range(num_iterations):
        for node in nodes:
            # Calculate the average position of neighbors
            neighbors = []
            for edge in edges:
                if edge[0] == node:
                    neighbors.append(edge[1])
                elif edge[1] == node:
                    neighbors.append(edge[0])

            if neighbors:
                avg_x = sum([positions[neighbor][0] for neighbor in neighbors]) / len(neighbors)
                avg_y = sum([positions[neighbor][1] for neighbor in neighbors]) / len(neighbors)

                # Move the node towards the average position of its neighbors
                positions[node] = (
                    0.9 * positions[node][0] + 0.1 * avg_x,
                    0.9 * positions[node][1] + 0.1 * avg_y,
                )

    return positions

import math
# Graph data
edges = [(0, 1), (0, 2), (0, 5), (0, 6), (0, 8), (0, 9), (0, 10), (0, 11), (1, 2), (1, 3), (1, 4), (1, 7), (1, 9), (1, 10), (1, 11), (1, 21), (2, 4), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (2, 11), (3, 5), (3, 6), (3, 8), (3, 9), (3, 10), (3, 11), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (5, 6), (5, 7), (5, 8), (5, 10), (5, 11), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 19), (7, 8), (7, 9), (7, 10), (7, 11), (8, 9), (8, 11), (9, 10), (9, 12), (10, 11), (10, 12), (12, 13), (12, 14), (12, 15), (12, 17), (12, 19), (12, 20), (12, 21), (13, 14), (13, 16), (13, 17), (13, 18), (13, 19), (13, 20), (13, 21), (14, 16), (14, 18), (14, 19), (14, 20), (14, 21), (14, 22), (15, 16), (15, 18), (15, 20), (15, 21), (16, 17), (16, 18), (16, 21), (16, 22), (17, 18), (17, 19), (17, 20), (17, 21), (17, 22), (18, 20), (18, 22), (19, 20), (19, 21), (19, 22), (20, 22), (21, 22)]

# Generate the layout
layout = layout_graph(edges)

# Convert the layout to JSON format
layout_json = json.dumps(layout, indent=4)

# Print the JSON output
print(layout_json)
```