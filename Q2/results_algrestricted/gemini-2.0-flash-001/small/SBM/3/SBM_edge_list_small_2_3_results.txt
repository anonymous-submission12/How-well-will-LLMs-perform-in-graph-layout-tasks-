```python
import json
import random

def layout_graph(edge_list):
    """
    Generates a layout for a graph to minimize edge crossings.

    This function implements a simple force-directed layout algorithm. It initializes
    node positions randomly and then iteratively adjusts them based on attractive
    and repulsive forces between nodes.

    Args:
        edge_list: A list of tuples representing the edges of the graph. Each tuple
                   should contain the indices of the two connected nodes.

    Returns:
        A dictionary where keys are node indices and values are (x, y) coordinates.
        The layout is also returned as a JSON string.
    """

    # 1. Initialization
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    nodes = sorted(list(nodes))  # Ensure consistent node ordering

    num_nodes = len(nodes)
    positions = {}
    for node in nodes:
        positions[node] = (random.random(), random.random())  # Initial random positions

    # 2. Force-Directed Layout
    iterations = 100  # Number of iterations for the layout algorithm
    repulsion_strength = 0.1
    attraction_strength = 0.05
    damping = 0.5

    for _ in range(iterations):
        forces = {}
        for node in nodes:
            forces[node] = [0.0, 0.0]  # Initialize force vector for each node

        # Calculate repulsive forces
        for i in range(num_nodes):
            for j in range(i + 1, num_nodes):
                node1 = nodes[i]
                node2 = nodes[j]
                pos1 = positions[node1]
                pos2 = positions[node2]
                
                dx = pos2[0] - pos1[0]
                dy = pos2[1] - pos1[1]
                distance = max((dx**2 + dy**2)**0.5, 0.01)  # Avoid division by zero

                repulsion = repulsion_strength / distance**2
                
                forces[node1][0] += repulsion * dx / distance
                forces[node1][1] += repulsion * dy / distance
                forces[node2][0] -= repulsion * dx / distance
                forces[node2][1] -= repulsion * dy / distance

        # Calculate attractive forces
        for edge in edge_list:
            node1 = edge[0]
            node2 = edge[1]
            pos1 = positions[node1]
            pos2 = positions[node2]

            dx = pos2[0] - pos1[0]
            dy = pos2[1] - pos1[1]
            distance = max((dx**2 + dy**2)**0.5, 0.01)

            attraction = attraction_strength * distance

            forces[node1][0] += attraction * dx / distance
            forces[node1][1] += attraction * dy / distance
            forces[node2][0] -= attraction * dx / distance
            forces[node2][1] -= attraction * dy / distance

        # Update positions based on forces
        for node in nodes:
            positions[node] = (
                positions[node][0] + forces[node][0] * damping,
                positions[node][1] + forces[node][1] * damping,
            )

            # Keep nodes within bounds (0, 1)
            positions[node] = (
                max(0.0, min(1.0, positions[node][0])),
                max(0.0, min(1.0, positions[node][1])),
            )

    # 3. Return Layout
    return positions

# Example usage with the provided graph data:
edge_list = [(0, 1), (0, 2), (0, 3), (0, 5), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 3), (2, 5), (2, 6), (3, 5), (3, 6), (3, 22), (4, 5), (4, 6), (5, 6), (5, 21), (7, 9), (7, 10), (7, 11), (7, 13), (8, 9), (8, 13), (8, 17), (10, 12), (10, 13), (11, 12), (11, 13), (12, 13), (13, 18), (14, 15), (14, 16), (14, 17), (14, 18), (14, 20), (15, 17), (15, 20), (16, 17), (16, 18), (16, 20), (17, 18), (17, 20), (18, 19), (18, 20), (18, 21), (21, 22), (21, 25), (21, 26), (21, 27), (22, 23), (22, 24), (22, 25), (22, 26), (22, 27), (23, 24), (23, 25), (23, 26), (24, 25), (24, 26), (24, 27), (25, 26), (25, 27)]
layout = layout_graph(edge_list)
layout_json = json.dumps(layout, indent=4)
print(layout_json)
```