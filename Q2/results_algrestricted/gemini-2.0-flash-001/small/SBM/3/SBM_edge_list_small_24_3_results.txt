```python
import json
import random

def calculate_crossing_number(edges, layout):
    """Calculates the number of edge crossings in a given layout."""
    def ccw(A, B, C):
        return (C[1]-A[1]) * (B[0]-A[0]) > (B[1]-A[1]) * (C[0]-A[0])

    def intersect(A, B, C, D):
        return ccw(A,C,D) != ccw(B,C,D) and ccw(A,B,C) != ccw(A,B,D)

    crossings = 0
    for i in range(len(edges)):
        for j in range(i + 1, len(edges)):
            a, b = edges[i]
            c, d = edges[j]
            if intersect(layout[a], layout[b], layout[c], layout[d]):
                crossings += 1
    return crossings

def initial_layout(nodes):
    """Generates a random initial layout for the graph."""
    layout = {}
    for node in nodes:
        layout[node] = (random.random(), random.random())
    return layout

def move_node(layout, node, step_size=0.01):
    """Moves a node to a new random position within a certain radius."""
    x = layout[node][0] + random.uniform(-step_size, step_size)
    y = layout[node][1] + random.uniform(-step_size, step_size)

    # Keep the nodes within the unit square
    x = max(0, min(1, x))
    y = max(0, min(1, y))

    return (x, y)

def optimize_layout(edges, nodes, iterations=1000):
    """Optimizes the graph layout to minimize edge crossings using a simple iterative improvement algorithm."""
    layout = initial_layout(nodes)
    best_layout = layout.copy()
    min_crossings = calculate_crossing_number(edges, layout)
    best_crossings = min_crossings

    for _ in range(iterations):
        node_to_move = random.choice(nodes)
        original_position = layout[node_to_move]
        new_position = move_node(layout, node_to_move)
        layout[node_to_move] = new_position

        crossings = calculate_crossing_number(edges, layout)

        if crossings < min_crossings:
            min_crossings = crossings
            best_layout = layout.copy()
            best_crossings = crossings
        else:
            # Revert the move if it didn't improve the layout
            layout[node_to_move] = original_position

    return best_layout

# Graph data
edges = [(0, 1), (0, 2), (0, 3), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5), (4, 22), (5, 14), (6, 7), (6, 8), (6, 10), (7, 8), (7, 9), (7, 10), (7, 11), (8, 9), (8, 10), (8, 11), (9, 10), (9, 11), (10, 11), (10, 26), (12, 13), (12, 16), (12, 17), (13, 15), (13, 16), (13, 17), (13, 25), (14, 15), (14, 16), (14, 17), (14, 19), (15, 16), (15, 17), (16, 17), (18, 19), (18, 20), (18, 21), (18, 22), (19, 20), (19, 21), (20, 21), (20, 22), (21, 22), (23, 24), (23, 25), (23, 26), (23, 27), (24, 26), (24, 27), (25, 26), (25, 27), (26, 27)]
nodes = list(set([node for edge in edges for node in edge]))

# Generate and optimize the layout
layout = optimize_layout(edges, nodes)

# Convert the layout to JSON format
layout_json = json.dumps(layout, indent=4)

# Print the JSON output
print(layout_json)
```