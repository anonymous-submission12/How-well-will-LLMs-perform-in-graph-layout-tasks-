```python
import json

def generate_layout(edge_list):
    """
    Generates a layout for a graph to minimize edge crossings.

    This implementation uses a simple linear layout.  For more complex graphs,
    consider more sophisticated algorithms like simulated annealing or force-directed
    layouts (which are explicitly disallowed by the prompt).

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A dictionary representing the layout, where keys are node IDs and
        values are (x, y) coordinates.  The layout is also returned as a JSON string.
    """

    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])

    num_nodes = len(nodes)
    layout = {}

    # Simple linear layout: place nodes in a line
    for i, node in enumerate(sorted(list(nodes))):
        x = i  # Spread nodes out along the x-axis
        y = 0  # Keep all nodes on the same horizontal line
        layout[node] = (x, y)

    return layout

# Example usage with the provided graph data:
edge_list = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29)]
layout = generate_layout(edge_list)
layout_json = json.dumps(layout, indent=4)

print(layout_json)
```