```python
import json

def generate_layout(edge_list):
    """
    Generates a layout for a graph to minimize edge crossings.

    This function implements a simple layout algorithm that places nodes in a circle
    and then adjusts their positions based on their connections to minimize edge crossings.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A dictionary where keys are node IDs and values are (x, y) coordinates.
    """

    # 1. Determine the nodes in the graph.
    nodes = set()
    for u, v in edge_list:
        nodes.add(u)
        nodes.add(v)
    nodes = sorted(list(nodes))  # Ensure consistent ordering

    num_nodes = len(nodes)

    # 2. Initialize node positions in a circle.
    import math
    radius = 10  # Adjust as needed
    layout = {}
    for i, node in enumerate(nodes):
        angle = 2 * math.pi * i / num_nodes
        x = radius * math.cos(angle)
        y = radius * math.sin(angle)
        layout[node] = (x, y)

    # 3. Iteratively adjust node positions to minimize edge crossings.
    # This is a very basic approach and can be improved significantly.
    num_iterations = 100  # Adjust as needed
    repulsion_strength = 0.1
    spring_strength = 0.05
    damping = 0.9

    velocities = {node: (0.0, 0.0) for node in nodes}

    for _ in range(num_iterations):
        # Calculate forces
        forces = {node: (0.0, 0.0) for node in nodes}

        # Repulsion force (nodes repel each other)
        for i in range(num_nodes):
            for j in range(i + 1, num_nodes):
                node1 = nodes[i]
                node2 = nodes[j]
                x1, y1 = layout[node1]
                x2, y2 = layout[node2]
                dx = x2 - x1
                dy = y2 - y1
                distance = math.sqrt(dx**2 + dy**2)
                if distance == 0:
                    distance = 0.01  # Avoid division by zero
                    dx = 0.01
                    dy = 0.01

                repulsion = repulsion_strength / distance**2
                fx = repulsion * dx
                fy = repulsion * dy
                forces[node1] = (forces[node1][0] - fx, forces[node1][1] - fy)
                forces[node2] = (forces[node2][0] + fx, forces[node2][1] + fy)

        # Spring force (edges attract connected nodes)
        for u, v in edge_list:
            x1, y1 = layout[u]
            x2, y2 = layout[v]
            dx = x2 - x1
            dy = y2 - y1
            spring = spring_strength * math.sqrt(dx**2 + dy**2)
            fx = spring * dx
            fy = spring * dy
            forces[u] = (forces[u][0] + fx, forces[u][1] + fy)
            forces[v] = (forces[v][0] - fx, forces[v][1] - fy)

        # Update node positions based on forces and velocities
        for node in nodes:
            fx, fy = forces[node]
            vx, vy = velocities[node]

            vx = damping * vx + fx
            vy = damping * vy + fy

            velocities[node] = (vx, vy)

            x, y = layout[node]
            layout[node] = (x + vx, y + vy)

    return layout


# Example usage with the provided graph data:
edge_list = [(0, 1), (0, 29), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29)]
layout = generate_layout(edge_list)

# Convert layout to JSON format
layout_json = json.dumps(layout, indent=4)
print(layout_json)
```