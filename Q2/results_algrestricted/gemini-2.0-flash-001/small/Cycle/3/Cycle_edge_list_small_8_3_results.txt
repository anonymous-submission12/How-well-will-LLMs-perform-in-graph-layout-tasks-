```python
import json

def layout_graph(edges):
    """
    Generates a layout for a graph to minimize edge crossings.

    This implementation uses a simple layering approach, assigning nodes to layers
    based on their distance from a starting node.  Within each layer, nodes are
    ordered to minimize crossings with edges connecting to the previous layer.

    Args:
        edges: A list of tuples representing the graph's edges.

    Returns:
        A dictionary where keys are node IDs and values are (x, y) coordinates.
    """

    # 1. Build adjacency list
    adj = {}
    for u, v in edges:
        if u not in adj:
            adj[u] = []
        if v not in adj:
            adj[v] = []
        adj[u].append(v)
        adj[v].append(u)

    nodes = set()
    for u, v in edges:
        nodes.add(u)
        nodes.add(v)

    # 2. Layer assignment (BFS from node 0)
    layers = {}
    visited = {0}
    queue = [0]
    layers[0] = [0]
    layer_index = 0

    while queue:
        next_queue = []
        layers[layer_index + 1] = []
        for u in queue:
            for v in adj[u]:
                if v not in visited:
                    visited.add(v)
                    layers[layer_index + 1].append(v)
                    next_queue.append(v)
        if not layers[layer_index + 1]:
            del layers[layer_index + 1]
            break
        queue = next_queue
        layer_index += 1

    # 3. Node ordering within layers (minimize crossings)
    for i in range(1, len(layers)):
        # Sort nodes in layer i based on their connections to layer i-1
        layers[i] = sorted(layers[i], key=lambda v: sum(u in layers[i-1] for u in adj[v]))

    # 4. Assign coordinates
    layout = {}
    x_spacing = 1  # Horizontal spacing between nodes
    y_spacing = 1  # Vertical spacing between layers

    for i, layer in layers.items():
        y = -i * y_spacing  # Layers are arranged vertically
        num_nodes = len(layer)
        x_start = -(num_nodes - 1) * x_spacing / 2  # Center the layer

        for j, node in enumerate(layer):
            x = x_start + j * x_spacing
            layout[node] = (x, y)

    return layout


# Graph data
edges = [(0, 1), (0, 27), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27)]

# Generate layout
layout = layout_graph(edges)

# Convert to JSON
layout_json = json.dumps(layout, indent=4)

# Print JSON output
print(layout_json)
```