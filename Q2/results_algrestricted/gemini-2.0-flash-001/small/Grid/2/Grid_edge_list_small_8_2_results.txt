```python
import json
import math

def layout_graph(edge_list):
    """
    Generates a graph layout that attempts to maintain consistency between
    Euclidean distance and graph-theoretic distance.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A dictionary where keys are node indices and values are (x, y) coordinates.
    """

    # 1. Determine the number of nodes
    nodes = set()
    for u, v in edge_list:
        nodes.add(u)
        nodes.add(v)
    num_nodes = len(nodes)

    # 2. Initialize node positions randomly
    layout = {}
    for i in range(num_nodes):
        layout[i] = (i % 6, i // 6)  # Initial positions on a grid

    # 3. Iteratively adjust node positions using a force-based approach
    iterations = 100
    repulsion_strength = 1.0
    attraction_strength = 0.5
    damping = 0.1

    for _ in range(iterations):
        forces = {}
        for i in range(num_nodes):
            forces[i] = [0.0, 0.0]

        # Repulsion force (nodes repel each other)
        for i in range(num_nodes):
            for j in range(i + 1, num_nodes):
                dx = layout[j][0] - layout[i][0]
                dy = layout[j][1] - layout[i][1]
                distance = math.sqrt(dx**2 + dy**2)
                if distance == 0:
                    distance = 0.01  # Avoid division by zero
                    dx = 0.01
                    dy = 0.01

                repulsion = repulsion_strength / distance**2
                forces[i][0] += repulsion * dx
                forces[i][1] += repulsion * dy
                forces[j][0] -= repulsion * dx
                forces[j][1] -= repulsion * dy

        # Attraction force (connected nodes attract each other)
        for u, v in edge_list:
            dx = layout[v][0] - layout[u][0]
            dy = layout[v][1] - layout[u][1]
            distance = math.sqrt(dx**2 + dy**2)
            attraction = attraction_strength * distance
            forces[u][0] += attraction * dx
            forces[u][1] += attraction * dy
            forces[v][0] -= attraction * dx
            forces[v][1] -= attraction * dy

        # Update node positions based on forces
        for i in range(num_nodes):
            layout[i] = (layout[i][0] + damping * forces[i][0], layout[i][1] + damping * forces[i][1])

    return layout


# Example usage with the provided graph data:
edge_list = [(0, 1), (0, 14), (1, 2), (1, 15), (2, 3), (2, 16), (3, 4), (3, 17), (4, 5), (4, 18), (5, 6), (5, 19), (6, 7), (6, 20), (7, 8), (7, 21), (8, 9), (8, 22), (9, 10), (9, 23), (10, 11), (10, 24), (11, 12), (11, 25), (12, 13), (12, 26), (13, 27), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27)]
layout = layout_graph(edge_list)

# Convert the layout to JSON format
layout_json = json.dumps(layout)
print(layout_json)
```