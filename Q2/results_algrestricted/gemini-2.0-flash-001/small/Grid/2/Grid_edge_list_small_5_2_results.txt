```python
import json
import math

def layout_graph(edge_list):
    """
    Generates a layout for a graph, attempting to maintain consistency
    between Euclidean distance and graph-theoretic distance.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A dictionary representing the layout, where keys are node indices
        and values are (x, y) coordinates.  Returns in JSON format.
    """

    # 1. Determine the number of nodes.
    nodes = set()
    for u, v in edge_list:
        nodes.add(u)
        nodes.add(v)
    num_nodes = len(nodes)

    # 2. Initialize node positions randomly.
    layout = {}
    for i in range(num_nodes):
        layout[i] = (i % 6, i // 6)  # Initial positions on a grid

    # 3. Iteratively refine the layout using a force-based approach.
    iterations = 100
    repulsion_strength = 1.0
    spring_strength = 0.1
    damping = 0.5

    for _ in range(iterations):
        forces = {}
        for i in range(num_nodes):
            forces[i] = [0.0, 0.0]

        # Repulsion force (nodes repel each other)
        for i in range(num_nodes):
            for j in range(i + 1, num_nodes):
                dx = layout[j][0] - layout[i][0]
                dy = layout[j][1] - layout[i][1]
                distance = math.sqrt(dx**2 + dy**2)
                if distance == 0:
                    distance = 0.01  # Avoid division by zero
                    dx = 0.01
                    dy = 0.01

                repulsion_force = repulsion_strength / distance**2
                forces[i][0] += repulsion_force * dx
                forces[i][1] += repulsion_force * dy
                forces[j][0] -= repulsion_force * dx
                forces[j][1] -= repulsion_force * dy

        # Spring force (edges attract connected nodes)
        for u, v in edge_list:
            dx = layout[v][0] - layout[u][0]
            dy = layout[v][1] - layout[u][1]
            # Ideal distance is 1
            distance = math.sqrt(dx**2 + dy**2)
            spring_force = spring_strength * (distance - 1)
            forces[u][0] += spring_force * dx
            forces[u][1] += spring_force * dy
            forces[v][0] -= spring_force * dx
            forces[v][1] -= spring_force * dy

        # Update node positions based on forces
        for i in range(num_nodes):
            layout[i] = (layout[i][0] + damping * forces[i][0],
                         layout[i][1] + damping * forces[i][1])

    return json.dumps(layout)


# Example usage with the provided graph data:
edge_list = [(0, 1), (0, 6), (1, 2), (1, 7), (2, 3), (2, 8), (3, 4), (3, 9), (4, 5), (4, 10), (5, 11), (6, 7), (6, 12), (7, 8), (7, 13), (8, 9), (8, 14), (9, 10), (9, 15), (10, 11), (10, 16), (11, 17), (12, 13), (12, 18), (13, 14), (13, 19), (14, 15), (14, 20), (15, 16), (15, 21), (16, 17), (16, 22), (17, 23), (18, 19), (18, 24), (19, 20), (19, 25), (20, 21), (20, 26), (21, 22), (21, 27), (22, 23), (22, 28), (23, 29), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29)]
layout_json = layout_graph(edge_list)
print(layout_json)
```