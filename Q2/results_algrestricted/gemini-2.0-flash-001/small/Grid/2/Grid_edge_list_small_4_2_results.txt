```python
import json
import random
import math

def layout_graph(edge_list):
    """
    Generates a graph layout that attempts to maintain consistency between
    Euclidean distance and graph-theoretic distance.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A dictionary where keys are node IDs and values are (x, y) coordinates.
    """

    # 1. Initialize node positions randomly
    nodes = set()
    for u, v in edge_list:
        nodes.add(u)
        nodes.add(v)

    num_nodes = len(nodes)
    layout = {node: (random.random(), random.random()) for node in nodes}

    # 2. Iteratively adjust positions to minimize stress
    iterations = 100  # Number of iterations for refinement
    alpha = 0.1      # Learning rate (adjust as needed)

    for _ in range(iterations):
        for u in nodes:
            # Calculate the force acting on node u
            force_x = 0.0
            force_y = 0.0

            for v in nodes:
                if u == v:
                    continue

                # Calculate graph-theoretic distance (shortest path)
                graph_dist = shortest_path_distance(u, v, edge_list, num_nodes)

                # Calculate Euclidean distance
                euclidean_dist = math.sqrt((layout[u][0] - layout[v][0])**2 + (layout[u][1] - layout[v][1])**2)

                # Calculate the difference between the distances
                diff = euclidean_dist - graph_dist

                # Calculate the force components
                force_x += (layout[v][0] - layout[u][0]) * diff
                force_y += (layout[v][1] - layout[u][1]) * diff

            # Update the position of node u
            layout[u] = (layout[u][0] - alpha * force_x, layout[u][1] - alpha * force_y)

    # 3. Normalize the layout to fit within [0, 1] x [0, 1]
    min_x = min(x for x, y in layout.values())
    max_x = max(x for x, y in layout.values())
    min_y = min(y for x, y in layout.values())
    max_y = max(y for x, y in layout.values())

    x_range = max_x - min_x
    y_range = max_y - min_y

    if x_range == 0:
        x_range = 1  # Avoid division by zero if all x-coordinates are the same
    if y_range == 0:
        y_range = 1  # Avoid division by zero if all y-coordinates are the same

    normalized_layout = {
        node: ((x - min_x) / x_range, (y - min_y) / y_range)
        for node, (x, y) in layout.items()
    }

    return normalized_layout


def shortest_path_distance(start_node, end_node, edge_list, num_nodes):
    """
    Calculates the shortest path distance between two nodes in a graph.

    Args:
        start_node: The starting node.
        end_node: The ending node.
        edge_list: A list of tuples representing the edges of the graph.
        num_nodes: The number of nodes in the graph.

    Returns:
        The shortest path distance between the two nodes.
    """

    # Build adjacency list
    adj = {i: [] for i in range(num_nodes)}
    for u, v in edge_list:
        adj[u].append(v)
        adj[v].append(u)

    # BFS to find shortest path
    queue = [(start_node, 0)]  # (node, distance)
    visited = {start_node}

    while queue:
        node, dist = queue.pop(0)
        if node == end_node:
            return dist

        for neighbor in adj[node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, dist + 1))

    return float('inf')  # Return infinity if no path exists


# Example usage:
edge_list = [(0, 1), (0, 15), (1, 2), (1, 16), (2, 3), (2, 17), (3, 4), (3, 18), (4, 5), (4, 19), (5, 6), (5, 20), (6, 7), (6, 21), (7, 8), (7, 22), (8, 9), (8, 23), (9, 10), (9, 24), (10, 11), (10, 25), (11, 12), (11, 26), (12, 13), (12, 27), (13, 14), (13, 28), (14, 29), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29)]
layout = layout_graph(edge_list)

# Convert layout to JSON format
layout_json = json.dumps(layout, indent=4)
print(layout_json)
```