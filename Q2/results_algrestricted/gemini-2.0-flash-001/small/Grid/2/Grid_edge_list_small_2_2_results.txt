```python
import json
import math

def graph_layout(edge_list):
    """
    Generates a graph layout that attempts to maintain consistency between
    Euclidean distance and graph-theoretic distance.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A dictionary where keys are node indices and values are (x, y) coordinates.
    """

    # 1. Build the adjacency list representation of the graph.
    adj = {}
    for u, v in edge_list:
        if u not in adj:
            adj[u] = []
        if v not in adj:
            adj[v] = []
        adj[u].append(v)
        adj[v].append(u)

    # 2. Initialize node positions randomly.
    nodes = set()
    for u, v in edge_list:
        nodes.add(u)
        nodes.add(v)
    nodes = sorted(list(nodes))  # Ensure consistent node ordering
    num_nodes = len(nodes)
    layout = {}
    for node in nodes:
        layout[node] = (0.0, 0.0)  # Initialize all nodes at the origin

    # 3. Iteratively adjust node positions to minimize stress.
    iterations = 100
    alpha = 0.1  # Learning rate

    for _ in range(iterations):
        for u in nodes:
            # Calculate the attractive and repulsive forces on node u.
            attractive_force_x = 0.0
            attractive_force_y = 0.0
            repulsive_force_x = 0.0
            repulsive_force_y = 0.0

            # Attractive forces from neighbors
            for v in adj[u]:
                dx = layout[v][0] - layout[u][0]
                dy = layout[v][1] - layout[u][1]
                dist = math.sqrt(dx**2 + dy**2)
                if dist == 0:
                    dist = 0.01  # Avoid division by zero
                    dx = 0.01
                    dy = 0.01
                attractive_force_x += dx / dist
                attractive_force_y += dy / dist

            # Repulsive forces from all other nodes
            for v in nodes:
                if u != v:
                    dx = layout[v][0] - layout[u][0]
                    dy = layout[v][1] - layout[u][1]
                    dist = math.sqrt(dx**2 + dy**2)
                    if dist == 0:
                        dist = 0.01  # Avoid division by zero
                        dx = 0.01
                        dy = 0.01
                    repulsive_force_x -= dx / (dist**2)
                    repulsive_force_y -= dy / (dist**2)

            # Update node position based on the net force
            layout[u] = (
                layout[u][0] + alpha * (attractive_force_x + repulsive_force_x),
                layout[u][1] + alpha * (attractive_force_y + repulsive_force_y),
            )

    # 4. Normalize the layout to fit within a unit square.
    min_x = min(x for x, y in layout.values())
    max_x = max(x for x, y in layout.values())
    min_y = min(y for x, y in layout.values())
    max_y = max(y for x, y in layout.values())

    width = max_x - min_x
    height = max_y - min_y

    if width == 0:
        width = 1
    if height == 0:
        height = 1

    normalized_layout = {}
    for node, (x, y) in layout.items():
        normalized_layout[node] = (
            (x - min_x) / width,
            (y - min_y) / height,
        )

    return normalized_layout


# Example usage with the provided graph data:
edge_list = [(0, 1), (0, 5), (1, 2), (1, 6), (2, 3), (2, 7), (3, 4), (3, 8), (4, 9), (5, 6), (5, 10), (6, 7), (6, 11), (7, 8), (7, 12), (8, 9), (8, 13), (9, 14), (10, 11), (10, 15), (11, 12), (11, 16), (12, 13), (12, 17), (13, 14), (13, 18), (14, 19), (15, 16), (15, 20), (16, 17), (16, 21), (17, 18), (17, 22), (18, 19), (18, 23), (19, 24), (20, 21), (21, 22), (22, 23), (23, 24)]
layout = graph_layout(edge_list)

# Convert the layout to JSON format
layout_json = json.dumps(layout, indent=4)
print(layout_json)
```