```python
import json
import random

def generate_graph_layout(edge_list):
    """
    Generates a graph layout that attempts to minimize edge crossings.

    This implementation uses a simple force-directed layout approach.  It initializes
    nodes with random positions and then iteratively adjusts these positions based on
    attractive and repulsive forces.  Attractive forces pull connected nodes together,
    while repulsive forces push all nodes apart.

    Args:
        edge_list: A list of tuples representing the edges of the graph.  Each tuple
                   should contain the node indices of the connected nodes.

    Returns:
        A dictionary where keys are node indices and values are (x, y) coordinates
        representing the layout.  The layout is returned in JSON format.
    """

    # 1. Extract Nodes
    nodes = set()
    for edge in edge_list:
        nodes.add(edge[0])
        nodes.add(edge[1])
    nodes = list(nodes)
    num_nodes = len(nodes)

    # 2. Initialize Positions Randomly
    positions = {}
    for node in nodes:
        positions[node] = (random.random(), random.random())  # Assign random x, y coordinates

    # 3. Define Force Parameters (Adjust these for better results)
    k_attractive = 0.1  # Attractive force strength
    k_repulsive = 0.5   # Repulsive force strength
    iterations = 500    # Number of iterations for force application
    damping = 0.9       # Damping factor to stabilize the layout

    # 4. Force-Directed Layout Algorithm
    for _ in range(iterations):
        forces = {}
        for node in nodes:
            forces[node] = [0.0, 0.0]  # Initialize force vector for each node

        # Attractive Forces (between connected nodes)
        for edge in edge_list:
            node1, node2 = edge
            pos1 = positions[node1]
            pos2 = positions[node2]
            dx = pos2[0] - pos1[0]
            dy = pos2[1] - pos1[1]
            distance = max(0.01, (dx**2 + dy**2)**0.5)  # Avoid division by zero
            force = k_attractive * distance
            forces[node1][0] += force * dx / distance
            forces[node1][1] += force * dy / distance
            forces[node2][0] -= force * dx / distance
            forces[node2][1] -= force * dy / distance

        # Repulsive Forces (between all nodes)
        for i in range(num_nodes):
            for j in range(i + 1, num_nodes):
                node1 = nodes[i]
                node2 = nodes[j]
                pos1 = positions[node1]
                pos2 = positions[node2]
                dx = pos2[0] - pos1[0]
                dy = pos2[1] - pos1[1]
                distance = max(0.05, (dx**2 + dy**2)**0.5)  # Avoid division by zero and excessive force
                force = k_repulsive / distance
                forces[node1][0] -= force * dx / distance
                forces[node1][1] -= force * dy / distance
                forces[node2][0] += force * dx / distance
                forces[node2][1] += force * dy / distance

        # Update Positions
        for node in nodes:
            positions[node] = (
                positions[node][0] + damping * forces[node][0],
                positions[node][1] + damping * forces[node][1],
            )

            # Keep nodes within bounds (0-1)
            positions[node] = (
                max(0.0, min(1.0, positions[node][0])),
                max(0.0, min(1.0, positions[node][1])),
            )

    # 5. Convert to JSON
    return json.dumps(positions, indent=4)


# Example Usage (replace with your actual edge list)
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27)]
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```