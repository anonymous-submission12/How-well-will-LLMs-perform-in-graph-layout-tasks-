```python
import json
import community as co
import networkx as nx
from networkx.drawing.layout import spring_layout

def generate_graph_layout(edge_list):
    """
    Generates a graph layout that keeps the community structure clear.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A JSON string representing the graph layout.  The JSON object is a
        dictionary where keys are node IDs (integers) and values are lists
        of two floats representing the x and y coordinates of the node.
    """

    # Create a NetworkX graph from the edge list
    graph = nx.Graph(edge_list)

    # Perform community detection using the Louvain algorithm
    partition = co.best_partition(graph)

    # Calculate the number of communities
    num_communities = len(set(partition.values()))

    # Generate a spring layout with community-aware modifications
    pos = spring_layout(graph, k=0.3, iterations=50, seed=42)  # Adjust k and iterations as needed

    # Modify the layout to emphasize community structure
    community_centroids = {}
    for community_id in range(num_communities):
        nodes_in_community = [node for node, comm_id in partition.items() if comm_id == community_id]
        if nodes_in_community:
            x_coords = [pos[node][0] for node in nodes_in_community]
            y_coords = [pos[node][1] for node in nodes_in_community]
            community_centroids[community_id] = (sum(x_coords) / len(x_coords), sum(y_coords) / len(y_coords))

    # Apply a force to pull nodes towards their community centroid
    for node, comm_id in partition.items():
        if comm_id in community_centroids:
            centroid_x, centroid_y = community_centroids[comm_id]
            pos[node][0] = 0.9 * pos[node][0] + 0.1 * centroid_x  # Adjust the weights as needed
            pos[node][1] = 0.9 * pos[node][1] + 0.1 * centroid_y

    # Normalize the layout to fit within a unit square (optional)
    min_x = min(x for x, y in pos.values())
    max_x = max(x for x, y in pos.values())
    min_y = min(y for x, y in pos.values())
    max_y = max(y for x, y in pos.values())

    for node in graph.nodes():
        pos[node][0] = (pos[node][0] - min_x) / (max_x - min_x)
        pos[node][1] = (pos[node][1] - min_y) / (max_y - min_y)

    # Convert the layout to a JSON format
    layout_json = {node: [float(x), float(y)] for node, (x, y) in pos.items()}  # Ensure float type for JSON

    return json.dumps(layout_json)


# Example usage with the provided graph data
edge_list = [(0, 2), (0, 7), (0, 8), (0, 35), (1, 2), (1, 3), (1, 7), (1, 8), (1, 9), (2, 6), (2, 7), (2, 8), (3, 5), (3, 8), (3, 10), (4, 5), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 10), (6, 7), (6, 8), (6, 10), (7, 10), (7, 19), (8, 9), (8, 10), (8, 73), (9, 10), (9, 43), (11, 12), (11, 16), (11, 18), (11, 20), (11, 21), (11, 25), (12, 14), (12, 16), (12, 17), (12, 18), (12, 19), (12, 21), (13, 19), (13, 21), (14, 17), (15, 17), (15, 18), (15, 20), (16, 19), (17, 20), (18, 21), (18, 69), (19, 20), (19, 21), (20, 21), (22, 26), (22, 28), (23, 25), (23, 27), (24, 30), (25, 27), (25, 28), (25, 29), (25, 30), (26, 27), (26, 31), (27, 28), (27, 30), (27, 57), (29, 30), (30, 47), (32, 23), (32, 24), (32, 25), (32, 69), (33, 34), (33, 37), (33, 38), (33, 41), (33, 42), (33, 51), (34, 36), (34, 37), (34, 38), (34, 42), (35, 40), (35, 43), (36, 39), (36, 41), (36, 42), (37, 38), (37, 39), (37, 41), (37, 43), (39, 41), (40, 43), (44, 46), (44, 48), (44, 53), (45, 48), (45, 49), (45, 52), (46, 50), (46, 52), (46, 53), (47, 48), (47, 49), (47, 51), (47, 52), (48, 49), (48, 51), (48, 53), (50, 51), (50, 52), (50, 56), (54, 56), (54, 59), (54, 60), (54, 62), (55, 57), (55, 58), (55, 60), (55, 61), (55, 62), (55, 63), (56, 58), (56, 60), (56, 63), (57, 60), (57, 63), (58, 59), (58, 61), (58, 62), (59, 61), (59, 62), (60, 61), (60, 63), (61, 63), (64, 66), (64, 67), (64, 70), (64, 72), (64, 73), (65, 66), (65, 67), (65, 69), (66, 72), (66, 73), (67, 68), (67, 71), (68, 69), (68, 70), (70, 72), (70, 73), (71, 73), (72, 73)]
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```