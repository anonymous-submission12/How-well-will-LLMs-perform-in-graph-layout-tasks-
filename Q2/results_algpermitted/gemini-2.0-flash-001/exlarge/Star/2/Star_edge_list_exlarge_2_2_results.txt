```python
import json
import networkx as nx
from sklearn.manifold import MDS

def generate_graph_layout(edge_list):
    """
    Generates a graph layout that maintains consistency between Euclidean distance
    and graph-theoretic distance using Multidimensional Scaling (MDS).

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A JSON string representing the graph layout, where keys are node IDs
        and values are lists of [x, y] coordinates.
    """

    # 1. Create a graph from the edge list.
    graph = nx.Graph(edge_list)

    # 2. Calculate the shortest path distances between all pairs of nodes.
    distance_matrix = dict(nx.all_pairs_shortest_path_length(graph))

    # Convert the dictionary to a matrix suitable for MDS.
    num_nodes = len(graph.nodes)
    dist_matrix = [[0.0] * num_nodes for _ in range(num_nodes)]
    node_ids = sorted(graph.nodes)  # Ensure consistent node ordering

    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                dist_matrix[i][j] = distance_matrix[node_ids[i]][node_ids[j]]

    # 3. Use Multidimensional Scaling (MDS) to generate a 2D layout.
    mds = MDS(n_components=2, dissimilarity='precomputed', random_state=42)  # Set random_state for reproducibility
    pos = mds.fit_transform(dist_matrix)

    # 4. Convert the layout to a JSON format.
    layout = {}
    for i, node_id in enumerate(node_ids):
        layout[node_id] = pos[i].tolist()  # Convert NumPy array to list

    return json.dumps(layout)


# Example usage with the provided graph data:
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37), (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), (0, 56), (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71)]
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```