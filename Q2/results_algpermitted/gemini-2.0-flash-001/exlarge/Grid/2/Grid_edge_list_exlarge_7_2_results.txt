```python
import json
import numpy as np
from sklearn.manifold import MDS

def layout_graph(edge_list):
    """
    Generates a graph layout using Multidimensional Scaling (MDS).

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A JSON string representing the graph layout, where each node is
        represented by its x and y coordinates.
    """

    # 1. Create an adjacency matrix from the edge list.
    num_nodes = max(max(edge) for edge in edge_list) + 1
    adj_matrix = np.zeros((num_nodes, num_nodes))
    for u, v in edge_list:
        adj_matrix[u, v] = 1
        adj_matrix[v, u] = 1  # Assuming an undirected graph

    # 2. Calculate the shortest path distance matrix.
    dist_matrix = np.zeros((num_nodes, num_nodes))
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i == j:
                dist_matrix[i, j] = 0
            else:
                # Use Dijkstra's algorithm to find the shortest path.
                visited = {i}
                distances = {i: 0}
                queue = [i]

                while queue:
                    u = queue.pop(0)
                    for v in range(num_nodes):
                        if adj_matrix[u, v] == 1 and v not in visited:
                            visited.add(v)
                            distances[v] = distances[u] + 1
                            queue.append(v)

                if j in distances:
                    dist_matrix[i, j] = distances[j]
                else:
                    dist_matrix[i, j] = np.inf  # Nodes are not connected

    # Replace infinity with a large value (e.g., the maximum possible distance).
    max_finite_dist = np.max(dist_matrix[dist_matrix != np.inf])
    dist_matrix[dist_matrix == np.inf] = max_finite_dist * 2  # Ensure it's larger than any actual path

    # 3. Use MDS to generate the layout.
    mds = MDS(n_components=2, dissimilarity='precomputed', random_state=42)
    pos = mds.fit_transform(dist_matrix)

    # 4. Convert the layout to JSON format.
    layout = {}
    for i in range(num_nodes):
        layout[i] = {"x": pos[i, 0], "y": pos[i, 1]}

    return json.dumps(layout)


# Example usage with the provided graph data:
edge_list = [(0, 1), (0, 13), (1, 2), (1, 14), (2, 3), (2, 15), (3, 4), (3, 16), (4, 5), (4, 17), (5, 6), (5, 18), (6, 7), (6, 19), (7, 8), (7, 20), (8, 9), (8, 21), (9, 10), (9, 22), (10, 11), (10, 23), (11, 12), (11, 24), (12, 25), (13, 14), (13, 26), (14, 15), (14, 27), (15, 16), (15, 28), (16, 17), (16, 29), (17, 18), (17, 30), (18, 19), (18, 31), (19, 20), (19, 32), (20, 21), (20, 33), (21, 22), (21, 34), (22, 23), (22, 35), (23, 24), (23, 36), (24, 25), (24, 37), (25, 38), (26, 27), (26, 39), (27, 28), (27, 40), (28, 29), (28, 41), (29, 30), (29, 42), (30, 31), (30, 43), (31, 32), (31, 44), (32, 33), (32, 45), (33, 34), (33, 46), (34, 35), (34, 47), (35, 36), (35, 48), (36, 37), (36, 49), (37, 38), (37, 50), (38, 51), (39, 40), (39, 52), (40, 41), (40, 53), (41, 42), (41, 54), (42, 43), (42, 55), (43, 44), (43, 56), (44, 45), (44, 57), (45, 46), (45, 58), (46, 47), (46, 59), (47, 48), (47, 60), (48, 49), (48, 61), (49, 50), (49, 62), (50, 51), (50, 63), (51, 64), (52, 53), (52, 65), (53, 54), (53, 66), (54, 55), (54, 67), (55, 56), (55, 68), (56, 57), (56, 69), (57, 58), (57, 70), (58, 59), (58, 71), (59, 60), (59, 72), (60, 61), (60, 73), (61, 62), (61, 74), (62, 63), (62, 75), (63, 64), (63, 76), (64, 77), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74), (74, 75), (75, 76), (76, 77)]
layout_json = layout_graph(edge_list)
print(layout_json)
```