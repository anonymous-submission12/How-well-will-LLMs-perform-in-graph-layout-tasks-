```python
import json
import networkx as nx

def layout_graph(edge_list):
    """
    Generates a graph layout using the Kamada-Kawai algorithm to minimize edge crossings.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A JSON string representing the graph layout, where keys are node IDs and
        values are lists of [x, y] coordinates.
    """

    graph = nx.Graph()
    graph.add_edges_from(edge_list)

    # Use the Kamada-Kawai layout algorithm
    pos = nx.kamada_kawai_layout(graph)

    # Convert the layout to the desired JSON format
    layout_json = {node: list(coords) for node, coords in pos.items()}

    return json.dumps(layout_json, indent=2)


# Example usage with the provided graph data:
edge_list = [(0, 1), (0, 39), (1, 2), (1, 40), (2, 3), (2, 41), (3, 4), (3, 42), (4, 5), (4, 43), (5, 6), (5, 44), (6, 7), (6, 45), (7, 8), (7, 46), (8, 9), (8, 47), (9, 10), (9, 48), (10, 11), (10, 49), (11, 12), (11, 50), (12, 13), (12, 51), (13, 14), (13, 52), (14, 15), (14, 53), (15, 16), (15, 54), (16, 17), (16, 55), (17, 18), (17, 56), (18, 19), (18, 57), (19, 20), (19, 58), (20, 21), (20, 59), (21, 22), (21, 60), (22, 23), (22, 61), (23, 24), (23, 62), (24, 25), (24, 63), (25, 26), (25, 64), (26, 27), (26, 65), (27, 28), (27, 66), (28, 29), (28, 67), (29, 30), (29, 68), (30, 31), (30, 69), (31, 32), (31, 70), (32, 33), (32, 71), (33, 34), (33, 72), (34, 35), (34, 73), (35, 36), (35, 74), (36, 37), (36, 75), (37, 38), (37, 76), (38, 77), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74), (74, 75), (75, 76), (76, 77)]
layout_json = layout_graph(edge_list)
print(layout_json)
```