```python
import json
import networkx as nx

def layout_graph(edge_list):
    """
    Generates a graph layout that minimizes edge crossings using the Kamada-Kawai layout algorithm.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A JSON string representing the graph layout, where keys are node IDs and values are [x, y] coordinates.
    """

    graph = nx.Graph()
    graph.add_edges_from(edge_list)

    # Use the Kamada-Kawai layout algorithm to minimize edge crossings.
    pos = nx.kamada_kawai_layout(graph)

    # Convert the layout to a JSON format.
    layout_json = {node: list(coords) for node, coords in pos.items()}

    return json.dumps(layout_json)


# Example usage with the provided graph data:
edge_list = [(0, 1), (0, 37), (1, 2), (1, 38), (2, 3), (2, 39), (3, 4), (3, 40), (4, 5), (4, 41), (5, 6), (5, 42), (6, 7), (6, 43), (7, 8), (7, 44), (8, 9), (8, 45), (9, 10), (9, 46), (10, 11), (10, 47), (11, 12), (11, 48), (12, 13), (12, 49), (13, 14), (13, 50), (14, 15), (14, 51), (15, 16), (15, 52), (16, 17), (16, 53), (17, 18), (17, 54), (18, 19), (18, 55), (19, 20), (19, 56), (20, 21), (20, 57), (21, 22), (21, 58), (22, 23), (22, 59), (23, 24), (23, 60), (24, 25), (24, 61), (25, 26), (25, 62), (26, 27), (26, 63), (27, 28), (27, 64), (28, 29), (28, 65), (29, 30), (29, 66), (30, 31), (30, 67), (31, 32), (31, 68), (32, 33), (32, 69), (33, 34), (33, 70), (34, 35), (34, 71), (35, 36), (35, 72), (36, 73), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73)]
layout_json = layout_graph(edge_list)
print(layout_json)
```