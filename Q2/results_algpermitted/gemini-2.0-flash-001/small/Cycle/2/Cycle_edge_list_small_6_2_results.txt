```python
import json
import numpy as np
import scipy
from scipy.sparse.linalg import eigs
from sklearn.manifold import SpectralEmbedding

def layout_graph(edge_list):
    """
    Generates a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A JSON string representing the graph layout, where keys are node indices and values are [x, y] coordinates.
    """

    # 1. Create adjacency matrix
    num_nodes = max(max(u, v) for u, v in edge_list) + 1
    adj_matrix = np.zeros((num_nodes, num_nodes))
    for u, v in edge_list:
        adj_matrix[u, v] = 1
        adj_matrix[v, u] = 1  # Assuming undirected graph

    # 2. Spectral Embedding for layout
    se = SpectralEmbedding(n_components=2, affinity="precomputed", random_state=42)
    node_positions = se.fit_transform(adj_matrix)

    # 3. Normalize positions to [0, 1] range (optional, but good for consistency)
    min_x = np.min(node_positions[:, 0])
    max_x = np.max(node_positions[:, 0])
    min_y = np.min(node_positions[:, 1])
    max_y = np.max(node_positions[:, 1])

    if max_x - min_x != 0:
        node_positions[:, 0] = (node_positions[:, 0] - min_x) / (max_x - min_x)
    if max_y - min_y != 0:
        node_positions[:, 1] = (node_positions[:, 1] - min_y) / (max_y - min_y)

    # 4. Convert to JSON format
    layout_json = {str(i): list(node_positions[i]) for i in range(num_nodes)}
    return json.dumps(layout_json)


# Example usage with the provided graph data:
edge_list = [(0, 1), (0, 25), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25)]
layout_json = layout_graph(edge_list)
print(layout_json)
```