```python
import json
import networkx as nx

def layout_graph(edge_list):
    """
    Generates a graph layout that minimizes edge crossings using the Kamada-Kawai algorithm.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A JSON string representing the graph layout, where keys are node IDs and
        values are lists of [x, y] coordinates.
    """

    graph = nx.Graph()
    graph.add_edges_from(edge_list)

    # Use the Kamada-Kawai layout algorithm to minimize edge crossings.
    pos = nx.kamada_kawai_layout(graph)

    # Convert the layout to the desired JSON format.
    layout_json = {node: list(coords) for node, coords in pos.items()}

    return json.dumps(layout_json)


# Example usage with the provided graph data:
edge_list = [(0, 1), (0, 10), (1, 2), (1, 11), (2, 3), (2, 12), (3, 4), (3, 13), (4, 5), (4, 14), (5, 6), (5, 15), (6, 7), (6, 16), (7, 8), (7, 17), (8, 9), (8, 18), (9, 19), (10, 11), (10, 20), (11, 12), (11, 21), (12, 13), (12, 22), (13, 14), (13, 23), (14, 15), (14, 24), (15, 16), (15, 25), (16, 17), (16, 26), (17, 18), (17, 27), (18, 19), (18, 28), (19, 29), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29)]
layout_json = layout_graph(edge_list)
print(layout_json)
```