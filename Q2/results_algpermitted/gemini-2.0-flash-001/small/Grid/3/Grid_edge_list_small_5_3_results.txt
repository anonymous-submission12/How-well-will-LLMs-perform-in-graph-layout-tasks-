```python
import networkx as nx
import json

def generate_graph_layout(edge_list):
    """
    Generates a graph layout that minimizes edge crossings using the Kamada-Kawai layout algorithm.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A JSON string representing the graph layout, where keys are node IDs and values are 
        lists containing the x and y coordinates of the node.
    """

    graph = nx.Graph()
    graph.add_edges_from(edge_list)

    # Use the Kamada-Kawai layout algorithm to minimize edge crossings.
    pos = nx.kamada_kawai_layout(graph)

    # Convert the layout to a JSON format.
    layout_json = {}
    for node, coordinates in pos.items():
        layout_json[node] = [coordinates[0], coordinates[1]]

    return json.dumps(layout_json)


# Example usage with the provided graph data:
edge_list = [(0, 1), (0, 6), (1, 2), (1, 7), (2, 3), (2, 8), (3, 4), (3, 9), (4, 5), (4, 10), (5, 11), (6, 7), (6, 12), (7, 8), (7, 13), (8, 9), (8, 14), (9, 10), (9, 15), (10, 11), (10, 16), (11, 17), (12, 13), (12, 18), (13, 14), (13, 19), (14, 15), (14, 20), (15, 16), (15, 21), (16, 17), (16, 22), (17, 23), (18, 19), (18, 24), (19, 20), (19, 25), (20, 21), (20, 26), (21, 22), (21, 27), (22, 23), (22, 28), (23, 29), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29)]
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```