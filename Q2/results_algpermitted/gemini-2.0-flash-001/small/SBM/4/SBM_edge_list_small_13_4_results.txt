```python
import networkx as nx
import community as co
import json

edge_list = [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 9), (1, 2), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 4), (2, 5), (2, 7), (2, 8), (2, 9), (2, 21), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (6, 7), (6, 8), (6, 9), (6, 18), (7, 9), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (10, 16), (10, 17), (10, 18), (10, 19), (11, 12), (11, 13), (11, 14), (11, 15), (11, 16), (11, 17), (11, 18), (11, 19), (11, 28), (12, 13), (12, 15), (12, 16), (12, 17), (12, 27), (13, 15), (13, 16), (13, 17), (13, 18), (13, 19), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (15, 16), (15, 17), (15, 19), (16, 17), (16, 19), (17, 18), (17, 19), (18, 19), (18, 22), (20, 21), (20, 23), (20, 26), (20, 27), (20, 29), (21, 22), (21, 24), (21, 25), (21, 27), (21, 28), (21, 29), (22, 23), (22, 24), (22, 26), (22, 27), (22, 28), (23, 24), (23, 25), (23, 26), (23, 28), (23, 29), (24, 27), (24, 29), (25, 27), (25, 28), (25, 29), (26, 27), (26, 28), (26, 29), (27, 28), (28, 29)]

# Create a graph from the edge list
graph = nx.Graph(edge_list)

# Perform community detection using the Louvain algorithm
partition = co.best_partition(graph)

# Calculate the number of communities
num_communities = len(set(partition.values()))

# Use a spring layout, but adjust node positions based on community
pos = nx.spring_layout(graph, k=0.3, iterations=50)  # You can adjust k and iterations

# Calculate centroid for each community
community_centroids = {}
for community_id in range(num_communities):
    nodes_in_community = [node for node, comm_id in partition.items() if comm_id == community_id]
    if nodes_in_community:  # Check if the community is not empty
        x_coords = [pos[node][0] for node in nodes_in_community]
        y_coords = [pos[node][1] for node in nodes_in_community]
        centroid_x = sum(x_coords) / len(x_coords)
        centroid_y = sum(y_coords) / len(y_coords)
        community_centroids[community_id] = (centroid_x, centroid_y)
    else:
        community_centroids[community_id] = (0,0) # Assign a default value if the community is empty

# Apply a force to pull nodes towards their community centroid
for node, comm_id in partition.items():
    centroid_x, centroid_y = community_centroids[comm_id]
    pos[node] = (pos[node][0] * 0.7 + centroid_x * 0.3, pos[node][1] * 0.7 + centroid_y * 0.3) # Adjust the 0.1 factor to control the strength of the attraction

# Convert the layout to JSON format
layout_json = {str(node): {"x": x, "y": y, "community": partition[node]} for node, (x, y) in pos.items()}

print(json.dumps(layout_json, indent=2))
```