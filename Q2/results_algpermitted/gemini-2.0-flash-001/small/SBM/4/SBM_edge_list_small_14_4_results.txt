```python
import networkx as nx
import community as co
import json
import random

def generate_community_layout(edge_list):
    """
    Generates a graph layout that emphasizes community structure.

    Args:
        edge_list: A list of tuples representing the graph's edges.

    Returns:
        A JSON string representing the graph layout, with node positions.
    """

    # 1. Create a NetworkX graph
    graph = nx.Graph(edge_list)

    # 2. Detect communities using the Louvain algorithm
    partition = co.best_partition(graph)

    # 3. Calculate community centers
    community_centers = {}
    for community_id in set(partition.values()):
        nodes_in_community = [node for node, comm_id in partition.items() if comm_id == community_id]
        community_centers[community_id] = (random.random(), random.random()) # Initialize with random positions

    # 4. Layout nodes within communities using a force-directed layout (e.g., spring layout)
    node_positions = {}
    for node in graph.nodes():
        community_id = partition[node]
        # Calculate position relative to community center with some random variation
        x = community_centers[community_id][0] + random.uniform(-0.1, 0.1)
        y = community_centers[community_id][1] + random.uniform(-0.1, 0.1)
        node_positions[node] = (x, y)

    # 5. Adjust community centers based on node positions
    for community_id in community_centers:
        nodes_in_community = [node for node, comm_id in partition.items() if comm_id == community_id]
        x_coords = [node_positions[node][0] for node in nodes_in_community]
        y_coords = [node_positions[node][1] for node in nodes_in_community]
        community_centers[community_id] = (sum(x_coords) / len(x_coords), sum(y_coords) / len(y_coords))

    # 6. Refine node positions based on community centers
    for node in graph.nodes():
        community_id = partition[node]
        x = community_centers[community_id][0] + random.uniform(-0.1, 0.1)
        y = community_centers[community_id][1] + random.uniform(-0.1, 0.1)
        node_positions[node] = (x, y)

    # 7. Normalize positions to be between 0 and 1
    min_x = min(pos[0] for pos in node_positions.values())
    max_x = max(pos[0] for pos in node_positions.values())
    min_y = min(pos[1] for pos in node_positions.values())
    max_y = max(pos[1] for pos in node_positions.values())

    for node in node_positions:
        x, y = node_positions[node]
        x = (x - min_x) / (max_x - min_x)
        y = (y - min_y) / (max_y - min_y)
        node_positions[node] = (x, y)

    # 8. Convert to JSON format
    layout_json = json.dumps({str(node): {"x": x, "y": y} for node, (x, y) in node_positions.items()})

    return layout_json


# Example usage:
edge_list = [(0, 2), (0, 5), (0, 6), (0, 7), (1, 2), (1, 3), (1, 5), (1, 6), (1, 7), (1, 8), (1, 19), (1, 20), (2, 3), (2, 4), (2, 6), (2, 7), (3, 4), (3, 5), (3, 6), (4, 6), (4, 7), (4, 22), (5, 6), (5, 7), (6, 7), (8, 9), (8, 10), (8, 11), (8, 12), (8, 13), (8, 14), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (10, 12), (10, 13), (10, 15), (11, 13), (11, 14), (11, 15), (12, 13), (12, 14), (12, 15), (14, 15), (16, 17), (16, 18), (16, 19), (16, 20), (16, 21), (16, 23), (17, 18), (17, 19), (17, 20), (17, 21), (17, 22), (17, 23), (18, 19), (19, 20), (19, 21), (19, 22), (19, 23), (20, 21), (21, 23), (22, 23)]
layout_json = generate_community_layout(edge_list)
print(layout_json)
```