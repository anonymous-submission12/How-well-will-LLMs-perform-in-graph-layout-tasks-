```python
import networkx as nx
import community as co
import json
import random

def generate_community_layout(edge_list):
    """
    Generates a graph layout that emphasizes community structure.

    Args:
        edge_list: A list of tuples representing the graph's edges.

    Returns:
        A JSON string representing the graph layout, where each node has 'x' and 'y' coordinates.
    """

    # 1. Create a NetworkX graph
    graph = nx.Graph(edge_list)

    # 2. Detect communities using the Louvain algorithm
    partition = co.best_partition(graph)

    # 3. Calculate layout using a force-directed algorithm (e.g., Fruchterman-Reingold)
    #    Initialize positions based on community.
    num_communities = len(set(partition.values()))
    community_centers = {}
    for community_id in set(partition.values()):
        community_centers[community_id] = (random.random(), random.random()) # Randomly assign center for each community

    initial_positions = {}
    for node, community_id in partition.items():
        center_x, center_y = community_centers[community_id]
        initial_positions[node] = (center_x + random.uniform(-0.1, 0.1), center_y + random.uniform(-0.1, 0.1)) # Add some noise

    layout = nx.spring_layout(graph, pos=initial_positions, k=0.3, iterations=50) # Adjust k and iterations as needed

    # 4. Normalize the layout to fit within [0, 1] range
    min_x = min(x for x, y in layout.values())
    max_x = max(x for x, y in layout.values())
    min_y = min(y for x, y in layout.values())
    max_y = max(y for x, y in layout.values())

    x_range = max_x - min_x
    y_range = max_y - min_y

    normalized_layout = {}
    for node, (x, y) in layout.items():
        normalized_x = (x - min_x) / x_range
        normalized_y = (y - min_y) / y_range
        normalized_layout[node] = {'x': normalized_x, 'y': normalized_y}

    # 5. Convert the layout to JSON format
    return json.dumps(normalized_layout, indent=2)


# Example usage with the provided graph data:
edge_list = [(0, 1), (0, 2), (0, 4), (0, 5), (0, 6), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 4), (2, 6), (2, 7), (2, 8), (3, 5), (3, 6), (3, 7), (3, 8), (4, 5), (4, 6), (4, 8), (5, 7), (6, 7), (7, 8), (9, 10), (9, 14), (9, 16), (9, 17), (9, 22), (10, 11), (10, 12), (10, 15), (10, 16), (10, 17), (11, 12), (11, 13), (11, 14), (11, 16), (11, 17), (11, 24), (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (13, 14), (13, 15), (14, 15), (14, 16), (14, 17), (15, 17), (16, 17), (18, 19), (18, 20), (18, 21), (18, 22), (18, 23), (18, 24), (18, 25), (19, 20), (19, 21), (19, 22), (19, 23), (19, 24), (20, 22), (20, 23), (20, 24), (20, 25), (21, 22), (21, 23), (21, 25), (22, 23), (22, 24), (22, 25), (23, 24), (24, 25)]
json_layout = generate_community_layout(edge_list)
print(json_layout)
```