```python
import json
import networkx as nx
from networkx.drawing.layout import spring_layout

def generate_graph_layout(edge_list):
    """
    Generates a graph layout that minimizes edge crossings using the Fruchterman-Reingold force-directed algorithm.

    Args:
        edge_list: A list of tuples representing the edges of the graph.

    Returns:
        A JSON string representing the graph layout, where keys are node IDs and values are [x, y] coordinates.
    """

    graph = nx.Graph()
    graph.add_edges_from(edge_list)

    # Use the Fruchterman-Reingold force-directed algorithm to generate the layout.
    # This algorithm attempts to minimize edge crossings and make the graph more readable.
    pos = spring_layout(graph, seed=42)  # Seed for reproducibility

    # Convert the layout to a JSON format.
    layout_json = {node: list(coords) for node, coords in pos.items()}

    return json.dumps(layout_json)


# Example usage with the provided graph data:
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28)]
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```