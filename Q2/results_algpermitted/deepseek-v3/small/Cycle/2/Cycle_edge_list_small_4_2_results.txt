To generate a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance, we can use the `networkx` library to compute the layout and then output the positions in JSON format. We'll use the `spring_layout` algorithm, which is designed to position nodes in such a way that the Euclidean distance between nodes approximates their graph-theoretic distance.

Here's the Python script to achieve this:

```python
import networkx as nx
import json

# Define the graph using the provided edge list
edge_list = [(0, 1), (0, 23), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), 
             (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), 
             (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23)]

# Create a graph and add edges
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute the layout using the spring layout algorithm
pos = nx.spring_layout(G, k=0.15, iterations=50)

# Convert the positions to a dictionary with node IDs as keys and positions as values
layout = {node: [float(pos[node][0]), float(pos[node][1])] for node in G.nodes()}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: We create a graph using the provided edge list.
2. **Layout Calculation**: We use the `spring_layout` algorithm from `networkx` to compute the positions of the nodes. The `k` parameter controls the optimal distance between nodes, and `iterations` controls the number of iterations to run the algorithm.
3. **JSON Output**: The positions are converted to a dictionary where each node ID maps to its 2D coordinates. This dictionary is then serialized to JSON format.

### Output:
The script will output the graph layout in JSON format, where each node is associated with its 2D coordinates. For example:

```json
{
    "0": [0.123, 0.456],
    "1": [0.234, 0.567],
    ...
    "23": [0.789, 0.890]
}
```

This JSON can be used to visualize the graph or for further processing.