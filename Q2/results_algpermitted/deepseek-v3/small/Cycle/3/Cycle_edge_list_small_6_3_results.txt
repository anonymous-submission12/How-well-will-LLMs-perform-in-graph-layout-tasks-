To generate a layout for the graph that minimizes edge crossings, we can use the `graphviz` library, which provides a variety of graph layout algorithms. Specifically, we can use the `dot` layout algorithm, which is designed to minimize edge crossings in hierarchical graphs.

Below is the Python script that generates the layout for the given graph and outputs the positions in JSON format:

```python
import json
import graphviz

# Define the graph using the provided edge list
edge_list = [(0, 1), (0, 25), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), 
             (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), 
             (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25)]

# Create a Graphviz graph
dot = graphviz.Graph()

# Add nodes and edges to the graph
for edge in edge_list:
    dot.edge(str(edge[0]), str(edge[1]))

# Use the 'dot' layout algorithm to generate positions
dot.layout(prog='dot')

# Extract the positions from the graph
positions = {}
for node in dot.body:
    if node.startswith('\t'):
        parts = node.strip().split()
        if len(parts) >= 3 and parts[0].isdigit():
            node_id = parts[0]
            x = float(parts[1])
            y = float(parts[2])
            positions[node_id] = {'x': x, 'y': y}

# Convert the positions to JSON format
positions_json = json.dumps(positions, indent=4)

# Output the JSON
print(positions_json)
```

### Explanation:
1. **Graph Creation**: We create a `graphviz.Graph` object and add nodes and edges based on the provided edge list.
2. **Layout Algorithm**: We use the `dot` layout algorithm, which is designed to minimize edge crossings in hierarchical graphs.
3. **Position Extraction**: After generating the layout, we extract the positions of the nodes from the graph's body.
4. **JSON Output**: The positions are then converted to JSON format and printed.

### Output:
The output will be a JSON object where the keys are node IDs (as strings) and the values are dictionaries containing the `x` and `y` coordinates of each node.

```json
{
    "0": {
        "x": 0.0,
        "y": 0.0
    },
    "1": {
        "x": 1.0,
        "y": 1.0
    },
    ...
    "25": {
        "x": 25.0,
        "y": 25.0
    }
}
```

This JSON can be used to visualize the graph using any plotting library or for further processing.