To generate a layout for the graph that minimizes edge crossings, we can use the `networkx` library to create the graph and then apply a layout algorithm such as the Kamada-Kawai layout, which is designed to minimize edge crossings. The final layout will be output in JSON format.

Here is the Python script to achieve this:

```python
import networkx as nx
import json

# Define the graph using the provided edge list
edge_list = [
    (0, 1), (0, 6), (1, 2), (1, 7), (2, 3), (2, 8), (3, 4), (3, 9), (4, 5), (4, 10), 
    (5, 11), (6, 7), (6, 12), (7, 8), (7, 13), (8, 9), (8, 14), (9, 10), (9, 15), 
    (10, 11), (10, 16), (11, 17), (12, 13), (12, 18), (13, 14), (13, 19), (14, 15), 
    (14, 20), (15, 16), (15, 21), (16, 17), (16, 22), (17, 23), (18, 19), (18, 24), 
    (19, 20), (19, 25), (20, 21), (20, 26), (21, 22), (21, 27), (22, 23), (22, 28), 
    (23, 29), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Kamada-Kawai algorithm
layout = nx.kamada_kawai_layout(G)

# Convert the layout to a dictionary with node IDs as keys and positions as values
layout_dict = {node: [float(pos[0]), float(pos[1])] for node, pos in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_dict, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the provided edge list.
2. **Layout Generation**: The Kamada-Kawai layout algorithm is used to generate positions for the nodes. This algorithm attempts to minimize edge crossings by optimizing the positions based on the graph's structure.
3. **JSON Output**: The layout is converted to a dictionary where each node is mapped to its position, and then the dictionary is serialized to JSON format.

You can run this script to get the JSON output of the graph layout. The positions are in a 2D space, where each node is assigned an `(x, y)` coordinate.