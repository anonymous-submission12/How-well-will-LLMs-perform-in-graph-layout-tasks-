To generate a layout for the graph that minimizes edge crossings, we can use the `pygraphviz` library, which provides an interface to the Graphviz library. Graphviz includes several layout algorithms, such as `dot`, `neato`, and `sfdp`, which are designed to minimize edge crossings and produce aesthetically pleasing layouts.

Below is the Python script that generates the layout for the given graph and outputs the positions in JSON format:

```python
import pygraphviz as pgv
import json

# Define the graph using the provided edge list
edge_list = [
    (0, 1), (0, 14), (1, 2), (1, 15), (2, 3), (2, 16), (3, 4), (3, 17), 
    (4, 5), (4, 18), (5, 6), (5, 19), (6, 7), (6, 20), (7, 8), (7, 21), 
    (8, 9), (8, 22), (9, 10), (9, 23), (10, 11), (10, 24), (11, 12), 
    (11, 25), (12, 13), (12, 26), (13, 27), (14, 15), (15, 16), (16, 17), 
    (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), 
    (24, 25), (25, 26), (26, 27)
]

# Create a graph object
G = pgv.AGraph(directed=False)

# Add edges to the graph
for edge in edge_list:
    G.add_edge(edge[0], edge[1])

# Use the 'dot' layout algorithm to minimize edge crossings
G.layout(prog='dot')

# Extract the positions of the nodes
layout = {}
for node in G.nodes():
    pos = node.attr['pos'].split(',')
    layout[int(node)] = {'x': float(pos[0]), 'y': float(pos[1])}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the `pygraphviz.AGraph` class, and edges are added based on the provided edge list.
2. **Layout Algorithm**: The `dot` layout algorithm is used to generate the positions of the nodes. This algorithm is particularly good at minimizing edge crossings in hierarchical graphs.
3. **Position Extraction**: The positions of the nodes are extracted from the graph object and stored in a dictionary.
4. **JSON Output**: The dictionary containing the node positions is converted to JSON format and printed.

### Output:
The output will be a JSON object where each key is a node ID, and the value is a dictionary containing the `x` and `y` coordinates of the node's position.

### Example Output:
```json
{
    "0": {"x": 0.0, "y": 0.0},
    "1": {"x": 1.0, "y": 0.0},
    "2": {"x": 2.0, "y": 0.0},
    ...
    "27": {"x": 13.0, "y": 1.0}
}
```

This script assumes that you have `pygraphviz` installed. If not, you can install it using `pip install pygraphviz`. Note that `pygraphviz` requires Graphviz to be installed on your system.