To generate a layout for the graph that minimizes edge crossings, we can use the `graphviz` library, which provides a variety of layout algorithms. Specifically, we can use the `dot` layout algorithm, which is designed to minimize edge crossings in hierarchical graphs.

Here is the Python script that generates the layout and outputs it in JSON format:

```python
import json
import graphviz

# Define the graph using the provided edge list
edge_list = [(0, 1), (0, 7), (1, 2), (1, 8), (2, 3), (2, 9), (3, 4), (3, 10), 
             (4, 5), (4, 11), (5, 6), (5, 12), (6, 13), (7, 8), (7, 14), 
             (8, 9), (8, 15), (9, 10), (9, 16), (10, 11), (10, 17), (11, 12), 
             (11, 18), (12, 13), (12, 19), (13, 20), (14, 15), (15, 16), 
             (16, 17), (17, 18), (18, 19), (19, 20)]

# Create a Graphviz graph
dot = graphviz.Graph()

# Add nodes and edges to the graph
for edge in edge_list:
    dot.edge(str(edge[0]), str(edge[1]))

# Use the 'dot' layout algorithm to generate positions
dot.layout(prog='dot')

# Extract the positions from the graph
positions = {}
for node in dot.body:
    if node.startswith('\t'):
        node_id = node.split(' ')[0].strip()
        pos = node.split('pos="')[1].split('"')[0]
        x, y = map(float, pos.split(','))
        positions[int(node_id)] = {'x': x, 'y': y}

# Output the positions in JSON format
print(json.dumps(positions, indent=4))
```

### Explanation:
1. **Graph Creation**: We create a `graphviz.Graph` object and add nodes and edges based on the provided edge list.
2. **Layout Algorithm**: We use the `dot` layout algorithm, which is designed to minimize edge crossings in hierarchical graphs.
3. **Position Extraction**: After generating the layout, we extract the positions of the nodes from the graph's body.
4. **JSON Output**: Finally, we output the positions in JSON format.

### Output:
The script will output the positions of the nodes in JSON format, which can be used for further processing or visualization.

```json
{
    "0": {
        "x": 0.0,
        "y": 0.0
    },
    "1": {
        "x": 1.0,
        "y": 0.0
    },
    "2": {
        "x": 2.0,
        "y": 0.0
    },
    ...
}
```

This JSON output contains the positions of each node in the graph, which can be used to visualize the graph with minimal edge crossings.