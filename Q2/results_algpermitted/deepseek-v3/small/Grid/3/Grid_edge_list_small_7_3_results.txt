To generate a layout for the graph that minimizes edge crossings, we can use the `networkx` library to create the graph and then apply a layout algorithm such as the Kamada-Kawai layout, which is designed to minimize edge crossings. The final layout will be output in JSON format.

Here is the Python script:

```python
import networkx as nx
import json

# Define the graph using the provided edge list
edge_list = [
    (0, 1), (0, 7), (1, 2), (1, 8), (2, 3), (2, 9), (3, 4), (3, 10), 
    (4, 5), (4, 11), (5, 6), (5, 12), (6, 13), (7, 8), (7, 14), 
    (8, 9), (8, 15), (9, 10), (9, 16), (10, 11), (10, 17), (11, 12), 
    (11, 18), (12, 13), (12, 19), (13, 20), (14, 15), (14, 21), 
    (15, 16), (15, 22), (16, 17), (16, 23), (17, 18), (17, 24), 
    (18, 19), (18, 25), (19, 20), (19, 26), (20, 27), (21, 22), 
    (22, 23), (23, 24), (24, 25), (25, 26), (26, 27)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Kamada-Kawai algorithm
layout = nx.kamada_kawai_layout(G)

# Convert the layout to a dictionary with node positions
layout_dict = {node: [float(pos[0]), float(pos[1])] for node, pos in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_dict, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the provided edge list.
2. **Layout Generation**: The Kamada-Kawai layout algorithm is used to generate positions for the nodes. This algorithm attempts to minimize edge crossings by placing nodes in a way that reduces the overall energy of the system.
3. **JSON Output**: The node positions are converted to a dictionary and then output in JSON format.

### Output:
The output will be a JSON object where each key is a node, and the value is a list of two floats representing the x and y coordinates of the node's position.

You can run this script to get the layout in JSON format.