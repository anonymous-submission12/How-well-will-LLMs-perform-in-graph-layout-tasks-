To generate a layout for the graph that minimizes edge crossings, we can use the `networkx` library to create the graph and then apply a layout algorithm such as the Kamada-Kawai layout, which is designed to minimize edge crossings and produce aesthetically pleasing layouts. The final layout will be output in JSON format.

Here is the Python script to achieve this:

```python
import networkx as nx
import json

# Define the graph using the provided edge list
edge_list = [
    (0, 1), (0, 10), (1, 2), (1, 11), (2, 3), (2, 12), (3, 4), (3, 13), 
    (4, 5), (4, 14), (5, 6), (5, 15), (6, 7), (6, 16), (7, 8), (7, 17), 
    (8, 9), (8, 18), (9, 19), (10, 11), (10, 20), (11, 12), (11, 21), 
    (12, 13), (12, 22), (13, 14), (13, 23), (14, 15), (14, 24), (15, 16), 
    (15, 25), (16, 17), (16, 26), (17, 18), (17, 27), (18, 19), (18, 28), 
    (19, 29), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), 
    (26, 27), (27, 28), (28, 29)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Kamada-Kawai algorithm
pos = nx.kamada_kawai_layout(G)

# Convert the layout to a dictionary with node IDs as keys and positions as values
layout = {node: [float(pos[node][0]), float(pos[node][1])] for node in pos}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the provided edge list.
2. **Layout Generation**: The Kamada-Kawai layout algorithm is applied to the graph. This algorithm attempts to minimize edge crossings and produce a visually pleasing layout.
3. **JSON Output**: The positions of the nodes are converted to a dictionary and then output in JSON format.

### Output:
The output will be a JSON object where each key is a node ID, and the value is a list of two floats representing the x and y coordinates of the node's position in the layout.

You can run this script in a Python environment to generate the layout for the provided graph.