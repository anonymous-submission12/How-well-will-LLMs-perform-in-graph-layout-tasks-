To generate a layout for the graph that minimizes edge crossings, we can use the `graphviz` library, which provides a variety of layout algorithms. Specifically, we can use the `dot` layout algorithm, which is designed to minimize edge crossings in hierarchical graphs.

Here is the Python script that generates the layout and outputs it in JSON format:

```python
import json
import graphviz

# Define the graph edges
edges = [(0, 1), (0, 15), (1, 2), (1, 16), (2, 3), (2, 17), (3, 4), (3, 18), 
         (4, 5), (4, 19), (5, 6), (5, 20), (6, 7), (6, 21), (7, 8), (7, 22), 
         (8, 9), (8, 23), (9, 10), (9, 24), (10, 11), (10, 25), (11, 12), 
         (11, 26), (12, 13), (12, 27), (13, 14), (13, 28), (14, 29), (15, 16), 
         (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), 
         (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29)]

# Create a Graphviz graph
dot = graphviz.Graph()

# Add nodes and edges to the graph
for edge in edges:
    dot.edge(str(edge[0]), str(edge[1]))

# Use the 'dot' layout algorithm to generate positions
dot.layout(prog='dot')

# Extract the positions from the graph
positions = {}
for node in dot.body:
    if node.startswith('node'):
        parts = node.split()
        node_id = parts[1]
        pos = parts[2].strip('"').split(',')
        positions[node_id] = {'x': float(pos[0]), 'y': float(pos[1])}

# Convert positions to JSON format
layout_json = json.dumps(positions, indent=4)

# Output the JSON layout
print(layout_json)
```

### Explanation:
1. **Graph Creation**: We create a `graphviz.Graph` object and add the edges to it.
2. **Layout Algorithm**: We use the `dot` layout algorithm, which is designed to minimize edge crossings in hierarchical graphs.
3. **Position Extraction**: After generating the layout, we extract the positions of the nodes from the graph.
4. **JSON Output**: The positions are then converted to a JSON format and printed.

### Output:
The output will be a JSON object where each key is a node ID, and the value is a dictionary containing the `x` and `y` coordinates of the node's position.

```json
{
    "0": {
        "x": 0.0,
        "y": 0.0
    },
    "1": {
        "x": 1.0,
        "y": 0.0
    },
    ...
    "29": {
        "x": 14.0,
        "y": 0.0
    }
}
```

This JSON object can be used to visualize the graph using any plotting library or for further processing.