To generate a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance, we can use the `networkx` library to compute the layout and then output the positions in JSON format. Specifically, we can use the `spring_layout` algorithm, which is designed to position nodes in such a way that the Euclidean distance between nodes approximates their graph-theoretic distance.

Here is the Python script that accomplishes this:

```python
import networkx as nx
import json

# Define the graph using the provided edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 6), (0, 7), (0, 9), (0, 10), 
    (1, 2), (1, 3), (1, 5), (1, 8), (1, 9), (1, 10), (2, 3), (2, 4), 
    (2, 5), (2, 6), (2, 7), (2, 10), (3, 4), (3, 5), (3, 6), (3, 7), 
    (3, 8), (3, 9), (3, 10), (3, 18), (4, 5), (4, 6), (4, 7), (4, 8), 
    (4, 9), (5, 6), (5, 9), (5, 10), (6, 7), (6, 9), (6, 20), (7, 8), 
    (7, 9), (7, 10), (8, 9), (8, 10), (9, 20), (11, 12), (11, 13), 
    (11, 14), (11, 17), (11, 18), (11, 19), (11, 20), (12, 13), (12, 14), 
    (12, 15), (12, 16), (12, 18), (12, 19), (13, 14), (13, 15), (13, 17), 
    (13, 19), (13, 20), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), 
    (14, 20), (15, 16), (15, 18), (15, 19), (16, 17), (16, 18), (16, 19), 
    (16, 20), (17, 18), (17, 19), (17, 20), (18, 19), (18, 20), (19, 20)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute the layout using the spring layout algorithm
pos = nx.spring_layout(G, k=0.15, iterations=50)

# Convert the positions to a dictionary with node IDs as keys and positions as values
layout = {node: [float(pos[node][0]), float(pos[node][1])] for node in G.nodes()}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the provided edge list.
2. **Layout Calculation**: The `spring_layout` algorithm is used to compute the positions of the nodes. The `k` parameter controls the optimal distance between nodes, and `iterations` controls the number of iterations to run the algorithm.
3. **JSON Output**: The positions are converted to a dictionary where each node ID maps to its position in 2D space. This dictionary is then serialized to JSON format.

### Output:
The output will be a JSON object where each key is a node ID, and the value is a list of two floats representing the x and y coordinates of the node's position.

```json
{
    "0": [0.123, 0.456],
    "1": [0.234, 0.567],
    ...
    "20": [0.789, 0.890]
}
```

This JSON output can be used for further processing or visualization in other tools.