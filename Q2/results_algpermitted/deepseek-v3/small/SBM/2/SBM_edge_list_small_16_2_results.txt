To generate a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance, we can use the `networkx` library to compute the layout and then output the positions in JSON format. Specifically, we can use the `spring_layout` algorithm, which is designed to position nodes in such a way that the Euclidean distance between nodes approximates their graph-theoretic distance.

Here is the Python script that accomplishes this:

```python
import networkx as nx
import json

# Define the graph using the provided edge list
edge_list = [(0, 1), (0, 3), (0, 5), (0, 6), (1, 2), (1, 4), (1, 6), (1, 12), 
             (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (3, 4), (3, 6), (4, 5), 
             (4, 6), (5, 6), (6, 15), (7, 11), (7, 13), (8, 11), (8, 13), 
             (8, 24), (9, 10), (9, 11), (9, 12), (9, 13), (10, 11), (11, 12), 
             (11, 13), (13, 17), (14, 16), (14, 17), (14, 18), (14, 19), 
             (15, 16), (15, 17), (15, 18), (16, 18), (16, 19), (17, 18), 
             (18, 19), (19, 21), (20, 21), (20, 22), (20, 23), (20, 24), 
             (21, 22), (21, 25), (22, 23), (22, 24), (22, 25), (23, 24), 
             (23, 25), (24, 25)]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute the layout using the spring layout algorithm
pos = nx.spring_layout(G, k=0.15, iterations=50)

# Convert the positions to a dictionary with node IDs as keys and positions as values
layout = {node: [float(pos[node][0]), float(pos[node][1])] for node in G.nodes()}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the provided edge list.
2. **Layout Calculation**: The `spring_layout` algorithm is used to compute the positions of the nodes. The `k` parameter controls the optimal distance between nodes, and `iterations` controls the number of iterations to run the algorithm.
3. **JSON Output**: The positions are converted to a dictionary where each node ID maps to its position as a list of `[x, y]` coordinates. This dictionary is then serialized to JSON format.

### Output:
The output will be a JSON object where each key is a node ID, and the value is a list of two floats representing the `x` and `y` coordinates of the node's position.

You can run this script in a Python environment to generate the layout and output it in JSON format.