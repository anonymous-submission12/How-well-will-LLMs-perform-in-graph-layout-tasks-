To generate a layout for the graph that minimizes edge crossings, we can use the `graphviz` library, which provides a variety of layout algorithms. Specifically, we can use the `neato` or `dot` layout algorithms, which are designed to minimize edge crossings and produce aesthetically pleasing layouts.

Here is the Python script that generates the layout and outputs it in JSON format:

```python
import json
import graphviz

# Define the graph using the provided edge list
edge_list = [
    (0, 1), (0, 3), (1, 2), (2, 5), (3, 4), (3, 5), (4, 5), (5, 11), 
    (6, 8), (6, 9), (6, 10), (6, 11), (6, 13), (7, 10), (7, 11), 
    (8, 9), (8, 10), (8, 11), (9, 10), (9, 11), (10, 11), (12, 13), 
    (12, 15), (12, 16), (12, 17), (13, 15), (13, 17), (13, 25), 
    (14, 15), (14, 17), (15, 16), (15, 17), (15, 22), (16, 17), 
    (18, 19), (18, 21), (18, 22), (19, 20), (19, 21), (20, 22), 
    (23, 24), (23, 25), (23, 26), (23, 27), (24, 25), (24, 26), 
    (24, 27), (25, 26), (25, 27), (26, 27)
]

# Create a Graphviz graph
graph = graphviz.Graph()

# Add nodes and edges to the graph
for edge in edge_list:
    graph.edge(str(edge[0]), str(edge[1]))

# Use the 'neato' layout algorithm to minimize edge crossings
graph.layout(prog='neato')

# Extract the positions of the nodes
positions = {}
for node in graph.body:
    if node.startswith('\t'):
        parts = node.strip().split()
        if len(parts) == 4 and parts[0] == 'node':
            node_id = parts[1]
            x = float(parts[2].strip('"'))
            y = float(parts[3].strip('"'))
            positions[node_id] = {'x': x, 'y': y}

# Convert the positions to JSON format
layout_json = json.dumps(positions, indent=4)

# Output the JSON layout
print(layout_json)
```

### Explanation:
1. **Graph Creation**: We create a `graphviz.Graph` object and add nodes and edges based on the provided edge list.
2. **Layout Algorithm**: We use the `neato` layout algorithm, which is designed to minimize edge crossings and produce a layout that is aesthetically pleasing.
3. **Extract Positions**: We parse the output of the `graphviz` layout to extract the positions of the nodes.
4. **JSON Output**: The positions are then converted to JSON format and printed.

### Output:
The output will be a JSON object where each key is a node ID, and the value is an object containing the `x` and `y` coordinates of the node's position in the layout.

```json
{
    "0": {
        "x": 1.0,
        "y": 2.0
    },
    "1": {
        "x": 1.5,
        "y": 1.5
    },
    ...
}
```

This JSON can be used to visualize the graph using any plotting library or for further processing.