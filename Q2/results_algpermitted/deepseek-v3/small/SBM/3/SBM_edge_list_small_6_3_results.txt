To generate a layout for the graph that minimizes edge crossings, we can use the `graphviz` library, which provides a variety of layout algorithms. Specifically, we can use the `neato` layout algorithm, which is designed to minimize edge crossings and produce aesthetically pleasing layouts.

Below is the Python script that generates the layout for the given graph and outputs the positions in JSON format:

```python
import json
from graphviz import Graph

# Define the graph using the provided edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6),
    (2, 3), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6), (4, 6), (4, 24), (5, 6),
    (7, 8), (7, 9), (7, 10), (7, 11), (7, 12), (8, 12), (9, 10), (9, 11), (10, 11),
    (10, 12), (11, 12), (12, 24), (13, 16), (13, 17), (14, 15), (14, 16), (14, 17),
    (14, 18), (15, 16), (16, 17), (17, 18), (18, 23), (19, 21), (19, 22), (19, 23),
    (20, 21), (20, 22), (20, 24), (21, 22), (21, 23), (21, 24), (22, 23), (22, 24), (23, 24)
]

# Create a Graphviz graph
g = Graph(format='json')

# Add nodes and edges to the graph
for edge in edge_list:
    g.edge(str(edge[0]), str(edge[1]))

# Use the neato layout algorithm to generate positions
g.engine = 'neato'
layout = g.pipe().decode('utf-8')

# Parse the layout to extract node positions
layout_data = json.loads(layout)
positions = {node['name']: (node['pos'].split(',')[0], node['pos'].split(',')[1]) for node in layout_data['objects'] if 'pos' in node}

# Output the positions in JSON format
print(json.dumps(positions, indent=4))
```

### Explanation:
1. **Graph Creation**: We create a `Graph` object using the `graphviz` library and add edges based on the provided edge list.
2. **Layout Algorithm**: We use the `neato` layout algorithm, which is designed to minimize edge crossings.
3. **Position Extraction**: The layout is generated and parsed to extract the positions of the nodes.
4. **JSON Output**: The positions are output in JSON format.

### Output:
The script will output the positions of the nodes in JSON format, which can be used for further processing or visualization.

### Note:
- Ensure that the `graphviz` library is installed (`pip install graphviz`).
- The `neato` algorithm is used here, but you can experiment with other layout algorithms provided by `graphviz` (e.g., `dot`, `fdp`, `sfdp`, `twopi`, `circo`) depending on your specific needs.