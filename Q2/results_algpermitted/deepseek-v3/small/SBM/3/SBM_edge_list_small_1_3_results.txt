To generate a layout for the graph that minimizes edge crossings, we can use the `networkx` library to compute the layout and then output the positions in JSON format. We'll use the `spring_layout` algorithm, which is a force-directed layout that generally minimizes edge crossings.

Here's the Python script to achieve this:

```python
import networkx as nx
import json

# Define the graph using the provided edge list
edge_list = [
    (0, 1), (0, 3), (0, 4), (0, 5), (1, 3), (1, 4), (1, 5), (2, 4), (2, 5), 
    (3, 4), (3, 5), (4, 5), (4, 14), (6, 7), (6, 8), (6, 9), (6, 10), (7, 8), 
    (7, 9), (7, 10), (8, 9), (8, 10), (8, 11), (9, 10), (11, 12), (11, 13), 
    (11, 14), (11, 15), (12, 13), (12, 14), (12, 15), (13, 15), (14, 15), 
    (15, 17), (16, 18), (16, 19), (16, 20), (17, 18), (17, 19), (17, 20), 
    (18, 19), (18, 20), (19, 20)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute the layout using the spring layout algorithm
pos = nx.spring_layout(G, seed=42)  # seed for reproducibility

# Convert the positions to a dictionary with node IDs as keys and positions as values
layout = {node: [float(pos[node][0]), float(pos[node][1])] for node in G.nodes()}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: We create a graph `G` using the provided edge list.
2. **Layout Calculation**: We use the `spring_layout` algorithm from `networkx` to compute the positions of the nodes. The `seed` parameter ensures that the layout is reproducible.
3. **Position Formatting**: The positions are converted into a dictionary where each node ID maps to its 2D coordinates.
4. **JSON Output**: The layout is printed in JSON format, which can be used for further processing or visualization.

This script will output the graph layout in JSON format, which you can use as needed.