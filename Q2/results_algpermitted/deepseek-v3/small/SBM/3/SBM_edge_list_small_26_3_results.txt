To generate a layout for the graph that minimizes edge crossings, we can use the `networkx` library to compute the layout and then output the positions in JSON format. We'll use the `spring_layout` algorithm, which is a force-directed layout that generally minimizes edge crossings.

Here's the Python script:

```python
import networkx as nx
import json

# Define the graph using the provided edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 11), (0, 13), (0, 14), 
             (1, 2), (1, 4), (1, 5), (1, 6), (1, 19), (2, 3), (2, 6), (3, 4), (3, 5), 
             (3, 6), (4, 5), (4, 6), (4, 18), (5, 6), (5, 9), (7, 8), (7, 9), (7, 10), 
             (7, 11), (7, 12), (7, 13), (8, 9), (8, 11), (8, 12), (8, 13), (9, 10), 
             (9, 11), (9, 12), (10, 11), (10, 12), (10, 13), (10, 14), (11, 12), 
             (11, 13), (12, 13), (14, 15), (14, 17), (14, 18), (14, 19), (14, 20), 
             (15, 16), (15, 17), (15, 18), (15, 20), (16, 17), (16, 18), (16, 19), 
             (16, 20), (17, 18), (17, 19), (17, 20), (18, 19), (18, 20)]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute the layout using the spring layout algorithm
pos = nx.spring_layout(G, seed=42)  # seed for reproducibility

# Convert the positions to a dictionary with node IDs as keys
layout = {node: [float(pos[node][0]), float(pos[node][1])] for node in G.nodes()}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the provided edge list.
2. **Layout Calculation**: The `spring_layout` algorithm is used to compute the positions of the nodes. The `seed` parameter ensures that the layout is reproducible.
3. **JSON Output**: The positions are converted to a dictionary where the keys are node IDs and the values are lists of coordinates `[x, y]`. This dictionary is then serialized to JSON format.

### Output:
The script will output the graph layout in JSON format, where each node is associated with its `[x, y]` coordinates. This JSON can be used for further processing or visualization in other tools.

```json
{
    "0": [-0.123456789, 0.987654321],
    "1": [0.123456789, 0.876543210],
    ...
    "20": [0.987654321, -0.123456789]
}
```

(Note: The actual coordinates will vary depending on the layout algorithm and the seed used.)