To generate a layout for the graph that minimizes edge crossings, we can use the `networkx` library to create the graph and then apply a layout algorithm such as the Kamada-Kawai layout or the Fruchterman-Reingold layout. These algorithms are designed to minimize edge crossings and produce aesthetically pleasing layouts.

Here is the Python code that generates the layout and outputs it in JSON format:

```python
import networkx as nx
import json

# Define the graph using the provided edge list
edge_list = [
    (0, 1), (0, 2), (0, 4), (0, 5), (1, 2), (1, 3), (1, 4), (1, 5), (1, 11), 
    (2, 3), (2, 4), (2, 5), (3, 4), (3, 10), (3, 17), (4, 5), (6, 7), (6, 8), 
    (6, 10), (6, 11), (7, 11), (8, 9), (8, 10), (9, 10), (9, 11), (10, 14), 
    (11, 15), (12, 13), (12, 15), (12, 16), (13, 14), (13, 15), (13, 16), 
    (14, 15), (14, 16), (15, 16), (17, 18), (17, 19), (17, 20), (17, 21), 
    (18, 19), (18, 20), (20, 21)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Kamada-Kawai algorithm
layout = nx.kamada_kawai_layout(G)

# Convert the layout to a dictionary with node IDs as keys and positions as values
layout_dict = {node: [float(pos[0]), float(pos[1])] for node, pos in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_dict, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the provided edge list.
2. **Layout Generation**: The `kamada_kawai_layout` function from `networkx` is used to generate the layout. This algorithm is designed to minimize edge crossings and produce a visually appealing layout.
3. **JSON Output**: The layout is converted to a dictionary where each node is mapped to its position. This dictionary is then serialized to JSON format.

### Output:
The output will be a JSON object where each key is a node ID, and the value is a list of two floats representing the x and y coordinates of the node's position.

```json
{
    "0": [0.0, 0.0],
    "1": [0.1, 0.1],
    "2": [0.2, 0.2],
    ...
}
```

This JSON output can be used to visualize the graph in any plotting library or tool that accepts node positions.