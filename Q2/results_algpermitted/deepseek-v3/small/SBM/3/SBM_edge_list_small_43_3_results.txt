To generate a layout for the graph that minimizes edge crossings, we can use the `networkx` library to create the graph and then apply a layout algorithm such as the `spring_layout` or `kamada_kawai_layout`. These algorithms are designed to minimize edge crossings and produce a visually pleasing layout.

Here is the Python code that generates the layout and outputs it in JSON format:

```python
import networkx as nx
import json

# Define the graph using the provided edge list
edge_list = [
    (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 9), (1, 2), (1, 3), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9),
    (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 22), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9),
    (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 28), (6, 7), (6, 8), (6, 9), (7, 8),
    (7, 9), (10, 11), (10, 12), (10, 13), (10, 14), (10, 16), (10, 17), (10, 18), (10, 19), (11, 12),
    (11, 13), (11, 14), (11, 15), (11, 16), (11, 17), (11, 18), (12, 13), (12, 14), (12, 15), (12, 16),
    (12, 17), (12, 19), (13, 14), (13, 15), (13, 16), (13, 18), (13, 19), (14, 15), (14, 16), (14, 17),
    (14, 18), (14, 19), (15, 16), (15, 18), (15, 19), (16, 17), (16, 18), (17, 19), (17, 21), (18, 19),
    (20, 22), (20, 23), (20, 24), (20, 25), (20, 26), (20, 27), (20, 28), (21, 23), (21, 24), (21, 25),
    (21, 26), (21, 27), (21, 28), (22, 23), (22, 24), (22, 25), (22, 28), (23, 26), (23, 28), (24, 25),
    (24, 26), (24, 28), (25, 27), (25, 28), (26, 27), (27, 28)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Kamada-Kawai algorithm
layout = nx.kamada_kawai_layout(G)

# Convert the layout to a dictionary with node IDs as keys and positions as values
layout_dict = {node: [float(pos[0]), float(pos[1])] for node, pos in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_dict, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the provided edge list.
2. **Layout Generation**: The `kamada_kawai_layout` algorithm is used to generate the layout. This algorithm is known for producing layouts that minimize edge crossings and are visually appealing.
3. **JSON Output**: The layout is converted to a dictionary where each node is mapped to its position, and then the dictionary is output in JSON format.

You can run this script to get the layout in JSON format, which can be used for further processing or visualization in other tools.