To generate a layout for the graph that minimizes edge crossings, we can use the `networkx` library to create the graph and then apply a layout algorithm such as the Kamada-Kawai layout or the Fruchterman-Reingold layout. These algorithms are designed to minimize edge crossings and produce aesthetically pleasing layouts.

Here is the Python code to generate the layout and output it in JSON format:

```python
import networkx as nx
import json

# Define the graph using the provided edge list
edge_list = [(0, 2), (0, 3), (0, 4), (0, 5), (1, 2), (1, 3), (1, 4), (1, 5), (1, 16), 
             (2, 3), (2, 5), (2, 8), (3, 5), (3, 10), (4, 5), (6, 9), (6, 10), (7, 8), 
             (7, 10), (8, 10), (9, 10), (11, 12), (11, 14), (12, 14), (12, 15), (12, 20), 
             (13, 14), (13, 15), (14, 20), (16, 17), (16, 18), (16, 19), (16, 20), 
             (17, 18), (18, 19), (18, 20), (19, 20)]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Kamada-Kawai algorithm
layout = nx.kamada_kawai_layout(G)

# Convert the layout to a dictionary with node IDs as keys and positions as values
layout_dict = {node: [float(pos[0]), float(pos[1])] for node, pos in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_dict, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the provided edge list.
2. **Layout Generation**: The `kamada_kawai_layout` function from `networkx` is used to generate the layout. This algorithm attempts to minimize edge crossings and produce a visually pleasing layout.
3. **JSON Output**: The layout is converted to a dictionary where each node is mapped to its position, and then the dictionary is serialized to JSON format.

### Output:
The output will be a JSON object where each key is a node ID, and the value is a list containing the x and y coordinates of the node's position.

You can run this script to get the layout in JSON format, which can then be used for further processing or visualization in other tools.