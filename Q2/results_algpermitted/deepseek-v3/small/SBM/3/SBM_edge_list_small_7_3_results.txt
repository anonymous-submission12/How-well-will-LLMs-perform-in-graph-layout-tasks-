To generate a layout for the graph that minimizes edge crossings, we can use the `networkx` library to create the graph and then apply a layout algorithm such as the Kamada-Kawai layout, which is designed to minimize edge crossings. The final layout will be output in JSON format.

Here is the Python script to achieve this:

```python
import networkx as nx
import json

# Define the graph using the provided edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 8), (0, 15),
    (1, 2), (1, 5), (1, 6), (2, 3), (2, 4), (2, 5), (2, 6), (3, 5),
    (3, 6), (4, 5), (4, 6), (5, 6), (7, 8), (7, 9), (7, 10), (7, 11),
    (7, 12), (7, 13), (8, 9), (8, 11), (8, 12), (9, 10), (9, 11),
    (9, 12), (9, 13), (10, 13), (11, 12), (12, 13), (12, 15),
    (14, 15), (14, 16), (14, 17), (14, 18), (15, 16), (15, 18),
    (15, 19), (15, 20), (16, 17), (16, 20), (17, 18), (17, 19),
    (17, 20), (18, 19), (19, 20)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Kamada-Kawai algorithm
pos = nx.kamada_kawai_layout(G)

# Convert the layout to a dictionary with node IDs as keys and positions as values
layout = {node: [float(pos[node][0]), float(pos[node][1])] for node in pos}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the provided edge list.
2. **Layout Generation**: The Kamada-Kawai layout algorithm is used to generate positions for the nodes. This algorithm attempts to minimize edge crossings by placing nodes in a way that reduces the overall energy of the system.
3. **JSON Output**: The positions of the nodes are converted to a dictionary and then output in JSON format.

### Output:
The script will output the graph layout in JSON format, where each node is associated with its position in 2D space. The positions are represented as `[x, y]` coordinates.

You can run this script in a Python environment to get the JSON output.