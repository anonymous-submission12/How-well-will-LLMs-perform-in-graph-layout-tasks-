To generate a layout for the graph that keeps the community structure clear, we can use the `networkx` library to handle the graph and community detection, and the `community` module (from `python-louvain`) to detect communities. We will then use a force-directed layout algorithm (like Fruchterman-Reingold) to position the nodes, ensuring that nodes within the same community are placed close to each other.

Here is the Python script that accomplishes this:

```python
import networkx as nx
import community as community_louvain
import json

# Define the graph using the provided edge list
edge_list = [(0, 1), (0, 2), (0, 4), (0, 5), (0, 6), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), 
             (2, 4), (2, 6), (2, 7), (2, 8), (3, 5), (3, 6), (3, 7), (3, 8), (4, 5), (4, 6), (4, 8), (5, 7), (6, 7), 
             (7, 8), (9, 10), (9, 14), (9, 16), (9, 17), (9, 22), (10, 11), (10, 12), (10, 15), (10, 16), (10, 17), 
             (11, 12), (11, 13), (11, 14), (11, 16), (11, 17), (11, 24), (12, 13), (12, 14), (12, 15), (12, 16), 
             (12, 17), (13, 14), (13, 15), (14, 15), (14, 16), (14, 17), (15, 17), (16, 17), (18, 19), (18, 20), 
             (18, 21), (18, 22), (18, 23), (18, 24), (18, 25), (19, 20), (19, 21), (19, 22), (19, 23), (19, 24), 
             (20, 22), (20, 23), (20, 24), (20, 25), (21, 22), (21, 23), (21, 25), (22, 23), (22, 24), (22, 25), 
             (23, 24), (24, 25)]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Detect communities using the Louvain method
partition = community_louvain.best_partition(G)

# Add community information to the graph
for node, community_id in partition.items():
    G.nodes[node]['community'] = community_id

# Generate a layout using a force-directed algorithm
pos = nx.spring_layout(G, seed=42)  # seed for reproducibility

# Prepare the layout in JSON format
layout = {str(node): {"x": pos[node][0], "y": pos[node][1], "community": G.nodes[node]['community']} for node in G.nodes()}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the provided edge list.
2. **Community Detection**: The Louvain method is used to detect communities in the graph. This method is effective for finding communities in large networks.
3. **Layout Generation**: The `spring_layout` function from `networkx` is used to generate a force-directed layout. This layout algorithm positions nodes in such a way that nodes within the same community are placed close to each other.
4. **JSON Output**: The layout is then formatted into a JSON structure, where each node is represented with its position (`x`, `y`) and its community ID.

This script will output the graph layout in JSON format, which can be used for further processing or visualization in other tools.