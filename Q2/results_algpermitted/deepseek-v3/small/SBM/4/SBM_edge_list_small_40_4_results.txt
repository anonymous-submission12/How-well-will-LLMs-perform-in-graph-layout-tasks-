To generate a layout for the graph that keeps the community structure clear, we can use the `networkx` library to handle the graph and community detection, and the `community` library (which implements the Louvain method) to detect communities. We will then use a force-directed layout algorithm (like Fruchterman-Reingold) to position the nodes, ensuring that nodes within the same community are placed closer together.

Here is the Python script that accomplishes this:

```python
import networkx as nx
import community as community_louvain
import json

# Define the graph using the edge list
edge_list = [(0, 1), (0, 2), (0, 4), (0, 5), (1, 2), (1, 3), (1, 4), (1, 5), (1, 11), 
             (2, 3), (2, 4), (2, 5), (3, 4), (3, 10), (3, 17), (4, 5), (6, 7), (6, 8), 
             (6, 10), (6, 11), (7, 11), (8, 9), (8, 10), (9, 10), (9, 11), (10, 14), 
             (11, 15), (12, 13), (12, 15), (12, 16), (13, 14), (13, 15), (13, 16), 
             (14, 15), (14, 16), (15, 16), (17, 18), (17, 19), (17, 20), (17, 21), 
             (18, 19), (18, 20), (20, 21)]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Detect communities using the Louvain method
partition = community_louvain.best_partition(G)

# Add community information to the graph
for node, community_id in partition.items():
    G.nodes[node]['community'] = community_id

# Generate a layout using a force-directed algorithm
pos = nx.spring_layout(G, seed=42)

# Prepare the layout in JSON format
layout = {str(node): {"x": float(pos[node][0]), "y": float(pos[node][1]), "community": int(partition[node])} for node in G.nodes()}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created from the provided edge list using `networkx`.
2. **Community Detection**: The Louvain method is used to detect communities in the graph. This method is effective for finding communities in large networks.
3. **Layout Generation**: The `spring_layout` function from `networkx` is used to generate a force-directed layout. This layout algorithm positions nodes in such a way that nodes within the same community are placed closer together.
4. **JSON Output**: The layout is then formatted into a JSON structure, where each node is associated with its position (`x`, `y`) and its community ID.

This script will output the graph layout in JSON format, which can be used for further processing or visualization in other tools.