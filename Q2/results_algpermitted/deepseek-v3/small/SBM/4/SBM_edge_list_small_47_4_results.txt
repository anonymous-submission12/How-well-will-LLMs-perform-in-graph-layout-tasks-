To generate a layout for the graph while keeping the community structure clear, we can use the `networkx` library to handle the graph and community detection, and the `community` library (python-louvain) to detect communities. We will then use a force-directed layout algorithm (like Fruchterman-Reingold) to position the nodes, but adjust the positions to keep communities close together.

Here's the Python script that accomplishes this:

```python
import networkx as nx
import community as community_louvain
import json

# Define the graph using the provided edge list
edge_list = [(0, 4), (0, 5), (0, 7), (1, 2), (1, 3), (1, 5), (1, 7), (2, 3), (2, 4), (2, 5), (2, 6), (3, 5), (3, 6), (3, 7), (3, 22), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (6, 7), (8, 10), (8, 11), (8, 12), (8, 13), (8, 14), (8, 15), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (11, 12), (11, 13), (12, 13), (12, 14), (12, 15), (13, 14), (13, 15), (14, 18), (16, 17), (16, 18), (16, 20), (16, 21), (16, 22), (17, 19), (17, 20), (17, 21), (17, 22), (18, 19), (18, 20), (18, 21), (18, 22), (19, 20), (19, 21), (19, 22), (20, 21)]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Detect communities using the Louvain method
partition = community_louvain.best_partition(G)

# Create a layout that keeps communities close together
pos = nx.spring_layout(G, seed=42)  # Use a fixed seed for reproducibility

# Adjust positions to group nodes by community
community_positions = {}
for node, community in partition.items():
    if community not in community_positions:
        community_positions[community] = []
    community_positions[community].append(pos[node])

# Calculate the center of each community
community_centers = {}
for community, positions in community_positions.items():
    x_coords = [p[0] for p in positions]
    y_coords = [p[1] for p in positions]
    center_x = sum(x_coords) / len(x_coords)
    center_y = sum(y_coords) / len(y_coords)
    community_centers[community] = (center_x, center_y)

# Adjust node positions to be closer to their community center
for node, community in partition.items():
    pos[node] = (
        pos[node][0] + (community_centers[community][0] - pos[node][0]) * 0.5,
        pos[node][1] + (community_centers[community][1] - pos[node][1]) * 0.5
    )

# Convert positions to a dictionary with node IDs as keys and positions as values
layout = {node: {"x": pos[node][0], "y": pos[node][1]} for node in G.nodes()}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created from the provided edge list.
2. **Community Detection**: The Louvain method is used to detect communities in the graph.
3. **Initial Layout**: A force-directed layout (Fruchterman-Reingold) is used to generate initial positions for the nodes.
4. **Community Centers**: The center of each community is calculated based on the initial positions.
5. **Adjust Positions**: Node positions are adjusted to be closer to their respective community centers, ensuring that nodes within the same community are grouped together.
6. **Output**: The final layout is output in JSON format, where each node is mapped to its `(x, y)` position.

This script ensures that the community structure is visually clear in the layout.