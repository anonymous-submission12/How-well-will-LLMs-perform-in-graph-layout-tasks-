To generate a layout for the graph that keeps the community structure clear, we can use the `networkx` library to handle the graph and community detection, and the `community` library (which implements the Louvain method) to detect communities. For the layout, we can use the `spring_layout` algorithm, which is a force-directed layout that can be adjusted to emphasize community structure.

Here's the Python script that generates the layout and outputs it in JSON format:

```python
import networkx as nx
import community as community_louvain
import json

# Define the graph using the provided edge list
edge_list = [(0, 2), (0, 3), (0, 4), (0, 5), (1, 2), (1, 3), (1, 4), (1, 5), (1, 16), 
             (2, 3), (2, 5), (2, 8), (3, 5), (3, 10), (4, 5), (6, 9), (6, 10), (7, 8), 
             (7, 10), (8, 10), (9, 10), (11, 12), (11, 14), (12, 14), (12, 15), (12, 20), 
             (13, 14), (13, 15), (14, 20), (16, 17), (16, 18), (16, 19), (16, 20), 
             (17, 18), (18, 19), (18, 20), (19, 20)]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Detect communities using the Louvain method
partition = community_louvain.best_partition(G)

# Generate a layout using the spring layout algorithm
pos = nx.spring_layout(G, seed=42)

# Adjust the layout to emphasize community structure
for node in G.nodes():
    pos[node][0] += partition[node] * 2  # Shift x-coordinate based on community
    pos[node][1] += partition[node] * 2  # Shift y-coordinate based on community

# Convert the layout to a dictionary with node IDs as keys and positions as values
layout = {node: {"x": pos[node][0], "y": pos[node][1]} for node in G.nodes()}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created from the provided edge list using `networkx`.
2. **Community Detection**: The Louvain method is used to detect communities in the graph.
3. **Layout Generation**: The `spring_layout` algorithm is used to generate initial positions for the nodes. The positions are then adjusted based on the community each node belongs to, which helps in visually separating the communities.
4. **JSON Output**: The final layout is converted to a JSON format where each node is mapped to its `(x, y)` position.

This script will output the graph layout in JSON format, which can be used for further processing or visualization in other tools.