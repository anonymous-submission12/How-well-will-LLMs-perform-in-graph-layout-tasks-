To generate a layout for the graph that keeps the community structure clear, we can use the `networkx` library to handle the graph and community detection, and the `community` module (from `python-louvain`) to detect communities. We will then use a force-directed layout algorithm (like Fruchterman-Reingold) to position the nodes, ensuring that nodes within the same community are placed close to each other.

Here is the Python script that accomplishes this:

```python
import networkx as nx
import community as community_louvain
import json

# Define the graph using the provided edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), 
             (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), 
             (2, 3), (2, 4), (2, 5), (2, 6), (2, 8), (2, 9), (2, 10), 
             (3, 5), (3, 6), (3, 9), (3, 10), 
             (4, 5), (4, 6), (4, 7), (4, 9), 
             (5, 6), (5, 7), (5, 9), (5, 11), 
             (6, 7), (6, 9), (6, 11), 
             (7, 9), (7, 11), 
             (8, 9), (8, 11), 
             (9, 10), (9, 11), 
             (10, 11), (10, 12), 
             (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (12, 18), (12, 19), (12, 20), (12, 22), 
             (13, 14), (13, 15), (13, 16), (13, 17), (13, 18), (13, 20), (13, 21), 
             (14, 15), (14, 17), (14, 18), (14, 19), (14, 20), (14, 22), 
             (15, 17), (15, 18), (15, 19), (15, 20), (15, 21), (15, 22), 
             (16, 18), (16, 20), (16, 21), (16, 22), 
             (17, 18), (17, 19), (17, 22), 
             (18, 19), (18, 20), (18, 21), (18, 22), 
             (19, 22), 
             (20, 22), 
             (21, 22)]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Detect communities using the Louvain method
partition = community_louvain.best_partition(G)

# Assign each node to its community
communities = {}
for node, comm_id in partition.items():
    if comm_id not in communities:
        communities[comm_id] = []
    communities[comm_id].append(node)

# Generate a layout using a force-directed algorithm (Fruchterman-Reingold)
pos = nx.spring_layout(G, seed=42)

# Prepare the output in JSON format
layout = {str(node): {"x": pos[node][0], "y": pos[node][1], "community": partition[node]} for node in G.nodes()}

# Convert the layout to JSON
layout_json = json.dumps(layout, indent=4)

# Output the JSON layout
print(layout_json)
```

### Explanation:
1. **Graph Creation**: The graph is created using the provided edge list.
2. **Community Detection**: The Louvain method is used to detect communities in the graph.
3. **Layout Generation**: A force-directed layout algorithm (Fruchterman-Reingold) is used to position the nodes. The `seed` parameter ensures reproducibility.
4. **JSON Output**: The layout is formatted as a JSON object where each node has its position (`x`, `y`) and community ID.

### Output:
The output will be a JSON object where each node is mapped to its position and community ID. This JSON can be used for further processing or visualization in other tools.

```json
{
    "0": {
        "x": 0.123,
        "y": 0.456,
        "community": 0
    },
    "1": {
        "x": 0.234,
        "y": 0.567,
        "community": 0
    },
    ...
}
```

This script does not use `matplotlib` or `networkx` for drawing the graph visually, as requested. The final output is the graph layout in JSON format.