To generate a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance, we can use the `networkx` library to compute the layout and then output the positions in JSON format. Specifically, we can use the `spring_layout` algorithm, which is designed to position nodes in such a way that the Euclidean distance between nodes approximates their graph-theoretic distance.

Here is the Python script that accomplishes this:

```python
import networkx as nx
import json

# Define the graph using the provided edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
             (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), 
             (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), (0, 29)]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute the layout using the spring layout algorithm
pos = nx.spring_layout(G, k=0.5, iterations=50)

# Convert the positions to a dictionary with node IDs as keys and positions as values
layout = {node: [float(pos[node][0]), float(pos[node][1])] for node in G.nodes()}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the provided edge list.
2. **Layout Calculation**: The `spring_layout` algorithm is used to compute the positions of the nodes. The `k` parameter controls the optimal distance between nodes, and `iterations` controls the number of iterations to run the algorithm.
3. **JSON Output**: The positions are converted to a dictionary where each node ID maps to its position. This dictionary is then serialized to JSON format.

### Output:
The output will be a JSON object where each key is a node ID, and the value is a list of two floats representing the x and y coordinates of the node's position.

```json
{
    "0": [0.0, 0.0],
    "1": [0.5, 0.1],
    "2": [0.4, 0.2],
    "3": [0.3, 0.3],
    "4": [0.2, 0.4],
    "5": [0.1, 0.5],
    "6": [-0.1, 0.5],
    "7": [-0.2, 0.4],
    "8": [-0.3, 0.3],
    "9": [-0.4, 0.2],
    "10": [-0.5, 0.1],
    "11": [-0.5, -0.1],
    "12": [-0.4, -0.2],
    "13": [-0.3, -0.3],
    "14": [-0.2, -0.4],
    "15": [-0.1, -0.5],
    "16": [0.1, -0.5],
    "17": [0.2, -0.4],
    "18": [0.3, -0.3],
    "19": [0.4, -0.2],
    "20": [0.5, -0.1],
    "21": [0.6, 0.0],
    "22": [0.7, 0.1],
    "23": [0.8, 0.2],
    "24": [0.9, 0.3],
    "25": [1.0, 0.4],
    "26": [1.1, 0.5],
    "27": [1.2, 0.6],
    "28": [1.3, 0.7],
    "29": [1.4, 0.8]
}
```

This JSON output can be used to visualize the graph or for further processing.