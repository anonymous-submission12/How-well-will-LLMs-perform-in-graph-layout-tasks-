To generate a layout for the graph that minimizes edge crossings, we can use the `graphviz` library, which provides a variety of layout algorithms. Specifically, we can use the `dot` layout algorithm, which is designed to minimize edge crossings in hierarchical graphs.

Here is the Python code to generate the layout and output it in JSON format:

```python
import json
from graphviz import Graph

# Define the graph using the provided edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
             (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), 
             (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27)]

# Create a Graphviz graph
g = Graph(format='json')

# Add nodes and edges to the graph
for edge in edge_list:
    g.edge(str(edge[0]), str(edge[1]))

# Generate the layout using the 'dot' algorithm
layout = g.pipe(format='json')

# Parse the JSON output to extract node positions
layout_json = json.loads(layout.decode('utf-8'))

# Extract node positions
node_positions = {}
for node in layout_json['objects']:
    node_id = node['name']
    pos = node['pos']
    node_positions[node_id] = {'x': float(pos.split(',')[0]), 'y': float(pos.split(',')[1])}

# Output the node positions in JSON format
print(json.dumps(node_positions, indent=4))
```

### Explanation:
1. **Graph Creation**: We create a `Graph` object using the `graphviz` library and add nodes and edges based on the provided edge list.
2. **Layout Generation**: We use the `dot` layout algorithm to generate the graph layout. The `pipe` method is used to get the layout in JSON format.
3. **Position Extraction**: We parse the JSON output to extract the positions of the nodes.
4. **Output**: The node positions are output in JSON format.

### Output:
The output will be a JSON object where each key is a node ID, and the value is a dictionary containing the `x` and `y` coordinates of the node's position.

```json
{
    "0": {
        "x": 0.0,
        "y": 0.0
    },
    "1": {
        "x": 1.0,
        "y": 1.0
    },
    "2": {
        "x": 2.0,
        "y": 1.0
    },
    ...
}
```

This JSON object can be used to visualize the graph or for further processing.