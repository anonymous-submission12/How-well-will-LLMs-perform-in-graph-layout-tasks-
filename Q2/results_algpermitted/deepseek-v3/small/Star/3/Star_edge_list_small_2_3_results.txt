To generate a layout for the graph that minimizes edge crossings, we can use the `graphviz` library, which provides a variety of layout algorithms. Specifically, we can use the `neato` layout algorithm, which is designed to minimize edge crossings and produce a visually pleasing layout.

Below is the Python code that generates the layout for the given graph and outputs the positions in JSON format:

```python
import json
from graphviz import Graph

# Define the graph using the provided edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
             (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), 
             (0, 20), (0, 21)]

# Create a Graphviz graph
g = Graph(format='json')

# Add nodes and edges to the graph
for edge in edge_list:
    g.edge(str(edge[0]), str(edge[1]))

# Use the neato layout algorithm to generate positions
g.engine = 'neato'
g.render('graph', format='json', cleanup=True)

# Read the JSON output to extract the positions
with open('graph.json', 'r') as f:
    layout_data = json.load(f)

# Extract the positions of the nodes
positions = {}
for node in layout_data['objects']:
    positions[int(node['name'])] = {
        'x': node['pos'].split(',')[0],
        'y': node['pos'].split(',')[1]
    }

# Output the positions in JSON format
print(json.dumps(positions, indent=4))
```

### Explanation:
1. **Graph Creation**: We create a `Graph` object using the `graphviz` library and add the edges from the provided edge list.
2. **Layout Algorithm**: We use the `neato` layout algorithm, which is designed to minimize edge crossings.
3. **JSON Output**: The graph is rendered in JSON format, and we extract the positions of the nodes from the JSON output.
4. **Final Output**: The positions of the nodes are printed in JSON format.

### Output:
The output will be a JSON object where the keys are the node IDs, and the values are dictionaries containing the `x` and `y` coordinates of the nodes.

```json
{
    "0": {
        "x": "0.000",
        "y": "0.000"
    },
    "1": {
        "x": "1.000",
        "y": "0.500"
    },
    "2": {
        "x": "1.000",
        "y": "-0.500"
    },
    ...
}
```

This JSON output can be used to visualize the graph using any plotting library or for further processing.