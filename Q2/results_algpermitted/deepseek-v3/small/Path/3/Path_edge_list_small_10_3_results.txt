To generate a layout for the graph that minimizes edge crossings, we can use the `graphviz` library, which provides a variety of layout algorithms. Specifically, we can use the `dot` layout algorithm, which is designed to minimize edge crossings in hierarchical graphs.

Here is the Python script that generates the layout and outputs it in JSON format:

```python
import json
import graphviz

# Define the graph using the provided edge list
edge_list = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), 
             (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), 
             (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), 
             (26, 27), (27, 28), (28, 29)]

# Create a Graphviz graph
dot = graphviz.Digraph()

# Add nodes and edges to the graph
for edge in edge_list:
    dot.edge(str(edge[0]), str(edge[1]))

# Use the 'dot' layout algorithm to generate positions
dot.format = 'json'
dot.layout(prog='dot')

# Extract the positions from the JSON output
graph_json = dot.pipe().decode('utf-8')
graph_data = json.loads(graph_json)

# Extract node positions
layout = {}
for obj in graph_data['objects']:
    if obj['name'] == 'node':
        for node in obj['nodes']:
            layout[node['name']] = {
                'x': node['pos'].split(',')[0],
                'y': node['pos'].split(',')[1]
            }

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: We create a `graphviz.Digraph` object and add nodes and edges based on the provided edge list.
2. **Layout Algorithm**: We use the `dot` layout algorithm, which is designed to minimize edge crossings in hierarchical graphs.
3. **JSON Output**: The graph is rendered in JSON format, and we extract the positions of the nodes from the JSON output.
4. **Final Output**: The node positions are printed in JSON format.

### Output:
The output will be a JSON object where each key is a node ID, and the value is a dictionary containing the `x` and `y` coordinates of the node.

```json
{
    "0": {
        "x": "0.0",
        "y": "0.0"
    },
    "1": {
        "x": "1.0",
        "y": "0.0"
    },
    ...
    "29": {
        "x": "29.0",
        "y": "0.0"
    }
}
```

This script will generate a layout for the graph and output the positions of the nodes in JSON format.