To generate a layout for the graph that minimizes edge crossings, we can use the `graphviz` library, which provides a variety of layout algorithms. Specifically, we can use the `dot` layout algorithm, which is designed to minimize edge crossings in hierarchical graphs.

Here is the Python code to generate the layout and output it in JSON format:

```python
import json
import graphviz

# Define the graph using the provided edge list
edge_list = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), 
             (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), 
             (18, 19), (19, 20), (20, 21), (21, 22)]

# Create a Graphviz graph
dot = graphviz.Digraph()

# Add nodes and edges to the graph
for edge in edge_list:
    dot.edge(str(edge[0]), str(edge[1]))

# Use the 'dot' layout algorithm to compute the positions
dot.format = 'json'
dot.engine = 'dot'
dot_json = dot.pipe().decode('utf-8')

# Parse the JSON output to extract the positions
layout = json.loads(dot_json)

# Extract the positions of the nodes
node_positions = {}
for obj in layout['objects']:
    if obj['name'] == 'node':
        for node in obj['nodes']:
            node_id = node['name']
            pos = node['pos']
            x, y = map(float, pos.split(','))
            node_positions[node_id] = {'x': x, 'y': y}

# Output the node positions in JSON format
print(json.dumps(node_positions, indent=4))
```

### Explanation:
1. **Graph Creation**: We create a `graphviz.Digraph` object and add nodes and edges based on the provided edge list.
2. **Layout Algorithm**: We use the `dot` layout algorithm, which is designed to minimize edge crossings in hierarchical graphs.
3. **JSON Output**: The graph is rendered in JSON format, and we parse this JSON to extract the positions of the nodes.
4. **Final Output**: The node positions are output in JSON format.

### Output:
The output will be a JSON object where the keys are node IDs and the values are dictionaries containing the `x` and `y` coordinates of each node.

```json
{
    "0": {"x": 0.0, "y": 0.0},
    "1": {"x": 1.0, "y": 0.0},
    "2": {"x": 2.0, "y": 0.0},
    ...
    "22": {"x": 22.0, "y": 0.0}
}
```

This JSON object represents the layout of the graph, with each node's position specified by its `x` and `y` coordinates.