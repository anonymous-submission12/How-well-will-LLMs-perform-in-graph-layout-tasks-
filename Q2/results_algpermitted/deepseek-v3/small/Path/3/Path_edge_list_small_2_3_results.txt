To generate a layout for the graph that minimizes edge crossings, we can use the `graphviz` library, which provides a variety of layout algorithms. Specifically, we can use the `dot` layout algorithm, which is designed to minimize edge crossings in hierarchical graphs.

Here is the Python code to generate the layout and output it in JSON format:

```python
import json
import graphviz

# Define the graph using the provided edge list
edge_list = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), 
             (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), 
             (18, 19), (19, 20), (20, 21)]

# Create a Graphviz graph
dot = graphviz.Digraph()

# Add nodes and edges to the graph
for edge in edge_list:
    dot.edge(str(edge[0]), str(edge[1]))

# Use the 'dot' layout algorithm to compute the positions
dot.engine = 'dot'
dot.format = 'json'
dot_json = dot.pipe().decode('utf-8')

# Parse the JSON output to extract the positions
graph_data = json.loads(dot_json)

# Extract the positions of the nodes
layout = {}
for node in graph_data['objects']:
    if 'pos' in node:
        layout[node['name']] = {
            'x': float(node['pos'].split(',')[0]),
            'y': float(node['pos'].split(',')[1])
        }

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: We create a `graphviz.Digraph` object and add nodes and edges based on the provided edge list.
2. **Layout Calculation**: We use the `dot` layout algorithm, which is designed to minimize edge crossings in hierarchical graphs.
3. **JSON Output**: The layout is computed and output in JSON format, where each node is associated with its `(x, y)` position.

### Output:
The output will be a JSON object where each key is a node identifier, and the value is a dictionary containing the `x` and `y` coordinates of the node's position.

```json
{
    "0": {
        "x": 0.0,
        "y": 0.0
    },
    "1": {
        "x": 1.0,
        "y": 0.0
    },
    "2": {
        "x": 2.0,
        "y": 0.0
    },
    ...
    "21": {
        "x": 21.0,
        "y": 0.0
    }
}
```

This JSON output can be used to visualize the graph using any plotting library or for further processing.