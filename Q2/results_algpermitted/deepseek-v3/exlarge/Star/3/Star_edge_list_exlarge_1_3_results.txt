To generate a layout for the graph that minimizes edge crossings, we can use the `networkx` library to create the graph and then apply a layout algorithm such as the `spring_layout` or `kamada_kawai_layout`. These algorithms are designed to minimize edge crossings and produce a visually pleasing layout.

Here is the Python code to generate the layout and output it in JSON format:

```python
import networkx as nx
import json

# Define the edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
             (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), 
             (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), 
             (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37), 
             (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), 
             (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), 
             (0, 56), (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), 
             (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70)]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the spring layout algorithm
layout = nx.spring_layout(G)

# Convert the layout to a dictionary with node positions
node_positions = {node: [float(pos[0]), float(pos[1])] for node, pos in layout.items()}

# Output the layout in JSON format
output_json = json.dumps(node_positions, indent=4)
print(output_json)
```

### Explanation:
1. **Graph Creation**: The graph is created using the `networkx.Graph()` class, and edges are added using the `add_edges_from()` method.
2. **Layout Generation**: The `spring_layout` algorithm is used to generate the layout. This algorithm tries to minimize edge crossings by simulating a physical system where nodes repel each other, and edges act as springs.
3. **JSON Output**: The layout is converted to a dictionary where each node is mapped to its position. This dictionary is then serialized to JSON format using `json.dumps()`.

### Output:
The output will be a JSON object where each key is a node, and the value is a list of two floats representing the x and y coordinates of the node's position.

```json
{
    "0": [0.0, 0.0],
    "1": [0.1, 0.2],
    "2": [-0.1, 0.2],
    ...
    "70": [0.5, -0.5]
}
```

This JSON output can be used to visualize the graph in any plotting library or for further processing.