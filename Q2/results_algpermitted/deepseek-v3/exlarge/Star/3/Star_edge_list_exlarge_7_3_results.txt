To generate a layout for the graph that minimizes edge crossings, we can use the `pygraphviz` library, which provides an interface to the Graphviz library. Graphviz includes several layout algorithms, such as `dot`, `neato`, and `sfdp`, which are designed to minimize edge crossings and produce aesthetically pleasing layouts.

Below is the Python script that generates the layout for the given graph and outputs the positions in JSON format:

```python
import json
import pygraphviz as pgv

# Define the graph using the provided edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
             (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), 
             (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), 
             (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37), 
             (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), 
             (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), 
             (0, 56), (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), 
             (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71), (0, 72), (0, 73), 
             (0, 74), (0, 75), (0, 76)]

# Create a graph using pygraphviz
G = pgv.AGraph(strict=False, directed=False)

# Add edges to the graph
for edge in edge_list:
    G.add_edge(edge[0], edge[1])

# Use the 'dot' layout algorithm to minimize edge crossings
G.layout(prog='dot')

# Extract the positions of the nodes
layout = {}
for node in G.nodes():
    pos = node.attr['pos'].split(',')
    layout[int(node)] = {'x': float(pos[0]), 'y': float(pos[1])}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using `pygraphviz.AGraph`. The `strict=False` parameter allows multiple edges between the same pair of nodes, and `directed=False` specifies that the graph is undirected.

2. **Adding Edges**: The edges from the provided edge list are added to the graph.

3. **Layout Algorithm**: The `dot` layout algorithm is used to generate the positions of the nodes. This algorithm is particularly good at minimizing edge crossings in hierarchical graphs.

4. **Extracting Positions**: The positions of the nodes are extracted from the graph and stored in a dictionary. The positions are in the format `(x, y)`.

5. **JSON Output**: The positions are output in JSON format, which can be used for further processing or visualization.

### Note:
- Ensure that `pygraphviz` and `Graphviz` are installed on your system. You can install `pygraphviz` using `pip install pygraphviz`.
- The `dot` layout algorithm is used here, but you can experiment with other algorithms like `neato` or `sfdp` depending on your specific needs.

This script will output the positions of the nodes in JSON format, which can be used for further processing or visualization in other tools.