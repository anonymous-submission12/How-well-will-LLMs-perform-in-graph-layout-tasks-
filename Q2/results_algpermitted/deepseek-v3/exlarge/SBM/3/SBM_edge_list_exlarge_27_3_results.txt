To generate a layout for the graph that minimizes edge crossings, we can use the `networkx` library to compute the layout and then output the positions in JSON format. We'll use the `spring_layout` algorithm, which is a force-directed layout that generally minimizes edge crossings.

Here's the Python script to achieve this:

```python
import networkx as nx
import json

# Define the graph using the provided edge list
edge_list = [
    (0, 2), (0, 3), (0, 4), (0, 9), (0, 10), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 10), 
    (2, 5), (2, 11), (3, 7), (4, 5), (4, 7), (5, 11), (6, 11), (7, 8), (7, 10), (8, 9), (8, 10), (8, 11), (8, 59), 
    (9, 10), (9, 18), (10, 11), (12, 13), (12, 14), (12, 16), (12, 17), (12, 19), (12, 21), (13, 14), (13, 18), 
    (14, 16), (15, 17), (15, 19), (15, 22), (15, 23), (16, 17), (16, 19), (16, 21), (16, 23), (17, 18), (17, 20), 
    (18, 22), (19, 21), (19, 22), (20, 21), (20, 23), (21, 22), (21, 23), (21, 50), (22, 33), (24, 26), (24, 29), 
    (25, 27), (26, 29), (27, 28), (27, 29), (27, 30), (29, 30), (29, 31), (30, 31), (30, 52), (32, 24), (32, 28), 
    (32, 29), (32, 30), (32, 31), (32, 34), (33, 26), (33, 28), (33, 35), (34, 24), (34, 26), (34, 27), (34, 28), 
    (34, 31), (35, 27), (35, 28), (35, 30), (36, 38), (36, 41), (36, 43), (36, 44), (36, 45), (36, 46), (37, 38), 
    (37, 39), (37, 41), (37, 44), (38, 39), (38, 44), (38, 45), (38, 49), (39, 40), (39, 41), (39, 42), (39, 44), 
    (39, 64), (40, 42), (40, 43), (40, 44), (40, 46), (41, 42), (41, 43), (42, 43), (42, 44), (42, 46), (43, 45), 
    (43, 46), (44, 45), (45, 46), (45, 76), (47, 48), (47, 51), (48, 50), (48, 52), (48, 54), (48, 57), (49, 51), 
    (49, 53), (49, 56), (49, 57), (51, 53), (51, 56), (51, 57), (52, 56), (54, 57), (55, 57), (58, 62), (59, 60), 
    (61, 63), (64, 60), (64, 63), (64, 66), (65, 58), (65, 60), (65, 61), (65, 68), (66, 58), (66, 61), (67, 62), 
    (67, 63), (67, 68), (68, 58), (68, 59), (68, 62), (69, 72), (69, 75), (69, 78), (69, 79), (70, 72), (70, 76), 
    (70, 78), (70, 79), (71, 72), (71, 73), (71, 74), (71, 76), (71, 78), (72, 75), (72, 76), (72, 77), (72, 78), 
    (72, 79), (73, 76), (73, 79), (75, 77), (75, 79), (76, 77), (77, 78), (78, 79)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute the layout using the spring layout algorithm
pos = nx.spring_layout(G)

# Convert the positions to a dictionary with node IDs as keys and positions as values
layout = {node: [float(pos[node][0]), float(pos[node][1])] for node in G.nodes()}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the provided edge list.
2. **Layout Calculation**: The `spring_layout` algorithm is used to compute the positions of the nodes. This algorithm simulates a physical system where nodes repel each other, and edges act as springs, pulling connected nodes together. This generally results in a layout that minimizes edge crossings.
3. **JSON Output**: The positions are converted to a dictionary where each node ID maps to its position. This dictionary is then serialized to JSON format.

### Output:
The script will output the graph layout in JSON format, where each node is associated with its 2D position. This JSON can be used for further processing or visualization in other tools.

```json
{
    "0": [0.123, 0.456],
    "1": [0.234, 0.567],
    ...
    "79": [0.789, 0.890]
}
```

(Note: The actual positions will vary each time you run the script due to the stochastic nature of the `spring_layout` algorithm.)