To generate a layout for the graph that minimizes edge crossings, we can use the `networkx` library to create the graph and then apply a layout algorithm such as the Kamada-Kawai layout, which is designed to minimize edge crossings. The final layout will be output in JSON format.

Here is the Python script to achieve this:

```python
import networkx as nx
import json

# Define the graph using the provided edge list
edge_list = [
    (0, 2), (0, 7), (0, 8), (0, 35), (1, 2), (1, 3), (1, 7), (1, 8), (1, 9), 
    (2, 6), (2, 7), (2, 8), (3, 5), (3, 8), (3, 10), (4, 5), (4, 7), (4, 8), 
    (5, 6), (5, 7), (5, 8), (5, 10), (6, 7), (6, 8), (6, 10), (7, 10), (7, 19), 
    (8, 9), (8, 10), (8, 73), (9, 10), (9, 43), (11, 12), (11, 16), (11, 18), 
    (11, 20), (11, 21), (11, 25), (12, 14), (12, 16), (12, 17), (12, 18), 
    (12, 19), (12, 21), (13, 19), (13, 21), (14, 17), (15, 17), (15, 18), 
    (15, 20), (16, 19), (17, 20), (18, 21), (18, 69), (19, 20), (19, 21), 
    (20, 21), (22, 26), (22, 28), (23, 25), (23, 27), (24, 30), (25, 27), 
    (25, 28), (25, 29), (25, 30), (26, 27), (26, 31), (27, 28), (27, 30), 
    (27, 57), (29, 30), (30, 47), (32, 23), (32, 24), (32, 25), (32, 69), 
    (33, 34), (33, 37), (33, 38), (33, 41), (33, 42), (33, 51), (34, 36), 
    (34, 37), (34, 38), (34, 42), (35, 40), (35, 43), (36, 39), (36, 41), 
    (36, 42), (37, 38), (37, 39), (37, 41), (37, 43), (39, 41), (40, 43), 
    (44, 46), (44, 48), (44, 53), (45, 48), (45, 49), (45, 52), (46, 50), 
    (46, 52), (46, 53), (47, 48), (47, 49), (47, 51), (47, 52), (48, 49), 
    (48, 51), (48, 53), (50, 51), (50, 52), (50, 56), (54, 56), (54, 59), 
    (54, 60), (54, 62), (55, 57), (55, 58), (55, 60), (55, 61), (55, 62), 
    (55, 63), (56, 58), (56, 60), (56, 63), (57, 60), (57, 63), (58, 59), 
    (58, 61), (58, 62), (59, 61), (59, 62), (60, 61), (60, 63), (61, 63), 
    (64, 66), (64, 67), (64, 70), (64, 72), (64, 73), (65, 66), (65, 67), 
    (65, 69), (66, 72), (66, 73), (67, 68), (67, 71), (68, 69), (68, 70), 
    (70, 72), (70, 73), (71, 73), (72, 73)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Kamada-Kawai algorithm
layout = nx.kamada_kawai_layout(G)

# Convert the layout to a dictionary with node IDs as keys and positions as values
layout_dict = {node: [float(pos[0]), float(pos[1])] for node, pos in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_dict, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the provided edge list.
2. **Layout Generation**: The Kamada-Kawai layout algorithm is used to generate positions for the nodes. This algorithm attempts to minimize edge crossings by placing nodes in a way that reduces the overall energy of the system.
3. **JSON Output**: The layout is converted to a dictionary where each node is mapped to its position, and then the dictionary is output in JSON format.

This script will output the positions of the nodes in a JSON format, which can be used for further processing or visualization.