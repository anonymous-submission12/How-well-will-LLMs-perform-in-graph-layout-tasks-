To generate a layout for the graph that keeps the community structure clear, we can use the following approach:

1. **Community Detection**: Use a community detection algorithm to identify communities within the graph.
2. **Graph Layout**: Use a force-directed layout algorithm to position the nodes, but adjust the positions to keep communities close together.

We will use the `community` library for community detection and `networkx` for graph layout. The final layout will be exported in JSON format.

Here is the Python script:

```python
import json
import networkx as nx
import community as community_louvain

# Input edge list
edge_list = [(0, 1), (0, 5), (0, 6), (0, 9), (0, 11), (1, 3), (1, 5), (1, 7), (1, 9), (1, 18), (1, 77), 
             (2, 4), (2, 5), (3, 5), (3, 6), (3, 8), (3, 11), (3, 12), (3, 46), (4, 6), (4, 10), (4, 12), 
             (5, 9), (5, 11), (6, 7), (6, 9), (6, 11), (7, 8), (7, 12), (8, 9), (8, 11), (8, 12), (9, 10), 
             (9, 12), (13, 18), (13, 21), (13, 23), (13, 24), (14, 16), (14, 20), (14, 21), (14, 22), (14, 25), 
             (15, 16), (15, 17), (15, 18), (15, 19), (15, 20), (15, 23), (15, 24), (15, 25), (16, 18), (16, 20), 
             (16, 23), (16, 25), (17, 22), (17, 23), (17, 24), (17, 25), (18, 20), (18, 22), (18, 25), (19, 20), 
             (19, 22), (19, 25), (20, 22), (20, 23), (20, 25), (21, 23), (21, 31), (22, 25), (23, 24), (23, 51), 
             (25, 33), (26, 28), (26, 29), (26, 30), (27, 28), (27, 30), (28, 30), (28, 31), (28, 56), (29, 30), 
             (30, 31), (32, 28), (32, 31), (32, 33), (32, 34), (32, 35), (32, 36), (32, 38), (33, 27), (33, 30), 
             (33, 31), (33, 34), (33, 36), (33, 38), (34, 35), (34, 37), (35, 26), (35, 31), (35, 36), (35, 38), 
             (35, 40), (36, 26), (36, 29), (36, 38), (37, 26), (37, 28), (37, 31), (37, 38), (38, 26), (38, 29), 
             (39, 40), (39, 43), (39, 44), (39, 48), (39, 49), (39, 51), (40, 41), (40, 45), (40, 48), (40, 49), 
             (41, 43), (41, 46), (41, 47), (41, 50), (42, 43), (42, 45), (42, 48), (42, 49), (43, 44), (43, 46), 
             (43, 48), (43, 50), (43, 51), (43, 52), (44, 48), (44, 49), (44, 50), (46, 47), (46, 48), (46, 50), 
             (47, 48), (48, 51), (49, 50), (49, 51), (52, 54), (52, 57), (52, 58), (53, 55), (54, 55), (54, 57), 
             (55, 57), (55, 58), (55, 61), (55, 63), (56, 59), (57, 61), (59, 60), (60, 61), (64, 53), (64, 59), 
             (64, 60), (64, 62), (65, 67), (65, 71), (65, 73), (65, 74), (65, 76), (66, 67), (66, 69), (66, 70), 
             (66, 71), (66, 74), (67, 68), (67, 73), (67, 75), (67, 76), (68, 70), (68, 74), (68, 75), (69, 71), 
             (69, 72), (69, 73), (70, 76), (71, 72), (71, 74), (71, 75), (71, 76), (71, 77), (72, 73), (72, 75), 
             (72, 77), (73, 74), (73, 77), (74, 77), (75, 77)]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Detect communities using the Louvain method
partition = community_louvain.best_partition(G)

# Create a dictionary to store the positions of nodes
pos = nx.spring_layout(G, seed=42)

# Adjust positions to keep communities close together
for community in set(partition.values()):
    nodes_in_community = [node for node in partition if partition[node] == community]
    subgraph = G.subgraph(nodes_in_community)
    subgraph_pos = nx.spring_layout(subgraph, seed=42)
    
    # Adjust positions to be close to the center of the community
    for node in subgraph_pos:
        pos[node] = subgraph_pos[node]

# Convert positions to a dictionary with node IDs as keys
layout = {node: {"x": float(pos[node][0]), "y": float(pos[node][1])} for node in pos}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Community Detection**: The `community_louvain.best_partition(G)` function is used to detect communities in the graph using the Louvain method.
2. **Graph Layout**: The `nx.spring_layout(G, seed=42)` function is used to generate a force-directed layout for the entire graph. The `seed=42` ensures reproducibility.
3. **Community Adjustment**: For each community, we generate a subgraph and compute its layout. We then adjust the positions of nodes within the community to be close to the center of the community.
4. **JSON Output**: The final layout is converted to a JSON format where each node is mapped to its `(x, y)` coordinates.

This script will output the graph layout in JSON format, which can be used for further visualization or analysis.