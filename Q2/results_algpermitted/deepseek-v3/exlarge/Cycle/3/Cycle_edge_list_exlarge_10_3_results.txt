To generate a layout for the graph that minimizes edge crossings, we can use the `graphviz` library, which provides a variety of layout algorithms. Specifically, we can use the `dot` layout algorithm, which is designed to minimize edge crossings in hierarchical graphs.

Below is the Python code that generates the layout for the given graph and outputs the positions in JSON format:

```python
import json
import graphviz

# Define the graph using the provided edge list
edge_list = [
    (0, 1), (0, 79), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), 
    (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), 
    (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), 
    (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), 
    (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), 
    (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), 
    (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), 
    (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), 
    (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), 
    (73, 74), (74, 75), (75, 76), (76, 77), (77, 78), (78, 79)
]

# Create a Graphviz graph
dot = graphviz.Graph()

# Add nodes and edges to the graph
for edge in edge_list:
    dot.edge(str(edge[0]), str(edge[1]))

# Use the 'dot' layout algorithm to compute the positions
dot.layout(prog='dot')

# Extract the positions of the nodes
positions = {}
for node in dot.body:
    if node.startswith('\t'):
        parts = node.strip().split()
        if len(parts) >= 3 and parts[0].isdigit():
            node_id = parts[0]
            x, y = float(parts[1]), float(parts[2])
            positions[node_id] = {'x': x, 'y': y}

# Output the positions in JSON format
print(json.dumps(positions, indent=4))
```

### Explanation:
1. **Graph Creation**: We create a `graphviz.Graph` object and add nodes and edges based on the provided edge list.
2. **Layout Calculation**: We use the `dot` layout algorithm to compute the positions of the nodes. The `dot` algorithm is particularly good at minimizing edge crossings in hierarchical graphs.
3. **Position Extraction**: We parse the output of the `dot` layout to extract the positions of the nodes.
4. **JSON Output**: Finally, we output the positions in JSON format.

### Output:
The output will be a JSON object where the keys are node IDs and the values are dictionaries containing the `x` and `y` coordinates of the nodes.

```json
{
    "0": {"x": 0.0, "y": 0.0},
    "1": {"x": 1.0, "y": 1.0},
    "2": {"x": 2.0, "y": 2.0},
    ...
    "79": {"x": 79.0, "y": 79.0}
}
```

This JSON object can be used to visualize the graph or for further processing.