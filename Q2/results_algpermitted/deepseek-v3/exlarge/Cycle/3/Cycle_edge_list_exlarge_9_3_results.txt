To generate a layout for the graph that minimizes edge crossings, we can use the `graphviz` library, which provides a variety of layout algorithms. Specifically, we can use the `dot` layout algorithm, which is designed to minimize edge crossings in hierarchical graphs.

Below is the Python code that generates the layout for the given graph and outputs the positions in JSON format:

```python
import json
import graphviz

# Define the graph using the provided edge list
edge_list = [
    (0, 1), (0, 78), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), 
    (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), 
    (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), 
    (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), 
    (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), 
    (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), 
    (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), 
    (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), 
    (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), 
    (73, 74), (74, 75), (75, 76), (76, 77), (77, 78)
]

# Create a Graphviz graph
dot = graphviz.Digraph()

# Add nodes and edges to the graph
for edge in edge_list:
    dot.edge(str(edge[0]), str(edge[1]))

# Use the 'dot' layout algorithm to generate positions
dot.format = 'json'
dot.layout(prog='dot')

# Extract the positions from the JSON output
json_data = dot.pipe().decode('utf-8')
graph_data = json.loads(json_data)

# Extract node positions
positions = {}
for obj in graph_data['objects']:
    if obj['name'] == 'node':
        for node in obj['nodes']:
            positions[node['name']] = {
                'x': node['pos'].split(',')[0],
                'y': node['pos'].split(',')[1]
            }

# Output the positions in JSON format
print(json.dumps(positions, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the `graphviz.Digraph()` class, and nodes and edges are added based on the provided edge list.
2. **Layout Algorithm**: The `dot` layout algorithm is used to generate the positions of the nodes. This algorithm is designed to minimize edge crossings in hierarchical graphs.
3. **JSON Output**: The positions of the nodes are extracted from the JSON output generated by Graphviz and formatted into a JSON object.

### Output:
The output will be a JSON object where each key is a node ID, and the value is a dictionary containing the `x` and `y` coordinates of the node's position.

```json
{
    "0": {
        "x": "x_coord",
        "y": "y_coord"
    },
    "1": {
        "x": "x_coord",
        "y": "y_coord"
    },
    ...
    "78": {
        "x": "x_coord",
        "y": "y_coord"
    }
}
```

Replace `"x_coord"` and `"y_coord"` with the actual coordinates generated by the `dot` layout algorithm.