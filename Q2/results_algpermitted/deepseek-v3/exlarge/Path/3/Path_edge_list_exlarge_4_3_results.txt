To generate a layout for the graph that minimizes edge crossings, we can use the `graphviz` library, which provides a variety of layout algorithms. Specifically, we can use the `dot` layout algorithm, which is designed to minimize edge crossings in hierarchical graphs.

Here is the Python code to generate the layout and output it in JSON format:

```python
import json
from graphviz import Graph

# Define the graph edges
edges = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), 
         (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), 
         (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), 
         (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), 
         (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), 
         (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), 
         (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), 
         (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), 
         (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73)]

# Create a Graphviz graph
g = Graph(format='json')

# Add nodes and edges to the graph
for edge in edges:
    g.edge(str(edge[0]), str(edge[1]))

# Generate the layout using the 'dot' algorithm
layout = g.pipe(format='json')

# Parse the JSON output
layout_json = json.loads(layout.decode('utf-8'))

# Extract the positions of the nodes
positions = {}
for node in layout_json['objects']:
    positions[node['name']] = (node['pos'].split(',')[0], node['pos'].split(',')[1])

# Output the positions in JSON format
print(json.dumps(positions, indent=4))
```

### Explanation:
1. **Graph Creation**: We create a `Graph` object using the `graphviz` library.
2. **Adding Edges**: We add the edges to the graph.
3. **Layout Generation**: We use the `dot` layout algorithm to generate the layout. The `pipe` method is used to get the layout in JSON format.
4. **Parsing JSON**: We parse the JSON output to extract the positions of the nodes.
5. **Output**: Finally, we print the positions in JSON format.

### Output:
The output will be a JSON object where the keys are the node IDs and the values are tuples representing the `(x, y)` coordinates of the nodes.

```json
{
    "0": ["x_coord", "y_coord"],
    "1": ["x_coord", "y_coord"],
    ...
    "73": ["x_coord", "y_coord"]
}
```

Replace `"x_coord"` and `"y_coord"` with the actual coordinates generated by the `dot` layout algorithm.