To generate a layout for the graph that minimizes edge crossings, we can use the `networkx` library to create the graph and apply a layout algorithm. The `networkx` library provides several layout algorithms, such as `spring_layout`, `circular_layout`, and `kamada_kawai_layout`. For minimizing edge crossings, the `spring_layout` algorithm is often a good choice.

Here is the Python code to generate the layout and output it in JSON format:

```python
import networkx as nx
import json

# Define the graph using the provided edge list
edge_list = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), 
             (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), 
             (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), 
             (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), 
             (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), 
             (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), 
             (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), 
             (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), 
             (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74)]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the spring layout algorithm
pos = nx.spring_layout(G)

# Convert the layout to a dictionary with node IDs as keys and positions as values
layout = {node: [float(pos[node][0]), float(pos[node][1])] for node in G.nodes()}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the provided edge list.
2. **Layout Generation**: The `spring_layout` algorithm is used to generate the positions of the nodes. This algorithm attempts to minimize edge crossings by simulating a physical system where nodes repel each other and edges act as springs.
3. **JSON Output**: The positions of the nodes are converted to a dictionary and then output in JSON format.

### Output:
The output will be a JSON object where each key is a node ID, and the value is a list containing the x and y coordinates of the node's position.

```json
{
    "0": [0.123, 0.456],
    "1": [0.234, 0.567],
    ...
    "74": [0.789, 0.890]
}
```

This JSON object can be used to visualize the graph or for further processing.