To generate a layout for the graph that minimizes edge crossings, we can use the `networkx` library to compute the layout and then output the positions in JSON format. Specifically, we can use the `spring_layout` algorithm, which is designed to minimize edge crossings by simulating a physical system where edges are springs and nodes repel each other.

Here is the Python script that accomplishes this:

```python
import networkx as nx
import json

# Define the graph using the provided edge list
edge_list = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), 
             (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), 
             (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), 
             (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), 
             (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), 
             (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), 
             (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), 
             (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), 
             (66, 67), (67, 68), (68, 69), (69, 70)]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute the layout using the spring layout algorithm
pos = nx.spring_layout(G, seed=42)  # seed for reproducibility

# Convert the positions to a dictionary with node IDs as keys and positions as values
layout = {node: list(coords) for node, coords in pos.items()}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the provided edge list.
2. **Layout Calculation**: The `spring_layout` function is used to compute the positions of the nodes. The `seed` parameter ensures that the layout is reproducible.
3. **JSON Output**: The positions are converted to a dictionary where the keys are node IDs and the values are the coordinates. This dictionary is then serialized to JSON format.

### Output:
The script will output the graph layout in JSON format, where each node is mapped to its position in 2D space. The positions are normalized to the range [0, 1] for both x and y coordinates.

You can run this script in a Python environment to generate the layout for the given graph.