To generate a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance, we can use the `networkx` library to compute the layout and then output the positions in JSON format. We'll use the `spring_layout` algorithm, which is designed to position nodes in such a way that the Euclidean distance between nodes approximates their graph-theoretic distance.

Here's the Python script to achieve this:

```python
import networkx as nx
import json

# Define the graph using the provided edge list
edge_list = [
    (0, 1), (0, 26), (1, 2), (1, 27), (2, 3), (2, 28), (3, 4), (3, 29), (4, 5), (4, 30), 
    (5, 6), (5, 31), (6, 7), (6, 32), (7, 8), (7, 33), (8, 9), (8, 34), (9, 10), (9, 35), 
    (10, 11), (10, 36), (11, 12), (11, 37), (12, 13), (12, 38), (13, 14), (13, 39), 
    (14, 15), (14, 40), (15, 16), (15, 41), (16, 17), (16, 42), (17, 18), (17, 43), 
    (18, 19), (18, 44), (19, 20), (19, 45), (20, 21), (20, 46), (21, 22), (21, 47), 
    (22, 23), (22, 48), (23, 24), (23, 49), (24, 25), (24, 50), (25, 51), (26, 27), 
    (26, 52), (27, 28), (27, 53), (28, 29), (28, 54), (29, 30), (29, 55), (30, 31), 
    (30, 56), (31, 32), (31, 57), (32, 33), (32, 58), (33, 34), (33, 59), (34, 35), 
    (34, 60), (35, 36), (35, 61), (36, 37), (36, 62), (37, 38), (37, 63), (38, 39), 
    (38, 64), (39, 40), (39, 65), (40, 41), (40, 66), (41, 42), (41, 67), (42, 43), 
    (42, 68), (43, 44), (43, 69), (44, 45), (44, 70), (45, 46), (45, 71), (46, 47), 
    (46, 72), (47, 48), (47, 73), (48, 49), (48, 74), (49, 50), (49, 75), (50, 51), 
    (50, 76), (51, 77), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), 
    (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), 
    (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74), 
    (74, 75), (75, 76), (76, 77)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute the layout using the spring layout algorithm
pos = nx.spring_layout(G, k=0.15, iterations=50)

# Convert the positions to a dictionary with node IDs as keys and positions as values
layout = {node: [float(pos[node][0]), float(pos[node][1])] for node in G.nodes()}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the provided edge list.
2. **Layout Calculation**: The `spring_layout` algorithm is used to compute the positions of the nodes. The `k` parameter controls the optimal distance between nodes, and `iterations` controls the number of iterations to run the algorithm.
3. **JSON Output**: The positions are converted to a dictionary where each node ID maps to its position. This dictionary is then serialized to JSON format.

### Output:
The output will be a JSON object where each key is a node ID, and the value is a list of two floats representing the x and y coordinates of the node's position.

```json
{
    "0": [0.123, 0.456],
    "1": [0.234, 0.567],
    ...
    "77": [0.789, 0.890]
}
```

This JSON can be used to visualize the graph or for further processing.