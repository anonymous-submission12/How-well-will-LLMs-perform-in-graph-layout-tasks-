To generate a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance, we can use the `networkx` library to create the graph and compute the layout using the `spring_layout` algorithm, which is designed to minimize the difference between Euclidean and graph-theoretic distances. The final layout will be output in JSON format.

Here is the Python script to achieve this:

```python
import networkx as nx
import json

# Define the graph using the provided edge list
edge_list = [
    (0, 1), (0, 25), (1, 2), (1, 26), (2, 3), (2, 27), (3, 4), (3, 28), (4, 5), (4, 29),
    (5, 6), (5, 30), (6, 7), (6, 31), (7, 8), (7, 32), (8, 9), (8, 33), (9, 10), (9, 34),
    (10, 11), (10, 35), (11, 12), (11, 36), (12, 13), (12, 37), (13, 14), (13, 38),
    (14, 15), (14, 39), (15, 16), (15, 40), (16, 17), (16, 41), (17, 18), (17, 42),
    (18, 19), (18, 43), (19, 20), (19, 44), (20, 21), (20, 45), (21, 22), (21, 46),
    (22, 23), (22, 47), (23, 24), (23, 48), (24, 49), (25, 26), (25, 50), (26, 27),
    (26, 51), (27, 28), (27, 52), (28, 29), (28, 53), (29, 30), (29, 54), (30, 31),
    (30, 55), (31, 32), (31, 56), (32, 33), (32, 57), (33, 34), (33, 58), (34, 35),
    (34, 59), (35, 36), (35, 60), (36, 37), (36, 61), (37, 38), (37, 62), (38, 39),
    (38, 63), (39, 40), (39, 64), (40, 41), (40, 65), (41, 42), (41, 66), (42, 43),
    (42, 67), (43, 44), (43, 68), (44, 45), (44, 69), (45, 46), (45, 70), (46, 47),
    (46, 71), (47, 48), (47, 72), (48, 49), (48, 73), (49, 74), (50, 51), (51, 52),
    (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60),
    (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68),
    (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute the layout using the spring layout algorithm
pos = nx.spring_layout(G, seed=42)  # seed for reproducibility

# Convert the layout to a dictionary with node IDs as keys and positions as values
layout = {node: [float(pos[node][0]), float(pos[node][1])] for node in G.nodes()}

# Output the layout in JSON format
print(json.dumps(layout, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the provided edge list.
2. **Layout Calculation**: The `spring_layout` algorithm is used to compute the positions of the nodes. This algorithm tries to minimize the difference between Euclidean distance and graph-theoretic distance.
3. **JSON Output**: The positions of the nodes are converted to a dictionary and then output in JSON format.

You can run this script to generate the graph layout in JSON format. The `seed` parameter in `spring_layout` ensures that the layout is reproducible.