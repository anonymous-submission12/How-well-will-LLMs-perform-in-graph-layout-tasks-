To generate a layout for the graph that minimizes edge crossings, we can use the `networkx` library to create the graph and then apply a layout algorithm such as the `spring_layout` or `kamada_kawai_layout`. The `spring_layout` is a force-directed layout that tries to minimize edge crossings by simulating physical forces between nodes.

Here is the Python code to generate the layout and output it in JSON format:

```python
import networkx as nx
import json

# Define the graph using the provided edge list
edge_list = [
    (0, 1), (0, 12), (1, 2), (1, 13), (2, 3), (2, 14), (3, 4), (3, 15), (4, 5), (4, 16), 
    (5, 6), (5, 17), (6, 7), (6, 18), (7, 8), (7, 19), (8, 9), (8, 20), (9, 10), (9, 21), 
    (10, 11), (10, 22), (11, 23), (12, 13), (12, 24), (13, 14), (13, 25), (14, 15), (14, 26), 
    (15, 16), (15, 27), (16, 17), (16, 28), (17, 18), (17, 29), (18, 19), (18, 30), (19, 20), 
    (19, 31), (20, 21), (20, 32), (21, 22), (21, 33), (22, 23), (22, 34), (23, 35), (24, 25), 
    (24, 36), (25, 26), (25, 37), (26, 27), (26, 38), (27, 28), (27, 39), (28, 29), (28, 40), 
    (29, 30), (29, 41), (30, 31), (30, 42), (31, 32), (31, 43), (32, 33), (32, 44), (33, 34), 
    (33, 45), (34, 35), (34, 46), (35, 47), (36, 37), (36, 48), (37, 38), (37, 49), (38, 39), 
    (38, 50), (39, 40), (39, 51), (40, 41), (40, 52), (41, 42), (41, 53), (42, 43), (42, 54), 
    (43, 44), (43, 55), (44, 45), (44, 56), (45, 46), (45, 57), (46, 47), (46, 58), (47, 59), 
    (48, 49), (48, 60), (49, 50), (49, 61), (50, 51), (50, 62), (51, 52), (51, 63), (52, 53), 
    (52, 64), (53, 54), (53, 65), (54, 55), (54, 66), (55, 56), (55, 67), (56, 57), (56, 68), 
    (57, 58), (57, 69), (58, 59), (58, 70), (59, 71), (60, 61), (61, 62), (62, 63), (63, 64), 
    (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the spring layout algorithm
layout = nx.spring_layout(G)

# Convert the layout to a dictionary with node IDs as keys and positions as values
layout_dict = {node: [float(pos[0]), float(pos[1])] for node, pos in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_dict, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the provided edge list.
2. **Layout Generation**: The `spring_layout` algorithm is used to generate the positions of the nodes. This algorithm tries to minimize edge crossings by simulating physical forces between nodes.
3. **JSON Output**: The layout is converted to a dictionary where each node ID maps to its position (x, y coordinates). This dictionary is then serialized to JSON format.

### Output:
The output will be a JSON object where each key is a node ID, and the value is a list containing the x and y coordinates of the node's position. This JSON object can be used for further processing or visualization in other tools.

```json
{
    "0": [0.123, 0.456],
    "1": [0.234, 0.567],
    ...
    "71": [0.987, 0.654]
}
```

This JSON output represents the positions of all nodes in the graph, which can be used to visualize the graph in a way that minimizes edge crossings.