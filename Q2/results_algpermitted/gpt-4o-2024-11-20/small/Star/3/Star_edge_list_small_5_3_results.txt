Here is a Python script that generates a layout for the provided graph using a force-directed layout algorithm (specifically the Fruchterman-Reingold algorithm) to minimize edge crossings. I use the `networkx` library for the layout computation but do not use it to visualize the graph. The result is a JSON-format output of the layout.

```python
import networkx as nx
import json

# Input graph data
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), 
    (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15),
    (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), 
    (0, 23), (0, 24)
]

# Create a graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute layout using the Fruchterman-Reingold force-directed algorithm
positions = nx.spring_layout(G)  # This minimizes edge crossings

# Convert the layout to JSON format
layout_json = json.dumps(positions, indent=4)

# Print the layout in JSON format
print(layout_json)
```

### Explanation:
1. **Graph Creation:** The edge list is used to create a `networkx` graph object `G`.
2. **Layout Algorithm:** The `spring_layout` function implements the Fruchterman-Reingold force-directed algorithm, which minimizes edge crossings.
3. **JSON Output:** The computed layout (nodes and their positions) is serialized into a JSON-friendly format with `json.dumps` for easy consumption by other applications.

### Output Example:
For the provided graph, the output will look something like this:
```json
{
    "0": [0.0, 0.0],
    "1": [0.45, -0.12],
    "2": [-0.32, 0.21],
    "3": [0.11, 0.41],
    ...
    "24": [-0.50, 0.30]
}
```

Each key corresponds to a node, and the value is a list of two numbers representing the position `(x, y)` of that node.

Before running the script, ensure you have the `networkx` library installed:
```bash
pip install networkx
```