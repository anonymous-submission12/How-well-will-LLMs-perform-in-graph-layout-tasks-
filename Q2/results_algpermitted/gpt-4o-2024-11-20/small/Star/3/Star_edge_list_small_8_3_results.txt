Here is the Python code to generate a graph layout using a layout algorithm (specifically `kamada_kawai_layout`) from NetworkX. The final output is a JSON representation of the layout positions:

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), 
    (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
    (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), 
    (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), 
    (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), 
    (0, 26), (0, 27)
]

# Create a graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using Kamada-Kawai algorithm
positions = nx.kamada_kawai_layout(G)

# Convert positions to a json-compatible format
positions_json = {node: position.tolist() for node, position in positions.items()}

# Output the layout as JSON
print(json.dumps(positions_json, indent=4))
```

### Explanation:
1. **Graph Construction:** The edge list is used to construct a graph using NetworkX.
2. **Layout Generation:** The `kamada_kawai_layout` algorithm minimizes edge crossings and is well-suited for this purpose.
3. **Conversion to JSON:** The computed positions are converted to JSON format using `tolist()` to ensure compatibility.
4. **Final Output:** The result is printed as a pretty-printed JSON string.

You can run the code to get the node positions in JSON format.