Here is a Python script to compute a graph layout for the given edge list. The script uses the `networkx` library to handle the graph and `kamada_kawai_layout` to compute positions for the nodes that minimize edge crossings. The positions are then serialized to JSON and returned as output.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), 
    (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), 
    (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), 
    (0, 23), (0, 24), (0, 25), (0, 26)
]

# Create a NetworkX graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute the layout using the Kamada-Kawai algorithm
layout = nx.kamada_kawai_layout(G)

# Convert the layout to a JSON-friendly format
layout_json = {node: {'x': pos[0], 'y': pos[1]} for node, pos in layout.items()}

# Print the layout in JSON format
print(json.dumps(layout_json, indent=2))
```

### Explanation:
1. **Edge List Input**:
   - The script takes the input edge list directly and creates a graph using the `networkx.Graph()` object.

2. **Kamada-Kawai Layout**:
   - The Kamada-Kawai layout algorithm reduces edge crossings through a force-directed approach, which often results in aesthetically pleasing layouts.

3. **Position Mapping**:
   - The layout positions are output as `(x, y)` pairs for each node. These are placed into a dictionary, where each node ID maps to its position.

4. **Output as JSON**:
   - The computed layout is serialized into JSON using the `json.dumps()` function.

The script ensures you can inspect the JSON-formatted coordinates (`x` and `y`) for each node, without relying on any visualization. Let me know if you need further modifications!