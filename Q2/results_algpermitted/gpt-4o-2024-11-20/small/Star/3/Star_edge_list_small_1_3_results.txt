Below is the Python code to generate a layout for the graph using the `pygraphviz` library, which provides access to Graphviz layout algorithms. The layout minimizes edge crossings and outputs the positions in JSON format.

```python
import pygraphviz as pgv
import json

def generate_graph_layout(edge_list):
    # Create a graph using pygraphviz
    graph = pgv.AGraph(strict=False, directed=False)
    
    # Add edges to the graph
    for edge in edge_list:
        graph.add_edge(edge[0], edge[1])
    
    # Use the 'dot' layout algorithm to minimize edge crossings
    graph.layout(prog='dot')
    
    # Extract node positions from the graph
    positions = {}
    for node in graph.nodes():
        pos = node.attr['pos']
        if pos:
            x, y = map(float, pos.split(','))
            positions[node] = {'x': x, 'y': y}
    
    # Convert positions to JSON format
    return json.dumps(positions, indent=4)

# Edge list provided
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9),
    (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17),
    (0, 18), (0, 19), (0, 20)
]

# Generate layout and print the result
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### Instructions:
1. Install the `pygraphviz` library if not already installed:
   ```bash
   pip install pygraphviz
   ```
2. Run the script to generate the graph layout in JSON format.

### Output:
The script will output the node positions in JSON format, where each node is represented by its coordinates (`x` and `y`).