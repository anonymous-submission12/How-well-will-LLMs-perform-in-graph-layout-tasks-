Below is the Python script that generates a layout for the given graph using the Fruchterman-Reingold force-directed algorithm, which maintains consistency between Euclidean distance and graph-theoretic distance. The output is in JSON format.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9),
    (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17),
    (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25),
    (0, 26), (0, 27), (0, 28), (0, 29)
]

# Create a graph using NetworkX
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Fruchterman-Reingold force-directed algorithm
layout = nx.spring_layout(G)

# Convert the layout to a JSON-serializable format
layout_json = {node: position.tolist() for node, position in layout.items()}

# Print the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the `networkx.Graph()` class and the provided edge list.
2. **Layout Algorithm**: The `spring_layout` function from NetworkX is used to compute the layout. This function implements the Fruchterman-Reingold force-directed algorithm.
3. **JSON Conversion**: The layout dictionary is converted to a JSON-serializable format using `tolist()` for NumPy arrays.
4. **Output**: The layout is printed in JSON format.

You can run this script in a Python environment to generate the layout for the given graph. The output will be a JSON object where each key is a node, and the value is a 2D position `[x, y]`.