Below is a Python script that generates a graph layout based on the edge list you provided. The script uses the `networkx` library for creating and positioning the graph nodes, and the `json` library to output the layout in JSON format. A spring layout algorithm is used for determining the positions of the nodes, which maintains consistency between the graph-theoretic distance and the Euclidean distance.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7),
    (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14),
    (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21),
    (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28)
]

# Create a graph using networkx
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate node positions using the spring layout
positions = nx.spring_layout(G)

# Convert positions to JSON format
positions_json = json.dumps(positions, indent=2)

# Print the JSON-formatted positions
print(positions_json)
```

This script computes the layout of the graph and outputs the positions of all nodes as a JSON string. The `spring_layout` function is chosen because it produces layouts that attempt to maintain consistency between Euclidean and graph-theoretic distances.

You can run this script in any Python environment where `networkx` is installed. It will provide you with the layout positions of the nodes in JSON format.