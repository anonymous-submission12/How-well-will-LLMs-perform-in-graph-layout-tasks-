Here is the Python script to generate a graph layout using the `networkx` library's `spring_layout` algorithm, which ensures consistency between Euclidean distance and graph-theoretic distance. The final output will be in JSON format, displaying the node positions.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), 
             (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), 
             (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), 
             (0, 23), (0, 24), (0, 25), (0, 26)]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using spring_layout
position = nx.spring_layout(G)

# Convert positions to JSON format
position_json = json.dumps(position)

# Print the layout in JSON format
print(position_json)
```

### Instructions:
1. Save the script in a `.py` file.
2. Run the script to obtain the graph layout in JSON format. The output will consist of the node positions as key-value pairs where the key is the node ID and the value is its coordinate `[x, y]`.

This code will give you the layout positions for all nodes in the graph based on the given edge list. These positions will maintain a balance between Euclidean and graph-theoretic distances. Please install `networkx` if not already installed in your Python environment.