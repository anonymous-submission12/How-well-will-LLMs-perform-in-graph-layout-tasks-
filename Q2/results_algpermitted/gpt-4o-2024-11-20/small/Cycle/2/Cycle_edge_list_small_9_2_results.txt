Here is the Python script to generate a layout for the given graph. The script uses the `networkx` library to compute the layout using the `spring_layout` algorithm, which ensures consistency between Euclidean distance and graph-theoretic distance. The final output is the graph layout in JSON format.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 28), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8),
    (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16),
    (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23),
    (23, 24), (24, 25), (25, 26), (26, 27), (27, 28)
]

# Create a graph using NetworkX
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute the layout using the spring layout algorithm
# The spring layout ensures consistency between Euclidean and graph-theoretic distances
positions = nx.spring_layout(G)

# Convert the positions to a JSON-serializable format
positions_json = {node: pos.tolist() for node, pos in positions.items()}

# Output the layout in JSON format
print(json.dumps(positions_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The `networkx.Graph()` object is created, and the edges from the provided edge list are added to it.
2. **Spring Layout**: The `spring_layout` algorithm is used to compute the positions of the nodes. This algorithm models the graph as a physical system where nodes repel each other and edges act as springs, ensuring that the layout reflects the graph-theoretic distances.
3. **JSON Serialization**: The positions are converted to a JSON-serializable format using `tolist()` for the NumPy arrays.
4. **Output**: The layout is printed in JSON format with indentation for readability.

You can run this script in a Python environment with the `networkx` library installed. The output will be the node positions in JSON format.