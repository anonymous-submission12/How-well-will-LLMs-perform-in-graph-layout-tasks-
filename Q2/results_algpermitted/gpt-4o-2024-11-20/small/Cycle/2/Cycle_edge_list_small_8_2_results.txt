Below is the Python code that accepts the given edge list as input, computes a graph layout using an algorithm that maintains consistency between Euclidean distance and graph-theoretic distance (e.g., the spring layout algorithm), and outputs the layout in JSON format:

```python
import networkx as nx
import json

# Edge list for the graph
edge_list = [
    (0, 1), (0, 27), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7),
    (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14),
    (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20),
    (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27)
]

# Create the graph object
graph = nx.Graph()
graph.add_edges_from(edge_list)

# Create a layout using the spring layout algorithm (force-directed placement)
layout = nx.spring_layout(graph)

# Convert the layout to a JSON serializable format (dictionary of positions)
layout_json = {str(node): position.tolist() for node, position in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Steps in the Code:
1. **Graph Construction**: We use `networkx` to construct a graph from the given edge list.
2. **Spring Layout**: The `spring_layout` algorithm in `networkx` ensures that nodes are positioned such that Euclidean distances roughly correspond to graph-theoretic distances.
3. **JSON Serialization**: Since `numpy` arrays aren't JSON serializable, we convert the positions to standard Python lists using `.tolist()`.
4. **Output**: The resulting layout is printed in JSON format.

Please ensure that you have the `networkx` library installed before running this script. You can install it using `pip install networkx` if needed.