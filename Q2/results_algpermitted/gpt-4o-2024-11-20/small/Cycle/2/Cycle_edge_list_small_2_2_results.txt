Below is the Python script that generates a layout for the given graph. The script uses the Fruchterman-Reingold force-directed algorithm provided by the `NetworkX` library to compute positions for the nodes, as it maintains consistency between Euclidean distance and graph-theoretic distance.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 21), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8),
    (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16),
    (16, 17), (17, 18), (18, 19), (19, 20), (20, 21)
]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using Fruchterman-Reingold algorithm
positions = nx.spring_layout(G)  # Spring layout uses the force-directed algorithm

# Convert the positions to a dictionary of JSON serializable format
positions_json = {node: pos.tolist() for node, pos in positions.items()}

# Output the graph layout as JSON
print(json.dumps(positions_json, indent=4))
```

### Explanation:
1. **Graph Creation**: We use NetworkX to create a graph from the provided edge list.
2. **Layout Calculation**: The `spring_layout` function in NetworkX computes positions for the nodes based on the Fruchterman-Reingold algorithm.
3. **JSON Serialization**: The positions generated by `spring_layout` are in a NumPy array format. We convert them to lists to make them JSON-serializable.
4. **Output**: The script outputs the node positions in JSON format.

You can run this script and get a JSON file that contains the layout of the graph, where each node is mapped to its position. This result can be used for further processing or visualization in other tools.