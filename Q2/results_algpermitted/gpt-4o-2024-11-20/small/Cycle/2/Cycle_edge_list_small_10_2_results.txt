Here is the Python script to generate a layout for the given graph. The layout ensures consistency between Euclidean distance and graph-theoretic distance by using the `spring_layout` algorithm from the `networkx` library. The output is in JSON format.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 29), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), 
    (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), 
    (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), 
    (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the spring layout algorithm
layout = nx.spring_layout(G)

# Convert the layout to a JSON-serializable format
layout_json = {node: pos.tolist() for node, pos in layout.items()}

# Print the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The `networkx` library is used to create a graph from the provided edge list.
2. **Spring Layout**: The `spring_layout` function is used to compute the positions of the nodes. This algorithm simulates a force-directed layout, ensuring that the Euclidean distances between nodes are consistent with their graph-theoretic distances.
3. **JSON Serialization**: The positions are converted to a JSON-serializable format (lists instead of NumPy arrays) and then serialized to JSON using the `json.dumps` function.
4. **Output**: The final output is printed in JSON format, which contains the positions of the nodes.

You can run this script in a Python environment to generate the layout for the given graph.