Below is the Python script that generates a layout for the given graph using the Kamada-Kawai layout algorithm, which ensures consistency between Euclidean distance and graph-theoretic distance. The output is in JSON format.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 23), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), 
    (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), 
    (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Kamada-Kawai algorithm
layout = nx.kamada_kawai_layout(G)

# Convert the layout to a JSON-serializable format
layout_json = {node: list(pos) for node, pos in layout.items()}

# Print the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The `networkx` library is used to create a graph from the provided edge list.
2. **Kamada-Kawai Layout**: The `kamada_kawai_layout` function is used to compute the layout. This algorithm is designed to maintain consistency between Euclidean and graph-theoretic distances.
3. **JSON Serialization**: The layout is converted into a JSON-serializable format by converting the positions (which are NumPy arrays) into lists.
4. **Output**: The layout is printed in JSON format with indentation for readability.

You can run this script in a Python environment with `networkx` installed. The output will be the node positions in JSON format.