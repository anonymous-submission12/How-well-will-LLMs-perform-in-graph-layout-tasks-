Below is the Python code to generate a layout for the graph using the `pygraphviz` library, which provides access to Graphviz layout algorithms. The layout minimizes edge crossings, and the final output is returned in JSON format.

```python
import pygraphviz as pgv
import json

def generate_graph_layout(edge_list):
    # Create a directed graph using pygraphviz
    graph = pgv.AGraph(strict=False, directed=False)

    # Add edges to the graph
    for edge in edge_list:
        graph.add_edge(edge[0], edge[1])

    # Use the 'dot' layout algorithm to minimize edge crossings
    graph.layout(prog='dot')

    # Extract node positions from the layout
    positions = {}
    for node in graph.nodes():
        pos = node.attr['pos']
        if pos:
            x, y = map(float, pos.split(','))
            positions[node] = {'x': x, 'y': y}

    # Convert positions to JSON format
    return json.dumps(positions, indent=4)

# Edge list provided
edge_list = [
    (0, 1), (0, 21), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7),
    (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14),
    (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21)
]

# Generate layout and print the result
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Graph Creation**: The `pygraphviz.AGraph` class is used to create a graph object.
2. **Edge Addition**: The edges from the provided edge list are added to the graph.
3. **Layout Algorithm**: The `dot` layout algorithm is applied to minimize edge crossings.
4. **Node Positions**: The positions of nodes are extracted from the layout and stored in a dictionary.
5. **JSON Output**: The positions are converted to JSON format for the final output.

### Requirements:
- Install the `pygraphviz` library: `pip install pygraphviz`.
- Ensure Graphviz is installed on your system, as `pygraphviz` depends on it.

The output will be a JSON object containing the positions of each node in the graph.