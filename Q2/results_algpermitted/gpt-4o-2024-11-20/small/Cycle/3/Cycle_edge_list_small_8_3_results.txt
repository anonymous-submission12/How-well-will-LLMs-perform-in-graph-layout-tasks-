Below is the Python script that generates a layout for the given graph using the `pygraphviz` library, which provides graph layout algorithms to minimize edge crossings. The output is a JSON representation of the graph layout.

```python
import pygraphviz as pgv
import json

def generate_graph_layout(edge_list):
    # Create a directed graph using pygraphviz
    graph = pgv.AGraph(strict=False, directed=False)
    
    # Add edges to the graph
    for edge in edge_list:
        graph.add_edge(edge[0], edge[1])
    
    # Use the 'dot' layout algorithm to minimize edge crossings
    graph.layout(prog='dot')
    
    # Extract node positions from the graph
    positions = {}
    for node in graph.nodes():
        pos = node.attr['pos']
        if pos:
            x, y = map(float, pos.split(','))
            positions[node] = {'x': x, 'y': y}
    
    # Convert positions to JSON format
    return json.dumps(positions, indent=4)

# Edge list provided in the problem
edge_list = [
    (0, 1), (0, 27), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), 
    (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), 
    (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), 
    (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27)
]

# Generate the graph layout
layout_json = generate_graph_layout(edge_list)

# Print the layout in JSON format
print(layout_json)
```

### Notes:
1. **Dependencies**: Ensure you have the `pygraphviz` library installed. You can install it using `pip install pygraphviz`. Additionally, Graphviz must be installed on your system for `pygraphviz` to work.
2. **Output**: The script outputs the node positions in JSON format, where each node is represented by its coordinates (`x` and `y`).
3. **Layout Algorithm**: The `dot` layout algorithm is used, which is suitable for minimizing edge crossings in hierarchical or directed graphs. You can experiment with other layout algorithms like `neato`, `fdp`, or `sfdp` if needed.