Below is the Python script that generates a layout for the graph using the `pygraphviz` library, which provides graph layout algorithms to minimize edge crossings. The output is a JSON representation of the graph layout.

```python
import pygraphviz as pgv
import json

def generate_graph_layout(edge_list):
    # Create a graph using PyGraphviz
    graph = pgv.AGraph(strict=False, directed=False)
    
    # Add edges to the graph
    for edge in edge_list:
        graph.add_edge(edge[0], edge[1])
    
    # Use the 'dot' layout algorithm to minimize edge crossings
    graph.layout(prog='dot')
    
    # Extract node positions from the graph
    positions = {}
    for node in graph.nodes():
        pos = node.attr['pos']
        if pos:
            x, y = map(float, pos.split(','))
            positions[node] = {'x': x, 'y': y}
    
    # Convert positions to JSON format
    return json.dumps(positions, indent=4)

# Edge list provided
edge_list = [
    (0, 1), (0, 29), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8),
    (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16),
    (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24),
    (24, 25), (25, 26), (26, 27), (27, 28), (28, 29)
]

# Generate layout and print the JSON output
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### Instructions:
1. Install the `pygraphviz` library if not already installed:
   ```bash
   pip install pygraphviz
   ```
2. Run the script to generate the graph layout in JSON format.

### Output:
The script will output the node positions in JSON format, where each node is represented by its coordinates (`x` and `y`).