Below is the Python code to generate a layout for the given graph using the `pygraphviz` library, which provides access to Graphviz layout algorithms. The layout minimizes edge crossings, and the final output is in JSON format.

```python
import pygraphviz as pgv
import json

def generate_graph_layout(edge_list):
    # Create a directed graph using pygraphviz
    graph = pgv.AGraph(strict=False, directed=False)
    
    # Add edges to the graph
    for edge in edge_list:
        graph.add_edge(edge[0], edge[1])
    
    # Use the 'dot' layout algorithm to minimize edge crossings
    graph.layout(prog='dot')
    
    # Extract node positions from the graph
    positions = {}
    for node in graph.nodes():
        pos = node.attr['pos']
        if pos:
            x, y = map(float, pos.split(','))
            positions[node] = {'x': x, 'y': y}
    
    # Convert positions to JSON format
    return json.dumps(positions, indent=4)

# Input edge list
edge_list = [(0, 1), (0, 20), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), 
             (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), 
             (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20)]

# Generate layout
layout_json = generate_graph_layout(edge_list)

# Print the layout in JSON format
print(layout_json)
```

### Instructions:
1. Install the `pygraphviz` library if not already installed:
   ```bash
   pip install pygraphviz
   ```
2. Run the script to generate the graph layout in JSON format.

The output will be a JSON object containing the positions of each node in the graph, with coordinates `x` and `y`.