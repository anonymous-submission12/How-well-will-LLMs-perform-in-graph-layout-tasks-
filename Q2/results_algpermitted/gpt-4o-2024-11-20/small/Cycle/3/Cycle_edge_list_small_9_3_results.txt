Below is a Python code script that uses the `graph-tool` library to generate a graph layout that minimizes edge crossings. The code outputs the layout positions in JSON format.

```python
import json
from graph_tool.all import Graph, sfdp_layout

# Define the edge list
edge_list = [(0, 1), (0, 28), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), 
             (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), 
             (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), 
             (25, 26), (26, 27), (27, 28)]

# Create a graph
graph = Graph(directed=False)

# Add edges to the graph
vertices = {}
for edge in edge_list:
    for vertex in edge:
        if vertex not in vertices:
            vertices[vertex] = graph.add_vertex()
    graph.add_edge(vertices[edge[0]], vertices[edge[1]])

# Generate a layout using the sfdp algorithm
position = sfdp_layout(graph)

# Convert layout to JSON format
layout_positions = {
    int(vertex): (float(position[vertex][0]), float(position[vertex][1]))
    for vertex in graph.vertices()
}

# Print the layout positions in JSON format
print(json.dumps(layout_positions, indent=2))
```

### Key Details
- **Graph-tool library**: The `graph-tool` library is used to generate graph layouts using the `sfdp_layout`, which is suitable for minimizing edge crossings and producing aesthetically pleasing layouts.
- **Edge List Input**: The edge list is explicitly defined and is used to construct the graph.
- **Output**: The final graph layout coordinates are outputted in JSON format, with vertices as keys and their 2D Cartesian positions as values.

Make sure you have the `graph-tool` library installed to execute this code. You can install it via `sudo apt-get install python3-graph-tool` or refer to its documentation for installation if you're on a different platform.