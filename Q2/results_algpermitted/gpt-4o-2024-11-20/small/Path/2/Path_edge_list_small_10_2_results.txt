Below is the Python script that generates a layout for the graph using the `spring_layout` algorithm from the `networkx` library. The layout ensures consistency between Euclidean distance and graph-theoretic distance. The final output is the graph layout in JSON format.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9),
    (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16),
    (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23),
    (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the spring layout algorithm
positions = nx.spring_layout(G)

# Convert the positions to JSON format
positions_json = json.dumps(positions)

# Print the JSON output
print(positions_json)
```

### Explanation:
1. **Graph Creation**: The `networkx` library is used to create a graph from the provided edge list.
2. **Spring Layout**: The `spring_layout` algorithm is used to compute the positions of nodes. This algorithm models the graph as a physical system of springs, ensuring that the Euclidean distances between nodes are proportional to their graph-theoretic distances.
3. **JSON Conversion**: The positions dictionary is converted to JSON format using the `json.dumps` function.
4. **Output**: The script prints the JSON representation of the graph layout.

You can run this script in a Python environment to generate the layout for the given graph.