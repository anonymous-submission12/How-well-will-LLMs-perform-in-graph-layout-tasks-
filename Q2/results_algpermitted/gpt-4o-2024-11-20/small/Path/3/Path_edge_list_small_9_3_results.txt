Here's the Python code to generate a layout for the graph using an existing graph layout algorithm. This will use the `networkx` library to calculate the layout, and the final output will be in JSON format.

```python
import networkx as nx
import json

# Input graph data in the form of edge_list
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8),
    (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15),
    (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22),
    (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28)
]

# Create a graph using NetworkX
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute a layout for the graph using a layout algorithm
# spring_layout is used here as it minimizes edge crossings and simulates a force-directed layout
layout = nx.spring_layout(G)

# Convert the generated layout to a JSON-friendly format
layout_json = {node: list(coords) for node, coords in layout.items()}

# Print the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:

1. **`networkx` Library**: The `networkx` library is used to model the graph.
2. **Spring Layout**: The `spring_layout` function uses a force-directed algorithm to calculate the positions of the graph nodes and minimize edge crossings.
3. **JSON-friendly Format**: Since JSON cannot serialize NumPy arrays or other non-primitive types, the layout is converted into a dictionary with node IDs as keys and their positions (lists of coordinates) as values.
4. **Output**: The final layout is printed in JSON format.

This script does not use visualization libraries for displaying the graph. Instead, it focuses on computing and outputting the layout in the specified format. Make sure you have the `networkx` library installed before running the script.