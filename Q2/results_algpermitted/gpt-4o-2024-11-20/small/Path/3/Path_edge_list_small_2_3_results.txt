To produce a layout for the graph that minimizes edge crossings, we can use Python libraries such as `networkx`. Specifically, `networkx` provides layout algorithms like `spring_layout` that arrange nodes in the graph to reduce edge crossings. Below is the Python code for generating the layout of the graph and outputting it in JSON format.

```python
import json
import networkx as nx

# Input edge list
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), 
    (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), 
    (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), 
    (19, 20), (20, 21)
]

# Create a graph using the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout positions using the spring layout algorithm
layout = nx.spring_layout(G)

# Convert the layout to JSON format
layout_json = {str(node): position.tolist() for node, position in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Notes:
1. **Spring Layout Algorithm:** `spring_layout` positions nodes using force-directed placement, which minimizes edge crossings and ensures a visually appealing distribution of nodes based on simulated physics.
2. **JSON Conversion:** Networkx's layout output is a dictionary with nodes as keys and positions as values. We ensure positions are serializable into JSON by converting NumPy arrays to Python lists (`position.tolist()`).
3. The final result is printed as a JSON object for further use.