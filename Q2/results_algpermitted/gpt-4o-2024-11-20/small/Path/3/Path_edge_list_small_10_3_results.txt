Here is a Python script to calculate the graph layout using the `pygraphviz` library's layout algorithms, which are known to minimize edge crossings. The final layout positions for nodes will be returned in JSON format.

```python
import pygraphviz as pgv
import json

# Define the graph data (edge list)
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), 
    (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), 
    (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), 
    (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29)
]

# Initialize an AGraph (Graph Object) with pygraphviz
graph = pgv.AGraph(strict=False, directed=False)

# Add edges to the graph
for edge in edge_list:
    graph.add_edge(edge[0], edge[1])

# Use the 'dot' layout algorithm to minimize edge crossings
# You can also experiment with other layout algorithms like 'neato', 'fdp', 'sfdp', etc.
graph.layout(prog='dot')

# Retrieve the positions of nodes
positions = {}
for node in graph.nodes():
    # Extract node position (pos attribute as "x,y" coordinates)
    pos = node.attr['pos']
    if pos:  # Position exists
        x, y = map(float, pos.split(','))
        positions[node] = {'x': x, 'y': y}

# Convert positions to JSON format
positions_json = json.dumps(positions, indent=4)

# Print the layout JSON
print(positions_json)
```

### Notes:
- You need to install the `pygraphviz` library. You can do so via pip:
  ```
  pip install pygraphviz
  ```
- Ensure that Graphviz is installed on your system, as `pygraphviz` uses it under the hood.
- The `dot` algorithm was used here because it is designed for minimizing edge crossings in hierarchical graphs. However, you can experiment with other algorithms (`neato`, `fdp`, etc.) depending on your graph structure and visualization needs.
