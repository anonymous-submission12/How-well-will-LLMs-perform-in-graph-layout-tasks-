Here is the Python script to generate a graph layout that minimizes edge crossings using the `pygraphviz` library. The output is in JSON format.

```python
import pygraphviz as pgv
import json

def generate_graph_layout(edge_list):
    # Create a directed graph using pygraphviz
    graph = pgv.AGraph(strict=False, directed=False)

    # Add edges to the graph
    for edge in edge_list:
        graph.add_edge(edge[0], edge[1])

    # Use the 'dot' layout algorithm to minimize edge crossings
    graph.layout(prog='dot')

    # Extract node positions from the graph
    positions = {}
    for node in graph.nodes():
        pos = node.attr['pos']
        if pos:
            x, y = map(float, pos.split(','))
            positions[node] = {'x': x, 'y': y}

    # Convert positions to JSON format
    return json.dumps(positions, indent=4)

# Edge list provided
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9),
    (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16),
    (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23),
    (23, 24), (24, 25), (25, 26), (26, 27)
]

# Generate layout and print the result
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### Notes:
1. The script uses the `pygraphviz` library to compute the graph layout. Ensure you have `pygraphviz` installed (`pip install pygraphviz`).
2. The `dot` layout algorithm is used, which is suitable for minimizing edge crossings in hierarchical or directed graphs.
3. The output is a JSON object where each node is mapped to its `x` and `y` coordinates.

Let me know if you need further assistance!