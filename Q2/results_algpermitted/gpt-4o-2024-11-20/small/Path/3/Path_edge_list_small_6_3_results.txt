Here's the Python script that generates a layout for the given graph using an existing layout algorithm (e.g., the spring layout algorithm) to minimize edge crossings. The output is printed in JSON format.

```python
import json
import networkx as nx

# Define the graph edges
edges = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), 
    (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), 
    (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25)
]

# Create a graph from the edges
graph = nx.Graph()
graph.add_edges_from(edges)

# Compute the spring layout to minimize edge crossings
layout = nx.spring_layout(graph)

# Convert the layout to a JSON-serializable format
layout_json = {node: list(pos) for node, pos in layout.items()}

# Print the layout in JSON format
print(json.dumps(layout_json, indent=2))
```

### How It Works:
1. **Graph Definition**: The graph is created using the edge list provided.
2. **Spring Layout Algorithm**: The `networkx.spring_layout` method is used to compute a layout that typically minimizes edge crossings. This is based on a force-directed algorithm.
3. **Serialization**: The computed layout positions (dict with nodes and their positions) are converted to a JSON-serializable format.
4. **Output**: The final positions of the nodes are printed in JSON format.

You can run this script to obtain the layout for your graph in JSON format.