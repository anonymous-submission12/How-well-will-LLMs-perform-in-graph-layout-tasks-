Below is the Python script that generates a layout for the given graph while keeping the community structure clear. The script uses the `networkx` library for graph representation and the `community` module for community detection. The layout is generated using the `spring_layout` algorithm, which is adjusted to reflect the community structure.

```python
import networkx as nx
import community as community_louvain
import json

# Input graph data
edge_list = [
    (0, 2), (0, 3), (0, 4), (0, 12), (1, 3), (1, 4), (1, 5), (1, 6), (1, 12), (1, 16),
    (2, 3), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 13), (3, 18), (4, 5), (4, 6),
    (5, 9), (6, 7), (7, 8), (7, 9), (7, 10), (7, 11), (7, 13), (8, 9), (8, 10), (8, 12),
    (8, 13), (9, 10), (9, 11), (9, 13), (10, 11), (10, 12), (11, 12), (11, 13), (11, 18),
    (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (14, 20), (15, 16), (15, 17), (15, 18),
    (15, 19), (15, 20), (16, 17), (16, 18), (16, 19), (17, 18), (17, 19), (17, 20), (18, 19),
    (18, 20), (19, 20)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Detect communities using the Louvain method
partition = community_louvain.best_partition(G)

# Generate a spring layout for the graph
# The positions are adjusted to reflect the community structure
pos = nx.spring_layout(G, seed=42)  # Use a fixed seed for reproducibility

# Adjust positions to keep communities clear
# Nodes in the same community are placed closer together
community_positions = {}
for node, community in partition.items():
    if community not in community_positions:
        community_positions[community] = []
    community_positions[community].append(node)

# Scale positions within each community
for community, nodes in community_positions.items():
    subgraph = G.subgraph(nodes)
    sub_pos = nx.spring_layout(subgraph, seed=42)
    for node in nodes:
        pos[node] = sub_pos[node]

# Convert the layout to JSON format
layout_json = json.dumps(pos)

# Output the layout in JSON format
print(layout_json)
```

### Explanation:
1. **Graph Creation**: The graph is created using the `networkx` library from the provided edge list.
2. **Community Detection**: The Louvain method (via the `community` module) is used to detect communities in the graph.
3. **Spring Layout**: A spring layout is generated for the graph, and nodes within the same community are placed closer together by generating sub-layouts for each community.
4. **JSON Output**: The final layout is converted to JSON format and printed.

This script does not visualize the graph but provides the layout in JSON format, which can be used for further processing or visualization in other tools.