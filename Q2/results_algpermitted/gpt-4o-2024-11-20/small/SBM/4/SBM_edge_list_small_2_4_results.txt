Below is the Python script that generates a graph layout while preserving the community structure. The script uses the `networkx` library for graph manipulation and the `community` module for community detection. The layout is computed using the `spring_layout` algorithm, which is suitable for visualizing community structures.

```python
import networkx as nx
import community as community_louvain
import json

# Input graph data
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 5), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), 
    (2, 3), (2, 5), (2, 6), (3, 5), (3, 6), (3, 22), (4, 5), (4, 6), (5, 6), 
    (5, 21), (7, 9), (7, 10), (7, 11), (7, 13), (8, 9), (8, 13), (8, 17), 
    (10, 12), (10, 13), (11, 12), (11, 13), (12, 13), (13, 18), (14, 15), 
    (14, 16), (14, 17), (14, 18), (14, 20), (15, 17), (15, 20), (16, 17), 
    (16, 18), (16, 20), (17, 18), (17, 20), (18, 19), (18, 20), (18, 21), 
    (21, 22), (21, 25), (21, 26), (21, 27), (22, 23), (22, 24), (22, 25), 
    (22, 26), (22, 27), (23, 24), (23, 25), (23, 26), (24, 25), (24, 26), 
    (24, 27), (25, 26), (25, 27)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Detect communities using the Louvain method
partition = community_louvain.best_partition(G)

# Assign nodes to their communities
communities = {}
for node, community in partition.items():
    if community not in communities:
        communities[community] = []
    communities[community].append(node)

# Generate a layout using spring_layout
pos = nx.spring_layout(G)

# Prepare the output in JSON format
layout_json = {node: {"x": pos[node][0], "y": pos[node][1], "community": partition[node]} for node in G.nodes}

# Output the layout as JSON
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The script creates a graph `G` using the `networkx` library and populates it with the provided edge list.
2. **Community Detection**: The `community_louvain.best_partition` function is used to detect communities in the graph. Each node is assigned to a community.
3. **Layout Generation**: The `spring_layout` algorithm is used to compute positions for the nodes. This algorithm is well-suited for visualizing community structures.
4. **JSON Output**: The final layout is output as a JSON object, where each node has its `x` and `y` coordinates and its community label.

### Output Format:
The output JSON will look like this:
```json
{
    "0": {"x": 0.123, "y": -0.456, "community": 0},
    "1": {"x": -0.789, "y": 0.123, "community": 0},
    ...
}
```

You can run this script to generate the layout for the given graph.