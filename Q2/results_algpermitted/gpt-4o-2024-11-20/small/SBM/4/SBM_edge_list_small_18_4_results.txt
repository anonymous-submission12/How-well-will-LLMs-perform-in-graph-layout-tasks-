Below is the Python code which processes the provided edge list, detects the community structure using the Louvain method (from `community` package), assigns nodes to communities, generates a graph layout using the Fruchterman-Reingold force-directed algorithm, and outputs the layout in JSON format:

```python
import json
import networkx as nx
import community as community_louvain  # pip install python-louvain

def generate_community_layout(edge_list):
    # Step 1: Create a graph from the edge list
    G = nx.Graph()
    G.add_edges_from(edge_list)

    # Step 2: Detect communities using the Louvain method
    partition = community_louvain.best_partition(G)

    # Step 3: Assign each node to its community (used to guide layout)
    communities = {}
    for node, community_id in partition.items():
        if community_id not in communities:
            communities[community_id] = []
        communities[community_id].append(node)

    # Step 4: Generate the graph layout
    pos = nx.spring_layout(G, seed=42, scale=3)  # Fruchterman-Reingold (force-directed layout)

    # Output the layout in JSON format
    graph_layout_json = json.dumps({node: pos[node] for node in G.nodes()}, indent=4)

    return graph_layout_json

# The input edge list
edge_list = [
    (0, 1), (0, 2), (0, 4), (0, 5), (0, 6), (0, 7), (0, 9), (1, 2), (1, 4), (1, 5), 
    (1, 6), (1, 8), (1, 9), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (3, 4), (3, 5), 
    (3, 6), (3, 8), (4, 6), (4, 7), (4, 9), (5, 7), (5, 8), (5, 9), (5, 23), (6, 7), 
    (6, 9), (6, 23), (7, 8), (7, 9), (8, 9), (10, 11), (10, 12), (10, 14), (10, 15), 
    (10, 17), (11, 12), (11, 13), (11, 14), (11, 15), (11, 17), (11, 18), (11, 19), 
    (12, 13), (12, 18), (12, 19), (13, 14), (13, 15), (13, 16), (13, 17), (13, 18), 
    (13, 19), (13, 22), (13, 23), (14, 15), (14, 17), (14, 18), (14, 19), (15, 17),
    (15, 19), (16, 17), (16, 18), (16, 19), (17, 18), (18, 19), (20, 21), (20, 22), 
    (20, 23), (20, 24), (20, 25), (20, 26), (20, 28), (21, 22), (21, 23), (21, 24), 
    (21, 26), (21, 27), (22, 23), (22, 24), (22, 25), (22, 26), (22, 27), (22, 28), 
    (23, 24), (23, 26), (23, 27), (23, 28), (24, 25), (24, 28), (25, 26), (25, 28), 
    (26, 27), (26, 28), (27, 28)
]

# Generate the graph layout and print the JSON output
graph_layout_json = generate_community_layout(edge_list)
print(graph_layout_json)
```

### Explanation of the Script:
1. **Graph Creation:**
   - The `networkx.Graph` is created using the provided edge list.

2. **Community Detection:**
   - The Louvain community detection algorithm is used to determine community structure. Each node is assigned to a community (detected in the `partition` object).

3. **Graph Layout:**
   - Force-directed layout (`spring_layout`) is used to position nodes. The layout algorithm automatically places nodes closer together based on their connections, making communities visually clear.

4. **Output as JSON:**
   - The dictionary of node positions (`pos`) is serialized into JSON format with indentation for readability.

### Example Output:
The script will produce an output JSON structure similar to the following:
```json
{
    "0": [1.243, -0.882],
    "1": [1.215, -0.876],
    ...
    "28": [0.234, 1.145]
}
```