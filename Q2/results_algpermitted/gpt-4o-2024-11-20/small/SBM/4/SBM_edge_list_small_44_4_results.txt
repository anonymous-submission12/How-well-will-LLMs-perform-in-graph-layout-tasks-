Below is the Python script that generates a layout for the given graph while keeping the community structure clear. The script uses the `networkx` library for graph representation and community detection, and the `community` module for modularity-based community detection. The final output is a JSON object containing the layout.

```python
import networkx as nx
import json
from community import community_louvain

def generate_graph_layout(edge_list):
    # Create a graph from the edge list
    G = nx.Graph()
    G.add_edges_from(edge_list)
    
    # Detect communities using the Louvain method
    partition = community_louvain.best_partition(G)
    
    # Assign each node to its community
    communities = {}
    for node, community in partition.items():
        if community not in communities:
            communities[community] = []
        communities[community].append(node)
    
    # Generate a layout for the graph
    # Use the spring layout for better visualization of community structure
    pos = nx.spring_layout(G, k=0.15, seed=42)  # k controls spacing between nodes
    
    # Convert the layout to JSON format
    layout_json = {node: pos[node] for node in G.nodes()}
    
    return json.dumps(layout_json, indent=4)

# Input edge list
edge_list = [
    (0, 1), (0, 2), (0, 4), (0, 5), (1, 3), (1, 5), (1, 6), (1, 7), (2, 5), (2, 6), (2, 13), (2, 19), (2, 23),
    (3, 4), (3, 5), (3, 6), (3, 7), (3, 13), (4, 5), (4, 6), (4, 7), (5, 6), (5, 13), (5, 21), (6, 7), (8, 9),
    (8, 10), (8, 11), (8, 12), (9, 11), (9, 12), (9, 13), (9, 14), (10, 11), (10, 12), (10, 13), (10, 14), (10, 20),
    (11, 12), (11, 13), (11, 14), (12, 13), (12, 14), (13, 14), (13, 20), (15, 16), (15, 18), (15, 19), (15, 20),
    (15, 21), (16, 18), (16, 20), (16, 21), (17, 18), (17, 20), (17, 21), (18, 19), (18, 21), (19, 20), (19, 21),
    (20, 21), (22, 23), (22, 24), (22, 26), (22, 27), (22, 28), (23, 24), (23, 25), (23, 27), (23, 28), (24, 25),
    (24, 27), (24, 28), (25, 27), (27, 28)
]

# Generate the layout
layout = generate_graph_layout(edge_list)

# Print the layout in JSON format
print(layout)
```

### Explanation:
1. **Graph Creation**: The `networkx` library is used to create a graph from the provided edge list.
2. **Community Detection**: The `community_louvain.best_partition` function detects communities in the graph using the Louvain method.
3. **Layout Generation**: The `spring_layout` function is used to generate a layout for the graph. This layout algorithm positions nodes to reflect the graph's structure, making community structures more apparent.
4. **JSON Output**: The layout is converted into a JSON object, where each node is mapped to its position (x, y coordinates).

### Output:
The script outputs the graph layout in JSON format, where each node is associated with its position. For example:
```json
{
    "0": [0.1, 0.2],
    "1": [0.3, 0.4],
    ...
}
```

You can run this script in a Python environment with the required libraries installed (`networkx` and `community`).