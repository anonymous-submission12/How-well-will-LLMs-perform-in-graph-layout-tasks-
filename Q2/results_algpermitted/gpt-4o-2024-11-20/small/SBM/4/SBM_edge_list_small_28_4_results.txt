Below is the Python script that generates a graph layout in JSON format while preserving the community structure using a modularity-based community detection algorithm. The script uses the `networkx` library for graph manipulation and the `community` library for community detection.

```python
import networkx as nx
import community as community_louvain
import json

# Input edge list
edge_list = [
    (0, 4), (0, 5), (0, 6), (0, 8), (0, 9), (0, 10), (0, 11), (1, 3), (1, 4), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10),
    (2, 3), (2, 4), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10),
    (3, 11), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9),
    (6, 10), (6, 11), (7, 8), (7, 9), (7, 10), (7, 11), (8, 9), (8, 10), (8, 11), (9, 11), (9, 22), (12, 13), (12, 14),
    (12, 15), (12, 16), (12, 17), (12, 18), (12, 19), (12, 20), (12, 21), (12, 22), (12, 23), (13, 14), (13, 15),
    (13, 16), (13, 18), (13, 19), (13, 20), (13, 22), (13, 23), (14, 15), (14, 17), (14, 18), (14, 19), (14, 20),
    (14, 22), (14, 23), (15, 16), (15, 17), (15, 18), (15, 19), (15, 22), (15, 23), (16, 17), (16, 18), (16, 19),
    (16, 22), (16, 23), (17, 19), (17, 20), (17, 21), (17, 22), (17, 23), (18, 20), (18, 21), (18, 23), (19, 21),
    (19, 23), (20, 21), (20, 22), (21, 22), (21, 23)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Detect communities using the Louvain method
partition = community_louvain.best_partition(G)

# Assign positions to nodes using a layout algorithm (e.g., spring layout)
# Nodes in the same community will be closer together
pos = nx.spring_layout(G, k=0.15, scale=1.0)

# Prepare the output in JSON format
layout_json = {node: {"x": pos[node][0], "y": pos[node][1], "community": partition[node]} for node in G.nodes()}

# Output the layout as JSON
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The script creates a graph `G` using the `networkx` library and populates it with the provided edge list.
2. **Community Detection**: The `community_louvain.best_partition` function is used to detect communities in the graph. Each node is assigned to a community.
3. **Layout Generation**: The `nx.spring_layout` function is used to generate positions for the nodes. This layout algorithm ensures that nodes in the same community are closer together.
4. **JSON Output**: The positions and community assignments are stored in a dictionary and converted to JSON format for output.

### Output Format:
The output is a JSON object where each node is represented as a key, and its value is a dictionary containing:
- `x`: The x-coordinate of the node.
- `y`: The y-coordinate of the node.
- `community`: The community to which the node belongs.

You can run this script to generate the graph layout in JSON format.