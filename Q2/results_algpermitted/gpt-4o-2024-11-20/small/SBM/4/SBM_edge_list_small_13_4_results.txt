Below is the Python script that generates a layout for the given graph while keeping the community structure clear. The script uses the `networkx` library for graph representation and the `community` module (Louvain method) for community detection. The layout is generated using the `spring_layout` algorithm, which is adjusted to separate communities.

```python
import networkx as nx
import community as community_louvain
import json

# Input graph data
edge_list = [
    (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 9), (1, 2), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), 
    (2, 4), (2, 5), (2, 7), (2, 8), (2, 9), (2, 21), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), 
    (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (6, 7), (6, 8), (6, 9), (6, 18), 
    (7, 9), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (10, 16), (10, 17), (10, 18), (10, 19), 
    (11, 12), (11, 13), (11, 14), (11, 15), (11, 16), (11, 17), (11, 18), (11, 19), (11, 28), (12, 13), 
    (12, 15), (12, 16), (12, 17), (12, 27), (13, 15), (13, 16), (13, 17), (13, 18), (13, 19), (14, 15), 
    (14, 16), (14, 17), (14, 18), (14, 19), (15, 16), (15, 17), (15, 19), (16, 17), (16, 19), (17, 18), 
    (17, 19), (18, 19), (18, 22), (20, 21), (20, 23), (20, 26), (20, 27), (20, 29), (21, 22), (21, 24), 
    (21, 25), (21, 27), (21, 28), (21, 29), (22, 23), (22, 24), (22, 26), (22, 27), (22, 28), (23, 24), 
    (23, 25), (23, 26), (23, 28), (23, 29), (24, 27), (24, 29), (25, 27), (25, 28), (25, 29), (26, 27), 
    (26, 28), (26, 29), (27, 28), (28, 29)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Perform community detection using the Louvain method
partition = community_louvain.best_partition(G)

# Create a spring layout with community separation
pos = nx.spring_layout(G, k=0.15, seed=42)  # Adjust k for spacing

# Adjust positions to separate communities
community_positions = {}
for node, community in partition.items():
    if community not in community_positions:
        community_positions[community] = []
    community_positions[community].append(node)

# Offset each community's position
offset = 2.0  # Distance between communities
for i, (community, nodes) in enumerate(community_positions.items()):
    for node in nodes:
        pos[node][0] += i * offset  # Offset x-coordinate
        pos[node][1] += i * offset  # Offset y-coordinate

# Convert positions to JSON format
layout_json = json.dumps(pos)

# Output the layout in JSON format
print(layout_json)
```

### Explanation:
1. **Graph Representation**: The graph is created using `networkx` from the provided edge list.
2. **Community Detection**: The Louvain method (`community_louvain.best_partition`) is used to detect communities in the graph.
3. **Spring Layout**: The `spring_layout` algorithm is used to generate initial positions for the nodes.
4. **Community Separation**: Nodes belonging to the same community are grouped, and their positions are offset to visually separate the communities.
5. **JSON Output**: The final layout is converted to JSON format and printed.

You can run this script in a Python environment with the required libraries (`networkx` and `community`). The output will be a JSON string containing the positions of the nodes.