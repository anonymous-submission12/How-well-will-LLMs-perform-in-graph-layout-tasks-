Below is the Python script that processes the provided graph using a community detection algorithm and generates a layout with community structure clarity. The layout is output in JSON format.

```python
import json
import networkx as nx
import community  # python-louvain package for community detection

def generate_graph_layout(edge_list):
    # Create a graph from the edge list
    G = nx.Graph()
    G.add_edges_from(edge_list)
    
    # Perform community detection using the Louvain algorithm
    partition = community.best_partition(G)
    
    # Assign positions to nodes using a layout algorithm (e.g., spring layout)
    pos = nx.spring_layout(G, seed=42)  # Use a fixed seed for reproducibility

    # Adjust positions to make community structure clear
    community_positions = {}
    for node, community_id in partition.items():
        if community_id not in community_positions:
            community_positions[community_id] = []
        community_positions[community_id].append(pos[node])

    community_offsets = {}
    offset_step = 3.0  # Offset step to separate communities
    current_offset = 0.0

    for community_id, nodes_pos in community_positions.items():
        community_offsets[community_id] = current_offset
        current_offset += offset_step

    for node, community_id in partition.items():
        pos[node][0] += community_offsets[community_id]

    # Convert positions into JSON serializable format
    layout_json = {node: {'x': float(coords[0]), 'y': float(coords[1])} for node, coords in pos.items()}
    return layout_json


# Edge list provided
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 7), (0, 9), (0, 10), (0, 11), (0, 12), (1, 3), (1, 5),
    (1, 6), (1, 7), (1, 8), (1, 10), (1, 12), (2, 4), (2, 5), (2, 6), (2, 7), (2, 9), (2, 10), (2, 11),
    (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 10), (3, 11), (3, 12), (3, 13), (4, 6), (4, 7), (4, 8),
    (4, 10), (4, 11), (4, 12), (5, 6), (5, 7), (5, 9), (5, 10), (5, 12), (5, 21), (6, 7), (6, 9), (6, 10),
    (6, 11), (7, 8), (7, 9), (7, 10), (7, 11), (8, 10), (8, 11), (8, 12), (9, 10), (9, 12), (9, 16),
    (10, 12), (10, 23), (13, 14), (13, 15), (13, 17), (13, 18), (13, 20), (13, 21), (13, 22), (13, 25),
    (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (14, 21), (14, 22), (14, 23), (14, 24), (14, 25),
    (15, 16), (15, 17), (15, 18), (15, 20), (15, 21), (15, 22), (15, 23), (15, 24), (15, 25), (16, 17),
    (16, 18), (16, 19), (16, 20), (16, 21), (16, 22), (16, 25), (17, 19), (17, 20), (17, 23), (17, 24),
    (18, 19), (18, 21), (18, 22), (18, 23), (18, 25), (19, 21), (19, 22), (19, 23), (19, 25), (20, 22),
    (20, 23), (20, 24), (20, 25), (21, 22), (21, 24), (21, 25), (22, 23), (22, 25), (23, 24), (23, 25),
    (24, 25)
]

# Generate the layout
layout = generate_graph_layout(edge_list)

# Output the layout in JSON format
print(json.dumps(layout, indent=2))
```

### Explanation:
1. **Graph Construction**: The provided edge list creates a graph using `networkx.Graph`.
2. **Community Detection**: The Louvain method from `python-louvain` is used to identify communities in the graph.
3. **Generating Layouts**:
   - `nx.spring_layout` assigns initial positions based on the spring model.
   - To emphasize community structure, nodes within the same community are offset.
4. **Position Adjustment**: Nodes of each community are shifted on the x-axis to separate communities for better clarity.
5. **JSON Output**: Node positions are output in JSON format with `"x"` and `"y"` coordinates.

**Dependencies**:
- `networkx`
- `python-louvain` package (`community` module)

Install required libraries if necessary:
```bash
pip install networkx python-louvain
```