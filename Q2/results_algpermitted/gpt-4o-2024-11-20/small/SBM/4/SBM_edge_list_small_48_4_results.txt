The following Python script calculates a layout for the given graph using module-based community detection to identify communities and using a ForceAtlas2-style layout algorithm to maintain the community structure. The final layout is returned as a JSON object where each node is associated with its computed position.

```python
import networkx as nx
import json
from community import community_louvain  # python-louvain library for community detection

# Define the edge list
edges = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), 
         (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), 
         (2, 4), (2, 7), (2, 8), (2, 10), (2, 11), (2, 12), (3, 4), (3, 6), (3, 8), (3, 9), (3, 10), 
         (4, 5), (4, 6), (4, 7), (4, 8), (4, 10), (4, 11), (4, 12), (4, 20), (5, 6), (5, 7), (5, 8), 
         (5, 11), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12), (7, 8), (7, 9), (7, 11), (7, 12), (8, 9), 
         (8, 10), (8, 11), (8, 12), (9, 10), (9, 11), (9, 12), (10, 11), (10, 12), (11, 12), (13, 14), 
         (13, 15), (13, 16), (13, 18), (13, 20), (13, 21), (13, 22), (13, 23), (13, 24), (14, 15), 
         (14, 17), (14, 18), (14, 20), (14, 21), (14, 22), (14, 23), (14, 24), (15, 16), (15, 17), 
         (15, 18), (15, 19), (15, 21), (15, 22), (15, 23), (15, 24), (15, 25), (16, 17), (16, 18), 
         (16, 19), (16, 20), (16, 22), (16, 25), (17, 18), (17, 20), (17, 22), (17, 25), (18, 19), 
         (18, 20), (18, 22), (18, 24), (18, 25), (19, 20), (19, 22), (19, 24), (19, 25), (20, 21), 
         (20, 23), (20, 24), (21, 22), (21, 23), (21, 24), (21, 25), (22, 23), (22, 25), (23, 24), 
         (23, 25), (24, 25)]

# Create a graph using NetworkX
G = nx.Graph(edges)

# Detect communities using the Louvain method
partition = community_louvain.best_partition(G)

# Assign community to nodes
for node, community in partition.items():
    G.nodes[node]['community'] = community

# Use a force-directed layout algorithm
positions = nx.spring_layout(G, k=0.1, iterations=100, seed=42)  # spring_layout to keep structure clear

# Organize output, including community information
graph_layout = {}
for node, pos in positions.items():
    graph_layout[node] = {
        "x": pos[0],
        "y": pos[1],
        "community": partition[node]
    }

# Convert the layout to JSON format and print
layout_json = json.dumps(graph_layout, indent=4)
print(layout_json)
```

### Explanation:
1. **Community Detection**: The `community_louvain.best_partition()` method determines the communities in the graph using the Louvain algorithm.
2. **Force-Directed Layout**: The `spring_layout` function from NetworkX computes a layout that respects the community structure.
3. **JSON Output**: The final positions, along with the detected community for each node, are returned as a JSON object.

To use this code, ensure you have the `networkx` and `python-louvain` packages installed:
```bash
pip install networkx community
```