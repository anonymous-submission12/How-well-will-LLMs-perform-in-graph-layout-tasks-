Below is the Python script to generate a graph layout using the `spring_layout` algorithm from the `networkx` library. The layout ensures consistency between Euclidean distance and graph-theoretic distance. The final output is the graph layout in JSON format.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 5), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6),
    (2, 3), (2, 5), (2, 6), (3, 5), (3, 6), (3, 22), (4, 5), (4, 6), (5, 6),
    (5, 21), (7, 9), (7, 10), (7, 11), (7, 13), (8, 9), (8, 13), (8, 17),
    (10, 12), (10, 13), (11, 12), (11, 13), (12, 13), (13, 18), (14, 15),
    (14, 16), (14, 17), (14, 18), (14, 20), (15, 17), (15, 20), (16, 17),
    (16, 18), (16, 20), (17, 18), (17, 20), (18, 19), (18, 20), (18, 21),
    (21, 22), (21, 25), (21, 26), (21, 27), (22, 23), (22, 24), (22, 25),
    (22, 26), (22, 27), (23, 24), (23, 25), (23, 26), (24, 25), (24, 26),
    (24, 27), (25, 26), (25, 27)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the spring layout algorithm
positions = nx.spring_layout(G)

# Convert the positions to JSON format
positions_json = json.dumps(positions)

# Print the JSON output
print(positions_json)
```

### Explanation:
1. **Edge List**: The graph is defined using the provided edge list.
2. **Graph Creation**: A `networkx` graph is created using the edge list.
3. **Spring Layout**: The `spring_layout` algorithm is used to compute node positions. This algorithm ensures that the Euclidean distance between nodes reflects their graph-theoretic distance.
4. **JSON Conversion**: The positions dictionary is converted to JSON format for output.
5. **Output**: The script prints the graph layout in JSON format.

You can run this script in a Python environment to generate the desired graph layout.