Below is a Python script that calculates a layout for the given graph using graph layout algorithms, ensuring consistency between Euclidean distance and graph-theoretic distance. The script relies on the `networkx` library and the `spring_layout` algorithm, which uses a force-directed layout to achieve the desired result. Positions of nodes are returned as JSON output.

```python
import networkx as nx
import json

# Edge list provided by the user
edge_list = [
    (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 9), (1, 2), (1, 5), (1, 6), (1, 7), 
    (1, 8), (1, 9), (2, 4), (2, 5), (2, 7), (2, 8), (2, 9), (2, 21), (3, 4), (3, 5), 
    (3, 6), (3, 7), (3, 8), (3, 9), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), 
    (5, 7), (5, 8), (6, 7), (6, 8), (6, 9), (6, 18), (7, 9), (10, 11), (10, 12), 
    (10, 13), (10, 14), (10, 15), (10, 16), (10, 17), (10, 18), (10, 19), (11, 12), 
    (11, 13), (11, 14), (11, 15), (11, 16), (11, 17), (11, 18), (11, 19), (11, 28), 
    (12, 13), (12, 15), (12, 16), (12, 17), (12, 27), (13, 15), (13, 16), (13, 17), 
    (13, 18), (13, 19), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (15, 16), 
    (15, 17), (15, 19), (16, 17), (16, 19), (17, 18), (17, 19), (18, 19), (18, 22), 
    (20, 21), (20, 23), (20, 26), (20, 27), (20, 29), (21, 22), (21, 24), (21, 25), 
    (21, 27), (21, 28), (21, 29), (22, 23), (22, 24), (22, 26), (22, 27), (22, 28), 
    (23, 24), (23, 25), (23, 26), (23, 28), (23, 29), (24, 27), (24, 29), (25, 27), 
    (25, 28), (25, 29), (26, 27), (26, 28), (26, 29), (27, 28), (28, 29)
]

# Create a graph using the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Use the spring layout algorithm to calculate node positions
# This algorithm tries to maintain consistency between Euclidean distance and graph-theoretic distance
positions = nx.spring_layout(G)

# Convert node positions to a dictionary where keys are node IDs and values are position coordinates
positions_json = {node: pos.tolist() for node, pos in positions.items()}

# Output the layout in JSON format
print(json.dumps(positions_json, indent=2))
```

### How It Works:

1. **Edge List Parsing:** The script initializes a graph using `networkx.Graph()` and incorporates the supplied edge list.
2. **Spring Layout Calculation:** The `nx.spring_layout` function is applied to calculate node positions. This approach uses the force-directed algorithm to distribute nodes in such a way that graph-theoretic distances between nodes are reflected in the Euclidean distances of their positions.
3. **JSON Conversion:** The positions are extracted from the `spring_layout` result and converted to JSON format using `json.dumps`. The positions are stored in a dictionary, with node IDs as keys and their corresponding coordinates as values.
4. **Output:** The JSON string with node positions is printed for external use.

This script does not include graphical rendering; it simply computes positions for the layout. Ensure that the `networkx` library is installed before running this code. You can install it via pip if needed:

```bash
pip install networkx
```