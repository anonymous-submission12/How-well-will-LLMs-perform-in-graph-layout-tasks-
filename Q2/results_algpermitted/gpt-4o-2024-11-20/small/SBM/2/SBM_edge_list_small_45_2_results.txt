Below is the Python script that generates a graph layout using the Kamada-Kawai algorithm, which ensures consistency between Euclidean distance and graph-theoretic distance. The final output is the graph layout in JSON format.

```python
import json
import networkx as nx

# Define the edge list
edge_list = [
    (0, 2), (0, 3), (0, 4), (0, 5), (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (2, 5),
    (3, 4), (4, 5), (5, 6), (6, 7), (6, 8), (6, 10), (6, 11), (7, 8), (7, 9), (7, 10),
    (7, 11), (7, 14), (8, 9), (8, 10), (8, 11), (9, 10), (9, 11), (10, 11), (12, 13),
    (12, 14), (12, 17), (13, 15), (13, 16), (13, 17), (13, 23), (14, 15), (14, 17),
    (15, 16), (15, 17), (16, 17), (16, 22), (18, 19), (18, 21), (18, 22), (18, 23),
    (19, 20), (19, 21), (19, 22), (20, 21), (20, 22), (20, 23), (21, 22), (21, 23),
    (22, 23)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Kamada-Kawai algorithm
layout = nx.kamada_kawai_layout(G)

# Convert the layout to JSON format
layout_json = json.dumps({node: position.tolist() for node, position in layout.items()}, indent=4)

# Print the JSON layout
print(layout_json)
```

### Explanation:
1. **Edge List**: The graph is defined using the provided edge list.
2. **Graph Creation**: A NetworkX graph is created using the `add_edges_from` method.
3. **Kamada-Kawai Layout**: The `kamada_kawai_layout` function is used to compute the positions of nodes in the graph. This algorithm ensures that the Euclidean distances between nodes in the layout are consistent with their graph-theoretic distances.
4. **JSON Conversion**: The layout dictionary is converted to JSON format, where each node is mapped to its position (a list of x and y coordinates).
5. **Output**: The JSON layout is printed as the final output.

You can run this script in a Python environment to generate the graph layout in JSON format.