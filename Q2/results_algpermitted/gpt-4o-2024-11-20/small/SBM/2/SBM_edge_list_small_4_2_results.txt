Below is the Python script that generates a graph layout using the Kamada-Kawai algorithm, which ensures consistency between Euclidean distance and graph-theoretic distance. The output is a JSON representation of the layout.

```python
import json
import networkx as nx

# Define the edge list
edge_list = [
    (0, 1), (0, 4), (0, 5), (0, 8), (1, 2), (1, 5), (1, 6), (1, 24), 
    (2, 3), (2, 5), (2, 6), (3, 4), (3, 9), (4, 6), (5, 6), (7, 8), 
    (7, 9), (7, 11), (7, 12), (7, 13), (8, 9), (8, 10), (8, 13), 
    (8, 14), (9, 10), (9, 11), (9, 12), (10, 11), (10, 12), (11, 12), 
    (11, 13), (11, 20), (14, 15), (14, 16), (14, 17), (14, 19), 
    (14, 20), (15, 18), (15, 19), (15, 20), (16, 17), (16, 19), 
    (16, 20), (17, 18), (17, 19), (18, 20), (21, 22), (21, 23), 
    (21, 24), (21, 26), (21, 27), (22, 25), (22, 26), (22, 27), 
    (23, 24), (23, 25), (23, 26), (23, 27), (24, 25), (24, 26), 
    (24, 27), (25, 27), (26, 27)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Kamada-Kawai algorithm
layout = nx.kamada_kawai_layout(G)

# Convert the layout to JSON format
layout_json = {node: list(pos) for node, pos in layout.items()}

# Print the JSON representation of the layout
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The script uses `networkx` to create a graph from the provided edge list.
2. **Layout Algorithm**: The Kamada-Kawai layout algorithm is used to compute node positions. This algorithm is designed to maintain consistency between Euclidean distances and graph-theoretic distances.
3. **JSON Conversion**: The layout is converted into a JSON format where each node is mapped to its position (a list of x and y coordinates).
4. **Output**: The final output is printed as a JSON string.

You can run this script in a Python environment with `networkx` installed. The output will be the graph layout in JSON format.