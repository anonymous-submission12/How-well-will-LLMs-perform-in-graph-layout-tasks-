Below is the Python script that generates a graph layout using the Kamada-Kawai algorithm, which ensures consistency between Euclidean distance and graph-theoretic distance. The final output is the graph layout in JSON format.

```python
import json
import networkx as nx

# Define the edge list
edge_list = [
    (0, 1), (0, 2), (0, 4), (0, 5), (0, 6), (0, 7), (0, 9), (1, 2), (1, 4), (1, 5), 
    (1, 6), (1, 8), (1, 9), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (3, 4), (3, 5), 
    (3, 6), (3, 8), (4, 6), (4, 7), (4, 9), (5, 7), (5, 8), (5, 9), (5, 23), (6, 7), 
    (6, 9), (6, 23), (7, 8), (7, 9), (8, 9), (10, 11), (10, 12), (10, 14), (10, 15), 
    (10, 17), (11, 12), (11, 13), (11, 14), (11, 15), (11, 17), (11, 18), (11, 19), 
    (12, 13), (12, 18), (12, 19), (13, 14), (13, 15), (13, 16), (13, 17), (13, 18), 
    (13, 19), (13, 22), (13, 23), (14, 15), (14, 17), (14, 18), (14, 19), (15, 17), 
    (15, 19), (16, 17), (16, 18), (16, 19), (17, 18), (18, 19), (20, 21), (20, 22), 
    (20, 23), (20, 24), (20, 25), (20, 26), (20, 28), (21, 22), (21, 23), (21, 24), 
    (21, 26), (21, 27), (22, 23), (22, 24), (22, 25), (22, 26), (22, 27), (22, 28), 
    (23, 24), (23, 26), (23, 27), (23, 28), (24, 25), (24, 28), (25, 26), (25, 28), 
    (26, 27), (26, 28), (27, 28)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Kamada-Kawai algorithm
layout = nx.kamada_kawai_layout(G)

# Convert the layout to JSON format
layout_json = {node: list(map(float, pos)) for node, pos in layout.items()}

# Print the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The script uses `networkx` to create a graph from the provided edge list.
2. **Layout Algorithm**: The Kamada-Kawai layout algorithm is used to generate positions for the nodes. This algorithm ensures that the Euclidean distances between nodes in the layout are consistent with their graph-theoretic distances.
3. **JSON Conversion**: The positions are converted into a JSON-compatible format, where each node's position is represented as a list of coordinates `[x, y]`.
4. **Output**: The final layout is printed in JSON format.

You can run this script in a Python environment with `networkx` installed. The output will be the graph layout in JSON format.