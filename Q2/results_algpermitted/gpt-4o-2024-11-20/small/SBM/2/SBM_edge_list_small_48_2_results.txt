Below is the Python script that generates a layout for the given graph using the Fruchterman-Reingold force-directed algorithm, which maintains consistency between Euclidean distance and graph-theoretic distance. The output is a JSON representation of the graph layout.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), 
    (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), 
    (2, 4), (2, 7), (2, 8), (2, 10), (2, 11), (2, 12), (3, 4), (3, 6), (3, 8), (3, 9), (3, 10), 
    (4, 5), (4, 6), (4, 7), (4, 8), (4, 10), (4, 11), (4, 12), (4, 20), (5, 6), (5, 7), (5, 8), 
    (5, 11), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12), (7, 8), (7, 9), (7, 11), (7, 12), (8, 9), 
    (8, 10), (8, 11), (8, 12), (9, 10), (9, 11), (9, 12), (10, 11), (10, 12), (11, 12), (13, 14), 
    (13, 15), (13, 16), (13, 18), (13, 20), (13, 21), (13, 22), (13, 23), (13, 24), (14, 15), 
    (14, 17), (14, 18), (14, 20), (14, 21), (14, 22), (14, 23), (14, 24), (15, 16), (15, 17), 
    (15, 18), (15, 19), (15, 21), (15, 22), (15, 23), (15, 24), (15, 25), (16, 17), (16, 18), 
    (16, 19), (16, 20), (16, 22), (16, 25), (17, 18), (17, 20), (17, 22), (17, 25), (18, 19), 
    (18, 20), (18, 22), (18, 24), (18, 25), (19, 20), (19, 22), (19, 24), (19, 25), (20, 21), 
    (20, 23), (20, 24), (21, 22), (21, 23), (21, 24), (21, 25), (22, 23), (22, 25), (23, 24), 
    (23, 25), (24, 25)
]

# Create a graph using NetworkX
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Fruchterman-Reingold force-directed algorithm
layout = nx.spring_layout(G)

# Convert the layout to a JSON-serializable format
layout_json = {node: position.tolist() for node, position in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the `networkx.Graph()` class and the provided edge list.
2. **Layout Algorithm**: The `spring_layout` function from NetworkX is used to compute the layout. This function implements the Fruchterman-Reingold force-directed algorithm, which ensures that the Euclidean distances between nodes in the layout are consistent with their graph-theoretic distances.
3. **JSON Conversion**: The layout dictionary is converted to a JSON-serializable format using `tolist()` for NumPy arrays and then serialized to JSON using the `json.dumps` function.
4. **Output**: The final output is printed as a JSON string with an indentation of 4 spaces for readability.

You can run this script in a Python environment to generate the graph layout in JSON format.