To generate a graph layout that maintains consistency between Euclidean distance and graph-theoretic distances, we can use the `spring_layout` or `force-directed layout` from `networkx`. Here's the Python code that computes the graph layout and outputs it in JSON format:

```python
import networkx as nx
import json

# Edge list data
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 6), (0, 7), (0, 9), (0, 10),
    (1, 2), (1, 3), (1, 5), (1, 8), (1, 9), (1, 10), (2, 3), (2, 4),
    (2, 5), (2, 6), (2, 7), (2, 10), (3, 4), (3, 5), (3, 6), (3, 7),
    (3, 8), (3, 9), (3, 10), (3, 18), (4, 5), (4, 6), (4, 7), (4, 8),
    (4, 9), (5, 6), (5, 9), (5, 10), (6, 7), (6, 9), (6, 20), (7, 8),
    (7, 9), (7, 10), (8, 9), (8, 10), (9, 20), (11, 12), (11, 13),
    (11, 14), (11, 17), (11, 18), (11, 19), (11, 20), (12, 13), (12, 14),
    (12, 15), (12, 16), (12, 18), (12, 19), (13, 14), (13, 15), (13, 17),
    (13, 19), (13, 20), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19),
    (14, 20), (15, 16), (15, 18), (15, 19), (16, 17), (16, 18), (16, 19),
    (16, 20), (17, 18), (17, 19), (17, 20), (18, 19), (18, 20), (19, 20)
]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate layout using spring_layout
# Spring layout tries to position nodes in a way that the Euclidean distances
# between nodes are roughly proportional to graph-theoretic distances.
positions = nx.spring_layout(G)

# Convert positions to JSON format
positions_json = json.dumps(positions, indent=2)

# Output the JSON
print(positions_json)
```

### Explanation:
1. **Graph Construction:** The graph is constructed using the provided edge list.
2. **Spring Layout:** The `spring_layout` algorithm is used, as it attempts to position nodes in a way that reflects graph-theoretic distances in Euclidean space.
3. **JSON Conversion:** The positions, which are returned as a dictionary of `{node: (x, y)}`, are converted to JSON for easy visualization or usage.

You can run the script and obtain the layout positions of the graph in JSON format.