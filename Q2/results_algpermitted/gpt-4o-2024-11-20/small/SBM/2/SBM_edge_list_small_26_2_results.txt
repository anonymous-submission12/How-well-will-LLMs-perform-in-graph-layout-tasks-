Below is the Python script that generates a graph layout using the Kamada-Kawai algorithm, which ensures consistency between Euclidean distance and graph-theoretic distance. The final output is the graph layout in JSON format.

```python
import json
import networkx as nx

# Define the edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 11), (0, 13), (0, 14),
    (1, 2), (1, 4), (1, 5), (1, 6), (1, 19), (2, 3), (2, 6), (3, 4), (3, 5),
    (3, 6), (4, 5), (4, 6), (4, 18), (5, 6), (5, 9), (7, 8), (7, 9), (7, 10),
    (7, 11), (7, 12), (7, 13), (8, 9), (8, 11), (8, 12), (8, 13), (9, 10),
    (9, 11), (9, 12), (10, 11), (10, 12), (10, 13), (10, 14), (11, 12),
    (11, 13), (12, 13), (14, 15), (14, 17), (14, 18), (14, 19), (14, 20),
    (15, 16), (15, 17), (15, 18), (15, 20), (16, 17), (16, 18), (16, 19),
    (16, 20), (17, 18), (17, 19), (17, 20), (18, 19), (18, 20)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Kamada-Kawai algorithm
layout = nx.kamada_kawai_layout(G)

# Convert the layout to JSON format
layout_json = json.dumps({node: position.tolist() for node, position in layout.items()}, indent=4)

# Print the JSON layout
print(layout_json)
```

### Explanation:
1. **Graph Creation**: The script uses `networkx` to create a graph from the provided edge list.
2. **Layout Algorithm**: The Kamada-Kawai layout algorithm is used to compute node positions. This algorithm ensures that the Euclidean distances between nodes in the layout are consistent with their graph-theoretic distances.
3. **JSON Conversion**: The computed positions are converted into a JSON format, where each node is mapped to its position as a list of coordinates `[x, y]`.
4. **Output**: The final output is printed as a JSON string.

You can run this script in a Python environment with `networkx` installed. The output will be the graph layout in JSON format.