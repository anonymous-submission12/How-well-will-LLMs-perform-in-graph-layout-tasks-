Below is the Python script that generates a layout for the given graph using the Fruchterman-Reingold force-directed algorithm, which maintains consistency between Euclidean distance and graph-theoretic distance. The output is in JSON format.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), 
    (3, 4), (3, 5), (4, 5), (4, 22), (5, 14), (6, 7), (6, 8), (6, 10), 
    (7, 8), (7, 9), (7, 10), (7, 11), (8, 9), (8, 10), (8, 11), (9, 10), 
    (9, 11), (10, 11), (10, 26), (12, 13), (12, 16), (12, 17), (13, 15), 
    (13, 16), (13, 17), (13, 25), (14, 15), (14, 16), (14, 17), (14, 19), 
    (15, 16), (15, 17), (16, 17), (18, 19), (18, 20), (18, 21), (18, 22), 
    (19, 20), (19, 21), (20, 21), (20, 22), (21, 22), (23, 24), (23, 25), 
    (23, 26), (23, 27), (24, 26), (24, 27), (25, 26), (25, 27), (26, 27)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Fruchterman-Reingold force-directed algorithm
layout = nx.spring_layout(G)

# Convert the layout to a JSON-serializable format
layout_json = {node: pos.tolist() for node, pos in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The `networkx` library is used to create a graph from the provided edge list.
2. **Layout Algorithm**: The `spring_layout` function in `networkx` implements the Fruchterman-Reingold force-directed algorithm, which positions nodes in a way that reflects graph-theoretic distances.
3. **JSON Conversion**: The layout dictionary is converted to a JSON-serializable format by converting NumPy arrays to lists.
4. **Output**: The layout is printed in JSON format.

You can run this script in a Python environment with `networkx` installed to generate the graph layout.