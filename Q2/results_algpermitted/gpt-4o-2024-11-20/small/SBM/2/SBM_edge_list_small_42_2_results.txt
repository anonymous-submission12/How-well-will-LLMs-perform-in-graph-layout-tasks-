Below is the Python script to generate a graph layout using the `spring_layout` algorithm from the `networkx` library. The layout ensures consistency between Euclidean distance and graph-theoretic distance. The final output is the graph layout in JSON format.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 7), (0, 9), (0, 10), (0, 11), (0, 12),
    (1, 3), (1, 5), (1, 6), (1, 7), (1, 8), (1, 10), (1, 12), (2, 4), (2, 5), (2, 6),
    (2, 7), (2, 9), (2, 10), (2, 11), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 10),
    (3, 11), (3, 12), (3, 13), (4, 6), (4, 7), (4, 8), (4, 10), (4, 11), (4, 12), (5, 6),
    (5, 7), (5, 9), (5, 10), (5, 12), (5, 21), (6, 7), (6, 9), (6, 10), (6, 11), (7, 8),
    (7, 9), (7, 10), (7, 11), (8, 10), (8, 11), (8, 12), (9, 10), (9, 12), (9, 16), (10, 12),
    (10, 23), (13, 14), (13, 15), (13, 17), (13, 18), (13, 20), (13, 21), (13, 22), (13, 25),
    (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (14, 21), (14, 22), (14, 23), (14, 24),
    (14, 25), (15, 16), (15, 17), (15, 18), (15, 20), (15, 21), (15, 22), (15, 23), (15, 24),
    (15, 25), (16, 17), (16, 18), (16, 19), (16, 20), (16, 21), (16, 22), (16, 25), (17, 19),
    (17, 20), (17, 23), (17, 24), (18, 19), (18, 21), (18, 22), (18, 23), (18, 25), (19, 21),
    (19, 22), (19, 23), (19, 25), (20, 22), (20, 23), (20, 24), (20, 25), (21, 22), (21, 24),
    (21, 25), (22, 23), (22, 25), (23, 24), (23, 25), (24, 25)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the spring layout algorithm
positions = nx.spring_layout(G)

# Convert the positions to JSON format
positions_json = json.dumps(positions)

# Print the JSON output
print(positions_json)
```

### Explanation:
1. **Input**: The edge list is used to define the graph structure.
2. **Graph Creation**: The `networkx.Graph()` object is created, and edges are added using `add_edges_from`.
3. **Layout Generation**: The `spring_layout` algorithm is used to compute node positions. This algorithm ensures that the Euclidean distance between nodes reflects their graph-theoretic distance.
4. **Output**: The positions are converted to JSON format using `json.dumps` and printed.

You can run this script to obtain the graph layout in JSON format.