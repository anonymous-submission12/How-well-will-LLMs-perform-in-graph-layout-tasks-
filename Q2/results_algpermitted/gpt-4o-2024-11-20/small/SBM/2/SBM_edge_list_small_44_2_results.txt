Below is the Python script that generates a layout for the given graph using the Fruchterman-Reingold force-directed algorithm, which maintains consistency between Euclidean distance and graph-theoretic distance. The final output is the graph layout in JSON format.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 2), (0, 4), (0, 5), (1, 3), (1, 5), (1, 6), (1, 7), (2, 5), (2, 6), (2, 13), (2, 19), (2, 23),
    (3, 4), (3, 5), (3, 6), (3, 7), (3, 13), (4, 5), (4, 6), (4, 7), (5, 6), (5, 13), (5, 21), (6, 7), (8, 9),
    (8, 10), (8, 11), (8, 12), (9, 11), (9, 12), (9, 13), (9, 14), (10, 11), (10, 12), (10, 13), (10, 14), (10, 20),
    (11, 12), (11, 13), (11, 14), (12, 13), (12, 14), (13, 14), (13, 20), (15, 16), (15, 18), (15, 19), (15, 20),
    (15, 21), (16, 18), (16, 20), (16, 21), (17, 18), (17, 20), (17, 21), (18, 19), (18, 21), (19, 20), (19, 21),
    (20, 21), (22, 23), (22, 24), (22, 26), (22, 27), (22, 28), (23, 24), (23, 25), (23, 27), (23, 28), (24, 25),
    (24, 27), (24, 28), (25, 27), (27, 28)
]

# Create a graph using NetworkX
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Fruchterman-Reingold force-directed algorithm
layout = nx.spring_layout(G)

# Convert the layout to a JSON-serializable format
layout_json = {node: position.tolist() for node, position in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the `networkx.Graph()` class and the provided edge list.
2. **Layout Algorithm**: The `spring_layout` function from NetworkX is used to compute the layout. This function implements the Fruchterman-Reingold force-directed algorithm, which ensures that the Euclidean distances between nodes in the layout are consistent with their graph-theoretic distances.
3. **JSON Serialization**: The layout dictionary is converted to a JSON-serializable format by converting NumPy arrays to lists.
4. **Output**: The layout is printed in JSON format with indentation for readability.

You can run this script in a Python environment to generate the graph layout. The output will be a JSON object where each key is a node, and the value is a list representing the 2D coordinates of the node in the layout.