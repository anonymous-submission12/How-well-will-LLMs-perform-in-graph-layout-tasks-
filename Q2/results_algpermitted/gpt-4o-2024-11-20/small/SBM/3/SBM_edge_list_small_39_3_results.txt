Below is the Python script that generates a layout for the given graph using the `networkx` library and the `kamada_kawai_layout` algorithm, which is designed to minimize edge crossings. The output is in JSON format, containing the positions of the nodes.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12),
    (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11),
    (2, 3), (2, 4), (2, 5), (2, 6), (2, 8), (2, 9), (2, 10),
    (3, 5), (3, 6), (3, 9), (3, 10),
    (4, 5), (4, 6), (4, 7), (4, 9),
    (5, 6), (5, 7), (5, 9), (5, 11),
    (6, 7), (6, 9), (6, 11),
    (7, 9), (7, 11),
    (8, 9), (8, 11),
    (9, 10), (9, 11),
    (10, 11), (10, 12),
    (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (12, 18), (12, 19), (12, 20), (12, 22),
    (13, 14), (13, 15), (13, 16), (13, 17), (13, 18), (13, 20), (13, 21),
    (14, 15), (14, 17), (14, 18), (14, 19), (14, 20), (14, 22),
    (15, 17), (15, 18), (15, 19), (15, 20), (15, 21), (15, 22),
    (16, 18), (16, 20), (16, 21), (16, 22),
    (17, 18), (17, 19), (17, 22),
    (18, 19), (18, 20), (18, 21), (18, 22),
    (19, 22),
    (20, 22),
    (21, 22)
]

# Create a graph using NetworkX
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Kamada-Kawai algorithm
layout = nx.kamada_kawai_layout(G)

# Convert the layout to a JSON-serializable format
layout_json = {node: pos.tolist() for node, pos in layout.items()}

# Print the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The `networkx` library is used to create a graph from the provided edge list.
2. **Layout Algorithm**: The `kamada_kawai_layout` algorithm is used to compute the positions of the nodes. This algorithm minimizes edge crossings and produces a visually appealing layout.
3. **JSON Conversion**: The positions are converted into a JSON-serializable format (lists instead of NumPy arrays).
4. **Output**: The final layout is printed in JSON format.

You can run this script in a Python environment with the `networkx` library installed. The output will be a JSON object containing the positions of the nodes.