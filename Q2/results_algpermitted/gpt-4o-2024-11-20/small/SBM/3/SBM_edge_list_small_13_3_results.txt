Here is the Python script that computes a layout for the graph described in your edge list. The layout minimizes edge crossings using the `networkx` library's `kamada_kawai_layout` algorithm. The layout positions will be output as JSON:

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 9), (1, 2), (1, 5), (1, 6),
    (1, 7), (1, 8), (1, 9), (2, 4), (2, 5), (2, 7), (2, 8), (2, 9), (2, 21),
    (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 5), (4, 6), (4, 7),
    (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (6, 7), (6, 8), (6, 9), (6, 18),
    (7, 9), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (10, 16),
    (10, 17), (10, 18), (10, 19), (11, 12), (11, 13), (11, 14), (11, 15),
    (11, 16), (11, 17), (11, 18), (11, 19), (11, 28), (12, 13), (12, 15),
    (12, 16), (12, 17), (12, 27), (13, 15), (13, 16), (13, 17), (13, 18),
    (13, 19), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (15, 16),
    (15, 17), (15, 19), (16, 17), (16, 19), (17, 18), (17, 19), (18, 19),
    (18, 22), (20, 21), (20, 23), (20, 26), (20, 27), (20, 29), (21, 22),
    (21, 24), (21, 25), (21, 27), (21, 28), (21, 29), (22, 23), (22, 24),
    (22, 26), (22, 27), (22, 28), (23, 24), (23, 25), (23, 26), (23, 28),
    (23, 29), (24, 27), (24, 29), (25, 27), (25, 28), (25, 29), (26, 27),
    (26, 28), (26, 29), (27, 28), (28, 29)
]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate layout using the Kamada-Kawai algorithm
pos = nx.kamada_kawai_layout(G)

# Convert positions to JSON serializable format
layout_json = {str(node): pos[node] for node in pos}

# Output the result in JSON format
print(json.dumps(layout_json, indent=2))
```

### Explanation of the Code:
1. **NetworkX Setup**: The script uses the NetworkX library to construct the graph from the provided edge list.
2. **Kamada-Kawai Layout**: The `kamada_kawai_layout` is applied to reduce edge crossings and provide an aesthetically pleasing layout by treating the graph as a physical system.
3. **JSON Output**: The positions are transformed into a dictionary where keys are string representations of the node numbers, and the values are the 2D coordinates of the nodes (tuples). This content is then converted into a JSON-formatted string and printed.

You can run this script in any Python environment where `networkx` and `json` libraries are installed. The output will be the graph's node positions in JSON format.