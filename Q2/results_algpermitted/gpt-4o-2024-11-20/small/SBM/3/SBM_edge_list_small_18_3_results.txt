Below is the Python script that generates a layout for the given graph using the `networkx` library and the `kamada_kawai_layout` algorithm, which is designed to minimize edge crossings. The output is a JSON representation of the graph layout.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 2), (0, 4), (0, 5), (0, 6), (0, 7), (0, 9), (1, 2), (1, 4), (1, 5), (1, 6), (1, 8), (1, 9), 
    (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (3, 4), (3, 5), (3, 6), (3, 8), (4, 6), (4, 7), (4, 9), (5, 7), 
    (5, 8), (5, 9), (5, 23), (6, 7), (6, 9), (6, 23), (7, 8), (7, 9), (8, 9), (10, 11), (10, 12), (10, 14), 
    (10, 15), (10, 17), (11, 12), (11, 13), (11, 14), (11, 15), (11, 17), (11, 18), (11, 19), (12, 13), 
    (12, 18), (12, 19), (13, 14), (13, 15), (13, 16), (13, 17), (13, 18), (13, 19), (13, 22), (13, 23), 
    (14, 15), (14, 17), (14, 18), (14, 19), (15, 17), (15, 19), (16, 17), (16, 18), (16, 19), (17, 18), 
    (18, 19), (20, 21), (20, 22), (20, 23), (20, 24), (20, 25), (20, 26), (20, 28), (21, 22), (21, 23), 
    (21, 24), (21, 26), (21, 27), (22, 23), (22, 24), (22, 25), (22, 26), (22, 27), (22, 28), (23, 24), 
    (23, 26), (23, 27), (23, 28), (24, 25), (24, 28), (25, 26), (25, 28), (26, 27), (26, 28), (27, 28)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Kamada-Kawai algorithm
layout = nx.kamada_kawai_layout(G)

# Convert the layout to a JSON-serializable format
layout_json = {node: pos.tolist() for node, pos in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The `networkx` library is used to create a graph from the provided edge list.
2. **Layout Algorithm**: The `kamada_kawai_layout` algorithm is used to compute the positions of the nodes. This algorithm is designed to minimize edge crossings and produce a visually appealing layout.
3. **JSON Conversion**: The layout is converted into a JSON-serializable format by converting the positions (which are NumPy arrays) into lists.
4. **Output**: The final layout is printed in JSON format.

### Output Format:
The output will be a JSON object where each key is a node, and the value is a list representing the 2D coordinates of the node. For example:
```json
{
    "0": [0.0, 0.0],
    "1": [1.0, 1.0],
    ...
}
```

You can run this script in a Python environment with `networkx` installed to generate the layout for the given graph.