Below is the Python script that generates a layout for the given graph using the `networkx` library and the `kamada_kawai_layout` algorithm, which is designed to minimize edge crossings. The output is in JSON format, containing the positions of the nodes.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 3), (0, 9), (1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 5), 
    (3, 5), (4, 5), (5, 19), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), 
    (7, 8), (7, 9), (7, 10), (7, 11), (8, 9), (8, 10), (10, 11), (11, 15), 
    (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (13, 14), (13, 15), 
    (13, 16), (13, 21), (14, 15), (14, 16), (16, 17), (18, 19), (18, 20), 
    (18, 21), (18, 22), (19, 20), (19, 21), (20, 21), (20, 22), (21, 22), 
    (22, 26), (23, 24), (23, 25), (23, 26), (24, 25), (24, 27), (25, 26), 
    (25, 27), (26, 27)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Kamada-Kawai algorithm
layout = nx.kamada_kawai_layout(G)

# Convert the layout to a JSON-serializable format
layout_json = {node: list(pos) for node, pos in layout.items()}

# Print the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The `networkx` library is used to create a graph from the provided edge list.
2. **Layout Algorithm**: The `kamada_kawai_layout` algorithm is applied to compute the positions of the nodes. This algorithm is designed to minimize edge crossings and produce a visually appealing layout.
3. **JSON Conversion**: The layout dictionary is converted into a JSON-serializable format, where each node's position is represented as a list of coordinates `[x, y]`.
4. **Output**: The final layout is printed in JSON format.

You can run this script in a Python environment with `networkx` installed to generate the layout for the given graph.