Below is the Python script that generates a layout for the given graph using the `networkx` library. The layout minimizes edge crossings by using the `spring_layout` algorithm, which is a force-directed layout algorithm. The final output is the graph layout in JSON format.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 2), (0, 4), (0, 5), (0, 16), (1, 3), (1, 4), (1, 5), (1, 9),
    (2, 4), (2, 5), (2, 11), (3, 4), (3, 5), (4, 27), (5, 16), (6, 7), (6, 8),
    (6, 9), (6, 10), (6, 11), (7, 8), (7, 9), (7, 10), (8, 9), (8, 10), (8, 11),
    (9, 10), (9, 11), (12, 13), (12, 14), (12, 16), (13, 14), (13, 15), (13, 17),
    (14, 15), (14, 16), (14, 17), (15, 16), (15, 17), (16, 17), (16, 19), (18, 19),
    (18, 21), (18, 22), (19, 20), (19, 22), (20, 21), (20, 22), (23, 27), (24, 26),
    (24, 27), (25, 26), (25, 27), (26, 27)
]

# Create a graph using NetworkX
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the spring layout algorithm
# The spring layout minimizes edge crossings by simulating a force-directed graph
layout = nx.spring_layout(G)

# Convert the layout to a JSON-serializable format
layout_json = {node: position.tolist() for node, position in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The `networkx` library is used to create a graph `G` from the provided edge list.
2. **Layout Generation**: The `spring_layout` function is used to compute the positions of the nodes. This algorithm simulates a physical system where nodes repel each other, and edges act as springs, resulting in a layout that minimizes edge crossings.
3. **JSON Conversion**: The layout dictionary is converted to a JSON-serializable format using `tolist()` for NumPy arrays.
4. **Output**: The layout is printed in JSON format with indentation for readability.

You can run this script in a Python environment with `networkx` installed. The output will be a JSON object where each key is a node, and the value is a list representing the 2D coordinates of the node.