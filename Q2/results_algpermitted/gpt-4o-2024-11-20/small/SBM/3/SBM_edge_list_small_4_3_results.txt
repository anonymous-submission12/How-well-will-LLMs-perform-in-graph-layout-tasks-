Below is the Python script that generates a layout for the given graph using the `pygraphviz` library, which provides graph layout algorithms that minimize edge crossings. The output is a JSON representation of the graph layout.

```python
import pygraphviz as pgv
import json

def generate_graph_layout(edge_list):
    # Create a directed graph using PyGraphviz
    graph = pgv.AGraph(strict=False, directed=False)

    # Add edges to the graph
    for edge in edge_list:
        graph.add_edge(edge[0], edge[1])

    # Use the 'dot' layout algorithm to minimize edge crossings
    graph.layout(prog='dot')

    # Extract node positions from the layout
    positions = {}
    for node in graph.nodes():
        pos = node.attr['pos']
        if pos:
            x, y = map(float, pos.split(','))
            positions[int(node)] = {'x': x, 'y': y}

    # Return the positions as a JSON object
    return json.dumps(positions, indent=4)

# Edge list provided in the problem
edge_list = [
    (0, 1), (0, 4), (0, 5), (0, 8), (1, 2), (1, 5), (1, 6), (1, 24),
    (2, 3), (2, 5), (2, 6), (3, 4), (3, 9), (4, 6), (5, 6), (7, 8),
    (7, 9), (7, 11), (7, 12), (7, 13), (8, 9), (8, 10), (8, 13), (8, 14),
    (9, 10), (9, 11), (9, 12), (10, 11), (10, 12), (11, 12), (11, 13),
    (11, 20), (14, 15), (14, 16), (14, 17), (14, 19), (14, 20), (15, 18),
    (15, 19), (15, 20), (16, 17), (16, 19), (16, 20), (17, 18), (17, 19),
    (18, 20), (21, 22), (21, 23), (21, 24), (21, 26), (21, 27), (22, 25),
    (22, 26), (22, 27), (23, 24), (23, 25), (23, 26), (23, 27), (24, 25),
    (24, 26), (24, 27), (25, 27), (26, 27)
]

# Generate the graph layout
layout_json = generate_graph_layout(edge_list)

# Print the JSON layout
print(layout_json)
```

### Explanation:
1. **Library Used**: The `pygraphviz` library is used to create the graph and compute the layout using the `dot` algorithm, which is designed to minimize edge crossings.
2. **Node Positions**: The `dot` algorithm computes positions for each node, which are extracted from the `pos` attribute of each node.
3. **Output Format**: The positions are returned as a JSON object, where each node is mapped to its `x` and `y` coordinates.

### Requirements:
- Install `pygraphviz` using `pip install pygraphviz`.
- Ensure Graphviz is installed on your system, as `pygraphviz` depends on it.

### Output:
The script will output the node positions in JSON format, e.g.:
```json
{
    "0": {"x": 100.0, "y": 200.0},
    "1": {"x": 150.0, "y": 250.0},
    ...
}
```