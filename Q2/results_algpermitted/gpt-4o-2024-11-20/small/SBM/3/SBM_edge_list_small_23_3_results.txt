Below is the Python script that generates a layout for the given graph using a layout algorithm that minimizes edge crossings. The script uses the `networkx` library to compute the layout and outputs the layout in JSON format.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 6), (0, 7), (0, 9), (0, 10), (1, 2), (1, 3), 
    (1, 5), (1, 8), (1, 9), (1, 10), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 10), 
    (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 18), (4, 5), (4, 6), 
    (4, 7), (4, 8), (4, 9), (5, 6), (5, 9), (5, 10), (6, 7), (6, 9), (6, 20), (7, 8), 
    (7, 9), (7, 10), (8, 9), (8, 10), (9, 20), (11, 12), (11, 13), (11, 14), (11, 17), 
    (11, 18), (11, 19), (11, 20), (12, 13), (12, 14), (12, 15), (12, 16), (12, 18), 
    (12, 19), (13, 14), (13, 15), (13, 17), (13, 19), (13, 20), (14, 15), (14, 16), 
    (14, 17), (14, 18), (14, 19), (14, 20), (15, 16), (15, 18), (15, 19), (16, 17), 
    (16, 18), (16, 19), (16, 20), (17, 18), (17, 19), (17, 20), (18, 19), (18, 20), 
    (19, 20)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute the layout using the spring layout algorithm
# The spring layout algorithm minimizes edge crossings and distributes nodes evenly
layout = nx.spring_layout(G)

# Convert the layout to a JSON-serializable format
layout_json = {node: position.tolist() for node, position in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The `networkx` library is used to create a graph from the provided edge list.
2. **Layout Algorithm**: The `spring_layout` algorithm is used to compute the layout. This algorithm is based on a force-directed approach, which minimizes edge crossings and distributes nodes evenly in the space.
3. **JSON Output**: The computed layout is converted into a JSON-serializable format and printed as a JSON object.

### Output:
The script will output the graph layout in JSON format, where each node is mapped to its 2D position (x, y). For example:
```json
{
    "0": [0.1, -0.2],
    "1": [-0.3, 0.4],
    ...
}
```

You can run this script in a Python environment with `networkx` installed to generate the layout.