Below is the Python script that generates a layout for the graph using the `pygraphviz` library, which provides graph layout algorithms that minimize edge crossings. The output is a JSON representation of the graph layout.

```python
import pygraphviz as pgv
import json

# Input graph data
edge_list = [
    (0, 1), (0, 2), (0, 4), (0, 5), (1, 3), (1, 5), (1, 6), (1, 7), (2, 5), (2, 6), (2, 13), (2, 19), (2, 23),
    (3, 4), (3, 5), (3, 6), (3, 7), (3, 13), (4, 5), (4, 6), (4, 7), (5, 6), (5, 13), (5, 21), (6, 7), (8, 9),
    (8, 10), (8, 11), (8, 12), (9, 11), (9, 12), (9, 13), (9, 14), (10, 11), (10, 12), (10, 13), (10, 14), (10, 20),
    (11, 12), (11, 13), (11, 14), (12, 13), (12, 14), (13, 14), (13, 20), (15, 16), (15, 18), (15, 19), (15, 20),
    (15, 21), (16, 18), (16, 20), (16, 21), (17, 18), (17, 20), (17, 21), (18, 19), (18, 21), (19, 20), (19, 21),
    (20, 21), (22, 23), (22, 24), (22, 26), (22, 27), (22, 28), (23, 24), (23, 25), (23, 27), (23, 28), (24, 25),
    (24, 27), (24, 28), (25, 27), (27, 28)
]

# Create a graph using pygraphviz
graph = pgv.AGraph(strict=False, directed=False)

# Add edges to the graph
for edge in edge_list:
    graph.add_edge(edge[0], edge[1])

# Use the 'dot' layout algorithm to minimize edge crossings
graph.layout(prog='dot')

# Extract node positions from the layout
positions = {}
for node in graph.nodes():
    pos = node.attr['pos']
    if pos:
        x, y = map(float, pos.split(','))
        positions[node] = {'x': x, 'y': y}

# Convert positions to JSON format
layout_json = json.dumps(positions, indent=4)

# Print the JSON layout
print(layout_json)
```

### Explanation:
1. **Graph Creation**: The script uses `pygraphviz` to create a graph and add edges from the provided edge list.
2. **Layout Algorithm**: The `dot` layout algorithm is used to compute positions for nodes while minimizing edge crossings.
3. **Extract Positions**: Node positions are extracted from the graph layout and stored in a dictionary.
4. **JSON Output**: The positions are converted to JSON format for the final output.

### Requirements:
- Install `pygraphviz` using `pip install pygraphviz`.
- Ensure Graphviz is installed on your system (required by `pygraphviz`).

The output will be a JSON object where each key is a node, and the value is its position (`x` and `y` coordinates).