Below is the Python script that generates a graph layout using the `pygraphviz` library to minimize edge crossings. The final output is the graph layout in JSON format.

```python
import pygraphviz as pgv
import json

def generate_graph_layout(edge_list):
    # Create a graph using PyGraphviz
    graph = pgv.AGraph(strict=False, directed=False)
    
    # Add edges to the graph
    for edge in edge_list:
        graph.add_edge(edge[0], edge[1])
    
    # Use the 'dot' layout algorithm to minimize edge crossings
    graph.layout(prog='dot')
    
    # Extract node positions from the graph
    positions = {}
    for node in graph.nodes():
        pos = node.attr['pos']
        if pos:
            x, y = map(float, pos.split(','))
            positions[node] = {'x': x, 'y': y}
    
    # Convert positions to JSON format
    return json.dumps(positions, indent=4)

# Edge list provided
edge_list = [
    (0, 1), (0, 2), (0, 3), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), 
    (3, 4), (3, 5), (4, 5), (4, 22), (5, 14), (6, 7), (6, 8), (6, 10), (7, 8), 
    (7, 9), (7, 10), (7, 11), (8, 9), (8, 10), (8, 11), (9, 10), (9, 11), 
    (10, 11), (10, 26), (12, 13), (12, 16), (12, 17), (13, 15), (13, 16), 
    (13, 17), (13, 25), (14, 15), (14, 16), (14, 17), (14, 19), (15, 16), 
    (15, 17), (16, 17), (18, 19), (18, 20), (18, 21), (18, 22), (19, 20), 
    (19, 21), (20, 21), (20, 22), (21, 22), (23, 24), (23, 25), (23, 26), 
    (23, 27), (24, 26), (24, 27), (25, 26), (25, 27), (26, 27)
]

# Generate layout and print the result
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### Requirements:
1. Install the `pygraphviz` library:
   ```bash
   pip install pygraphviz
   ```

### Explanation:
- The script uses the `pygraphviz` library to create a graph and apply the `dot` layout algorithm, which is designed to minimize edge crossings.
- Node positions are extracted from the graph and formatted into a JSON object.
- The output is a JSON representation of the graph layout, where each node has `x` and `y` coordinates.

### Output:
The script will print the graph layout in JSON format, with each node's position specified as `x` and `y` coordinates.