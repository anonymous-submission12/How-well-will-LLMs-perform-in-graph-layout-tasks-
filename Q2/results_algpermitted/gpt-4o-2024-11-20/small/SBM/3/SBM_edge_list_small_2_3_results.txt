Below is the Python script that generates a layout for the graph you provided using an existing graph layout algorithm. In this script, the `networkx` library is used to compute the layout. It employs the `spring_layout` method, which minimizes edge crossings by adjusting positions based on a force-directed graph drawing algorithm. The final output is formatted as JSON with node positions.

```python
import networkx as nx
import json

# Graph data in edge list format
edges = [
    (0, 1), (0, 2), (0, 3), (0, 5), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), 
    (2, 3), (2, 5), (2, 6), (3, 5), (3, 6), (3, 22), (4, 5), (4, 6), (5, 6), 
    (5, 21), (7, 9), (7, 10), (7, 11), (7, 13), (8, 9), (8, 13), (8, 17), 
    (10, 12), (10, 13), (11, 12), (11, 13), (12, 13), (13, 18), (14, 15), 
    (14, 16), (14, 17), (14, 18), (14, 20), (15, 17), (15, 20), (16, 17), 
    (16, 18), (16, 20), (17, 18), (17, 20), (18, 19), (18, 20), (18, 21), 
    (21, 22), (21, 25), (21, 26), (21, 27), (22, 23), (22, 24), (22, 25), 
    (22, 26), (22, 27), (23, 24), (23, 25), (23, 26), (24, 25), (24, 26), 
    (24, 27), (25, 26), (25, 27)
]

# Create a graph object
G = nx.Graph()
G.add_edges_from(edges)

# Compute layout using spring layout
positions = nx.spring_layout(G)

# Convert positions to JSON format
layout_json = json.dumps(positions)

# Print the resulting layout in JSON format
print(layout_json)
```

### Explanation of the Code
1. **Input**: The edge list of the graph is used to create a `networkx` graph object.
2. **Spring Layout**:
   - The `spring_layout` function computes positions for nodes in a way that minimizes edge crossings and places nodes in an aesthetically pleasing arrangement.
   - It uses a force-directed algorithm (Fruchterman-Reingold) to calculate positions.
3. **Output**:
   - Positions (coordinates) for nodes are returned as a dictionary where keys are node IDs and values are `(x, y)` coordinates.
   - The dictionary is serialized into JSON format using Python's `json` library for final output.

The JSON output contains the computed positions for each node. You can use this data with external visualization tools.