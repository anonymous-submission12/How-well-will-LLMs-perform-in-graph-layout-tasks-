Below is the Python script that generates a layout for the graph using the `pygraphviz` library, which provides access to Graphviz's layout algorithms. The script outputs the layout in JSON format.

```python
import pygraphviz as pgv
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 7), (1, 2), (1, 8), (2, 3), (2, 9), (3, 4), (3, 10),
    (4, 5), (4, 11), (5, 6), (5, 12), (6, 13), (7, 8), (7, 14), (8, 9),
    (8, 15), (9, 10), (9, 16), (10, 11), (10, 17), (11, 12), (11, 18),
    (12, 13), (12, 19), (13, 20), (14, 15), (15, 16), (16, 17), (17, 18),
    (18, 19), (19, 20)
]

# Create a graph using pygraphviz
graph = pgv.AGraph(strict=False, directed=False)

# Add edges to the graph
for edge in edge_list:
    graph.add_edge(*edge)

# Use the 'neato' layout algorithm to minimize edge crossings
graph.layout(prog='neato')

# Extract node positions from the layout
positions = {}
for node in graph.nodes():
    pos = node.attr['pos']
    if pos:
        x, y = map(float, pos.split(','))
        positions[int(node)] = {'x': x, 'y': y}

# Convert positions to JSON format
positions_json = json.dumps(positions, indent=4)

# Print the JSON output
print(positions_json)
```

### Explanation:
1. **Edge List Input**: The graph is constructed using the provided edge list.
2. **Graph Layout Algorithm**: The `neato` layout algorithm is used, which is designed to minimize edge crossings and produce aesthetically pleasing layouts for undirected graphs.
3. **Node Positions**: After the layout is computed, the positions of the nodes are extracted from the `pos` attribute.
4. **JSON Output**: The positions are formatted into a JSON object, where each node is represented by its coordinates (`x` and `y`).

### Requirements:
- Install `pygraphviz`:
  ```bash
  pip install pygraphviz
  ```
- Ensure Graphviz is installed on your system, as `pygraphviz` depends on it.

### Output:
The script will print the node positions in JSON format, which can be used for further processing or visualization.