Below is the Python script that uses `networkx` and the `kamada_kawai_layout` algorithm to compute the layout positions for your graph while minimizing edge crossings. The layout is returned as a JSON object.

```python
import networkx as nx
import json

def generate_graph_layout(edge_list):
    # Initialize the graph from edge list
    G = nx.Graph()
    G.add_edges_from(edge_list)
    
    # Use the Kamada-Kawai layout algorithm to compute positions
    layout = nx.kamada_kawai_layout(G)
    
    # Convert the layout into a JSON-compatible format
    layout_json = {node: {'x': pos[0], 'y': pos[1]} for node, pos in layout.items()}
    
    return json.dumps(layout_json, indent=4)

# Input edge list
edge_list = [
    (0, 1), (0, 14), (1, 2), (1, 15), (2, 3), (2, 16), (3, 4), (3, 17), 
    (4, 5), (4, 18), (5, 6), (5, 19), (6, 7), (6, 20), (7, 8), (7, 21), 
    (8, 9), (8, 22), (9, 10), (9, 23), (10, 11), (10, 24), (11, 12), (11, 25), 
    (12, 13), (12, 26), (13, 27), (14, 15), (15, 16), (16, 17), (17, 18), 
    (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), 
    (25, 26), (26, 27)
]

# Generate graph layout
layout_json = generate_graph_layout(edge_list)

# Print the layout in JSON format
print(layout_json)
``` 

This script outputs the graph layout in JSON format, where each node is associated with its `x` and `y` coordinates as determined by the Kamada-Kawai layout algorithm.