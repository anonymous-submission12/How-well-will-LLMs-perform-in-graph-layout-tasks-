To generate a layout for the graph that minimizes edge crossings, we can use existing graph layout algorithms from libraries like `graph-tool`. Here's a Python script that computes the layout using a force-directed algorithm (e.g., Fruchterman-Reingold) and outputs the layout in JSON format:

```python
import graph_tool.all as gt
import json

def generate_graph_layout(edge_list):
    # Create the graph
    g = gt.Graph(directed=False)
    vertex_map = {}
    
    # Create vertices and edges
    for edge in edge_list:
        u, v = edge
        if u not in vertex_map:
            vertex_map[u] = g.add_vertex()
        if v not in vertex_map:
            vertex_map[v] = g.add_vertex()
        g.add_edge(vertex_map[u], vertex_map[v])
    
    # Compute the Fruchterman-Reingold force-directed layout
    pos = gt.sfdp_layout(g)
    
    # Convert layout to JSON format
    layout = {int(v): {'x': float(pos[g.vertex(v)][0]), 
                       'y': float(pos[g.vertex(v)][1])} 
              for v in vertex_map}
    
    return json.dumps(layout, indent=4)

# Edge list provided
edge_list = [(0, 1), (0, 7), (1, 2), (1, 8), (2, 3), (2, 9),
             (3, 4), (3, 10), (4, 5), (4, 11), (5, 6), (5, 12),
             (6, 13), (7, 8), (7, 14), (8, 9), (8, 15), (9, 10),
             (9, 16), (10, 11), (10, 17), (11, 12), (11, 18),
             (12, 13), (12, 19), (13, 20), (14, 15), (14, 21),
             (15, 16), (15, 22), (16, 17), (16, 23), (17, 18),
             (17, 24), (18, 19), (18, 25), (19, 20), (19, 26),
             (20, 27), (21, 22), (22, 23), (23, 24), (24, 25),
             (25, 26), (26, 27)]

# Generate layout
layout_json = generate_graph_layout(edge_list)

# Print the JSON layout
print(layout_json)
```

### Key Points:
1. **Library Used**: Here, the `graph-tool` library is used due to its efficient graph manipulation and layout algorithms.
2. **Layout Algorithm**: The `sfdp_layout` function implements a scalable force-directed placement algorithm (variant of Fruchterman-Reingold) that helps minimize edge crossings and yields readable layouts.
3. **Output**: The final output is a JSON structure with vertex positions (x, y coordinates).

### Output Example:
The JSON output might look like this:
```json
{
    "0": {"x": 0.0, "y": 1.2},
    "1": {"x": -0.5, "y": 0.8},
    ...
}
```

You can run this script in a Python environment where `graph-tool` is installed.