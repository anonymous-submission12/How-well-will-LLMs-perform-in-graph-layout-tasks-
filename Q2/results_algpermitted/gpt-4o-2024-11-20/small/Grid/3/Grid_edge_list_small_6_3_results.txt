Below is the Python script that generates a layout for the graph using the `pygraphviz` library, which provides algorithms for graph layout optimization. The script outputs the layout in JSON format.

```python
import pygraphviz as pgv
import json

def generate_graph_layout(edge_list):
    # Create a graph using PyGraphviz
    graph = pgv.AGraph(strict=False, directed=False)
    
    # Add edges to the graph
    for edge in edge_list:
        graph.add_edge(edge[0], edge[1])
    
    # Use the 'dot' layout algorithm to minimize edge crossings
    graph.layout(prog='dot')
    
    # Extract node positions from the layout
    positions = {}
    for node in graph.nodes():
        pos = node.attr['pos']
        if pos:
            x, y = map(float, pos.split(','))
            positions[int(node)] = {'x': x, 'y': y}
    
    # Convert positions to JSON format
    return json.dumps(positions, indent=4)

# Edge list provided in the problem
edge_list = [
    (0, 1), (0, 8), (1, 2), (1, 9), (2, 3), (2, 10), (3, 4), (3, 11),
    (4, 5), (4, 12), (5, 6), (5, 13), (6, 7), (6, 14), (7, 15), (8, 9),
    (8, 16), (9, 10), (9, 17), (10, 11), (10, 18), (11, 12), (11, 19),
    (12, 13), (12, 20), (13, 14), (13, 21), (14, 15), (14, 22), (15, 23),
    (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23)
]

# Generate the layout and print it
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### Explanation:
1. **Graph Creation**: The script uses `pygraphviz` to create a graph and add edges from the provided edge list.
2. **Layout Algorithm**: The `dot` layout algorithm is used to minimize edge crossings. This algorithm is part of Graphviz and is suitable for hierarchical layouts.
3. **Node Positions**: After the layout is computed, the positions of nodes are extracted from the `pos` attribute, which contains the coordinates in the format `x,y`.
4. **JSON Output**: The positions are formatted into a JSON object, where each node is a key, and its position is represented as a dictionary with `x` and `y` coordinates.

### Requirements:
- Install `pygraphviz` using `pip install pygraphviz` if not already installed.

### Output:
The script will output the node positions in JSON format, which can be used for further processing or visualization.