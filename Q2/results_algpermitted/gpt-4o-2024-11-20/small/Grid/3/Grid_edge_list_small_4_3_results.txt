Here is a Python script that generates a graph layout for your provided edge list. The layout minimizes edge crossings using `graphviz`'s `dot` layout algorithm. The final layout is given as a JSON object.

```python
import json
import pydot
from collections import defaultdict

def generate_graph_layout(edge_list):
    # Create a graph with pydot
    graph = pydot.Dot(graph_type='graph', layout="dot")

    # Add edges to the graph
    for edge in edge_list:
        graph.add_edge(pydot.Edge(str(edge[0]), str(edge[1])))

    # Generate the layout using Graphviz's dot algorithm
    graph.set_prog("dot")
    graph_layout_string = graph.create_dot()

    # Parse the positions from the dot format output
    positions = defaultdict(tuple)

    for line in graph_layout_string.decode().splitlines():
        if "pos=" in line:
            # Extract node and position information
            parts = line.split()
            node = parts[0].strip('"')
            for part in parts:
                if part.startswith('pos='):
                    pos = part.split('=')[1].strip('"')
                    x, y = map(float, pos.split(','))
                    positions[int(node)] = (x, y)

    return json.dumps(positions, indent=4)

# Edge list as provided
edge_list = [
    (0, 1), (0, 15), (1, 2), (1, 16), (2, 3), (2, 17), (3, 4), (3, 18),
    (4, 5), (4, 19), (5, 6), (5, 20), (6, 7), (6, 21), (7, 8), (7, 22),
    (8, 9), (8, 23), (9, 10), (9, 24), (10, 11), (10, 25), (11, 12), (11, 26),
    (12, 13), (12, 27), (13, 14), (13, 28), (14, 29), (15, 16), (16, 17),
    (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24),
    (24, 25), (25, 26), (26, 27), (27, 28), (28, 29)
]

# Generate layout
layout_json = generate_graph_layout(edge_list)

# Print the JSON representation of the layout
print(layout_json)
```

### Notes:
1. This code uses the `pydot` library for interfacing with Graphviz.
2. The dot layout algorithm from Graphviz minimizes edge crossings and produces a layout commonly used for hierarchical graphs.
3. You need to install `pydot` (`pip install pydot`) and Graphviz (`apt-get install graphviz` or equivalent) for the code to work.
4. The output is a JSON object where keys are node IDs and values are tuples representing the `x, y` positions.