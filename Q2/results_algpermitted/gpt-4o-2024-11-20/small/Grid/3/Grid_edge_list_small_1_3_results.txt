Below is the Python script that generates a layout for the given graph using a layout algorithm that minimizes edge crossings. The script uses the `networkx` library to compute the layout and outputs the positions in JSON format.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 11), (1, 2), (1, 12), (2, 3), (2, 13), (3, 4), (3, 14),
    (4, 5), (4, 15), (5, 6), (5, 16), (6, 7), (6, 17), (7, 8), (7, 18),
    (8, 9), (8, 19), (9, 10), (9, 20), (10, 21), (11, 12), (12, 13),
    (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute the layout using the spring layout algorithm
# The spring layout minimizes edge crossings by simulating a force-directed graph
layout = nx.spring_layout(G)

# Convert the layout to a JSON-serializable format
layout_json = {node: position.tolist() for node, position in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The `networkx` library is used to create a graph from the provided edge list.
2. **Layout Algorithm**: The `spring_layout` function is used to compute the layout. This is a force-directed algorithm that minimizes edge crossings by simulating physical forces between nodes and edges.
3. **JSON Conversion**: The layout positions are converted to a JSON-serializable format using a dictionary comprehension.
4. **Output**: The final layout is printed in JSON format.

You can run this script in a Python environment with `networkx` installed. The output will be a JSON object containing the positions of the nodes in the graph.