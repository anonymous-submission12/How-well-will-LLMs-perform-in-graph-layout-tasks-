Below is the Python code that generates a layout for the graph. The layout is calculated to maintain consistency between Euclidean distance and graph-theoretic distance using the `spring_layout` algorithm from NetworkX, which is specifically designed for this purpose. The output is returned as a JSON representation of node positions.

```python
import networkx as nx
import json

# Define the edge list of the graph
edge_list = [
    (0, 1), (0, 7), (1, 2), (1, 8), (2, 3), (2, 9), (3, 4), (3, 10),
    (4, 5), (4, 11), (5, 6), (5, 12), (6, 13), (7, 8), (7, 14), (8, 9),
    (8, 15), (9, 10), (9, 16), (10, 11), (10, 17), (11, 12), (11, 18),
    (12, 13), (12, 19), (13, 20), (14, 15), (15, 16), (16, 17), (17, 18),
    (18, 19), (19, 20)
]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate node positions using the spring layout algorithm
positions = nx.spring_layout(G)  # Computes positions for nodes in the graph

# Convert positions to JSON serializable format
positions_json = {node: pos.tolist() for node, pos in positions.items()}

# Print the positions as JSON
print(json.dumps(positions_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is defined using the provided `edge_list` and initialized using NetworkX.
2. **Spring Layout Algorithm**: The `spring_layout` function from NetworkX is used to compute the 2D positions of nodes. This algorithm tries to position nodes such that their relative distances (Euclidean) are proportional to their graph-theoretic shortest path distances.
3. **JSON Serialization**: The node positions (which are NumPy arrays) are converted to standard Python lists and dumped into a JSON format for easy readability and use.
4. **Final Output**: The script prints the layout in JSON format.

You can run the above script to generate the layout in JSON format for the given graph.