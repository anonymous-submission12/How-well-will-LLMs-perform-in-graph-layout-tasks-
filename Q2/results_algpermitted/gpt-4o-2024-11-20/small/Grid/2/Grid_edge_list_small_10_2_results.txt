Here is the Python script to generate a layout for the given graph using the Fruchterman-Reingold force-directed algorithm, which maintains consistency between Euclidean distance and graph-theoretic distance. The output is in JSON format.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 10), (1, 2), (1, 11), (2, 3), (2, 12), (3, 4), (3, 13), 
    (4, 5), (4, 14), (5, 6), (5, 15), (6, 7), (6, 16), (7, 8), (7, 17), 
    (8, 9), (8, 18), (9, 19), (10, 11), (10, 20), (11, 12), (11, 21), 
    (12, 13), (12, 22), (13, 14), (13, 23), (14, 15), (14, 24), (15, 16), 
    (15, 25), (16, 17), (16, 26), (17, 18), (17, 27), (18, 19), (18, 28), 
    (19, 29), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), 
    (26, 27), (27, 28), (28, 29)
]

# Create a graph using NetworkX
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Fruchterman-Reingold force-directed algorithm
layout = nx.spring_layout(G)

# Convert the layout to a JSON-serializable format
layout_json = {node: position.tolist() for node, position in layout.items()}

# Print the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the `networkx` library, which provides tools for graph manipulation and analysis.
2. **Layout Algorithm**: The `spring_layout` function implements the Fruchterman-Reingold force-directed algorithm, which positions nodes in a way that reflects graph-theoretic distances.
3. **JSON Conversion**: The layout dictionary is converted to a JSON-serializable format using `tolist()` for NumPy arrays.
4. **Output**: The final layout is printed in JSON format.

You can run this script in a Python environment with `networkx` installed. The output will be a JSON object where each key is a node, and the value is a 2D position `[x, y]`.