Below is the Python script to generate a layout for the given graph using the Fruchterman-Reingold force-directed algorithm, which maintains consistency between Euclidean distance and graph-theoretic distance. The output is a JSON representation of the graph layout.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 14), (1, 2), (1, 15), (2, 3), (2, 16), (3, 4), (3, 17),
    (4, 5), (4, 18), (5, 6), (5, 19), (6, 7), (6, 20), (7, 8), (7, 21),
    (8, 9), (8, 22), (9, 10), (9, 23), (10, 11), (10, 24), (11, 12), (11, 25),
    (12, 13), (12, 26), (13, 27), (14, 15), (15, 16), (16, 17), (17, 18),
    (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25),
    (25, 26), (26, 27)
]

# Create a graph using NetworkX
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Fruchterman-Reingold force-directed algorithm
layout = nx.spring_layout(G)

# Convert the layout to a JSON-serializable format
layout_json = {node: position.tolist() for node, position in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The `networkx.Graph()` object is created, and the edges are added using the `add_edges_from()` method.
2. **Layout Generation**: The `spring_layout` function from NetworkX is used to compute the layout. This function implements the Fruchterman-Reingold force-directed algorithm.
3. **JSON Conversion**: The layout dictionary is converted to a JSON-serializable format by converting NumPy arrays (used internally by NetworkX) to lists.
4. **Output**: The layout is printed in JSON format with indentation for readability.

You can run this script in a Python environment to generate the graph layout. The output will be a JSON object where each key is a node, and the value is a 2D position `[x, y]`.