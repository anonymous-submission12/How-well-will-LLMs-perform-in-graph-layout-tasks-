Below is the Python script that generates a graph layout using the `spring_layout` algorithm from the `networkx` library. The layout ensures consistency between Euclidean distance and graph-theoretic distance. The final output is the graph layout in JSON format.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 15), (1, 2), (1, 16), (2, 3), (2, 17), (3, 4), (3, 18),
    (4, 5), (4, 19), (5, 6), (5, 20), (6, 7), (6, 21), (7, 8), (7, 22),
    (8, 9), (8, 23), (9, 10), (9, 24), (10, 11), (10, 25), (11, 12), (11, 26),
    (12, 13), (12, 27), (13, 14), (13, 28), (14, 29), (15, 16), (16, 17),
    (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24),
    (24, 25), (25, 26), (26, 27), (27, 28), (28, 29)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the spring layout algorithm
positions = nx.spring_layout(G)

# Convert the positions to JSON format
positions_json = json.dumps(positions)

# Print the JSON output
print(positions_json)
```

### Explanation:
1. **Edge List**: The graph is defined using the provided edge list.
2. **Graph Creation**: A `networkx` graph is created using the `add_edges_from` method.
3. **Spring Layout**: The `spring_layout` algorithm is used to compute node positions. This algorithm ensures that the Euclidean distances between nodes in the layout are proportional to their graph-theoretic distances.
4. **JSON Conversion**: The positions dictionary is converted to JSON format using the `json.dumps` method.
5. **Output**: The script outputs the graph layout in JSON format.

You can run this script in a Python environment to generate the desired graph layout.