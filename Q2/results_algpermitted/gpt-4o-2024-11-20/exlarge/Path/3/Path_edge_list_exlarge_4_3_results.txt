Below is the Python script that generates a layout for the graph using the `pygraphviz` library, which provides graph layout algorithms to minimize edge crossings. The output is a JSON representation of the graph layout.

```python
import pygraphviz as pgv
import json

def generate_graph_layout(edge_list):
    # Create a directed graph using PyGraphviz
    graph = pgv.AGraph(strict=False, directed=False)

    # Add edges to the graph
    for edge in edge_list:
        graph.add_edge(edge[0], edge[1])

    # Use the 'dot' layout algorithm to minimize edge crossings
    graph.layout(prog='dot')

    # Extract node positions from the layout
    positions = {}
    for node in graph.nodes():
        pos = node.attr['pos']
        if pos:
            x, y = map(float, pos.split(','))
            positions[int(node)] = {'x': x, 'y': y}

    # Return the positions as a JSON object
    return json.dumps(positions, indent=4)

# Edge list provided in the problem
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9),
    (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16),
    (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23),
    (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30),
    (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37),
    (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44),
    (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51),
    (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58),
    (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65),
    (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72),
    (72, 73)
]

# Generate the graph layout
layout_json = generate_graph_layout(edge_list)

# Print the JSON layout
print(layout_json)
```

### Explanation:
1. **PyGraphviz**: The script uses the `pygraphviz` library to create and layout the graph. The `dot` layout algorithm is used to minimize edge crossings.
2. **Node Positions**: After the layout is computed, the positions of the nodes are extracted from the `pos` attribute of each node.
3. **JSON Output**: The positions are formatted into a JSON object, where each node is represented as a key, and its position is a dictionary with `x` and `y` coordinates.

### Output:
The script will output the node positions in JSON format, which can be used for further processing or visualization. Make sure you have `pygraphviz` installed (`pip install pygraphviz`) before running the script.