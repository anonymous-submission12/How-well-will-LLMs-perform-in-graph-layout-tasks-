To compute a graph layout that minimizes edge crossings, we can use the `pygraphviz` package, which provides powerful graph layout algorithms such as the `neato`, `dot`, and `sfdp` engines. The output will be the node positions in JSON format. Below is the Python script for the task:

```python
import pygraphviz as pgv
import json

# Graph edge list
edges = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10),
    (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18),
    (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26),
    (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34),
    (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42),
    (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50),
    (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58),
    (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66),
    (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74),
    (74, 75), (75, 76), (76, 77), (77, 78), (78, 79)
]

# Create a graph using pygraphviz
G = pgv.AGraph(strict=False, directed=False)

# Add edges to the graph
for edge in edges:
    G.add_edge(*edge)

# Use the layout algorithm to compute positions (e.g., 'neato' minimizes edge crossings)
G.layout(prog='neato')

# Extract node positions
positions = {}
for node in G.nodes():
    pos = node.attr['pos']
    if pos:
        x, y = map(float, pos.split(','))
        positions[int(node)] = {'x': x, 'y': y}

# Output the layout in JSON format
layout_json = json.dumps(positions, indent=2)
print(layout_json)
```

### Explanation:
1. **Graph Creation**: We use `pygraphviz` to create the graph and add edges from the edge list.
2. **Layout Algorithm**: The `neato` algorithm is used to compute node positions in a way that minimizes edge crossings.
3. **Extract Positions**: We fetch the `pos` attribute for each node, which contains its computed coordinates.
4. **Output**: Node positions are saved as a dictionary and converted to JSON format.

### Usage:
- Install `pygraphviz` using `pip install pygraphviz`.
- Run the script. The node positions will be printed in JSON format.