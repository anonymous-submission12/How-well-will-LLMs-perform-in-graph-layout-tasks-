Here's a Python script that generates a layout for the provided graph and outputs the layout as a JSON object. The script uses the `networkx` library to calculate positions using the `spring_layout` algorithm, which is designed to minimize edge crossings and distribute nodes aesthetically. If `networkx` is installed on your system, running this script will give the desired JSON output.

```python
import networkx as nx
import json

def generate_graph_layout(edge_list):
    # Create a graph from the edge list
    G = nx.Graph()
    G.add_edges_from(edge_list)
    
    # Generate layout using the spring layout algorithm
    # Spring layout minimizes edge crossings and provides a visually appealing distribution
    positions = nx.spring_layout(G)
    
    # Convert positions dictionary into JSON format
    layout_json = json.dumps(positions, indent=4)
    
    return layout_json

# Define the edge list
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), 
    (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18),
    (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26),
    (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34),
    (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42),
    (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50),
    (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58),
    (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66),
    (66, 67), (67, 68), (68, 69), (69, 70), (70, 71)
]

# Generate layout and print the output
graph_layout_json = generate_graph_layout(edge_list)
print(graph_layout_json)
```

### Explanation:

1. **Library Choice**: The script uses `networkx` for graph manipulation and layout calculation.
2. **Spring Layout Algorithm**: The `spring_layout` algorithm is applied to optimize the graph's visual layout by minimizing edge crossings.
3. **JSON Format**: The node positions are formatted as a JSON object for further use. Each node's position is represented as a dictionary key-value pair, where the key is the node ID and the value is its position as a list `[x, y]` of coordinates.

### Output (Example JSON Format):
The output will look like this (with example positions):
```json
{
    "0": [0.1, 0.2],
    "1": [0.3, 0.4],
    "2": [0.5, 0.6],
    ...
}
``` 

You can save this JSON output into a file or further manipulate it as required.