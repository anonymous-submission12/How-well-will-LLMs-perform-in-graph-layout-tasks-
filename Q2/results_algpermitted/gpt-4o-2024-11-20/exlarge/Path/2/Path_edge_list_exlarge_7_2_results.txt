Here is the Python script to generate a graph layout using the edge list you provided. This script uses the `networkx` library for the graph representation and the `spring_layout` algorithm to ensure consistency between Euclidean distance and graph-theoretic distance. The final output is the graph layout in JSON format.

```python
import networkx as nx
import json

# Create the graph from the edge list
edge_list = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), 
             (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), 
             (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), 
             (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), 
             (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), 
             (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), 
             (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), 
             (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), 
             (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74), 
             (74, 75), (75, 76)]

G = nx.Graph()
G.add_edges_from(edge_list)

# Compute the graph layout using the spring_layout algorithm
positions = nx.spring_layout(G)

# Convert positions to a JSON-compatible format
layout_json = {node: {'x': float(pos[0]), 'y': float(pos[1])} for node, pos in positions.items()}

# Output the layout in JSON format
print(json.dumps(layout_json, indent=2))
```

### Explanation:
1. **Graph Representation**: The script uses `networkx.Graph` to create a graph from the edge list.
2. **Layout Algorithm**: The `spring_layout` function is chosen as it attempts to minimize the difference between Euclidean distance and graph-theoretic distance, which aligns with your requirement.
3. **JSON Output Format**: The layout is converted into a JSON-compatible format where each node has its `x` and `y` coordinates. This ensures the result is well-structured and easy to consume.

You can run this code in a Python environment with the `networkx` and `json` libraries installed. It will output the JSON-formatted graph layout to the console.