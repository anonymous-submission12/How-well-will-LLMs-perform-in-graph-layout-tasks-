Here's the Python script to compute a layout for the graph provided, maintaining consistency between Euclidean distance and graph-theoretic distance using an existing graph layout algorithm. The final output is in JSON format.

```python
import json
import networkx as nx

def generate_graph_layout(edge_list):
    # Create a graph from the edge list
    G = nx.Graph()
    G.add_edges_from(edge_list)
    
    # Compute the layout using a spring layout algorithm
    # The spring layout ensures that the Euclidean distance roughly corresponds to the graph-theoretic distance
    pos = nx.spring_layout(G)
    
    # Convert the layout to JSON format
    layout_json = {node: pos[node] for node in pos}
    return json.dumps(layout_json, indent=4)

# Define the edge list
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10),
    (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18),
    (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26),
    (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34),
    (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42),
    (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50),
    (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58),
    (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66),
    (66, 67), (67, 68), (68, 69), (69, 70), (70, 71)
]

# Generate and print the graph layout in JSON format
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### Key Notes:
1. **Spring Layout Algorithm**: Used here because it uses a force-directed algorithm that positions nodes in such a way that the Euclidean distances between nodes roughly correspond to their graph-theoretic distances.
2. **NetworkX**: This script uses the `spring_layout` function from the NetworkX library to compute the layout.
3. **JSON Output**: The final positions (layout) of nodes are outputted in JSON format, where the keys are node IDs, and the values are the 2D coordinates (x, y) of the nodes in the layout.

Modify the `edge_list` according to your graph data if needed.