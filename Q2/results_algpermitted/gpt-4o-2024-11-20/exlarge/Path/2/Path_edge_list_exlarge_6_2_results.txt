Below is the Python script to compute a graph layout using a layout algorithm that ensures consistency between Euclidean distance and graph-theoretic distance. We use the Fruchterman-Reingold force-directed layout algorithm via `networkx`. The final layout is serialized in JSON format.

```python
import networkx as nx
import json

# Define the graph edge list
edge_list = [
    (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), 
    (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), 
    (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), 
    (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), 
    (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), 
    (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), 
    (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), 
    (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), 
    (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), 
    (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), 
    (72, 73), (73, 74), (74, 75)
]

# Generate the graph
graph = nx.Graph()
graph.add_edges_from(edge_list)

# Compute the layout using the Fruchterman-Reingold force-directed algorithm
layout = nx.spring_layout(graph, seed=42)  # `seed` ensures reproducibility

# Convert layout to a dictionary for JSON serialization
layout_json = {node: list(pos) for node, pos in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**:
   - We define a `networkx` graph and populate it with the provided edge list.

2. **Layout Algorithm**:
   - The `spring_layout` function uses the Fruchterman-Reingold force-directed algorithm, which attempts to distribute nodes such that the Euclidean distance corresponds to graph-theoretic distance. This ensures the desired consistency.

3. **Serialization**:
   - The resulting node positions are stored in a Python dictionary, which is then serialized into a JSON string using the `json.dumps()` function.

4. **Reproducibility**:
   - A `seed` is passed to `spring_layout` to ensure that the generated layout is consistent across multiple runs.