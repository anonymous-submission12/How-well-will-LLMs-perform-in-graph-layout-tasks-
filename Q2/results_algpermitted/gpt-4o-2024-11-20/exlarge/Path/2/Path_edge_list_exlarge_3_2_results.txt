Here's a Python script that uses the `networkx` package to generate a layout for the provided graph. This script computes the layout using the `spring_layout` algorithm, which maintains consistency between Euclidean distance and graph-theoretic distance. At the end, the result is exported as a JSON object.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10),
             (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), 
             (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), 
             (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), 
             (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), 
             (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), 
             (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), 
             (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), 
             (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72)]

# Create a graph using networkx
graph = nx.Graph(edge_list)

# Compute the spring layout
layout = nx.spring_layout(graph)

# Convert the layout to a JSON-serializable dictionary
layout_json = {node: position.tolist() for node, position in layout.items()}

# Output the JSON layout
print(json.dumps(layout_json, indent=2))
```

### Explanation:
1. **Graph Definition**: 
   The edge list is used to create a graph using `networkx.Graph`.

2. **Spring Layout**:
   The `spring_layout` algorithm computes a layout where Euclidean distances in the embedding space aim to reflect graph-theoretic distances. It is physics-based and well-suited to ensure consistency between these distances.

3. **JSON Conversion**:
   The positions generated by `spring_layout` are stored as NumPy arrays by default. The script converts these arrays to plain lists so they can be serialized to JSON.

4. **Output**:
   The layout is printed as a JSON object for external use. This ensures the visualization is decoupled from position computation.

You can run this script, and it will output the graph layout directly in JSON format.