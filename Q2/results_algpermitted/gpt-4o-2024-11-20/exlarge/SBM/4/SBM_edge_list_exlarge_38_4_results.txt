Here's the Python script to generate the layout for the graph using a community detection algorithm and an appropriate graph visualization layout method. The script utilizes the `networkx` library for graph processing and community detection, and the layout is computed using the `spring_layout` algorithm to keep the community structure clear. The output is provided as JSON.

```python
import networkx as nx
import json
from networkx.algorithms.community import greedy_modularity_communities

# Input edge list
edge_list = [
    (0, 1), (0, 3), (0, 5), (0, 7), (0, 15), (1, 4), (1, 5), (1, 7), (1, 8), (1, 57), 
    (2, 3), (2, 4), (2, 5), (2, 6), (3, 5), (3, 7), (4, 5), (4, 6), (4, 7), (4, 41),
    (5, 8), (5, 9), (6, 7), (6, 75), (7, 9), (8, 9), (10, 14), (10, 15), (10, 16),
    (10, 18), (11, 12), (11, 15), (11, 16), (11, 19), (12, 15), (12, 16), (12, 18),
    (13, 18), (14, 15), (14, 19), (15, 16), (15, 18), (15, 19), (16, 18), (16, 62),
    (17, 18), (19, 34), (20, 23), (20, 25), (20, 26), (20, 27), (21, 23), (21, 28),
    (21, 29), (22, 23), (22, 25), (22, 27), (22, 29), (22, 48), (23, 24), (23, 26),
    (24, 25), (24, 26), (24, 27), (24, 29), (25, 27), (25, 71), (26, 27), (26, 29),
    (27, 29), (27, 61), (30, 47), (32, 30), (32, 35), (33, 30), (33, 34), (33, 37),
    (34, 31), (35, 31), (35, 36), (35, 37), (36, 30), (36, 37), (36, 68), (37, 38),
    (37, 50), (38, 39), (39, 31), (40, 42), (40, 44), (40, 45), (41, 45), (41, 46),
    (41, 49), (42, 45), (42, 46), (42, 48), (43, 46), (43, 49), (44, 45), (44, 49),
    (45, 48), (46, 47), (48, 49), (49, 61), (50, 51), (50, 53), (50, 54), (50, 55),
    (50, 57), (50, 58), (51, 52), (51, 54), (52, 54), (52, 57), (52, 58), (53, 54),
    (53, 56), (54, 56), (54, 57), (54, 72), (55, 58), (56, 58), (57, 58), (57, 76),
    (59, 60), (59, 61), (59, 62), (60, 62), (60, 63), (61, 62), (62, 63), (64, 60),
    (64, 62), (64, 66), (65, 59), (65, 66), (66, 59), (66, 61), (66, 63), (67, 60),
    (67, 63), (68, 70), (68, 72), (69, 73), (69, 74), (70, 71), (70, 74), (71, 72),
    (71, 73), (71, 74), (72, 73), (72, 76), (73, 76), (74, 76), (75, 76)
]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Detect communities using greedy modularity
communities = greedy_modularity_communities(G)

# Assign community number as node attribute
community_map = {}
for community_id, community_nodes in enumerate(communities):
    for node in community_nodes:
        community_map[node] = community_id

nx.set_node_attributes(G, community_map, "community")

# Generate positions using spring_layout (good for preserving community structure)
pos = nx.spring_layout(G)

# Format position output in JSON
layout = {node: {"x": coordinates[0], "y": coordinates[1], "community": G.nodes[node]["community"]} for node, coordinates in pos.items()}
layout_json = json.dumps(layout, indent=2)

# Print JSON layout
print(layout_json)
```

### Explanation
1. **Input Edge List**: The graph is built using the specified edge list.
2. **Community Detection**: Communities are detected using the Greedy Modularity algorithm (`greedy_modularity_communities`).
3. **Spring Layout**: The node positions are computed using the spring layout algorithm, which helps maintain community structure visually.
4. **Simplified Output**: The JSON output lists each node's position (`x` and `y`) and its community assignment.

This script avoids drawing the graph visually and provides position data in JSON format suitable for external visualization tools.