Below is the Python script that generates a layout for the given graph using the Fruchterman-Reingold force-directed algorithm, which maintains consistency between Euclidean distance and graph-theoretic distance. The output is a JSON representation of the graph layout.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 5), (0, 6), (0, 9), (0, 11), (1, 3), (1, 5), (1, 7), (1, 9), (1, 18), (1, 77), 
    (2, 4), (2, 5), (3, 5), (3, 6), (3, 8), (3, 11), (3, 12), (3, 46), (4, 6), (4, 10), (4, 12), 
    (5, 9), (5, 11), (6, 7), (6, 9), (6, 11), (7, 8), (7, 12), (8, 9), (8, 11), (8, 12), (9, 10), 
    (9, 12), (13, 18), (13, 21), (13, 23), (13, 24), (14, 16), (14, 20), (14, 21), (14, 22), 
    (14, 25), (15, 16), (15, 17), (15, 18), (15, 19), (15, 20), (15, 23), (15, 24), (15, 25), 
    (16, 18), (16, 20), (16, 23), (16, 25), (17, 22), (17, 23), (17, 24), (17, 25), (18, 20), 
    (18, 22), (18, 25), (19, 20), (19, 22), (19, 25), (20, 22), (20, 23), (20, 25), (21, 23), 
    (21, 31), (22, 25), (23, 24), (23, 51), (25, 33), (26, 28), (26, 29), (26, 30), (27, 28), 
    (27, 30), (28, 30), (28, 31), (28, 56), (29, 30), (30, 31), (32, 28), (32, 31), (32, 33), 
    (32, 34), (32, 35), (32, 36), (32, 38), (33, 27), (33, 30), (33, 31), (33, 34), (33, 36), 
    (33, 38), (34, 35), (34, 37), (35, 26), (35, 31), (35, 36), (35, 38), (35, 40), (36, 26), 
    (36, 29), (36, 38), (37, 26), (37, 28), (37, 31), (37, 38), (38, 26), (38, 29), (39, 40), 
    (39, 43), (39, 44), (39, 48), (39, 49), (39, 51), (40, 41), (40, 45), (40, 48), (40, 49), 
    (41, 43), (41, 46), (41, 47), (41, 50), (42, 43), (42, 45), (42, 48), (42, 49), (43, 44), 
    (43, 46), (43, 48), (43, 50), (43, 51), (43, 52), (44, 48), (44, 49), (44, 50), (46, 47), 
    (46, 48), (46, 50), (47, 48), (48, 51), (49, 50), (49, 51), (52, 54), (52, 57), (52, 58), 
    (53, 55), (54, 55), (54, 57), (55, 57), (55, 58), (55, 61), (55, 63), (56, 59), (57, 61), 
    (59, 60), (60, 61), (64, 53), (64, 59), (64, 60), (64, 62), (65, 67), (65, 71), (65, 73), 
    (65, 74), (65, 76), (66, 67), (66, 69), (66, 70), (66, 71), (66, 74), (67, 68), (67, 73), 
    (67, 75), (67, 76), (68, 70), (68, 74), (68, 75), (69, 71), (69, 72), (69, 73), (70, 76), 
    (71, 72), (71, 74), (71, 75), (71, 76), (71, 77), (72, 73), (72, 75), (72, 77), (73, 74), 
    (73, 77), (74, 77), (75, 77)
]

# Create a graph using NetworkX
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Fruchterman-Reingold force-directed algorithm
layout = nx.spring_layout(G)

# Convert the layout to a JSON-serializable format
layout_json = {node: pos.tolist() for node, pos in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The graph is created using the `networkx.Graph()` class and the provided edge list.
2. **Layout Generation**: The `spring_layout` function from NetworkX is used to compute the layout. This function implements the Fruchterman-Reingold force-directed algorithm.
3. **JSON Conversion**: The layout dictionary is converted to a JSON-serializable format by converting NumPy arrays to lists.
4. **Output**: The layout is printed in JSON format.

You can run this script in a Python environment to generate the graph layout. The output will be a JSON object where each key is a node, and the value is a 2D position `[x, y]`.