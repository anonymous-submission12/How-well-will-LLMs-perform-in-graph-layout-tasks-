Below is the Python script that generates a layout for the given graph using the Fruchterman-Reingold force-directed algorithm, which maintains consistency between Euclidean distance and graph-theoretic distance. The output is in JSON format.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 73), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), 
    (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), 
    (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), 
    (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), 
    (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), 
    (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), 
    (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), 
    (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), 
    (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), 
    (72, 73)
]

# Create a graph using NetworkX
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Fruchterman-Reingold force-directed algorithm
layout = nx.spring_layout(G)

# Convert the layout to a JSON-serializable format
layout_json = {node: position.tolist() for node, position in layout.items()}

# Print the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The `networkx` library is used to create a graph from the provided edge list.
2. **Layout Algorithm**: The `spring_layout` function implements the Fruchterman-Reingold force-directed algorithm, which positions nodes in a way that reflects graph-theoretic distances.
3. **JSON Conversion**: The layout dictionary is converted to a JSON-serializable format using `tolist()` for NumPy arrays.
4. **Output**: The layout is printed in JSON format.

You can run this script in a Python environment to generate the graph layout. The output will be a JSON object where each key is a node, and the value is a 2D coordinate `[x, y]`.