Here is the Python script to generate a graph layout based on keeping consistency between Euclidean distance and graph-theoretic distance. We'll use the `networkx` library's `spring_layout` algorithm, which uses a force-directed layout to achieve this consistency.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 70), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), 
    (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), 
    (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), 
    (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), 
    (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), 
    (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), 
    (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), 
    (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), 
    (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), 
    (65, 66), (66, 67), (67, 68), (68, 69), (69, 70)
]

# Create a graph from the edge list
graph = nx.Graph()
graph.add_edges_from(edge_list)

# Compute graph layout using the spring layout
# `spring_layout` maintains consistency between Euclidean and graph-theoretic distances
positions = nx.spring_layout(graph)

# Convert positions to a dictionary with node keys and coordinates as values
layout = {node: {"x": float(pos[0]), "y": float(pos[1])} for node, pos in positions.items()}

# Output the layout as a JSON string
layout_json = json.dumps(layout, indent=4)
print(layout_json)
```

### Explanation:
1. **Edge List to Graph**: The input edge list is used to construct a `networkx` graph.
2. **Layout Algorithm**: The `spring_layout` function from `networkx` produces a force-directed layout, ensuring consistency between Euclidean and graph-theoretic distances.
3. **Output Transformation**: The positions are transformed into a serializable JSON format, with node names as keys and 2D coordinates (`x`, `y`) in the values.
4. **Final Output**: The layout is output as JSON.

You can execute this script in a Python environment with `networkx` installed. The `layout_json` will provide the positions of the nodes in the required format.