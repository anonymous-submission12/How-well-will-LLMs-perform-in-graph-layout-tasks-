Below is the Python script to generate a layout for the provided graph using a layout algorithm that attempts to maintain consistency between Euclidean distance and graph-theoretic distance. The final output is formatted in JSON.

```python
import json
import networkx as nx

def generate_graph_layout(edge_list):
    # Create a graph using networkx
    G = nx.Graph()
    G.add_edges_from(edge_list)
    
    # Generate layout for the graph using the spring layout algorithm
    # The spring layout attempts to keep Euclidean distance proportional to graph-theoretic distance
    positions = nx.spring_layout(G)
    
    # Format the positions as a dictionary
    layout = {str(node): {"x": pos[0], "y": pos[1]} for node, pos in positions.items()}
    
    # Return the layout in JSON format
    return json.dumps(layout, indent=2)

# Input edge_list
edge_list = [
    (0, 1), (0, 78), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9),
    (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), 
    (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25),
    (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), 
    (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41),
    (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49),
    (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57),
    (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65),
    (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73),
    (73, 74), (74, 75), (75, 76), (76, 77), (77, 78)
]

# Get the layout in JSON format
graph_layout_json = generate_graph_layout(edge_list)

# Print the JSON output
print(graph_layout_json)
```

### Explanation:
1. **Graph Input**: The `edge_list` is used to define the connections between nodes within the graph.
2. **Graph Construction**: The graph is created using the `networkx` library.
3. **Spring Layout Algorithm**: The `spring_layout` algorithm determines the coordinates of each node while respecting graph-theoretic distances.
4. **Position Formatting**: The positions are converted into a dictionary with nodes as keys and their `(x, y)` coordinates as values.
5. **JSON Output**: The layout is converted into JSON format for easy readability and further export.

To run this script, ensure you have the `networkx` library installed. The JSON output will contain the positions of nodes in the graph.