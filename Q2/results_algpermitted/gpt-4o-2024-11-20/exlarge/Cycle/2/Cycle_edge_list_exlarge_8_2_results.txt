Here is the Python code to calculate a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance. We'll use `networkx` to handle the graph data and `spring_layout` to determine the positions of each node. The positions will then be output in JSON format.

```python
import json
import networkx as nx

# Define the edge list for the graph
edge_list = [
    (0, 1), (0, 77), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), 
    (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), 
    (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), 
    (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), 
    (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), 
    (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), 
    (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), 
    (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), 
    (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), 
    (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), 
    (72, 73), (73, 74), (74, 75), (75, 76), (76, 77)
]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute the layout using the spring layout algorithm
# spring_layout tries to position nodes in a way that maintains consistency 
# between Euclidean distances and graph-theoretic distances
positions = nx.spring_layout(G)

# Convert the positions to JSON format
positions_json = json.dumps({str(node): pos for node, pos in positions.items()}, indent=4)

# Output the JSON
print(positions_json)
```

### Explanation:
1. **Graph creation**: The edge list is used to create a `networkx.Graph` object.
2. **Spring layout**: The `nx.spring_layout` function positions nodes according to a force-directed algorithm, ensuring that Euclidean and graph-theoretic distances are consistent.
3. **JSON formatting**: Node positions (in 2D coordinates) are converted to a JSON object for output.
4. **Print**: The final JSON-formatted layout is printed.

You can run this script, and it will output the graph layout positions in JSON format.