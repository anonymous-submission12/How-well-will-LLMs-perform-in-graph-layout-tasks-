Below is the Python code that calculates the graph layout for the given graph (represented as an edge list). It uses the `networkx` library to compute positions using the `spring_layout` algorithm, which is commonly used to minimize edge crossings. The output is provided in JSON format.

```python
import networkx as nx
import json

# Input graph data as edge_list
edge_list = [
    (0, 1), (0, 73), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10),
    (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19),
    (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28),
    (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37),
    (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46),
    (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55),
    (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64),
    (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), (72, 73)
]

# Create a graph using networkx
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute graph layout using the spring layout algorithm
# The spring layout minimizes edge crossings by treating the graph as a system of springs
pos = nx.spring_layout(G)

# Format positions into JSON
# Convert numpy arrays to lists for JSON serialization
layout = {node: pos[node].tolist() for node in pos}

# Output resulting layout as a JSON string
print(json.dumps(layout, indent=4))
```

### How to run the script:
1. Copy and paste the code into a `.py` file (e.g., `generate_layout.py`).
2. Install the required library by running `pip install networkx`.
3. Run the script: `python generate_layout.py`.

### Example output:
The output will be in JSON format, with each node's ID mapped to its x, y coordinates (e.g., `"0": [x, y]`). It will look something like this:
```json
{
    "0": [0.1, -0.2],
    "1": [0.4, -0.5],
    "2": [0.6, -0.9],
    ...
}
```

The `spring_layout` algorithm works well for minimizing edge crossings and generating aesthetically pleasing graph layouts.