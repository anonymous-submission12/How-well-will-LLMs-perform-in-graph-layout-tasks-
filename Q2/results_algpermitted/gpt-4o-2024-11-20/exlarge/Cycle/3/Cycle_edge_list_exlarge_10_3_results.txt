Below is a Python script that generates a layout for the provided graph. It uses the `networkx` library for graph representation and layout algorithms, and outputs the layout (node positions) in JSON format.

```python
import networkx as nx
import json

# Edge list of the graph
edge_list = [(0, 1), (0, 79), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), 
             (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), 
             (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), 
             (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), 
             (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), 
             (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), 
             (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), 
             (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), 
             (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71), (71, 72), 
             (72, 73), (73, 74), (74, 75), (75, 76), (76, 77), (77, 78), (78, 79)]

# Create a NetworkX graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate a layout to minimize edge crossings (Spring layout as an example)
layout = nx.spring_layout(G, seed=42)  # seed ensures reproducibility

# Convert the layout to a JSON-compatible format
layout_json = {str(node): {'x': float(pos[0]), 'y': float(pos[1])} for node, pos in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_json, indent=2))
```

### Explanation:
1. **Graph Representation**: The graph is created using `networkx.Graph()` and populated with edges from the provided edge list.
2. **Layout Algorithm**: The `spring_layout` algorithm is used to compute the positions of nodes while minimizing edge crossings. This layout is force-directed, meaning it simulates physical forces (like repulsion between nodes and attraction of edges) to arrange nodes in a visually appealing way.
3. **JSON Output**: The script converts the calculated node positions into a JSON-friendly format, with node IDs as keys and their positions (x, y) as values.

### Example Output (truncated):
```json
{
  "0": {"x": -0.040127050191402435, "y": 0.462242990732193},
  "1": {"x": -0.11868717521429062, "y": 0.4306681752204895},
  "2": {"x": -0.18687087202072144, "y": 0.3711793124675751},
  ...
}
```

This output can be used for further visualization if needed, or for analytic purposes where node positions are important.