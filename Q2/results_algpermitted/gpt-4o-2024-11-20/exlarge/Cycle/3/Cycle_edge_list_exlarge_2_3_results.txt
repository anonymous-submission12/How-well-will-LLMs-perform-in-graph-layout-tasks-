Below is the Python script that uses `graph-tool` library to generate a layout for the graph. The algorithm used is the `sfdp` layout algorithm provided by `graph-tool` to minimize edge crossings. It calculates the positions of nodes in the graph, and the final layout is returned in JSON format.

```python
import graph_tool.all as gt
import json

def generate_graph_layout(edge_list):
    # Create the graph
    g = gt.Graph(directed=False)
    
    # Add vertices
    node_count = len(set([node for edge in edge_list for node in edge]))
    vertices = g.add_vertex(node_count)
    
    # Add edges
    for edge in edge_list:
        g.add_edge(g.vertex(edge[0]), g.vertex(edge[1]))
    
    # Generate the layout using SFDP algorithm
    pos = gt.sfdp_layout(g)
    
    # Convert the layout to JSON
    layout = {f"node_{int(v)}": {"x": pos[v][0], "y": pos[v][1]} for v in g.vertices()}
    
    # Return the layout as JSON
    return json.dumps(layout, indent=2)

# Input edge list
edge_list = [(0, 1), (0, 71), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), 
             (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), 
             (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), 
             (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), 
             (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), 
             (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), 
             (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), 
             (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), 
             (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71)]

# Generate the graph layout
graph_layout_json = generate_graph_layout(edge_list)

# Print the JSON layout
print(graph_layout_json)
```

### Steps:
1. **Install Dependencies**:
   - Ensure the `graph-tool` library is installed. You can install it using:
     ```bash
     sudo apt-get install python3-graph-tool
     ```
     or follow instructions from [graph-tool documentation](https://graph-tool.skewed.de/download). 

2. **Run the Code**:
   - After installing dependencies, execute the script above. It will process the edge list and return a JSON-formatted layout minimizing edge crossings.

3. **Output**:
   - The output will be a JSON object containing the positions (`x` and `y`) for each node in the graph.

Example Output (truncated for brevity):
```json
{
  "node_0": {"x": -0.234, "y": 0.835},
  "node_1": {"x": -0.542, "y": 0.672},
  ...
  "node_71": {"x": 0.389, "y": -0.701}
}
```