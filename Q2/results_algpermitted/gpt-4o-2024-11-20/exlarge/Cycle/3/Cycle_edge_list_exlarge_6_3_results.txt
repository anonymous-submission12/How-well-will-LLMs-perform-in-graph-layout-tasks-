Here's a Python script to compute a layout for the given graph while minimizing edge crossings. We'll use the `networkx` library to create the graph and the `planar_layout` algorithm that's integrated with `networkx`. This layout is specifically useful for planar graphs. The output will be a JSON representation of the graph's layout.

```python
import networkx as nx
import json

# Define the edge list for the graph
edge_list = [(0, 1), (0, 75), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), 
             (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14),
             (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), 
             (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), 
             (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), 
             (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), 
             (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), 
             (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), 
             (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56), 
             (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), 
             (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), 
             (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74), 
             (74, 75)]

# Generate the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute the layout
try:
    pos = nx.planar_layout(G)  # Planar layout for minimizing edge crossings
except nx.NetworkXException as e:
    pos = nx.spring_layout(G)  # Fallback to spring layout if graph is not planar
                               # This algorithm reasonably minimizes edge crossings

# Convert positions to JSON
layout_json = json.dumps({node: pos[node] for node in G.nodes()}, indent=2)

# Output the JSON string
print(layout_json)
```

### Explanation:
1. **Graph Initialization**: We use `networkx` to create a graph using the edge list provided.
2. **Layout Computation**: 
   - If the graph is planar, we use the `planar_layout` algorithm of `networkx` to calculate the positions, as it minimizes edge crossings for planar graphs.
   - If the graph is not planar, we fallback to `spring_layout`, a force-directed algorithm, which also tends to produce layouts that minimize edge crossings reasonably.
3. **JSON Output**: The node positions are converted to a JSON object and printed, with proper formatting for readability.

This script does not visualize the graph; it focuses solely on computing and outputting the layout in JSON format, as required.