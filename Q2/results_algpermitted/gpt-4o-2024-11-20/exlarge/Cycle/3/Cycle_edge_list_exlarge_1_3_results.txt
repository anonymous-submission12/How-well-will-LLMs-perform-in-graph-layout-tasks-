Below is a Python script that uses the `networkx` library alongside its `spring_layout` algorithm to determine positions for the graph, prioritizing a layout that minimizes edge crossings. The output is serialized to JSON format.

```python
import networkx as nx
import json

# Define the edge list for the graph
edge_list = [
    (0, 1), (0, 70), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7),
    (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14),
    (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21),
    (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28),
    (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35),
    (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42),
    (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49),
    (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55, 56),
    (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63),
    (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70)
]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute the layout positions using spring_layout
positions = nx.spring_layout(G)  # Default parameters for force-directed layout

# Convert the positions into a JSON serializable format
positions_json = {node: pos.tolist() for node, pos in positions.items()}

# Output the layout in JSON format
print(json.dumps(positions_json, indent=4))
```

### Explanation:

1. **`networkx` for Graph Representation**:
    - The `networkx` package creates and manages the graph, adding edges using `add_edges_from()`.

2. **Graph Layout Algorithm**:
    - `spring_layout` is a force-directed algorithm that places nodes to minimize edge crossings and evenly spread nodes.

3. **JSON Serialization**:
    - Since the `spring_layout` returns a dictionary with NumPy arrays, the script converts them into lists using `.tolist()` for JSON compatibility.

4. **Output**:
    - The computed positions for each node are output as JSON with coordinates in 2D space.

Simply run this Python script, and it will output the node layout in JSON format.