Below is the Python script that computes a layout for the given graph using an existing layout algorithm. The output is in JSON format, representing node positions after computing the layout:

```python
import networkx as nx
import json

# Input edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10),
    (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19),
    (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28),
    (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37),
    (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46),
    (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55),
    (0, 56), (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64),
    (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71), (0, 72)
]

# Create graph from edge list
graph = nx.Graph()
graph.add_edges_from(edge_list)

# Compute a layout based on spring layout (Fruchterman-Reingold algorithm)
# This layout tries to maintain consistency between the Euclidean distance and graph-theoretic distance
positions = nx.spring_layout(graph)

# Convert positions to a dictionary of lists to make it JSON serializable
positions_json = {node: pos.tolist() for node, pos in positions.items()}

# Dump the positions as a JSON string
layout_json = json.dumps(positions_json, indent=2)

# Print the resulting JSON layout
print(layout_json)
```

### Explanation
1. **Graph Construction**:
   - The edge list is input to the program and fed into `networkx.Graph()` to create the graph.

2. **Layout Algorithm**:
   - The script uses the **spring layout** implemented in NetworkX (based on the Fruchterman-Reingold force-directed algorithm). This layout aims to maintain consistency between the Euclidean distance and the graph-theoretic distance (i.e., based on forces and repulsion).

3. **JSON Serialization**:
   - The computed positions are converted to a dictionary format, and each position (a NumPy array) is converted to a list to make it JSON-serializable.
   - The layout is then dumped to a JSON string for the output.

### Output
The output is a JSON string with the node positions as a dictionary, where the key is the node ID and the value is a 2D position in the format `[x, y]`.

For example:
```json
{
  "0": [0.0, 0.0],
  "1": [0.1, -0.2],
  ...
}
```

You can replace the `print(layout_json)` statement with file-saving logic if you'd like to store the result instead of just printing it.