Here's the Python script for generating a layout for the given graph. The layout is designed to maintain consistency between Euclidean distances and graph-theoretic distances. We'll use the Fruchterman-Reingold force-directed algorithm provided by the `networkx` library to obtain the layout. After computing the positions, the final layout in JSON format is returned.

```python
import networkx as nx
import json

# Define the edge list for the graph
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10),
    (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19),
    (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28),
    (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37),
    (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46),
    (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55),
    (0, 56), (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64),
    (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71), (0, 72), (0, 73)
]

# Create a graph using networkx
graph = nx.Graph()
graph.add_edges_from(edge_list)

# Generate the layout using the Fruchterman-Reingold force-directed algorithm
positions = nx.spring_layout(graph)  # spring_layout uses the Fruchterman-Reingold algorithm

# Convert the positions to JSON format
positions_json = json.dumps(positions)

# Output the positions
print(positions_json)
```

### Explanation of the Code
1. **Graph Construction**: The `networkx` library is used to construct the graph from the edge list.
2. **Force-Directed Layout**: The `spring_layout` function from `networkx` computes a force-directed layout using the Fruchterman-Reingold algorithm, ensuring consistency between Euclidean distance and graph-theoretic distance.
3. **JSON Conversion**: The node positions are in the form of a Python dictionary, which is converted to JSON format using Python's `json.dumps` function.
4. **Output**: Finally, the script prints the positions in JSON format.

### Output Example
The output will look something like this (with actual values depending on the algorithm's randomness):

```json
{
    "0": [0.0, 0.0],
    "1": [0.5, 0.2],
    "2": [-0.5, -0.1],
    ...
    "73": [-0.3, 0.4]
}
```

You can use this JSON layout for further visualization or analysis. Let me know if you need further clarification!