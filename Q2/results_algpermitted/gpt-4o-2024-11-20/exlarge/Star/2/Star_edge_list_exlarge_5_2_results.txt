Below is the Python script that generates a graph layout using the `spring_layout` algorithm from the `networkx` library. The layout ensures consistency between Euclidean distance and graph-theoretic distance. The final output is the graph layout in JSON format.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), 
    (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), 
    (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), 
    (0, 26), (0, 27), (0, 28), (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), 
    (0, 34), (0, 35), (0, 36), (0, 37), (0, 38), (0, 39), (0, 40), (0, 41), 
    (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), (0, 47), (0, 48), (0, 49), 
    (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), (0, 56), (0, 57), 
    (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), (0, 65), 
    (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71), (0, 72), (0, 73), 
    (0, 74)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the spring layout algorithm
positions = nx.spring_layout(G)

# Convert the positions to JSON format
positions_json = json.dumps(positions)

# Print the JSON output
print(positions_json)
```

### Explanation:
1. **Graph Creation**: The `networkx.Graph()` object is created, and edges are added using the `add_edges_from()` method.
2. **Spring Layout**: The `spring_layout` algorithm is used to compute node positions. This algorithm models the graph as a system of springs and minimizes the energy to determine positions, ensuring consistency between Euclidean and graph-theoretic distances.
3. **JSON Conversion**: The positions dictionary is converted to JSON format using the `json.dumps()` function.
4. **Output**: The script prints the JSON representation of the graph layout.

You can run this script in a Python environment to generate the graph layout in JSON format.