Below is the Python code to generate a layout for the graph using the Force Atlas 2 algorithm, which is available in the `networkx` library through its spring layout. This algorithm is commonly used for graph layout tasks and ensures consistency between Euclidean distance and graph-theoretic distance. The final output is the layout data in JSON format.

```python
import networkx as nx
import json

# Graph edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10),
    (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19),
    (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28),
    (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37),
    (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46),
    (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55),
    (0, 56), (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64),
    (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71)
]

# Create graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate layout using the spring layout algorithm
# This algorithm minimizes energy (ensures consistency between Euclidean distance and graph-theoretic distance)
layout = nx.spring_layout(G, seed=42)

# Convert layout to dictionary (node -> position)
layout_dict = {node: position.tolist() for node, position in layout.items()}

# Output layout as JSON
layout_json = json.dumps(layout_dict, indent=4)
print(layout_json)
```

### Explanation of the Code
1. **Create the Graph**: The `edge_list` is used to create the graph using `networkx`.
2. **Generate Layout**: The `nx.spring_layout` generates the layout using a force-directed algorithm (Force Atlas 2 is a variation of this).
3. **Convert to Dictionary**: The layout positions are converted into a dictionary where each key is a node, and the value is its position (a 2D coordinate).
4. **Export to JSON**: The final layout is outputted as JSON using the `json.dumps` method.

You can run this code in any Python environment with the `networkx` library installed. The result will be a JSON-formatted layout of node positions.