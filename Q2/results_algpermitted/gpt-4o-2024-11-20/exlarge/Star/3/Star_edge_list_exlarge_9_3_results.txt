Below is the Python code to generate a layout for the provided graph using the `networkx` library and the `pygraphviz` backend, which supports algorithms minimizing edge crossings (e.g., hierarchical or force-directed layouts). The final result will be a JSON representation of the graph layout.

```python
import networkx as nx
import json

def generate_graph_layout(edge_list):
    # Create a graph object
    G = nx.Graph()
    
    # Add edges to the graph
    G.add_edges_from(edge_list)
    
    # Generate the graph layout using pygraphviz (e.g., "dot" for hierarchical layout)
    pos = nx.nx_agraph.graphviz_layout(G, prog='dot')  # 'dot' attempts to minimize edge crossings
    
    # Convert positions to a JSON-friendly format
    pos_json = {str(node): {'x': float(coords[0]), 'y': float(coords[1])} for node, coords in pos.items()}
    
    # Return JSON representation of the layout
    return json.dumps(pos_json, indent=4)

# Example usage
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12),
    (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23),
    (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34),
    (0, 35), (0, 36), (0, 37), (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45),
    (0, 46), (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), (0, 56),
    (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), (0, 65), (0, 66), (0, 67),
    (0, 68), (0, 69), (0, 70), (0, 71), (0, 72), (0, 73), (0, 74), (0, 75), (0, 76), (0, 77), (0, 78)
]
layout_json = generate_graph_layout(edge_list)
print(layout_json)
```

### Key Points:
1. The `pygraphviz` backend (`graphviz_layout`) is used here. The `"dot"` layout attempts to minimize edge crossings using hierarchical layout algorithms.
2. The positions are returned in a JSON format where each node is associated with its `x` and `y` coordinates.
3. You'll need `networkx` and `pygraphviz` installed in your Python environment. Both can be installed using `pip`:
   ```bash
   pip install networkx pygraphviz
   ```
4. The resulting layout is printed as a JSON string, and no graph visualization (using `matplotlib` or anything similar) is performed.

Let me know if you need further modifications!