Below is the Python code for generating a graph layout using existing graph layout algorithms. The code uses `networkx` for determining the layout and then exports the positions to JSON format.

```python
import networkx as nx
import json

# Create the graph from edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
    (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), 
    (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), 
    (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37), 
    (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), 
    (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), 
    (0, 56), (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), 
    (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71)
]

# Initialize a graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute the layout for minimizing edge crossings (spring layout)
pos = nx.spring_layout(G)

# Convert positions to JSON format
position_dict = {str(node): {"x": pos[node][0], "y": pos[node][1]} for node in pos}
json_output = json.dumps(position_dict, indent=4)

# Print the JSON layout
print(json_output)
```

### Explanation:
1. **Graph Creation**: The `networkx.Graph()` is initialized and populated with the provided edge list.
2. **Spring Layout Algorithm**: `spring_layout` computes positions of nodes such that edge crossings are minimized. It uses a force-directed layout algorithm.
3. **JSON Conversion**: The layout (positions of nodes) is formatted into a dictionary and exported to JSON format, making the data ready for external usage.
4. **Output**: It prints out the layout in JSON format, where each node has "x" and "y" coordinates.

This code avoids drawing the graph but computes a layout for organizing nodes visually in a structure optimal for reducing edge crossings.