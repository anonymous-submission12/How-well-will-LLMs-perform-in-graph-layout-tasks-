Here's a Python script using the ForceAtlas2 graph layout algorithm from the `fa2` library (Python implementation of ForceAtlas2), which tries to minimize edge crossings and helps in arranging nodes cohesively. We'll generate the layout and output it in JSON format. 

The script assumes you have the `fa2` library installed; you can install it with `pip install fa2` if needed.

```python
import json
from fa2 import ForceAtlas2
import networkx as nx

# Define the graph data (edge list)
edge_list = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), 
             (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), 
             (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), 
             (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), (0, 29), 
             (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), 
             (0, 37), (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), 
             (0, 44), (0, 45), (0, 46), (0, 47), (0, 48), (0, 49), (0, 50), 
             (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), (0, 56), (0, 57), 
             (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), 
             (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71), 
             (0, 72), (0, 73)]

# Create a graph using NetworkX
G = nx.Graph()
G.add_edges_from(edge_list)

# Use ForceAtlas2 for graph layout
forceatlas2 = ForceAtlas2(
    # Options for the layout algorithm
    outboundAttractionDistribution=True,  # Dissuade hubs
    linLogMode=False,                      # Use the linear-log mode
    adjustSizes=False,                     # Keep nodes at the original sizes
    edgeWeightInfluence=1.0,
    jitterTolerance=1.0,                   # Tolerance (higher = more stability)
    barnesHutOptimize=True,
    barnesHutTheta=1.2,
    scalingRatio=2.0,
    strongGravityMode=False,
    gravity=1.0,
    verbose=True
)

# Generate node positions
positions = forceatlas2.forceatlas2_networkx_layout(G, iterations=2000)

# Convert positions to JSON format
positions_json = {str(node): pos for node, pos in positions.items()}
print(json.dumps(positions_json, indent=2))
```

### Explanation:
1. **Library Usage**:
   - `fa2.ForceAtlas2` is used to compute graph layouts while trying to minimize edge crossings.
   - `networkx.Graph` helps in modeling the graph from the given edge list.

2. **ForceAtlas2 Parameters**:
   - Configurations like `outboundAttractionDistribution`, `jitterTolerance`, and `barnesHutOptimize` influence the layout's calculations.

3. **Output**:
   - The final positions of nodes are saved in a dictionary and serialized to JSON format using `json.dumps`.

### Output Example (JSON layout format):
The script will produce JSON output resembling:
```json
{
  "0": [0.0, 0.0],
  "1": [-1.23, 3.45],
  "2": [2.34, -1.56],
  ...
}
```

You can store or use this JSON layout for further processing.