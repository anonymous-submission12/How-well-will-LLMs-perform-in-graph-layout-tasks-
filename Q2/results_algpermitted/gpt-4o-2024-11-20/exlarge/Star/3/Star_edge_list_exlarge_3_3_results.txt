Below is the Python script to generate a graph layout that minimizes edge crossings using the Fruchterman-Reingold force-directed algorithm. The layout is outputted in JSON format.

```python
import json
import networkx as nx

# Input graph as edge list
edge_list = [
    (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 
    (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), 
    (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), 
    (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37), 
    (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), 
    (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), 
    (0, 56), (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (0, 62), (0, 63), (0, 64), 
    (0, 65), (0, 66), (0, 67), (0, 68), (0, 69), (0, 70), (0, 71), (0, 72)
]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Compute the layout using the Fruchterman-Reingold force-directed algorithm
layout = nx.spring_layout(G)

# Convert layout to JSON-serializable format
layout_json = {node: list(pos) for node, pos in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_json, indent=2))
```

### Explanation of the Code:
1. **Input Edge List**: Your graph is provided as an edge list.
2. **Graph Creation**: The graph is constructed using NetworkX.
3. **Layout Calculation**: The `spring_layout` function (Fruchterman-Reingold algorithm) calculates positions of nodes such that edge crossings and overlaps are minimized.
4. **JSON Serialization**: The layout dictionary (mapping nodes to their positions) is converted to a JSON-serializable format.
5. **Output**: The layout is outputted as a JSON string.

### Usage:
Copy and paste this code into your Python environment to generate the layout positions for your graph. The positions will be outputted in JSON format, which you can save or use in other applications as needed.