Below is the Python script that generates a layout for the given graph using the `networkx` library and the `kamada_kawai_layout` algorithm, which is designed to minimize edge crossings. The output is a JSON representation of the graph layout.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 16), (1, 2), (1, 17), (2, 3), (2, 18), (3, 4), (3, 19), (4, 5), (4, 20),
    (5, 6), (5, 21), (6, 7), (6, 22), (7, 8), (7, 23), (8, 9), (8, 24), (9, 10), (9, 25),
    (10, 11), (10, 26), (11, 12), (11, 27), (12, 13), (12, 28), (13, 14), (13, 29), (14, 15),
    (14, 30), (15, 31), (16, 17), (16, 32), (17, 18), (17, 33), (18, 19), (18, 34), (19, 20),
    (19, 35), (20, 21), (20, 36), (21, 22), (21, 37), (22, 23), (22, 38), (23, 24), (23, 39),
    (24, 25), (24, 40), (25, 26), (25, 41), (26, 27), (26, 42), (27, 28), (27, 43), (28, 29),
    (28, 44), (29, 30), (29, 45), (30, 31), (30, 46), (31, 47), (32, 33), (32, 48), (33, 34),
    (33, 49), (34, 35), (34, 50), (35, 36), (35, 51), (36, 37), (36, 52), (37, 38), (37, 53),
    (38, 39), (38, 54), (39, 40), (39, 55), (40, 41), (40, 56), (41, 42), (41, 57), (42, 43),
    (42, 58), (43, 44), (43, 59), (44, 45), (44, 60), (45, 46), (45, 61), (46, 47), (46, 62),
    (47, 63), (48, 49), (48, 64), (49, 50), (49, 65), (50, 51), (50, 66), (51, 52), (51, 67),
    (52, 53), (52, 68), (53, 54), (53, 69), (54, 55), (54, 70), (55, 56), (55, 71), (56, 57),
    (56, 72), (57, 58), (57, 73), (58, 59), (58, 74), (59, 60), (59, 75), (60, 61), (60, 76),
    (61, 62), (61, 77), (62, 63), (62, 78), (63, 79), (64, 65), (65, 66), (66, 67), (67, 68),
    (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74), (74, 75), (75, 76), (76, 77),
    (77, 78), (78, 79)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Kamada-Kawai algorithm
layout = nx.kamada_kawai_layout(G)

# Convert the layout to a JSON-serializable format
layout_json = {node: pos.tolist() for node, pos in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The `networkx` library is used to create a graph from the provided edge list.
2. **Layout Algorithm**: The `kamada_kawai_layout` algorithm is used to compute the positions of the nodes. This algorithm minimizes edge crossings and produces a visually appealing layout.
3. **JSON Conversion**: The layout is converted into a JSON-serializable format by converting the positions (NumPy arrays) into lists.
4. **Output**: The final layout is printed in JSON format.

You can run this script in a Python environment with `networkx` installed to generate the layout. The output will be a JSON object where each key is a node, and the value is a list representing the 2D coordinates of the node.