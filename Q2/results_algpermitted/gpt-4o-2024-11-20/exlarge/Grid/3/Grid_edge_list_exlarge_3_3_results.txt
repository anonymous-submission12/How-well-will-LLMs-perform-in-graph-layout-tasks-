Here is a Python script using the `networkx` library to calculate a graph layout while minimizing edge crossings. For the layout computation, it uses the `planar_layout` if the graph is planar, or `spring_layout` (force-directed algorithm) otherwise. The output is a JSON-formatted layout.

```python
import networkx as nx
import json

# Input edge list
edge_list = [
    (0, 1), (0, 18), (1, 2), (1, 19), (2, 3), (2, 20), (3, 4), (3, 21),
    (4, 5), (4, 22), (5, 6), (5, 23), (6, 7), (6, 24), (7, 8), (7, 25),
    (8, 9), (8, 26), (9, 10), (9, 27), (10, 11), (10, 28), (11, 12),
    (11, 29), (12, 13), (12, 30), (13, 14), (13, 31), (14, 15), (14, 32),
    (15, 16), (15, 33), (16, 17), (16, 34), (17, 35), (18, 19), (18, 36),
    (19, 20), (19, 37), (20, 21), (20, 38), (21, 22), (21, 39), (22, 23),
    (22, 40), (23, 24), (23, 41), (24, 25), (24, 42), (25, 26), (25, 43),
    (26, 27), (26, 44), (27, 28), (27, 45), (28, 29), (28, 46), (29, 30),
    (29, 47), (30, 31), (30, 48), (31, 32), (31, 49), (32, 33), (32, 50),
    (33, 34), (33, 51), (34, 35), (34, 52), (35, 53), (36, 37), (36, 54),
    (37, 38), (37, 55), (38, 39), (38, 56), (39, 40), (39, 57), (40, 41),
    (40, 58), (41, 42), (41, 59), (42, 43), (42, 60), (43, 44), (43, 61),
    (44, 45), (44, 62), (45, 46), (45, 63), (46, 47), (46, 64), (47, 48),
    (47, 65), (48, 49), (48, 66), (49, 50), (49, 67), (50, 51), (50, 68),
    (51, 52), (51, 69), (52, 53), (52, 70), (53, 71), (54, 55), (55, 56),
    (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63),
    (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70),
    (70, 71)
]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Check if the graph is planar
if nx.check_planarity(G)[0]:
    # Use planar_layout for planar graphs
    layout = nx.planar_layout(G)
else:
    # Use spring_layout for general graphs (force-directed)
    layout = nx.spring_layout(G)

# Convert layout to JSON format
layout_json = {node: list(pos) for node, pos in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_json, indent=2))
```

### Explanation:
1. **Input Edge List**: The edge list defines the graph structure.
2. **Planarity Check**: We use `nx.check_planarity` to determine if the graph is planar. If planar, `nx.planar_layout` is used to minimize edge crossings as it is specifically designed for planar graphs.
3. **Fallback to Spring Layout**: If not planar, `nx.spring_layout` is used. This force-directed algorithm attempts to distribute nodes in a way that minimizes edge crossings and overlaps.
4. **Output as JSON**: The final computed positions of graph nodes are formatted as JSON, making it easy to use for further processing.

### Notes:
- The output is the layout of the graph represented by a dictionary where keys are nodes and values are their positions in 2D space.
- This script does not visualize the graph; it only computes the layout.