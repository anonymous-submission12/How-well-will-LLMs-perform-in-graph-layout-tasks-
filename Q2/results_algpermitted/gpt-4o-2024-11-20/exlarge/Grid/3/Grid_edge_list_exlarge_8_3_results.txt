Below is the Python script that generates a layout for the given graph using the `networkx` library and the `kamada_kawai_layout` algorithm, which is designed to minimize edge crossings. The output is in JSON format, containing the positions of the nodes.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 24), (1, 2), (1, 25), (2, 3), (2, 26), (3, 4), (3, 27), (4, 5), (4, 28),
    (5, 6), (5, 29), (6, 7), (6, 30), (7, 8), (7, 31), (8, 9), (8, 32), (9, 10), (9, 33),
    (10, 11), (10, 34), (11, 12), (11, 35), (12, 13), (12, 36), (13, 14), (13, 37), (14, 15),
    (14, 38), (15, 16), (15, 39), (16, 17), (16, 40), (17, 18), (17, 41), (18, 19), (18, 42),
    (19, 20), (19, 43), (20, 21), (20, 44), (21, 22), (21, 45), (22, 23), (22, 46), (23, 47),
    (24, 25), (24, 48), (25, 26), (25, 49), (26, 27), (26, 50), (27, 28), (27, 51), (28, 29),
    (28, 52), (29, 30), (29, 53), (30, 31), (30, 54), (31, 32), (31, 55), (32, 33), (32, 56),
    (33, 34), (33, 57), (34, 35), (34, 58), (35, 36), (35, 59), (36, 37), (36, 60), (37, 38),
    (37, 61), (38, 39), (38, 62), (39, 40), (39, 63), (40, 41), (40, 64), (41, 42), (41, 65),
    (42, 43), (42, 66), (43, 44), (43, 67), (44, 45), (44, 68), (45, 46), (45, 69), (46, 47),
    (46, 70), (47, 71), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55),
    (55, 56), (56, 57), (57, 58), (58, 59), (59, 60), (60, 61), (61, 62), (62, 63), (63, 64),
    (64, 65), (65, 66), (66, 67), (67, 68), (68, 69), (69, 70), (70, 71)
]

# Create a graph from the edge list
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Kamada-Kawai algorithm
layout = nx.kamada_kawai_layout(G)

# Convert the layout to a JSON-serializable format
layout_json = {node: list(pos) for node, pos in layout.items()}

# Print the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Creation**: The `networkx` library is used to create a graph from the provided edge list.
2. **Layout Algorithm**: The `kamada_kawai_layout` algorithm is used to compute the positions of the nodes. This algorithm minimizes edge crossings and produces a visually appealing layout.
3. **JSON Conversion**: The layout is converted into a JSON-serializable format, where each node is mapped to its position (a list of x and y coordinates).
4. **Output**: The final layout is printed in JSON format.

You can run this script in a Python environment with `networkx` installed to generate the layout. The output will be a JSON object containing the positions of the nodes.