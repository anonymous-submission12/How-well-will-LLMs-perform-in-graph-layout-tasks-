Below is the Python code to generate a graph layout that maintains consistency between Euclidean distance and graph-theoretic distance. In this implementation, the Fruchterman-Reingold force-directed algorithm is used as it is well-suited for maintaining this distance consistency. The positions of the graph nodes will be saved in JSON format.

```python
import networkx as nx
import json

# Input graph edge list
edge_list = [
    (0, 1), (0, 13), (1, 2), (1, 14), (2, 3), (2, 15), (3, 4), (3, 16), 
    (4, 5), (4, 17), (5, 6), (5, 18), (6, 7), (6, 19), (7, 8), (7, 20), 
    (8, 9), (8, 21), (9, 10), (9, 22), (10, 11), (10, 23), (11, 12), 
    (11, 24), (12, 25), (13, 14), (13, 26), (14, 15), (14, 27), (15, 16), 
    (15, 28), (16, 17), (16, 29), (17, 18), (17, 30), (18, 19), (18, 31), 
    (19, 20), (19, 32), (20, 21), (20, 33), (21, 22), (21, 34), (22, 23), 
    (22, 35), (23, 24), (23, 36), (24, 25), (24, 37), (25, 38), (26, 27), 
    (26, 39), (27, 28), (27, 40), (28, 29), (28, 41), (29, 30), (29, 42), 
    (30, 31), (30, 43), (31, 32), (31, 44), (32, 33), (32, 45), (33, 34), 
    (33, 46), (34, 35), (34, 47), (35, 36), (35, 48), (36, 37), (36, 49), 
    (37, 38), (37, 50), (38, 51), (39, 40), (39, 52), (40, 41), (40, 53), 
    (41, 42), (41, 54), (42, 43), (42, 55), (43, 44), (43, 56), (44, 45), 
    (44, 57), (45, 46), (45, 58), (46, 47), (46, 59), (47, 48), (47, 60), 
    (48, 49), (48, 61), (49, 50), (49, 62), (50, 51), (50, 63), (51, 64), 
    (52, 53), (52, 65), (53, 54), (53, 66), (54, 55), (54, 67), (55, 56), 
    (55, 68), (56, 57), (56, 69), (57, 58), (57, 70), (58, 59), (58, 71), 
    (59, 60), (59, 72), (60, 61), (60, 73), (61, 62), (61, 74), (62, 63), 
    (62, 75), (63, 64), (63, 76), (64, 77), (65, 66), (66, 67), (67, 68), 
    (68, 69), (69, 70), (70, 71), (71, 72), (72, 73), (73, 74), (74, 75), 
    (75, 76), (76, 77)
]

# Create the graph
graph = nx.Graph()
graph.add_edges_from(edge_list)

# Generate layout using Fruchterman-Reingold algorithm
layout_positions = nx.spring_layout(graph)

# Convert layout positions to a serializable dictionary
layout_json = {node: position.tolist() for node, position in layout_positions.items()}

# Output the layout in JSON format
with open("graph_layout.json", "w") as json_file:
    json.dump(layout_json, json_file, indent=4)

# Print the layout as JSON
print(json.dumps(layout_json, indent=4))
``` 

### Explanation
1. **Graph Creation**: The `nx.Graph()` object is created, and the edges from the edge list are added to it.
2. **Layout Generation**: The `nx.spring_layout()` method is used to calculate the layout based on the Fruchterman-Reingold force-directed algorithm.
3. **Serialization**: The layout, which is a dictionary of positions, is converted into a JSON serializable format.
4. **Output**: The layout is saved to a file named `graph_layout.json` and also printed as JSON.

This script produces a JSON file containing the graph layout, where each node is associated with its (x, y) position in the 2D space.