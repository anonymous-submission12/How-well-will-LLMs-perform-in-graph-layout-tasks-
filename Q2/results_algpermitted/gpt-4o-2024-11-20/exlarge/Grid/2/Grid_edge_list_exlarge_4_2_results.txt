Below is the Python script that generates a layout for the given graph using the Fruchterman-Reingold force-directed algorithm, which maintains consistency between Euclidean distance and graph-theoretic distance. The output is a JSON representation of the graph layout.

```python
import json
import networkx as nx

# Define the edge list
edge_list = [
    (0, 1), (0, 26), (1, 2), (1, 27), (2, 3), (2, 28), (3, 4), (3, 29), (4, 5), (4, 30),
    (5, 6), (5, 31), (6, 7), (6, 32), (7, 8), (7, 33), (8, 9), (8, 34), (9, 10), (9, 35),
    (10, 11), (10, 36), (11, 12), (11, 37), (12, 13), (12, 38), (13, 14), (13, 39), (14, 15),
    (14, 40), (15, 16), (15, 41), (16, 17), (16, 42), (17, 18), (17, 43), (18, 19), (18, 44),
    (19, 20), (19, 45), (20, 21), (20, 46), (21, 22), (21, 47), (22, 23), (22, 48), (23, 24),
    (23, 49), (24, 25), (24, 50), (25, 51), (26, 27), (26, 52), (27, 28), (27, 53), (28, 29),
    (28, 54), (29, 30), (29, 55), (30, 31), (30, 56), (31, 32), (31, 57), (32, 33), (32, 58),
    (33, 34), (33, 59), (34, 35), (34, 60), (35, 36), (35, 61), (36, 37), (36, 62), (37, 38),
    (37, 63), (38, 39), (38, 64), (39, 40), (39, 65), (40, 41), (40, 66), (41, 42), (41, 67),
    (42, 43), (42, 68), (43, 44), (43, 69), (44, 45), (44, 70), (45, 46), (45, 71), (46, 47),
    (46, 72), (47, 48), (47, 73), (48, 49), (48, 74), (49, 50), (49, 75), (50, 51), (50, 76),
    (51, 77), (52, 53), (53, 54), (54, 55), (55, 56), (56, 57), (57, 58), (58, 59), (59, 60),
    (60, 61), (61, 62), (62, 63), (63, 64), (64, 65), (65, 66), (66, 67), (67, 68), (68, 69),
    (69, 70), (70, 71), (71, 72), (72, 73), (73, 74), (74, 75), (75, 76), (76, 77)
]

# Create a graph using NetworkX
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate the layout using the Fruchterman-Reingold force-directed algorithm
layout = nx.spring_layout(G)

# Convert the layout to a JSON-serializable format
layout_json = {node: position.tolist() for node, position in layout.items()}

# Output the layout in JSON format
print(json.dumps(layout_json, indent=4))
```

### Explanation:
1. **Graph Representation**: The graph is represented using the `networkx.Graph` class, and the edges are added from the provided edge list.
2. **Layout Algorithm**: The `spring_layout` function from NetworkX is used to compute the layout. This function implements the Fruchterman-Reingold force-directed algorithm, which ensures that the Euclidean distances between nodes in the layout are consistent with their graph-theoretic distances.
3. **JSON Serialization**: The layout is converted into a JSON-serializable format by converting the NumPy arrays (used internally by NetworkX) to Python lists.
4. **Output**: The final layout is printed in JSON format with indentation for readability.

You can run this script in a Python environment to generate the graph layout. The output will be a JSON object where each key is a node, and the value is a list representing the 2D coordinates of the node in the layout.