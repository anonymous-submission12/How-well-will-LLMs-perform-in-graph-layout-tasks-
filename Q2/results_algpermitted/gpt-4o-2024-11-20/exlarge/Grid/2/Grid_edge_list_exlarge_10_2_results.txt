Below is the Python script to generate a layout for the given graph in edge_list format. The layout takes into account consistency between the Euclidean distance and graph-theoretic distance. It uses the `spring_layout` algorithm from NetworkX, which incorporates a force-directed approach to determine the node positions.

```python
import networkx as nx
import json

# Define the edge list
edge_list = [
    (0, 1), (0, 11), (1, 2), (1, 12), (2, 3), (2, 13), (3, 4), (3, 14), (4, 5),
    (4, 15), (5, 6), (5, 16), (6, 7), (6, 17), (7, 8), (7, 18), (8, 9), (8, 19),
    (9, 10), (9, 20), (10, 21), (11, 12), (11, 22), (12, 13), (12, 23), (13, 14),
    (13, 24), (14, 15), (14, 25), (15, 16), (15, 26), (16, 17), (16, 27), (17, 18),
    (17, 28), (18, 19), (18, 29), (19, 20), (19, 30), (20, 21), (20, 31), (21, 32),
    (22, 23), (22, 33), (23, 24), (23, 34), (24, 25), (24, 35), (25, 26), (25, 36),
    (26, 27), (26, 37), (27, 28), (27, 38), (28, 29), (28, 39), (29, 30), (29, 40),
    (30, 31), (30, 41), (31, 32), (31, 42), (32, 43), (33, 34), (33, 44), (34, 35),
    (34, 45), (35, 36), (35, 46), (36, 37), (36, 47), (37, 38), (37, 48), (38, 39),
    (38, 49), (39, 40), (39, 50), (40, 41), (40, 51), (41, 42), (41, 52), (42, 43),
    (42, 53), (43, 54), (44, 45), (44, 55), (45, 46), (45, 56), (46, 47), (46, 57),
    (47, 48), (47, 58), (48, 49), (48, 59), (49, 50), (49, 60), (50, 51), (50, 61),
    (51, 52), (51, 62), (52, 53), (52, 63), (53, 54), (53, 64), (54, 65), (55, 56),
    (55, 66), (56, 57), (56, 67), (57, 58), (57, 68), (58, 59), (58, 69), (59, 60),
    (59, 70), (60, 61), (60, 71), (61, 62), (61, 72), (62, 63), (62, 73), (63, 64),
    (63, 74), (64, 65), (64, 75), (65, 76), (66, 67), (67, 68), (68, 69), (69, 70),
    (70, 71), (71, 72), (72, 73), (73, 74), (74, 75), (75, 76)
]

# Create the graph
G = nx.Graph()
G.add_edges_from(edge_list)

# Generate a spring layout for the graph (force-directed algorithm)
layout = nx.spring_layout(G)

# Convert positions into a dictionary of lists for JSON serialization
layout_json = {node: pos.tolist() for node, pos in layout.items()}

# Output the layout in JSON format
layout_json_str = json.dumps(layout_json, indent=2)

# Print the JSON string
print(layout_json_str)
```

## Explanation:
1. **Graph Creation**: The graph is built using the `edge_list` provided.
2. **Spring Layout**: The `spring_layout` algorithm is employed to compute positions. It models nodes as electrically repulsive particles and edges as attractive springs to achieve proper spacing.
3. **JSON Conversion**: The layout positions are converted into JSON serializable data (`list` of coordinates per node) and formatted as a JSON string.
4. **Output**: The JSON-formatted string representing the node positions is printed directly.